import { Fragment, JSX } from "react";
import Users from "../../Form/Users";
import TextArea from "../../Form/TextArea";
import Checkbox from "../../Form/Checkbox";
import DateTimePicker from "../../Form/DateTimePicker";
import { Control, useFieldArray, useWatch } from "react-hook-form";
import { ContentHolder, DocumentAccessPolicy, DocumentAccessPolicyType, DocumentPattern, FilterCondition, FilterFieldType, FilterItem } from "../../../api/data";
import { includes, map } from "lodash";
import Holder from "../../Form/Holder";
import Input from "../../Form/Input";
import { accessWithPolicy, hasRole } from "../../../utils";
import ScGrifs from "../../Form/ScGrifs";
import DocRelations from "../../Form/DocRelations";
import InboxDoc from "../../Form/InboxDoc";

type TabInfoProps = {
  control: Control,
  pattern: DocumentPattern,
  watch: any,
  formEdit: string | null,
  setChanges: (newValue: []) => void,
  notRemoveScIds?: string[]
};

const FORM_EDIT_TYPE = ['inbox_simple', 'inbox_simple_not_required', 'inbox'];

const TabInfo = ({ control, pattern, setChanges, formEdit, notRemoveScIds = [] }: TabInfoProps): JSX.Element => {
  const [controlForDocument, documentId, scGrifs, controlUsers] = useWatch({
    control,
    name: ['document.controlForDocument', 'document.id', 'scGrifs', 'controlUsers'],
  });

  const holdersField = useFieldArray({
    control,
    name: 'holders',
  });

  console.log(formEdit)

  return <>
    <Users
      name={"author"}
      control={control}
      multiple={false}
      label={"Автор"}
      disabled={true}
      changeProps={{
        patternId: null,
        documentId: null,
        selected: [],
        scGrifs: scGrifs,
        filters: [],
        types: []
      }}
    />
    {pattern?.useSC && <ScGrifs
      name={"scGrifs"}
      control={control}
      label={"scGrifs"}
      notRemoveIds={notRemoveScIds}
      disabled={!(hasRole('USER_DOC_SC_UPDATE') || hasRole('ADMIN_DOC_SC_UPDATE'))}
    />}
    {!pattern?.autoGenerateDocName && <TextArea
      label={"Короткий зміст"}
      name={"document.nameDocument"}
      control={control}
      showCount
      maxLength={2000}
      placeholder="Ввести"
      formItemProps={{
        required: true
      }}
    />}

    {includes(FORM_EDIT_TYPE, formEdit) && <InboxDoc
      control={control}
      name={"document"}
      documentId={documentId}
      required={'inbox_simple_not_required' !== formEdit}
    />}

    {pattern.useDocNumber && <Input
      label={"Номер документа"}
      name={"document.numberDocument"}
      control={control}
    />}
    {(hasRole('USER_DOC_RESPONSIBLE_UPDATE') || hasRole('ADMIN_DOC_RESPONSIBLE_UPDATE')) && <Checkbox
      label={"Поставити на контроль"}
      name={"document.controlForDocument"}
      control={control}
    />}
    {controlForDocument && (
      <>
        <Users
          name={"controlUsers"}
          control={control}
          multiple={false}
          label={"Контроль покласти на (за необхідності)"}
          changeProps={{
            useFavorite: true,
            documentId: null,
            patternId: pattern?.id || null,
            filters: [
              new FilterItem({
                field: 'VIEW',
                value: pattern?.id,
                fType: FilterFieldType.STRING,
                condition: FilterCondition.EQUAL
              })
            ],
            selected: controlUsers,
            scGrifs: scGrifs,
            types: ['users', 'scs']
          }}
        />
        <DateTimePicker
          name={"document.documentDeadlineDate"}
          control={control}
          label={"Контрольний термін документу"}
          time={true}
          formItemProps={{
            required: true
          }}
        />
      </>
    )}
    {map(holdersField.fields, (holder: ContentHolder, index: number) => {
      return <Fragment key={holder.id}>
        {holder.showInInfo && <Holder
          holder={holder}
          name={`holders.${index}`}
          control={control}
          setChanges={setChanges}
        />}
      </Fragment>
    })}
    {accessWithPolicy(new DocumentAccessPolicy({
      type: DocumentAccessPolicyType.ACCESS
    }), 'USER_DOC_RELATIONS_UPDATE', 'ADMIN_DOC_RELATIONS_UPDATE') && <DocRelations
        name={"controlUsers"}
        control={control}
        label={"Повязані документи"}
        documentId={documentId}
      />}
  </>;
};


export default TabInfo;
import { Fragment, JSX } from "react";
import Users from "../../Form/Users";
import TextArea from "../../Form/TextArea";
import Checkbox from "../../Form/Checkbox";
import DateTimePicker from "../../Form/DateTimePicker";
import { Control, useFieldArray, useWatch } from "react-hook-form";
import { ContentHolder, DocumentAccessPolicy, DocumentAccessPolicyType, DocumentPattern } from "../../../api/data";
import { map } from "lodash";
import Holder from "../../Form/Holder";
import Input from "../../Form/Input";
import { accessWithPolicy, hasRole } from "../../../utils";
import { Button } from "antd-mobile";
import ScGrifs from "../../Form/ScGrifs";

type TabInfoProps = {
  control: Control,
  pattern: DocumentPattern,
  watch: any,
  formEdit: string | null,
  setChanges: (newValue: []) => void,
  notRemoveScIds?: string[]
};

const TabInfo = ({ control, pattern, setChanges, formEdit, notRemoveScIds = [] }: TabInfoProps): JSX.Element => {
  const controlForDocument = useWatch({
    control,
    name: 'document.controlForDocument',
  });

  const holdersField = useFieldArray({
    control,
    name: 'holders',
  });

  return <>
    <Users
      name={"author"}
      control={control}
      multiple={false}
      label={"Автор"}
      disabled={true}
      changeProps={{
        patternId: null,
        documentId: null
      }}
    />
    {pattern?.useSC && <ScGrifs
      name={"scGrifs"}
      control={control}
      label={"scGrifs"}
      notRemoveIds={notRemoveScIds}
    />}
    {!pattern?.autoGenerateDocName && <TextArea
      label={"Короткий зміст"}
      name={"document.nameDocument"}
      control={control}
      showCount
      maxLength={2000}
      placeholder="Ввести"
      formItemProps={{
        required: true
      }}
    />}

    {formEdit !== null && <div>
      <Button block>тут форм едіт</Button>
    </div>}

    {pattern.useDocNumber && <Input
      label={"Номер документа"}
      name={"document.numberDocument"}
      control={control}
    />}
    {(hasRole('USER_DOC_RESPONSIBLE_UPDATE') || hasRole('ADMIN_DOC_RESPONSIBLE_UPDATE')) && <Checkbox
      label={"Поставити на контроль"}
      name={"document.controlForDocument"}
      control={control}
    />}
    {controlForDocument && (
      <>
        <Users
          name={"controlUsers"}
          control={control}
          multiple={false}
          label={"Контроль покласти на (за необхідності)"}
          changeProps={{
            useFavorite: true,
            documentId: null,
            patternId: pattern?.id || null,
            filters: [],
          }}
        />
        <DateTimePicker
          name={"document.documentDeadlineDate"}
          control={control}
          label={"Контрольний термін документу"}
          time={true}
          formItemProps={{
            required: true
          }}
        />
      </>
    )}
    {map(holdersField.fields, (holder: ContentHolder, index: number) => {
      return <Fragment key={holder.id}>
        {holder.showInInfo && <Holder
          holder={holder}
          name={`holders.${index}`}
          control={control}
          setChanges={setChanges}
        />}
      </Fragment>
    })}
    {accessWithPolicy(new DocumentAccessPolicy({
      type: DocumentAccessPolicyType.ACCESS
    }), 'USER_DOC_RELATIONS_UPDATE', 'ADMIN_DOC_RELATIONS_UPDATE') && <div>
        <Button block>Звʼязати документ</Button>
      </div>}
  </>;
};


export default TabInfo;
/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import { Int64 } from "thrift";
import * as thrift from "thrift";
import * as DeviceType from "./DeviceType";
export interface IDeviceArgs {
    firebaseId?: string;
    clientId?: string;
    createDate?: number | Int64;
    lastWorkDate?: number | Int64;
    type?: DeviceType.DeviceType;
    deviceId?: string;
}
export class Device {
    public firebaseId?: string;
    public clientId?: string;
    public createDate?: Int64;
    public lastWorkDate?: Int64;
    public type?: DeviceType.DeviceType;
    public deviceId?: string;
    constructor(args?: IDeviceArgs) {
        if (args != null && args.firebaseId != null) {
            this.firebaseId = args.firebaseId;
        }
        if (args != null && args.clientId != null) {
            this.clientId = args.clientId;
        }
        if (args != null && args.createDate != null) {
            if (typeof args.createDate === "number") {
                this.createDate = new Int64(args.createDate);
            }
            else {
                this.createDate = args.createDate;
            }
        }
        if (args != null && args.lastWorkDate != null) {
            if (typeof args.lastWorkDate === "number") {
                this.lastWorkDate = new Int64(args.lastWorkDate);
            }
            else {
                this.lastWorkDate = args.lastWorkDate;
            }
        }
        if (args != null && args.type != null) {
            this.type = args.type;
        }
        if (args != null && args.deviceId != null) {
            this.deviceId = args.deviceId;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("Device");
        if (this.firebaseId != null) {
            output.writeFieldBegin("firebaseId", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.firebaseId);
            output.writeFieldEnd();
        }
        if (this.clientId != null) {
            output.writeFieldBegin("clientId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.clientId);
            output.writeFieldEnd();
        }
        if (this.createDate != null) {
            output.writeFieldBegin("createDate", thrift.Thrift.Type.I64, 3);
            output.writeI64(this.createDate);
            output.writeFieldEnd();
        }
        if (this.lastWorkDate != null) {
            output.writeFieldBegin("lastWorkDate", thrift.Thrift.Type.I64, 4);
            output.writeI64(this.lastWorkDate);
            output.writeFieldEnd();
        }
        if (this.type != null) {
            output.writeFieldBegin("type", thrift.Thrift.Type.I32, 5);
            output.writeI32(this.type);
            output.writeFieldEnd();
        }
        if (this.deviceId != null) {
            output.writeFieldBegin("deviceId", thrift.Thrift.Type.STRING, 6);
            output.writeString(this.deviceId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): Device {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.firebaseId = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.clientId = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_3: Int64 = input.readI64();
                        _args.createDate = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_4: Int64 = input.readI64();
                        _args.lastWorkDate = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_5: DeviceType.DeviceType = input.readI32();
                        _args.type = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.deviceId = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new Device(_args);
    }
}

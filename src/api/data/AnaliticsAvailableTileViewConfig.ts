/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface IAnaliticsAvailableTileViewConfigArgs {
    noResize?: boolean;
    w?: number;
    minW?: number;
    maxW?: number;
    h?: number;
    minH?: number;
    maxH?: number;
}
export class AnaliticsAvailableTileViewConfig {
    public noResize?: boolean;
    public w?: number;
    public minW?: number;
    public maxW?: number;
    public h?: number;
    public minH?: number;
    public maxH?: number;
    constructor(args?: IAnaliticsAvailableTileViewConfigArgs) {
        if (args != null && args.noResize != null) {
            this.noResize = args.noResize;
        }
        if (args != null && args.w != null) {
            this.w = args.w;
        }
        if (args != null && args.minW != null) {
            this.minW = args.minW;
        }
        if (args != null && args.maxW != null) {
            this.maxW = args.maxW;
        }
        if (args != null && args.h != null) {
            this.h = args.h;
        }
        if (args != null && args.minH != null) {
            this.minH = args.minH;
        }
        if (args != null && args.maxH != null) {
            this.maxH = args.maxH;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("AnaliticsAvailableTileViewConfig");
        if (this.noResize != null) {
            output.writeFieldBegin("noResize", thrift.Thrift.Type.BOOL, 1);
            output.writeBool(this.noResize);
            output.writeFieldEnd();
        }
        if (this.w != null) {
            output.writeFieldBegin("w", thrift.Thrift.Type.I32, 2);
            output.writeI32(this.w);
            output.writeFieldEnd();
        }
        if (this.minW != null) {
            output.writeFieldBegin("minW", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.minW);
            output.writeFieldEnd();
        }
        if (this.maxW != null) {
            output.writeFieldBegin("maxW", thrift.Thrift.Type.I32, 4);
            output.writeI32(this.maxW);
            output.writeFieldEnd();
        }
        if (this.h != null) {
            output.writeFieldBegin("h", thrift.Thrift.Type.I32, 5);
            output.writeI32(this.h);
            output.writeFieldEnd();
        }
        if (this.minH != null) {
            output.writeFieldBegin("minH", thrift.Thrift.Type.I32, 6);
            output.writeI32(this.minH);
            output.writeFieldEnd();
        }
        if (this.maxH != null) {
            output.writeFieldBegin("maxH", thrift.Thrift.Type.I32, 7);
            output.writeI32(this.maxH);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): AnaliticsAvailableTileViewConfig {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_1: boolean = input.readBool();
                        _args.noResize = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_2: number = input.readI32();
                        _args.w = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_3: number = input.readI32();
                        _args.minW = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_4: number = input.readI32();
                        _args.maxW = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_5: number = input.readI32();
                        _args.h = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_6: number = input.readI32();
                        _args.minH = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_7: number = input.readI32();
                        _args.maxH = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new AnaliticsAvailableTileViewConfig(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as __ROOT_NAMESPACE__ from "./";
export interface IPatternRelationInfoArgs {
    id?: string;
    name?: string;
    descript?: string;
    isValidState?: boolean;
    documentPatternGroup?: __ROOT_NAMESPACE__.DocumentPatternGroup;
    account?: __ROOT_NAMESPACE__.Account;
    patternType?: __ROOT_NAMESPACE__.PatternType;
}
export class PatternRelationInfo {
    public id?: string;
    public name?: string;
    public descript?: string;
    public isValidState?: boolean;
    public documentPatternGroup?: __ROOT_NAMESPACE__.DocumentPatternGroup;
    public account?: __ROOT_NAMESPACE__.Account;
    public patternType?: __ROOT_NAMESPACE__.PatternType;
    constructor(args?: IPatternRelationInfoArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.name != null) {
            this.name = args.name;
        }
        if (args != null && args.descript != null) {
            this.descript = args.descript;
        }
        if (args != null && args.isValidState != null) {
            this.isValidState = args.isValidState;
        }
        if (args != null && args.documentPatternGroup != null) {
            this.documentPatternGroup = args.documentPatternGroup;
        }
        if (args != null && args.account != null) {
            this.account = args.account;
        }
        if (args != null && args.patternType != null) {
            this.patternType = args.patternType;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("PatternRelationInfo");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.name != null) {
            output.writeFieldBegin("name", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.name);
            output.writeFieldEnd();
        }
        if (this.descript != null) {
            output.writeFieldBegin("descript", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.descript);
            output.writeFieldEnd();
        }
        if (this.isValidState != null) {
            output.writeFieldBegin("isValidState", thrift.Thrift.Type.BOOL, 4);
            output.writeBool(this.isValidState);
            output.writeFieldEnd();
        }
        if (this.documentPatternGroup != null) {
            output.writeFieldBegin("documentPatternGroup", thrift.Thrift.Type.STRUCT, 5);
            this.documentPatternGroup.write(output);
            output.writeFieldEnd();
        }
        if (this.account != null) {
            output.writeFieldBegin("account", thrift.Thrift.Type.STRUCT, 6);
            this.account.write(output);
            output.writeFieldEnd();
        }
        if (this.patternType != null) {
            output.writeFieldBegin("patternType", thrift.Thrift.Type.I32, 7);
            output.writeI32(this.patternType);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): PatternRelationInfo {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.id = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.name = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.descript = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_4: boolean = input.readBool();
                        _args.isValidState = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_5: __ROOT_NAMESPACE__.DocumentPatternGroup = __ROOT_NAMESPACE__.DocumentPatternGroup.read(input);
                        _args.documentPatternGroup = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_6: __ROOT_NAMESPACE__.Account = __ROOT_NAMESPACE__.Account.read(input);
                        _args.account = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_7: __ROOT_NAMESPACE__.PatternType = input.readI32();
                        _args.patternType = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new PatternRelationInfo(_args);
    }
}

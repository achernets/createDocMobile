/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import { Int64 } from "thrift";
import * as thrift from "thrift";
import * as __ROOT_NAMESPACE__ from "./";
import * as DeviceType from "./DeviceType";
export interface IAuthSessionArgs {
    id?: string;
    expireDate?: number | Int64;
    createDate?: number | Int64;
    updateDate?: number | Int64;
    ip1?: string;
    ip2?: string;
    clientInfo?: __ROOT_NAMESPACE__.UserOrGroup;
    roles?: Set<string>;
    delegateClientInfo?: __ROOT_NAMESPACE__.UserOrGroup;
    needChangePassword?: boolean;
    token?: string;
    langCode?: string;
    blockedRoles?: Set<string>;
    deviceId?: string;
    deviceType?: DeviceType.DeviceType;
    externalSistem?: string;
    needConfirmOTP?: boolean;
}
export class AuthSession {
    public id?: string;
    public expireDate?: Int64;
    public createDate?: Int64;
    public updateDate?: Int64;
    public ip1?: string;
    public ip2?: string;
    public clientInfo?: __ROOT_NAMESPACE__.UserOrGroup;
    public roles?: Set<string>;
    public delegateClientInfo?: __ROOT_NAMESPACE__.UserOrGroup;
    public needChangePassword?: boolean;
    public token?: string;
    public langCode?: string;
    public blockedRoles?: Set<string>;
    public deviceId?: string;
    public deviceType?: DeviceType.DeviceType;
    public externalSistem?: string;
    public needConfirmOTP?: boolean;
    constructor(args?: IAuthSessionArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.expireDate != null) {
            if (typeof args.expireDate === "number") {
                this.expireDate = new Int64(args.expireDate);
            }
            else {
                this.expireDate = args.expireDate;
            }
        }
        if (args != null && args.createDate != null) {
            if (typeof args.createDate === "number") {
                this.createDate = new Int64(args.createDate);
            }
            else {
                this.createDate = args.createDate;
            }
        }
        if (args != null && args.updateDate != null) {
            if (typeof args.updateDate === "number") {
                this.updateDate = new Int64(args.updateDate);
            }
            else {
                this.updateDate = args.updateDate;
            }
        }
        if (args != null && args.ip1 != null) {
            this.ip1 = args.ip1;
        }
        if (args != null && args.ip2 != null) {
            this.ip2 = args.ip2;
        }
        if (args != null && args.clientInfo != null) {
            this.clientInfo = args.clientInfo;
        }
        if (args != null && args.roles != null) {
            this.roles = args.roles;
        }
        if (args != null && args.delegateClientInfo != null) {
            this.delegateClientInfo = args.delegateClientInfo;
        }
        if (args != null && args.needChangePassword != null) {
            this.needChangePassword = args.needChangePassword;
        }
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        if (args != null && args.langCode != null) {
            this.langCode = args.langCode;
        }
        if (args != null && args.blockedRoles != null) {
            this.blockedRoles = args.blockedRoles;
        }
        if (args != null && args.deviceId != null) {
            this.deviceId = args.deviceId;
        }
        if (args != null && args.deviceType != null) {
            this.deviceType = args.deviceType;
        }
        if (args != null && args.externalSistem != null) {
            this.externalSistem = args.externalSistem;
        }
        if (args != null && args.needConfirmOTP != null) {
            this.needConfirmOTP = args.needConfirmOTP;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("AuthSession");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.expireDate != null) {
            output.writeFieldBegin("expireDate", thrift.Thrift.Type.I64, 2);
            output.writeI64(this.expireDate);
            output.writeFieldEnd();
        }
        if (this.createDate != null) {
            output.writeFieldBegin("createDate", thrift.Thrift.Type.I64, 3);
            output.writeI64(this.createDate);
            output.writeFieldEnd();
        }
        if (this.updateDate != null) {
            output.writeFieldBegin("updateDate", thrift.Thrift.Type.I64, 4);
            output.writeI64(this.updateDate);
            output.writeFieldEnd();
        }
        if (this.ip1 != null) {
            output.writeFieldBegin("ip1", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.ip1);
            output.writeFieldEnd();
        }
        if (this.ip2 != null) {
            output.writeFieldBegin("ip2", thrift.Thrift.Type.STRING, 6);
            output.writeString(this.ip2);
            output.writeFieldEnd();
        }
        if (this.clientInfo != null) {
            output.writeFieldBegin("clientInfo", thrift.Thrift.Type.STRUCT, 7);
            this.clientInfo.write(output);
            output.writeFieldEnd();
        }
        if (this.roles != null) {
            output.writeFieldBegin("roles", thrift.Thrift.Type.SET, 8);
            output.writeSetBegin(thrift.Thrift.Type.STRING, this.roles.size);
            this.roles.forEach((value_1: string): void => {
                output.writeString(value_1);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        if (this.delegateClientInfo != null) {
            output.writeFieldBegin("delegateClientInfo", thrift.Thrift.Type.STRUCT, 9);
            this.delegateClientInfo.write(output);
            output.writeFieldEnd();
        }
        if (this.needChangePassword != null) {
            output.writeFieldBegin("needChangePassword", thrift.Thrift.Type.BOOL, 10);
            output.writeBool(this.needChangePassword);
            output.writeFieldEnd();
        }
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 11);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.langCode != null) {
            output.writeFieldBegin("langCode", thrift.Thrift.Type.STRING, 12);
            output.writeString(this.langCode);
            output.writeFieldEnd();
        }
        if (this.blockedRoles != null) {
            output.writeFieldBegin("blockedRoles", thrift.Thrift.Type.SET, 13);
            output.writeSetBegin(thrift.Thrift.Type.STRING, this.blockedRoles.size);
            this.blockedRoles.forEach((value_2: string): void => {
                output.writeString(value_2);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        if (this.deviceId != null) {
            output.writeFieldBegin("deviceId", thrift.Thrift.Type.STRING, 14);
            output.writeString(this.deviceId);
            output.writeFieldEnd();
        }
        if (this.deviceType != null) {
            output.writeFieldBegin("deviceType", thrift.Thrift.Type.I32, 15);
            output.writeI32(this.deviceType);
            output.writeFieldEnd();
        }
        if (this.externalSistem != null) {
            output.writeFieldBegin("externalSistem", thrift.Thrift.Type.STRING, 16);
            output.writeString(this.externalSistem);
            output.writeFieldEnd();
        }
        if (this.needConfirmOTP != null) {
            output.writeFieldBegin("needConfirmOTP", thrift.Thrift.Type.BOOL, 17);
            output.writeBool(this.needConfirmOTP);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): AuthSession {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.id = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_4: Int64 = input.readI64();
                        _args.expireDate = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_5: Int64 = input.readI64();
                        _args.createDate = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_6: Int64 = input.readI64();
                        _args.updateDate = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_7: string = input.readString();
                        _args.ip1 = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_8: string = input.readString();
                        _args.ip2 = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_9: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                        _args.clientInfo = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_10: Set<string> = new Set<string>();
                        const metadata_1: thrift.TSet = input.readSetBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_11: string = input.readString();
                            value_10.add(value_11);
                        }
                        input.readSetEnd();
                        _args.roles = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_12: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                        _args.delegateClientInfo = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_13: boolean = input.readBool();
                        _args.needChangePassword = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_14: string = input.readString();
                        _args.token = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_15: string = input.readString();
                        _args.langCode = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_16: Set<string> = new Set<string>();
                        const metadata_2: thrift.TSet = input.readSetBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_17: string = input.readString();
                            value_16.add(value_17);
                        }
                        input.readSetEnd();
                        _args.blockedRoles = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_18: string = input.readString();
                        _args.deviceId = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_19: DeviceType.DeviceType = input.readI32();
                        _args.deviceType = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_20: string = input.readString();
                        _args.externalSistem = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 17:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_21: boolean = input.readBool();
                        _args.needConfirmOTP = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new AuthSession(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as __ROOT_NAMESPACE__ from "./";
export interface IMatchingUserGroupArgs {
    stageName?: string;
    users?: Array<__ROOT_NAMESPACE__.UserOrGroup>;
    iteration?: number;
}
export class MatchingUserGroup {
    public stageName?: string;
    public users?: Array<__ROOT_NAMESPACE__.UserOrGroup>;
    public iteration?: number;
    constructor(args?: IMatchingUserGroupArgs) {
        if (args != null && args.stageName != null) {
            this.stageName = args.stageName;
        }
        if (args != null && args.users != null) {
            this.users = args.users;
        }
        if (args != null && args.iteration != null) {
            this.iteration = args.iteration;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("MatchingUserGroup");
        if (this.stageName != null) {
            output.writeFieldBegin("stageName", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.stageName);
            output.writeFieldEnd();
        }
        if (this.users != null) {
            output.writeFieldBegin("users", thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.users.length);
            this.users.forEach((value_1: __ROOT_NAMESPACE__.UserOrGroup): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.iteration != null) {
            output.writeFieldBegin("iteration", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.iteration);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): MatchingUserGroup {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.stageName = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_3: Array<__ROOT_NAMESPACE__.UserOrGroup> = new Array<__ROOT_NAMESPACE__.UserOrGroup>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_4: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                            value_3.push(value_4);
                        }
                        input.readListEnd();
                        _args.users = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_5: number = input.readI32();
                        _args.iteration = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new MatchingUserGroup(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import { Int64 } from "thrift";
import * as thrift from "thrift";
import * as KnowledgeColumn from "./KnowledgeColumn";
export interface IKnowledgeColumnPageArgs {
    count?: number | Int64;
    columnList?: Array<KnowledgeColumn.KnowledgeColumn>;
}
export class KnowledgeColumnPage {
    public count?: Int64;
    public columnList?: Array<KnowledgeColumn.KnowledgeColumn>;
    constructor(args?: IKnowledgeColumnPageArgs) {
        if (args != null && args.count != null) {
            if (typeof args.count === "number") {
                this.count = new Int64(args.count);
            }
            else {
                this.count = args.count;
            }
        }
        if (args != null && args.columnList != null) {
            this.columnList = args.columnList;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("KnowledgeColumnPage");
        if (this.count != null) {
            output.writeFieldBegin("count", thrift.Thrift.Type.I64, 1);
            output.writeI64(this.count);
            output.writeFieldEnd();
        }
        if (this.columnList != null) {
            output.writeFieldBegin("columnList", thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.columnList.length);
            this.columnList.forEach((value_1: KnowledgeColumn.KnowledgeColumn): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): KnowledgeColumnPage {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_2: Int64 = input.readI64();
                        _args.count = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_3: Array<KnowledgeColumn.KnowledgeColumn> = new Array<KnowledgeColumn.KnowledgeColumn>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_4: KnowledgeColumn.KnowledgeColumn = KnowledgeColumn.KnowledgeColumn.read(input);
                            value_3.push(value_4);
                        }
                        input.readListEnd();
                        _args.columnList = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new KnowledgeColumnPage(_args);
    }
}

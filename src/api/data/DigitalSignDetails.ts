/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as __ROOT_NAMESPACE__ from "./";
export interface IDigitalSignDetailsArgs {
    id?: string;
    user?: __ROOT_NAMESPACE__.UserOrGroup;
    originalUser?: __ROOT_NAMESPACE__.UserOrGroup;
    certificateInfo?: __ROOT_NAMESPACE__.CertificateInfo;
    signInSystem?: string;
}
export class DigitalSignDetails {
    public id?: string;
    public user?: __ROOT_NAMESPACE__.UserOrGroup;
    public originalUser?: __ROOT_NAMESPACE__.UserOrGroup;
    public certificateInfo?: __ROOT_NAMESPACE__.CertificateInfo;
    public signInSystem?: string;
    constructor(args?: IDigitalSignDetailsArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.user != null) {
            this.user = args.user;
        }
        if (args != null && args.originalUser != null) {
            this.originalUser = args.originalUser;
        }
        if (args != null && args.certificateInfo != null) {
            this.certificateInfo = args.certificateInfo;
        }
        if (args != null && args.signInSystem != null) {
            this.signInSystem = args.signInSystem;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("DigitalSignDetails");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.user != null) {
            output.writeFieldBegin("user", thrift.Thrift.Type.STRUCT, 2);
            this.user.write(output);
            output.writeFieldEnd();
        }
        if (this.originalUser != null) {
            output.writeFieldBegin("originalUser", thrift.Thrift.Type.STRUCT, 3);
            this.originalUser.write(output);
            output.writeFieldEnd();
        }
        if (this.certificateInfo != null) {
            output.writeFieldBegin("certificateInfo", thrift.Thrift.Type.STRUCT, 4);
            this.certificateInfo.write(output);
            output.writeFieldEnd();
        }
        if (this.signInSystem != null) {
            output.writeFieldBegin("signInSystem", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.signInSystem);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): DigitalSignDetails {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.id = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                        _args.user = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_3: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                        _args.originalUser = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_4: __ROOT_NAMESPACE__.CertificateInfo = __ROOT_NAMESPACE__.CertificateInfo.read(input);
                        _args.certificateInfo = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.signInSystem = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new DigitalSignDetails(_args);
    }
}

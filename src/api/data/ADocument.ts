/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import { Int64 } from "thrift";
import * as thrift from "thrift";
import * as FreezeDocumentPattern from "./FreezeDocumentPattern";
import * as DocumentPatternStage from "./DocumentPatternStage";
import * as DocPatternStageStatus from "./DocPatternStageStatus";
import * as DocPatternStageSubStatus from "./DocPatternStageSubStatus";
import * as DocPatternStageActionType from "./DocPatternStageActionType";
import * as DocumentExecutionOwnerType from "./DocumentExecutionOwnerType";
import * as DocumentExecution from "./DocumentExecution";
import * as __ROOT_NAMESPACE__ from "./";
import * as DocumentParticipantGroup from "./DocumentParticipantGroup";
import * as DocumentIconType from "./DocumentIconType";
import * as DocumentTag from "./DocumentTag";
export interface IADocumentArgs {
    id?: string;
    createDate?: number | Int64;
    originalPatternId?: string;
    filledDocumentPattern?: FreezeDocumentPattern.FreezeDocumentPattern;
    stage?: DocumentPatternStage.DocumentPatternStage;
    documentDeadlineDate?: number | Int64;
    deleteDate?: number | Int64;
    numberDocument?: string;
    nameDocument?: string;
    chatId?: string;
    status?: DocPatternStageStatus.DocPatternStageStatus;
    subStatus?: DocPatternStageSubStatus.DocPatternStageSubStatus;
    hasExternalLink?: boolean;
    reassignedDateTime?: number | Int64;
    cardDeadlineDate?: number | Int64;
    actionMap?: Map<string, DocPatternStageActionType.DocPatternStageActionType>;
    ownerType?: DocumentExecutionOwnerType.DocumentExecutionOwnerType;
    iteration?: number;
    systemNumber?: string;
    additionConfirmer?: boolean;
    viewed?: boolean;
    hasDigitalSign?: boolean;
    currentExecutors?: Array<DocumentExecution.DocumentExecution>;
    otherUsers?: Array<DocumentExecution.DocumentExecution>;
    scChangeDate?: number | Int64;
    registrationDate?: number | Int64;
    sender?: boolean;
    recipient?: boolean;
    originalUser?: __ROOT_NAMESPACE__.UserOrGroup;
    documentParticipantGroup?: Array<DocumentParticipantGroup.DocumentParticipantGroup>;
    controlForDocument?: boolean;
    controlForExecutor?: boolean;
    account?: __ROOT_NAMESPACE__.Account;
    moveError?: boolean;
    encripted?: boolean;
    icon?: DocumentIconType.DocumentIconType;
    reassignDeadline?: number | Int64;
    countCurrentExecutors?: number;
    countOtherUsers?: number;
    countResponsibleUsers?: number;
    responsibleUsers?: Array<DocumentExecution.DocumentExecution>;
    countConfirmerUsers?: number;
    externalNumber?: string;
    externalRegDate?: number | Int64;
    externalId?: string;
    items?: Map<string, string>;
    uid?: string;
    subStatuses?: Set<DocPatternStageSubStatus.DocPatternStageSubStatus>;
    tags?: Array<DocumentTag.DocumentTag>;
}
export class ADocument {
    public id?: string;
    public createDate?: Int64;
    public originalPatternId?: string;
    public filledDocumentPattern?: FreezeDocumentPattern.FreezeDocumentPattern;
    public stage?: DocumentPatternStage.DocumentPatternStage;
    public documentDeadlineDate?: Int64;
    public deleteDate?: Int64;
    public numberDocument?: string;
    public nameDocument?: string;
    public chatId?: string;
    public status?: DocPatternStageStatus.DocPatternStageStatus;
    public subStatus?: DocPatternStageSubStatus.DocPatternStageSubStatus;
    public hasExternalLink?: boolean;
    public reassignedDateTime?: Int64;
    public cardDeadlineDate?: Int64;
    public actionMap?: Map<string, DocPatternStageActionType.DocPatternStageActionType>;
    public ownerType?: DocumentExecutionOwnerType.DocumentExecutionOwnerType;
    public iteration?: number;
    public systemNumber?: string;
    public additionConfirmer?: boolean;
    public viewed?: boolean;
    public hasDigitalSign?: boolean;
    public currentExecutors?: Array<DocumentExecution.DocumentExecution>;
    public otherUsers?: Array<DocumentExecution.DocumentExecution>;
    public scChangeDate?: Int64;
    public registrationDate?: Int64;
    public sender?: boolean;
    public recipient?: boolean;
    public originalUser?: __ROOT_NAMESPACE__.UserOrGroup;
    public documentParticipantGroup?: Array<DocumentParticipantGroup.DocumentParticipantGroup>;
    public controlForDocument?: boolean;
    public controlForExecutor?: boolean;
    public account?: __ROOT_NAMESPACE__.Account;
    public moveError?: boolean;
    public encripted?: boolean;
    public icon?: DocumentIconType.DocumentIconType;
    public reassignDeadline?: Int64;
    public countCurrentExecutors?: number;
    public countOtherUsers?: number;
    public countResponsibleUsers?: number;
    public responsibleUsers?: Array<DocumentExecution.DocumentExecution>;
    public countConfirmerUsers?: number;
    public externalNumber?: string;
    public externalRegDate?: Int64;
    public externalId?: string;
    public items?: Map<string, string>;
    public uid?: string;
    public subStatuses?: Set<DocPatternStageSubStatus.DocPatternStageSubStatus>;
    public tags?: Array<DocumentTag.DocumentTag>;
    constructor(args?: IADocumentArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.createDate != null) {
            if (typeof args.createDate === "number") {
                this.createDate = new Int64(args.createDate);
            }
            else {
                this.createDate = args.createDate;
            }
        }
        if (args != null && args.originalPatternId != null) {
            this.originalPatternId = args.originalPatternId;
        }
        if (args != null && args.filledDocumentPattern != null) {
            this.filledDocumentPattern = args.filledDocumentPattern;
        }
        if (args != null && args.stage != null) {
            this.stage = args.stage;
        }
        if (args != null && args.documentDeadlineDate != null) {
            if (typeof args.documentDeadlineDate === "number") {
                this.documentDeadlineDate = new Int64(args.documentDeadlineDate);
            }
            else {
                this.documentDeadlineDate = args.documentDeadlineDate;
            }
        }
        if (args != null && args.deleteDate != null) {
            if (typeof args.deleteDate === "number") {
                this.deleteDate = new Int64(args.deleteDate);
            }
            else {
                this.deleteDate = args.deleteDate;
            }
        }
        if (args != null && args.numberDocument != null) {
            this.numberDocument = args.numberDocument;
        }
        if (args != null && args.nameDocument != null) {
            this.nameDocument = args.nameDocument;
        }
        if (args != null && args.chatId != null) {
            this.chatId = args.chatId;
        }
        if (args != null && args.status != null) {
            this.status = args.status;
        }
        if (args != null && args.subStatus != null) {
            this.subStatus = args.subStatus;
        }
        if (args != null && args.hasExternalLink != null) {
            this.hasExternalLink = args.hasExternalLink;
        }
        if (args != null && args.reassignedDateTime != null) {
            if (typeof args.reassignedDateTime === "number") {
                this.reassignedDateTime = new Int64(args.reassignedDateTime);
            }
            else {
                this.reassignedDateTime = args.reassignedDateTime;
            }
        }
        if (args != null && args.cardDeadlineDate != null) {
            if (typeof args.cardDeadlineDate === "number") {
                this.cardDeadlineDate = new Int64(args.cardDeadlineDate);
            }
            else {
                this.cardDeadlineDate = args.cardDeadlineDate;
            }
        }
        if (args != null && args.actionMap != null) {
            this.actionMap = args.actionMap;
        }
        if (args != null && args.ownerType != null) {
            this.ownerType = args.ownerType;
        }
        if (args != null && args.iteration != null) {
            this.iteration = args.iteration;
        }
        if (args != null && args.systemNumber != null) {
            this.systemNumber = args.systemNumber;
        }
        if (args != null && args.additionConfirmer != null) {
            this.additionConfirmer = args.additionConfirmer;
        }
        if (args != null && args.viewed != null) {
            this.viewed = args.viewed;
        }
        if (args != null && args.hasDigitalSign != null) {
            this.hasDigitalSign = args.hasDigitalSign;
        }
        if (args != null && args.currentExecutors != null) {
            this.currentExecutors = args.currentExecutors;
        }
        if (args != null && args.otherUsers != null) {
            this.otherUsers = args.otherUsers;
        }
        if (args != null && args.scChangeDate != null) {
            if (typeof args.scChangeDate === "number") {
                this.scChangeDate = new Int64(args.scChangeDate);
            }
            else {
                this.scChangeDate = args.scChangeDate;
            }
        }
        if (args != null && args.registrationDate != null) {
            if (typeof args.registrationDate === "number") {
                this.registrationDate = new Int64(args.registrationDate);
            }
            else {
                this.registrationDate = args.registrationDate;
            }
        }
        if (args != null && args.sender != null) {
            this.sender = args.sender;
        }
        if (args != null && args.recipient != null) {
            this.recipient = args.recipient;
        }
        if (args != null && args.originalUser != null) {
            this.originalUser = args.originalUser;
        }
        if (args != null && args.documentParticipantGroup != null) {
            this.documentParticipantGroup = args.documentParticipantGroup;
        }
        if (args != null && args.controlForDocument != null) {
            this.controlForDocument = args.controlForDocument;
        }
        if (args != null && args.controlForExecutor != null) {
            this.controlForExecutor = args.controlForExecutor;
        }
        if (args != null && args.account != null) {
            this.account = args.account;
        }
        if (args != null && args.moveError != null) {
            this.moveError = args.moveError;
        }
        if (args != null && args.encripted != null) {
            this.encripted = args.encripted;
        }
        if (args != null && args.icon != null) {
            this.icon = args.icon;
        }
        if (args != null && args.reassignDeadline != null) {
            if (typeof args.reassignDeadline === "number") {
                this.reassignDeadline = new Int64(args.reassignDeadline);
            }
            else {
                this.reassignDeadline = args.reassignDeadline;
            }
        }
        if (args != null && args.countCurrentExecutors != null) {
            this.countCurrentExecutors = args.countCurrentExecutors;
        }
        if (args != null && args.countOtherUsers != null) {
            this.countOtherUsers = args.countOtherUsers;
        }
        if (args != null && args.countResponsibleUsers != null) {
            this.countResponsibleUsers = args.countResponsibleUsers;
        }
        if (args != null && args.responsibleUsers != null) {
            this.responsibleUsers = args.responsibleUsers;
        }
        if (args != null && args.countConfirmerUsers != null) {
            this.countConfirmerUsers = args.countConfirmerUsers;
        }
        if (args != null && args.externalNumber != null) {
            this.externalNumber = args.externalNumber;
        }
        if (args != null && args.externalRegDate != null) {
            if (typeof args.externalRegDate === "number") {
                this.externalRegDate = new Int64(args.externalRegDate);
            }
            else {
                this.externalRegDate = args.externalRegDate;
            }
        }
        if (args != null && args.externalId != null) {
            this.externalId = args.externalId;
        }
        if (args != null && args.items != null) {
            this.items = args.items;
        }
        if (args != null && args.uid != null) {
            this.uid = args.uid;
        }
        if (args != null && args.subStatuses != null) {
            this.subStatuses = args.subStatuses;
        }
        if (args != null && args.tags != null) {
            this.tags = args.tags;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ADocument");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.createDate != null) {
            output.writeFieldBegin("createDate", thrift.Thrift.Type.I64, 2);
            output.writeI64(this.createDate);
            output.writeFieldEnd();
        }
        if (this.originalPatternId != null) {
            output.writeFieldBegin("originalPatternId", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.originalPatternId);
            output.writeFieldEnd();
        }
        if (this.filledDocumentPattern != null) {
            output.writeFieldBegin("filledDocumentPattern", thrift.Thrift.Type.STRUCT, 4);
            this.filledDocumentPattern.write(output);
            output.writeFieldEnd();
        }
        if (this.stage != null) {
            output.writeFieldBegin("stage", thrift.Thrift.Type.STRUCT, 5);
            this.stage.write(output);
            output.writeFieldEnd();
        }
        if (this.documentDeadlineDate != null) {
            output.writeFieldBegin("documentDeadlineDate", thrift.Thrift.Type.I64, 6);
            output.writeI64(this.documentDeadlineDate);
            output.writeFieldEnd();
        }
        if (this.deleteDate != null) {
            output.writeFieldBegin("deleteDate", thrift.Thrift.Type.I64, 7);
            output.writeI64(this.deleteDate);
            output.writeFieldEnd();
        }
        if (this.numberDocument != null) {
            output.writeFieldBegin("numberDocument", thrift.Thrift.Type.STRING, 8);
            output.writeString(this.numberDocument);
            output.writeFieldEnd();
        }
        if (this.nameDocument != null) {
            output.writeFieldBegin("nameDocument", thrift.Thrift.Type.STRING, 9);
            output.writeString(this.nameDocument);
            output.writeFieldEnd();
        }
        if (this.chatId != null) {
            output.writeFieldBegin("chatId", thrift.Thrift.Type.STRING, 10);
            output.writeString(this.chatId);
            output.writeFieldEnd();
        }
        if (this.status != null) {
            output.writeFieldBegin("status", thrift.Thrift.Type.I32, 11);
            output.writeI32(this.status);
            output.writeFieldEnd();
        }
        if (this.subStatus != null) {
            output.writeFieldBegin("subStatus", thrift.Thrift.Type.I32, 12);
            output.writeI32(this.subStatus);
            output.writeFieldEnd();
        }
        if (this.hasExternalLink != null) {
            output.writeFieldBegin("hasExternalLink", thrift.Thrift.Type.BOOL, 13);
            output.writeBool(this.hasExternalLink);
            output.writeFieldEnd();
        }
        if (this.reassignedDateTime != null) {
            output.writeFieldBegin("reassignedDateTime", thrift.Thrift.Type.I64, 14);
            output.writeI64(this.reassignedDateTime);
            output.writeFieldEnd();
        }
        if (this.cardDeadlineDate != null) {
            output.writeFieldBegin("cardDeadlineDate", thrift.Thrift.Type.I64, 15);
            output.writeI64(this.cardDeadlineDate);
            output.writeFieldEnd();
        }
        if (this.actionMap != null) {
            output.writeFieldBegin("actionMap", thrift.Thrift.Type.MAP, 16);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.I32, this.actionMap.size);
            this.actionMap.forEach((value_1: DocPatternStageActionType.DocPatternStageActionType, key_1: string): void => {
                output.writeString(key_1);
                output.writeI32(value_1);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.ownerType != null) {
            output.writeFieldBegin("ownerType", thrift.Thrift.Type.I32, 17);
            output.writeI32(this.ownerType);
            output.writeFieldEnd();
        }
        if (this.iteration != null) {
            output.writeFieldBegin("iteration", thrift.Thrift.Type.I32, 18);
            output.writeI32(this.iteration);
            output.writeFieldEnd();
        }
        if (this.systemNumber != null) {
            output.writeFieldBegin("systemNumber", thrift.Thrift.Type.STRING, 19);
            output.writeString(this.systemNumber);
            output.writeFieldEnd();
        }
        if (this.additionConfirmer != null) {
            output.writeFieldBegin("additionConfirmer", thrift.Thrift.Type.BOOL, 20);
            output.writeBool(this.additionConfirmer);
            output.writeFieldEnd();
        }
        if (this.viewed != null) {
            output.writeFieldBegin("viewed", thrift.Thrift.Type.BOOL, 21);
            output.writeBool(this.viewed);
            output.writeFieldEnd();
        }
        if (this.hasDigitalSign != null) {
            output.writeFieldBegin("hasDigitalSign", thrift.Thrift.Type.BOOL, 22);
            output.writeBool(this.hasDigitalSign);
            output.writeFieldEnd();
        }
        if (this.currentExecutors != null) {
            output.writeFieldBegin("currentExecutors", thrift.Thrift.Type.LIST, 23);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.currentExecutors.length);
            this.currentExecutors.forEach((value_2: DocumentExecution.DocumentExecution): void => {
                value_2.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.otherUsers != null) {
            output.writeFieldBegin("otherUsers", thrift.Thrift.Type.LIST, 24);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.otherUsers.length);
            this.otherUsers.forEach((value_3: DocumentExecution.DocumentExecution): void => {
                value_3.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.scChangeDate != null) {
            output.writeFieldBegin("scChangeDate", thrift.Thrift.Type.I64, 25);
            output.writeI64(this.scChangeDate);
            output.writeFieldEnd();
        }
        if (this.registrationDate != null) {
            output.writeFieldBegin("registrationDate", thrift.Thrift.Type.I64, 26);
            output.writeI64(this.registrationDate);
            output.writeFieldEnd();
        }
        if (this.sender != null) {
            output.writeFieldBegin("sender", thrift.Thrift.Type.BOOL, 27);
            output.writeBool(this.sender);
            output.writeFieldEnd();
        }
        if (this.recipient != null) {
            output.writeFieldBegin("recipient", thrift.Thrift.Type.BOOL, 28);
            output.writeBool(this.recipient);
            output.writeFieldEnd();
        }
        if (this.originalUser != null) {
            output.writeFieldBegin("originalUser", thrift.Thrift.Type.STRUCT, 29);
            this.originalUser.write(output);
            output.writeFieldEnd();
        }
        if (this.documentParticipantGroup != null) {
            output.writeFieldBegin("documentParticipantGroup", thrift.Thrift.Type.LIST, 30);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.documentParticipantGroup.length);
            this.documentParticipantGroup.forEach((value_4: DocumentParticipantGroup.DocumentParticipantGroup): void => {
                value_4.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.controlForDocument != null) {
            output.writeFieldBegin("controlForDocument", thrift.Thrift.Type.BOOL, 31);
            output.writeBool(this.controlForDocument);
            output.writeFieldEnd();
        }
        if (this.controlForExecutor != null) {
            output.writeFieldBegin("controlForExecutor", thrift.Thrift.Type.BOOL, 32);
            output.writeBool(this.controlForExecutor);
            output.writeFieldEnd();
        }
        if (this.account != null) {
            output.writeFieldBegin("account", thrift.Thrift.Type.STRUCT, 34);
            this.account.write(output);
            output.writeFieldEnd();
        }
        if (this.moveError != null) {
            output.writeFieldBegin("moveError", thrift.Thrift.Type.BOOL, 35);
            output.writeBool(this.moveError);
            output.writeFieldEnd();
        }
        if (this.encripted != null) {
            output.writeFieldBegin("encripted", thrift.Thrift.Type.BOOL, 36);
            output.writeBool(this.encripted);
            output.writeFieldEnd();
        }
        if (this.icon != null) {
            output.writeFieldBegin("icon", thrift.Thrift.Type.I32, 37);
            output.writeI32(this.icon);
            output.writeFieldEnd();
        }
        if (this.reassignDeadline != null) {
            output.writeFieldBegin("reassignDeadline", thrift.Thrift.Type.I64, 38);
            output.writeI64(this.reassignDeadline);
            output.writeFieldEnd();
        }
        if (this.countCurrentExecutors != null) {
            output.writeFieldBegin("countCurrentExecutors", thrift.Thrift.Type.I32, 39);
            output.writeI32(this.countCurrentExecutors);
            output.writeFieldEnd();
        }
        if (this.countOtherUsers != null) {
            output.writeFieldBegin("countOtherUsers", thrift.Thrift.Type.I32, 40);
            output.writeI32(this.countOtherUsers);
            output.writeFieldEnd();
        }
        if (this.countResponsibleUsers != null) {
            output.writeFieldBegin("countResponsibleUsers", thrift.Thrift.Type.I32, 41);
            output.writeI32(this.countResponsibleUsers);
            output.writeFieldEnd();
        }
        if (this.responsibleUsers != null) {
            output.writeFieldBegin("responsibleUsers", thrift.Thrift.Type.LIST, 42);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.responsibleUsers.length);
            this.responsibleUsers.forEach((value_5: DocumentExecution.DocumentExecution): void => {
                value_5.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.countConfirmerUsers != null) {
            output.writeFieldBegin("countConfirmerUsers", thrift.Thrift.Type.I32, 43);
            output.writeI32(this.countConfirmerUsers);
            output.writeFieldEnd();
        }
        if (this.externalNumber != null) {
            output.writeFieldBegin("externalNumber", thrift.Thrift.Type.STRING, 44);
            output.writeString(this.externalNumber);
            output.writeFieldEnd();
        }
        if (this.externalRegDate != null) {
            output.writeFieldBegin("externalRegDate", thrift.Thrift.Type.I64, 45);
            output.writeI64(this.externalRegDate);
            output.writeFieldEnd();
        }
        if (this.externalId != null) {
            output.writeFieldBegin("externalId", thrift.Thrift.Type.STRING, 46);
            output.writeString(this.externalId);
            output.writeFieldEnd();
        }
        if (this.items != null) {
            output.writeFieldBegin("items", thrift.Thrift.Type.MAP, 47);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.items.size);
            this.items.forEach((value_6: string, key_2: string): void => {
                output.writeString(key_2);
                output.writeString(value_6);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.uid != null) {
            output.writeFieldBegin("uid", thrift.Thrift.Type.STRING, 48);
            output.writeString(this.uid);
            output.writeFieldEnd();
        }
        if (this.subStatuses != null) {
            output.writeFieldBegin("subStatuses", thrift.Thrift.Type.SET, 49);
            output.writeSetBegin(thrift.Thrift.Type.I32, this.subStatuses.size);
            this.subStatuses.forEach((value_7: DocPatternStageSubStatus.DocPatternStageSubStatus): void => {
                output.writeI32(value_7);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        if (this.tags != null) {
            output.writeFieldBegin("tags", thrift.Thrift.Type.LIST, 50);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.tags.length);
            this.tags.forEach((value_8: DocumentTag.DocumentTag): void => {
                value_8.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ADocument {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_9: string = input.readString();
                        _args.id = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_10: Int64 = input.readI64();
                        _args.createDate = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_11: string = input.readString();
                        _args.originalPatternId = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_12: FreezeDocumentPattern.FreezeDocumentPattern = FreezeDocumentPattern.FreezeDocumentPattern.read(input);
                        _args.filledDocumentPattern = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_13: DocumentPatternStage.DocumentPatternStage = DocumentPatternStage.DocumentPatternStage.read(input);
                        _args.stage = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_14: Int64 = input.readI64();
                        _args.documentDeadlineDate = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_15: Int64 = input.readI64();
                        _args.deleteDate = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_16: string = input.readString();
                        _args.numberDocument = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_17: string = input.readString();
                        _args.nameDocument = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_18: string = input.readString();
                        _args.chatId = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_19: DocPatternStageStatus.DocPatternStageStatus = input.readI32();
                        _args.status = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_20: DocPatternStageSubStatus.DocPatternStageSubStatus = input.readI32();
                        _args.subStatus = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_21: boolean = input.readBool();
                        _args.hasExternalLink = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_22: Int64 = input.readI64();
                        _args.reassignedDateTime = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_23: Int64 = input.readI64();
                        _args.cardDeadlineDate = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_24: Map<string, DocPatternStageActionType.DocPatternStageActionType> = new Map<string, DocPatternStageActionType.DocPatternStageActionType>();
                        const metadata_1: thrift.TMap = input.readMapBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const key_3: string = input.readString();
                            const value_25: DocPatternStageActionType.DocPatternStageActionType = input.readI32();
                            value_24.set(key_3, value_25);
                        }
                        input.readMapEnd();
                        _args.actionMap = value_24;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 17:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_26: DocumentExecutionOwnerType.DocumentExecutionOwnerType = input.readI32();
                        _args.ownerType = value_26;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 18:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_27: number = input.readI32();
                        _args.iteration = value_27;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 19:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_28: string = input.readString();
                        _args.systemNumber = value_28;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 20:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_29: boolean = input.readBool();
                        _args.additionConfirmer = value_29;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 21:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_30: boolean = input.readBool();
                        _args.viewed = value_30;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 22:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_31: boolean = input.readBool();
                        _args.hasDigitalSign = value_31;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 23:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_32: Array<DocumentExecution.DocumentExecution> = new Array<DocumentExecution.DocumentExecution>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_33: DocumentExecution.DocumentExecution = DocumentExecution.DocumentExecution.read(input);
                            value_32.push(value_33);
                        }
                        input.readListEnd();
                        _args.currentExecutors = value_32;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 24:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_34: Array<DocumentExecution.DocumentExecution> = new Array<DocumentExecution.DocumentExecution>();
                        const metadata_3: thrift.TList = input.readListBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_35: DocumentExecution.DocumentExecution = DocumentExecution.DocumentExecution.read(input);
                            value_34.push(value_35);
                        }
                        input.readListEnd();
                        _args.otherUsers = value_34;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 25:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_36: Int64 = input.readI64();
                        _args.scChangeDate = value_36;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 26:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_37: Int64 = input.readI64();
                        _args.registrationDate = value_37;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 27:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_38: boolean = input.readBool();
                        _args.sender = value_38;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 28:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_39: boolean = input.readBool();
                        _args.recipient = value_39;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 29:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_40: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                        _args.originalUser = value_40;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 30:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_41: Array<DocumentParticipantGroup.DocumentParticipantGroup> = new Array<DocumentParticipantGroup.DocumentParticipantGroup>();
                        const metadata_4: thrift.TList = input.readListBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const value_42: DocumentParticipantGroup.DocumentParticipantGroup = DocumentParticipantGroup.DocumentParticipantGroup.read(input);
                            value_41.push(value_42);
                        }
                        input.readListEnd();
                        _args.documentParticipantGroup = value_41;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 31:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_43: boolean = input.readBool();
                        _args.controlForDocument = value_43;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 32:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_44: boolean = input.readBool();
                        _args.controlForExecutor = value_44;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 34:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_45: __ROOT_NAMESPACE__.Account = __ROOT_NAMESPACE__.Account.read(input);
                        _args.account = value_45;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 35:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_46: boolean = input.readBool();
                        _args.moveError = value_46;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 36:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_47: boolean = input.readBool();
                        _args.encripted = value_47;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 37:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_48: DocumentIconType.DocumentIconType = input.readI32();
                        _args.icon = value_48;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 38:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_49: Int64 = input.readI64();
                        _args.reassignDeadline = value_49;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 39:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_50: number = input.readI32();
                        _args.countCurrentExecutors = value_50;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 40:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_51: number = input.readI32();
                        _args.countOtherUsers = value_51;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 41:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_52: number = input.readI32();
                        _args.countResponsibleUsers = value_52;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 42:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_53: Array<DocumentExecution.DocumentExecution> = new Array<DocumentExecution.DocumentExecution>();
                        const metadata_5: thrift.TList = input.readListBegin();
                        const size_5: number = metadata_5.size;
                        for (let i_5: number = 0; i_5 < size_5; i_5++) {
                            const value_54: DocumentExecution.DocumentExecution = DocumentExecution.DocumentExecution.read(input);
                            value_53.push(value_54);
                        }
                        input.readListEnd();
                        _args.responsibleUsers = value_53;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 43:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_55: number = input.readI32();
                        _args.countConfirmerUsers = value_55;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 44:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_56: string = input.readString();
                        _args.externalNumber = value_56;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 45:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_57: Int64 = input.readI64();
                        _args.externalRegDate = value_57;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 46:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_58: string = input.readString();
                        _args.externalId = value_58;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 47:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_59: Map<string, string> = new Map<string, string>();
                        const metadata_6: thrift.TMap = input.readMapBegin();
                        const size_6: number = metadata_6.size;
                        for (let i_6: number = 0; i_6 < size_6; i_6++) {
                            const key_4: string = input.readString();
                            const value_60: string = input.readString();
                            value_59.set(key_4, value_60);
                        }
                        input.readMapEnd();
                        _args.items = value_59;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 48:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_61: string = input.readString();
                        _args.uid = value_61;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 49:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_62: Set<DocPatternStageSubStatus.DocPatternStageSubStatus> = new Set<DocPatternStageSubStatus.DocPatternStageSubStatus>();
                        const metadata_7: thrift.TSet = input.readSetBegin();
                        const size_7: number = metadata_7.size;
                        for (let i_7: number = 0; i_7 < size_7; i_7++) {
                            const value_63: DocPatternStageSubStatus.DocPatternStageSubStatus = input.readI32();
                            value_62.add(value_63);
                        }
                        input.readSetEnd();
                        _args.subStatuses = value_62;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 50:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_64: Array<DocumentTag.DocumentTag> = new Array<DocumentTag.DocumentTag>();
                        const metadata_8: thrift.TList = input.readListBegin();
                        const size_8: number = metadata_8.size;
                        for (let i_8: number = 0; i_8 < size_8; i_8++) {
                            const value_65: DocumentTag.DocumentTag = DocumentTag.DocumentTag.read(input);
                            value_64.push(value_65);
                        }
                        input.readListEnd();
                        _args.tags = value_64;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ADocument(_args);
    }
}

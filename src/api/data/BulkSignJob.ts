/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as BulkSignDocument from "./BulkSignDocument";
import * as BulkStatus from "./BulkStatus";
import * as ExtSignOperation from "./ExtSignOperation";
export interface IBulkSignJobArgs {
    id?: string;
    preparedDocs?: number;
    processedDocs?: number;
    failDocs?: number;
    totalDocs?: number;
    documentList?: Array<BulkSignDocument.BulkSignDocument>;
    bulkJobStatus?: BulkStatus.BulkStatus;
    extSignOperationList?: Array<ExtSignOperation.ExtSignOperation>;
}
export class BulkSignJob {
    public id?: string;
    public preparedDocs?: number;
    public processedDocs?: number;
    public failDocs?: number;
    public totalDocs?: number;
    public documentList?: Array<BulkSignDocument.BulkSignDocument>;
    public bulkJobStatus?: BulkStatus.BulkStatus;
    public extSignOperationList?: Array<ExtSignOperation.ExtSignOperation>;
    constructor(args?: IBulkSignJobArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.preparedDocs != null) {
            this.preparedDocs = args.preparedDocs;
        }
        if (args != null && args.processedDocs != null) {
            this.processedDocs = args.processedDocs;
        }
        if (args != null && args.failDocs != null) {
            this.failDocs = args.failDocs;
        }
        if (args != null && args.totalDocs != null) {
            this.totalDocs = args.totalDocs;
        }
        if (args != null && args.documentList != null) {
            this.documentList = args.documentList;
        }
        if (args != null && args.bulkJobStatus != null) {
            this.bulkJobStatus = args.bulkJobStatus;
        }
        if (args != null && args.extSignOperationList != null) {
            this.extSignOperationList = args.extSignOperationList;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("BulkSignJob");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.preparedDocs != null) {
            output.writeFieldBegin("preparedDocs", thrift.Thrift.Type.I32, 2);
            output.writeI32(this.preparedDocs);
            output.writeFieldEnd();
        }
        if (this.processedDocs != null) {
            output.writeFieldBegin("processedDocs", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.processedDocs);
            output.writeFieldEnd();
        }
        if (this.failDocs != null) {
            output.writeFieldBegin("failDocs", thrift.Thrift.Type.I32, 4);
            output.writeI32(this.failDocs);
            output.writeFieldEnd();
        }
        if (this.totalDocs != null) {
            output.writeFieldBegin("totalDocs", thrift.Thrift.Type.I32, 5);
            output.writeI32(this.totalDocs);
            output.writeFieldEnd();
        }
        if (this.documentList != null) {
            output.writeFieldBegin("documentList", thrift.Thrift.Type.LIST, 6);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.documentList.length);
            this.documentList.forEach((value_1: BulkSignDocument.BulkSignDocument): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.bulkJobStatus != null) {
            output.writeFieldBegin("bulkJobStatus", thrift.Thrift.Type.I32, 7);
            output.writeI32(this.bulkJobStatus);
            output.writeFieldEnd();
        }
        if (this.extSignOperationList != null) {
            output.writeFieldBegin("extSignOperationList", thrift.Thrift.Type.LIST, 8);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.extSignOperationList.length);
            this.extSignOperationList.forEach((value_2: ExtSignOperation.ExtSignOperation): void => {
                value_2.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): BulkSignJob {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.id = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_4: number = input.readI32();
                        _args.preparedDocs = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_5: number = input.readI32();
                        _args.processedDocs = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_6: number = input.readI32();
                        _args.failDocs = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_7: number = input.readI32();
                        _args.totalDocs = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_8: Array<BulkSignDocument.BulkSignDocument> = new Array<BulkSignDocument.BulkSignDocument>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_9: BulkSignDocument.BulkSignDocument = BulkSignDocument.BulkSignDocument.read(input);
                            value_8.push(value_9);
                        }
                        input.readListEnd();
                        _args.documentList = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_10: BulkStatus.BulkStatus = input.readI32();
                        _args.bulkJobStatus = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_11: Array<ExtSignOperation.ExtSignOperation> = new Array<ExtSignOperation.ExtSignOperation>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_12: ExtSignOperation.ExtSignOperation = ExtSignOperation.ExtSignOperation.read(input);
                            value_11.push(value_12);
                        }
                        input.readListEnd();
                        _args.extSignOperationList = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new BulkSignJob(_args);
    }
}

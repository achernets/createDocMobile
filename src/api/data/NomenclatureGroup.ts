/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as NomenclatureNumber from "./NomenclatureNumber";
export interface INomenclatureGroupArgs {
    id?: string;
    oName?: string;
    code?: string;
    storageTerm?: string;
    articleNumber?: string;
    remark?: string;
    nomenclatureNumbers?: Array<NomenclatureNumber.NomenclatureNumber>;
}
export class NomenclatureGroup {
    public id?: string;
    public oName?: string;
    public code?: string;
    public storageTerm?: string;
    public articleNumber?: string;
    public remark?: string;
    public nomenclatureNumbers?: Array<NomenclatureNumber.NomenclatureNumber>;
    constructor(args?: INomenclatureGroupArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.oName != null) {
            this.oName = args.oName;
        }
        if (args != null && args.code != null) {
            this.code = args.code;
        }
        if (args != null && args.storageTerm != null) {
            this.storageTerm = args.storageTerm;
        }
        if (args != null && args.articleNumber != null) {
            this.articleNumber = args.articleNumber;
        }
        if (args != null && args.remark != null) {
            this.remark = args.remark;
        }
        if (args != null && args.nomenclatureNumbers != null) {
            this.nomenclatureNumbers = args.nomenclatureNumbers;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("NomenclatureGroup");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.oName != null) {
            output.writeFieldBegin("oName", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.oName);
            output.writeFieldEnd();
        }
        if (this.code != null) {
            output.writeFieldBegin("code", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.code);
            output.writeFieldEnd();
        }
        if (this.storageTerm != null) {
            output.writeFieldBegin("storageTerm", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.storageTerm);
            output.writeFieldEnd();
        }
        if (this.articleNumber != null) {
            output.writeFieldBegin("articleNumber", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.articleNumber);
            output.writeFieldEnd();
        }
        if (this.remark != null) {
            output.writeFieldBegin("remark", thrift.Thrift.Type.STRING, 6);
            output.writeString(this.remark);
            output.writeFieldEnd();
        }
        if (this.nomenclatureNumbers != null) {
            output.writeFieldBegin("nomenclatureNumbers", thrift.Thrift.Type.LIST, 7);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.nomenclatureNumbers.length);
            this.nomenclatureNumbers.forEach((value_1: NomenclatureNumber.NomenclatureNumber): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): NomenclatureGroup {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.id = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.oName = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.code = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.storageTerm = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.articleNumber = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_7: string = input.readString();
                        _args.remark = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_8: Array<NomenclatureNumber.NomenclatureNumber> = new Array<NomenclatureNumber.NomenclatureNumber>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_9: NomenclatureNumber.NomenclatureNumber = NomenclatureNumber.NomenclatureNumber.read(input);
                            value_8.push(value_9);
                        }
                        input.readListEnd();
                        _args.nomenclatureNumbers = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new NomenclatureGroup(_args);
    }
}

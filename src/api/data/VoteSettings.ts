/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as VoteAnswerParams from "./VoteAnswerParams";
import * as VoteVisibleType from "./VoteVisibleType";
export interface IVoteSettingsArgs {
    voteId?: string;
    answerParam?: Array<VoteAnswerParams.VoteAnswerParams>;
    quorum?: number;
    legitimacy?: number;
    changeVoteEnable?: boolean;
    visibleType?: VoteVisibleType.VoteVisibleType;
    processRoleVoters?: string;
    processRoleSecretary?: string;
}
export class VoteSettings {
    public voteId?: string;
    public answerParam?: Array<VoteAnswerParams.VoteAnswerParams>;
    public quorum?: number;
    public legitimacy?: number;
    public changeVoteEnable?: boolean;
    public visibleType?: VoteVisibleType.VoteVisibleType;
    public processRoleVoters?: string;
    public processRoleSecretary?: string;
    constructor(args?: IVoteSettingsArgs) {
        if (args != null && args.voteId != null) {
            this.voteId = args.voteId;
        }
        if (args != null && args.answerParam != null) {
            this.answerParam = args.answerParam;
        }
        if (args != null && args.quorum != null) {
            this.quorum = args.quorum;
        }
        if (args != null && args.legitimacy != null) {
            this.legitimacy = args.legitimacy;
        }
        if (args != null && args.changeVoteEnable != null) {
            this.changeVoteEnable = args.changeVoteEnable;
        }
        if (args != null && args.visibleType != null) {
            this.visibleType = args.visibleType;
        }
        if (args != null && args.processRoleVoters != null) {
            this.processRoleVoters = args.processRoleVoters;
        }
        if (args != null && args.processRoleSecretary != null) {
            this.processRoleSecretary = args.processRoleSecretary;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("VoteSettings");
        if (this.voteId != null) {
            output.writeFieldBegin("voteId", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.voteId);
            output.writeFieldEnd();
        }
        if (this.answerParam != null) {
            output.writeFieldBegin("answerParam", thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.answerParam.length);
            this.answerParam.forEach((value_1: VoteAnswerParams.VoteAnswerParams): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.quorum != null) {
            output.writeFieldBegin("quorum", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.quorum);
            output.writeFieldEnd();
        }
        if (this.legitimacy != null) {
            output.writeFieldBegin("legitimacy", thrift.Thrift.Type.I32, 4);
            output.writeI32(this.legitimacy);
            output.writeFieldEnd();
        }
        if (this.changeVoteEnable != null) {
            output.writeFieldBegin("changeVoteEnable", thrift.Thrift.Type.BOOL, 6);
            output.writeBool(this.changeVoteEnable);
            output.writeFieldEnd();
        }
        if (this.visibleType != null) {
            output.writeFieldBegin("visibleType", thrift.Thrift.Type.I32, 7);
            output.writeI32(this.visibleType);
            output.writeFieldEnd();
        }
        if (this.processRoleVoters != null) {
            output.writeFieldBegin("processRoleVoters", thrift.Thrift.Type.STRING, 8);
            output.writeString(this.processRoleVoters);
            output.writeFieldEnd();
        }
        if (this.processRoleSecretary != null) {
            output.writeFieldBegin("processRoleSecretary", thrift.Thrift.Type.STRING, 9);
            output.writeString(this.processRoleSecretary);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): VoteSettings {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.voteId = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_3: Array<VoteAnswerParams.VoteAnswerParams> = new Array<VoteAnswerParams.VoteAnswerParams>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_4: VoteAnswerParams.VoteAnswerParams = VoteAnswerParams.VoteAnswerParams.read(input);
                            value_3.push(value_4);
                        }
                        input.readListEnd();
                        _args.answerParam = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_5: number = input.readI32();
                        _args.quorum = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_6: number = input.readI32();
                        _args.legitimacy = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_7: boolean = input.readBool();
                        _args.changeVoteEnable = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_8: VoteVisibleType.VoteVisibleType = input.readI32();
                        _args.visibleType = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_9: string = input.readString();
                        _args.processRoleVoters = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_10: string = input.readString();
                        _args.processRoleSecretary = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new VoteSettings(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as ChangeLogActionType from "./ChangeLogActionType";
export interface IChangeLogDetailArgs {
    key?: string;
    oldValue?: string;
    newValue?: string;
    actionType?: ChangeLogActionType.ChangeLogActionType;
}
export class ChangeLogDetail {
    public key?: string;
    public oldValue?: string;
    public newValue?: string;
    public actionType?: ChangeLogActionType.ChangeLogActionType;
    constructor(args?: IChangeLogDetailArgs) {
        if (args != null && args.key != null) {
            this.key = args.key;
        }
        if (args != null && args.oldValue != null) {
            this.oldValue = args.oldValue;
        }
        if (args != null && args.newValue != null) {
            this.newValue = args.newValue;
        }
        if (args != null && args.actionType != null) {
            this.actionType = args.actionType;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ChangeLogDetail");
        if (this.key != null) {
            output.writeFieldBegin("key", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.key);
            output.writeFieldEnd();
        }
        if (this.oldValue != null) {
            output.writeFieldBegin("oldValue", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.oldValue);
            output.writeFieldEnd();
        }
        if (this.newValue != null) {
            output.writeFieldBegin("newValue", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.newValue);
            output.writeFieldEnd();
        }
        if (this.actionType != null) {
            output.writeFieldBegin("actionType", thrift.Thrift.Type.I32, 4);
            output.writeI32(this.actionType);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ChangeLogDetail {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.key = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.oldValue = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.newValue = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_4: ChangeLogActionType.ChangeLogActionType = input.readI32();
                        _args.actionType = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ChangeLogDetail(_args);
    }
}

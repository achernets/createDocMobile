/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import { Int64 } from "thrift";
import * as thrift from "thrift";
import * as DocPatternStageStatus from "./DocPatternStageStatus";
import * as DocPatternStageSubStatus from "./DocPatternStageSubStatus";
import * as DocumentIconType from "./DocumentIconType";
import * as DocPatternStageActionType from "./DocPatternStageActionType";
export interface IDocumentRelationInfoArgs {
    id?: string;
    createDate?: number | Int64;
    name?: string;
    systemNumber?: string;
    numberDocument?: string;
    registrationDate?: number | Int64;
    doc2Access?: boolean;
    status?: DocPatternStageStatus.DocPatternStageStatus;
    subStatus?: DocPatternStageSubStatus.DocPatternStageSubStatus;
    deadlineDate?: number | Int64;
    cardDeadlineDate?: number | Int64;
    icon?: DocumentIconType.DocumentIconType;
    patternName?: string;
    stageName?: string;
    actionMap?: Map<string, DocPatternStageActionType.DocPatternStageActionType>;
}
export class DocumentRelationInfo {
    public id?: string;
    public createDate?: Int64;
    public name?: string;
    public systemNumber?: string;
    public numberDocument?: string;
    public registrationDate?: Int64;
    public doc2Access?: boolean;
    public status?: DocPatternStageStatus.DocPatternStageStatus;
    public subStatus?: DocPatternStageSubStatus.DocPatternStageSubStatus;
    public deadlineDate?: Int64;
    public cardDeadlineDate?: Int64;
    public icon?: DocumentIconType.DocumentIconType;
    public patternName?: string;
    public stageName?: string;
    public actionMap?: Map<string, DocPatternStageActionType.DocPatternStageActionType>;
    constructor(args?: IDocumentRelationInfoArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.createDate != null) {
            if (typeof args.createDate === "number") {
                this.createDate = new Int64(args.createDate);
            }
            else {
                this.createDate = args.createDate;
            }
        }
        if (args != null && args.name != null) {
            this.name = args.name;
        }
        if (args != null && args.systemNumber != null) {
            this.systemNumber = args.systemNumber;
        }
        if (args != null && args.numberDocument != null) {
            this.numberDocument = args.numberDocument;
        }
        if (args != null && args.registrationDate != null) {
            if (typeof args.registrationDate === "number") {
                this.registrationDate = new Int64(args.registrationDate);
            }
            else {
                this.registrationDate = args.registrationDate;
            }
        }
        if (args != null && args.doc2Access != null) {
            this.doc2Access = args.doc2Access;
        }
        if (args != null && args.status != null) {
            this.status = args.status;
        }
        if (args != null && args.subStatus != null) {
            this.subStatus = args.subStatus;
        }
        if (args != null && args.deadlineDate != null) {
            if (typeof args.deadlineDate === "number") {
                this.deadlineDate = new Int64(args.deadlineDate);
            }
            else {
                this.deadlineDate = args.deadlineDate;
            }
        }
        if (args != null && args.cardDeadlineDate != null) {
            if (typeof args.cardDeadlineDate === "number") {
                this.cardDeadlineDate = new Int64(args.cardDeadlineDate);
            }
            else {
                this.cardDeadlineDate = args.cardDeadlineDate;
            }
        }
        if (args != null && args.icon != null) {
            this.icon = args.icon;
        }
        if (args != null && args.patternName != null) {
            this.patternName = args.patternName;
        }
        if (args != null && args.stageName != null) {
            this.stageName = args.stageName;
        }
        if (args != null && args.actionMap != null) {
            this.actionMap = args.actionMap;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("DocumentRelationInfo");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.createDate != null) {
            output.writeFieldBegin("createDate", thrift.Thrift.Type.I64, 2);
            output.writeI64(this.createDate);
            output.writeFieldEnd();
        }
        if (this.name != null) {
            output.writeFieldBegin("name", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.name);
            output.writeFieldEnd();
        }
        if (this.systemNumber != null) {
            output.writeFieldBegin("systemNumber", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.systemNumber);
            output.writeFieldEnd();
        }
        if (this.numberDocument != null) {
            output.writeFieldBegin("numberDocument", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.numberDocument);
            output.writeFieldEnd();
        }
        if (this.registrationDate != null) {
            output.writeFieldBegin("registrationDate", thrift.Thrift.Type.I64, 6);
            output.writeI64(this.registrationDate);
            output.writeFieldEnd();
        }
        if (this.doc2Access != null) {
            output.writeFieldBegin("doc2Access", thrift.Thrift.Type.BOOL, 7);
            output.writeBool(this.doc2Access);
            output.writeFieldEnd();
        }
        if (this.status != null) {
            output.writeFieldBegin("status", thrift.Thrift.Type.I32, 8);
            output.writeI32(this.status);
            output.writeFieldEnd();
        }
        if (this.subStatus != null) {
            output.writeFieldBegin("subStatus", thrift.Thrift.Type.I32, 9);
            output.writeI32(this.subStatus);
            output.writeFieldEnd();
        }
        if (this.deadlineDate != null) {
            output.writeFieldBegin("deadlineDate", thrift.Thrift.Type.I64, 10);
            output.writeI64(this.deadlineDate);
            output.writeFieldEnd();
        }
        if (this.cardDeadlineDate != null) {
            output.writeFieldBegin("cardDeadlineDate", thrift.Thrift.Type.I64, 11);
            output.writeI64(this.cardDeadlineDate);
            output.writeFieldEnd();
        }
        if (this.icon != null) {
            output.writeFieldBegin("icon", thrift.Thrift.Type.I32, 12);
            output.writeI32(this.icon);
            output.writeFieldEnd();
        }
        if (this.patternName != null) {
            output.writeFieldBegin("patternName", thrift.Thrift.Type.STRING, 13);
            output.writeString(this.patternName);
            output.writeFieldEnd();
        }
        if (this.stageName != null) {
            output.writeFieldBegin("stageName", thrift.Thrift.Type.STRING, 14);
            output.writeString(this.stageName);
            output.writeFieldEnd();
        }
        if (this.actionMap != null) {
            output.writeFieldBegin("actionMap", thrift.Thrift.Type.MAP, 15);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.I32, this.actionMap.size);
            this.actionMap.forEach((value_1: DocPatternStageActionType.DocPatternStageActionType, key_1: string): void => {
                output.writeString(key_1);
                output.writeI32(value_1);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): DocumentRelationInfo {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.id = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_3: Int64 = input.readI64();
                        _args.createDate = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.name = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.systemNumber = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.numberDocument = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_7: Int64 = input.readI64();
                        _args.registrationDate = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_8: boolean = input.readBool();
                        _args.doc2Access = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_9: DocPatternStageStatus.DocPatternStageStatus = input.readI32();
                        _args.status = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_10: DocPatternStageSubStatus.DocPatternStageSubStatus = input.readI32();
                        _args.subStatus = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_11: Int64 = input.readI64();
                        _args.deadlineDate = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_12: Int64 = input.readI64();
                        _args.cardDeadlineDate = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_13: DocumentIconType.DocumentIconType = input.readI32();
                        _args.icon = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_14: string = input.readString();
                        _args.patternName = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_15: string = input.readString();
                        _args.stageName = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_16: Map<string, DocPatternStageActionType.DocPatternStageActionType> = new Map<string, DocPatternStageActionType.DocPatternStageActionType>();
                        const metadata_1: thrift.TMap = input.readMapBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const key_2: string = input.readString();
                            const value_17: DocPatternStageActionType.DocPatternStageActionType = input.readI32();
                            value_16.set(key_2, value_17);
                        }
                        input.readMapEnd();
                        _args.actionMap = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new DocumentRelationInfo(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import { Int64 } from "thrift";
import * as thrift from "thrift";
import * as HBColumnType from "./HBColumnType";
import * as HandBook from "./HandBook";
import * as HBColumnOrderType from "./HBColumnOrderType";
export interface IHBColumnArgs {
    id?: string;
    oName?: string;
    requiredColumn?: boolean;
    seqNum?: number;
    searchable?: boolean;
    columnType?: HBColumnType.HBColumnType;
    extId?: string;
    deleteDate?: number | Int64;
    uniqVal?: boolean;
    columnKey?: string;
    depHandBook?: HandBook.HandBook;
    depColumnId?: string;
    orderRule?: HBColumnOrderType.HBColumnOrderType;
    oNameLoc?: Map<string, string>;
    uuid?: string;
}
export class HBColumn {
    public id?: string;
    public oName?: string;
    public requiredColumn?: boolean;
    public seqNum?: number;
    public searchable?: boolean;
    public columnType?: HBColumnType.HBColumnType;
    public extId?: string;
    public deleteDate?: Int64;
    public uniqVal?: boolean;
    public columnKey?: string;
    public depHandBook?: HandBook.HandBook;
    public depColumnId?: string;
    public orderRule?: HBColumnOrderType.HBColumnOrderType;
    public oNameLoc?: Map<string, string>;
    public uuid?: string;
    constructor(args?: IHBColumnArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.oName != null) {
            this.oName = args.oName;
        }
        if (args != null && args.requiredColumn != null) {
            this.requiredColumn = args.requiredColumn;
        }
        if (args != null && args.seqNum != null) {
            this.seqNum = args.seqNum;
        }
        if (args != null && args.searchable != null) {
            this.searchable = args.searchable;
        }
        if (args != null && args.columnType != null) {
            this.columnType = args.columnType;
        }
        if (args != null && args.extId != null) {
            this.extId = args.extId;
        }
        if (args != null && args.deleteDate != null) {
            if (typeof args.deleteDate === "number") {
                this.deleteDate = new Int64(args.deleteDate);
            }
            else {
                this.deleteDate = args.deleteDate;
            }
        }
        if (args != null && args.uniqVal != null) {
            this.uniqVal = args.uniqVal;
        }
        if (args != null && args.columnKey != null) {
            this.columnKey = args.columnKey;
        }
        if (args != null && args.depHandBook != null) {
            this.depHandBook = args.depHandBook;
        }
        if (args != null && args.depColumnId != null) {
            this.depColumnId = args.depColumnId;
        }
        if (args != null && args.orderRule != null) {
            this.orderRule = args.orderRule;
        }
        if (args != null && args.oNameLoc != null) {
            this.oNameLoc = args.oNameLoc;
        }
        if (args != null && args.uuid != null) {
            this.uuid = args.uuid;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("HBColumn");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.oName != null) {
            output.writeFieldBegin("oName", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.oName);
            output.writeFieldEnd();
        }
        if (this.requiredColumn != null) {
            output.writeFieldBegin("requiredColumn", thrift.Thrift.Type.BOOL, 3);
            output.writeBool(this.requiredColumn);
            output.writeFieldEnd();
        }
        if (this.seqNum != null) {
            output.writeFieldBegin("seqNum", thrift.Thrift.Type.I32, 4);
            output.writeI32(this.seqNum);
            output.writeFieldEnd();
        }
        if (this.searchable != null) {
            output.writeFieldBegin("searchable", thrift.Thrift.Type.BOOL, 5);
            output.writeBool(this.searchable);
            output.writeFieldEnd();
        }
        if (this.columnType != null) {
            output.writeFieldBegin("columnType", thrift.Thrift.Type.I32, 6);
            output.writeI32(this.columnType);
            output.writeFieldEnd();
        }
        if (this.extId != null) {
            output.writeFieldBegin("extId", thrift.Thrift.Type.STRING, 7);
            output.writeString(this.extId);
            output.writeFieldEnd();
        }
        if (this.deleteDate != null) {
            output.writeFieldBegin("deleteDate", thrift.Thrift.Type.I64, 8);
            output.writeI64(this.deleteDate);
            output.writeFieldEnd();
        }
        if (this.uniqVal != null) {
            output.writeFieldBegin("uniqVal", thrift.Thrift.Type.BOOL, 9);
            output.writeBool(this.uniqVal);
            output.writeFieldEnd();
        }
        if (this.columnKey != null) {
            output.writeFieldBegin("columnKey", thrift.Thrift.Type.STRING, 10);
            output.writeString(this.columnKey);
            output.writeFieldEnd();
        }
        if (this.depHandBook != null) {
            output.writeFieldBegin("depHandBook", thrift.Thrift.Type.STRUCT, 11);
            this.depHandBook.write(output);
            output.writeFieldEnd();
        }
        if (this.depColumnId != null) {
            output.writeFieldBegin("depColumnId", thrift.Thrift.Type.STRING, 12);
            output.writeString(this.depColumnId);
            output.writeFieldEnd();
        }
        if (this.orderRule != null) {
            output.writeFieldBegin("orderRule", thrift.Thrift.Type.I32, 13);
            output.writeI32(this.orderRule);
            output.writeFieldEnd();
        }
        if (this.oNameLoc != null) {
            output.writeFieldBegin("oNameLoc", thrift.Thrift.Type.MAP, 14);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.oNameLoc.size);
            this.oNameLoc.forEach((value_1: string, key_1: string): void => {
                output.writeString(key_1);
                output.writeString(value_1);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.uuid != null) {
            output.writeFieldBegin("uuid", thrift.Thrift.Type.STRING, 15);
            output.writeString(this.uuid);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): HBColumn {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.id = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.oName = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_4: boolean = input.readBool();
                        _args.requiredColumn = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_5: number = input.readI32();
                        _args.seqNum = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_6: boolean = input.readBool();
                        _args.searchable = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_7: HBColumnType.HBColumnType = input.readI32();
                        _args.columnType = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_8: string = input.readString();
                        _args.extId = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_9: Int64 = input.readI64();
                        _args.deleteDate = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_10: boolean = input.readBool();
                        _args.uniqVal = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_11: string = input.readString();
                        _args.columnKey = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_12: HandBook.HandBook = HandBook.HandBook.read(input);
                        _args.depHandBook = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_13: string = input.readString();
                        _args.depColumnId = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_14: HBColumnOrderType.HBColumnOrderType = input.readI32();
                        _args.orderRule = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_15: Map<string, string> = new Map<string, string>();
                        const metadata_1: thrift.TMap = input.readMapBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const key_2: string = input.readString();
                            const value_16: string = input.readString();
                            value_15.set(key_2, value_16);
                        }
                        input.readMapEnd();
                        _args.oNameLoc = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_17: string = input.readString();
                        _args.uuid = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new HBColumn(_args);
    }
}

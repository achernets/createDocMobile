/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as ContentItemValue from "./ContentItemValue";
import * as ContentItemType from "./ContentItemType";
import * as ContentItemShowType from "./ContentItemShowType";
import * as ContentItemShowPlace from "./ContentItemShowPlace";
import * as __ROOT_NAMESPACE__ from "./";
import * as ContentTableDefinition from "./ContentTableDefinition";
import * as Attachment from "./Attachment";
import * as ContentItemHBFilter from "./ContentItemHBFilter";
export interface IContentItemArgs {
    id?: string;
    oName?: string;
    value?: ContentItemValue.ContentItemValue;
    type?: ContentItemType.ContentItemType;
    search?: boolean;
    requared?: boolean;
    readOnly?: boolean;
    order?: number;
    descriptionContItem?: string;
    showType?: ContentItemShowType.ContentItemShowType;
    tabId?: string;
    key?: string;
    showPlace?: ContentItemShowPlace.ContentItemShowPlace;
    handBookId?: string;
    users?: Array<__ROOT_NAMESPACE__.UserOrGroup>;
    tableDefenition?: ContentTableDefinition.ContentTableDefinition;
    tableKey?: string;
    rowNumber?: number;
    childItems?: Array<ContentItem>;
    availableUsers?: Array<__ROOT_NAMESPACE__.UserOrGroup>;
    tMask?: string;
    listView?: boolean;
    visible?: boolean;
    visibleScript?: string;
    readonlyScript?: string;
    onChangeScript?: string;
    fields?: Array<string>;
    attributes?: string;
    tMaskDesc?: string;
    displayedName?: string;
    department?: __ROOT_NAMESPACE__.Department;
    attachment?: Attachment.Attachment;
    quickFill?: boolean;
    onlyActiveUser?: boolean;
    maxUserCount?: number;
    itemHBFilterList?: Array<ContentItemHBFilter.ContentItemHBFilter>;
    handBook?: __ROOT_NAMESPACE__.HandBook;
    columnSelector?: number;
    oNameLoc?: Map<string, string>;
    descriptionContItemLoc?: Map<string, string>;
    tableChildContentsToRemove?: Array<string>;
    originalKey?: string;
    canRemove?: boolean;
    useByReplace?: boolean;
}
export class ContentItem {
    public id?: string;
    public oName?: string;
    public value?: ContentItemValue.ContentItemValue;
    public type?: ContentItemType.ContentItemType;
    public search?: boolean;
    public requared?: boolean;
    public readOnly?: boolean;
    public order?: number;
    public descriptionContItem?: string;
    public showType?: ContentItemShowType.ContentItemShowType;
    public tabId?: string;
    public key?: string;
    public showPlace?: ContentItemShowPlace.ContentItemShowPlace;
    public handBookId?: string;
    public users?: Array<__ROOT_NAMESPACE__.UserOrGroup>;
    public tableDefenition?: ContentTableDefinition.ContentTableDefinition;
    public tableKey?: string;
    public rowNumber?: number;
    public childItems?: Array<ContentItem>;
    public availableUsers?: Array<__ROOT_NAMESPACE__.UserOrGroup>;
    public tMask?: string;
    public listView?: boolean;
    public visible?: boolean;
    public visibleScript?: string;
    public readonlyScript?: string;
    public onChangeScript?: string;
    public fields?: Array<string>;
    public attributes?: string;
    public tMaskDesc?: string;
    public displayedName?: string;
    public department?: __ROOT_NAMESPACE__.Department;
    public attachment?: Attachment.Attachment;
    public quickFill?: boolean;
    public onlyActiveUser?: boolean;
    public maxUserCount?: number;
    public itemHBFilterList?: Array<ContentItemHBFilter.ContentItemHBFilter>;
    public handBook?: __ROOT_NAMESPACE__.HandBook;
    public columnSelector?: number;
    public oNameLoc?: Map<string, string>;
    public descriptionContItemLoc?: Map<string, string>;
    public tableChildContentsToRemove?: Array<string>;
    public originalKey?: string;
    public canRemove?: boolean;
    public useByReplace?: boolean;
    constructor(args?: IContentItemArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.oName != null) {
            this.oName = args.oName;
        }
        if (args != null && args.value != null) {
            this.value = args.value;
        }
        if (args != null && args.type != null) {
            this.type = args.type;
        }
        if (args != null && args.search != null) {
            this.search = args.search;
        }
        if (args != null && args.requared != null) {
            this.requared = args.requared;
        }
        if (args != null && args.readOnly != null) {
            this.readOnly = args.readOnly;
        }
        if (args != null && args.order != null) {
            this.order = args.order;
        }
        if (args != null && args.descriptionContItem != null) {
            this.descriptionContItem = args.descriptionContItem;
        }
        if (args != null && args.showType != null) {
            this.showType = args.showType;
        }
        if (args != null && args.tabId != null) {
            this.tabId = args.tabId;
        }
        if (args != null && args.key != null) {
            this.key = args.key;
        }
        if (args != null && args.showPlace != null) {
            this.showPlace = args.showPlace;
        }
        if (args != null && args.handBookId != null) {
            this.handBookId = args.handBookId;
        }
        if (args != null && args.users != null) {
            this.users = args.users;
        }
        if (args != null && args.tableDefenition != null) {
            this.tableDefenition = args.tableDefenition;
        }
        if (args != null && args.tableKey != null) {
            this.tableKey = args.tableKey;
        }
        if (args != null && args.rowNumber != null) {
            this.rowNumber = args.rowNumber;
        }
        if (args != null && args.childItems != null) {
            this.childItems = args.childItems;
        }
        if (args != null && args.availableUsers != null) {
            this.availableUsers = args.availableUsers;
        }
        if (args != null && args.tMask != null) {
            this.tMask = args.tMask;
        }
        if (args != null && args.listView != null) {
            this.listView = args.listView;
        }
        if (args != null && args.visible != null) {
            this.visible = args.visible;
        }
        if (args != null && args.visibleScript != null) {
            this.visibleScript = args.visibleScript;
        }
        if (args != null && args.readonlyScript != null) {
            this.readonlyScript = args.readonlyScript;
        }
        if (args != null && args.onChangeScript != null) {
            this.onChangeScript = args.onChangeScript;
        }
        if (args != null && args.fields != null) {
            this.fields = args.fields;
        }
        if (args != null && args.attributes != null) {
            this.attributes = args.attributes;
        }
        if (args != null && args.tMaskDesc != null) {
            this.tMaskDesc = args.tMaskDesc;
        }
        if (args != null && args.displayedName != null) {
            this.displayedName = args.displayedName;
        }
        if (args != null && args.department != null) {
            this.department = args.department;
        }
        if (args != null && args.attachment != null) {
            this.attachment = args.attachment;
        }
        if (args != null && args.quickFill != null) {
            this.quickFill = args.quickFill;
        }
        if (args != null && args.onlyActiveUser != null) {
            this.onlyActiveUser = args.onlyActiveUser;
        }
        if (args != null && args.maxUserCount != null) {
            this.maxUserCount = args.maxUserCount;
        }
        if (args != null && args.itemHBFilterList != null) {
            this.itemHBFilterList = args.itemHBFilterList;
        }
        if (args != null && args.handBook != null) {
            this.handBook = args.handBook;
        }
        if (args != null && args.columnSelector != null) {
            this.columnSelector = args.columnSelector;
        }
        if (args != null && args.oNameLoc != null) {
            this.oNameLoc = args.oNameLoc;
        }
        if (args != null && args.descriptionContItemLoc != null) {
            this.descriptionContItemLoc = args.descriptionContItemLoc;
        }
        if (args != null && args.tableChildContentsToRemove != null) {
            this.tableChildContentsToRemove = args.tableChildContentsToRemove;
        }
        if (args != null && args.originalKey != null) {
            this.originalKey = args.originalKey;
        }
        if (args != null && args.canRemove != null) {
            this.canRemove = args.canRemove;
        }
        if (args != null && args.useByReplace != null) {
            this.useByReplace = args.useByReplace;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ContentItem");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.oName != null) {
            output.writeFieldBegin("oName", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.oName);
            output.writeFieldEnd();
        }
        if (this.value != null) {
            output.writeFieldBegin("value", thrift.Thrift.Type.STRUCT, 3);
            this.value.write(output);
            output.writeFieldEnd();
        }
        if (this.type != null) {
            output.writeFieldBegin("type", thrift.Thrift.Type.I32, 4);
            output.writeI32(this.type);
            output.writeFieldEnd();
        }
        if (this.search != null) {
            output.writeFieldBegin("search", thrift.Thrift.Type.BOOL, 5);
            output.writeBool(this.search);
            output.writeFieldEnd();
        }
        if (this.requared != null) {
            output.writeFieldBegin("requared", thrift.Thrift.Type.BOOL, 6);
            output.writeBool(this.requared);
            output.writeFieldEnd();
        }
        if (this.readOnly != null) {
            output.writeFieldBegin("readOnly", thrift.Thrift.Type.BOOL, 7);
            output.writeBool(this.readOnly);
            output.writeFieldEnd();
        }
        if (this.order != null) {
            output.writeFieldBegin("order", thrift.Thrift.Type.I32, 8);
            output.writeI32(this.order);
            output.writeFieldEnd();
        }
        if (this.descriptionContItem != null) {
            output.writeFieldBegin("descriptionContItem", thrift.Thrift.Type.STRING, 9);
            output.writeString(this.descriptionContItem);
            output.writeFieldEnd();
        }
        if (this.showType != null) {
            output.writeFieldBegin("showType", thrift.Thrift.Type.I32, 10);
            output.writeI32(this.showType);
            output.writeFieldEnd();
        }
        if (this.tabId != null) {
            output.writeFieldBegin("tabId", thrift.Thrift.Type.STRING, 11);
            output.writeString(this.tabId);
            output.writeFieldEnd();
        }
        if (this.key != null) {
            output.writeFieldBegin("key", thrift.Thrift.Type.STRING, 12);
            output.writeString(this.key);
            output.writeFieldEnd();
        }
        if (this.showPlace != null) {
            output.writeFieldBegin("showPlace", thrift.Thrift.Type.I32, 13);
            output.writeI32(this.showPlace);
            output.writeFieldEnd();
        }
        if (this.handBookId != null) {
            output.writeFieldBegin("handBookId", thrift.Thrift.Type.STRING, 14);
            output.writeString(this.handBookId);
            output.writeFieldEnd();
        }
        if (this.users != null) {
            output.writeFieldBegin("users", thrift.Thrift.Type.LIST, 15);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.users.length);
            this.users.forEach((value_1: __ROOT_NAMESPACE__.UserOrGroup): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.tableDefenition != null) {
            output.writeFieldBegin("tableDefenition", thrift.Thrift.Type.STRUCT, 16);
            this.tableDefenition.write(output);
            output.writeFieldEnd();
        }
        if (this.tableKey != null) {
            output.writeFieldBegin("tableKey", thrift.Thrift.Type.STRING, 17);
            output.writeString(this.tableKey);
            output.writeFieldEnd();
        }
        if (this.rowNumber != null) {
            output.writeFieldBegin("rowNumber", thrift.Thrift.Type.I32, 18);
            output.writeI32(this.rowNumber);
            output.writeFieldEnd();
        }
        if (this.childItems != null) {
            output.writeFieldBegin("childItems", thrift.Thrift.Type.LIST, 19);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.childItems.length);
            this.childItems.forEach((value_2: ContentItem): void => {
                value_2.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.availableUsers != null) {
            output.writeFieldBegin("availableUsers", thrift.Thrift.Type.LIST, 20);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.availableUsers.length);
            this.availableUsers.forEach((value_3: __ROOT_NAMESPACE__.UserOrGroup): void => {
                value_3.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.tMask != null) {
            output.writeFieldBegin("tMask", thrift.Thrift.Type.STRING, 21);
            output.writeString(this.tMask);
            output.writeFieldEnd();
        }
        if (this.listView != null) {
            output.writeFieldBegin("listView", thrift.Thrift.Type.BOOL, 22);
            output.writeBool(this.listView);
            output.writeFieldEnd();
        }
        if (this.visible != null) {
            output.writeFieldBegin("visible", thrift.Thrift.Type.BOOL, 23);
            output.writeBool(this.visible);
            output.writeFieldEnd();
        }
        if (this.visibleScript != null) {
            output.writeFieldBegin("visibleScript", thrift.Thrift.Type.STRING, 24);
            output.writeString(this.visibleScript);
            output.writeFieldEnd();
        }
        if (this.readonlyScript != null) {
            output.writeFieldBegin("readonlyScript", thrift.Thrift.Type.STRING, 25);
            output.writeString(this.readonlyScript);
            output.writeFieldEnd();
        }
        if (this.onChangeScript != null) {
            output.writeFieldBegin("onChangeScript", thrift.Thrift.Type.STRING, 26);
            output.writeString(this.onChangeScript);
            output.writeFieldEnd();
        }
        if (this.fields != null) {
            output.writeFieldBegin("fields", thrift.Thrift.Type.LIST, 27);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.fields.length);
            this.fields.forEach((value_4: string): void => {
                output.writeString(value_4);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.attributes != null) {
            output.writeFieldBegin("attributes", thrift.Thrift.Type.STRING, 28);
            output.writeString(this.attributes);
            output.writeFieldEnd();
        }
        if (this.tMaskDesc != null) {
            output.writeFieldBegin("tMaskDesc", thrift.Thrift.Type.STRING, 29);
            output.writeString(this.tMaskDesc);
            output.writeFieldEnd();
        }
        if (this.displayedName != null) {
            output.writeFieldBegin("displayedName", thrift.Thrift.Type.STRING, 30);
            output.writeString(this.displayedName);
            output.writeFieldEnd();
        }
        if (this.department != null) {
            output.writeFieldBegin("department", thrift.Thrift.Type.STRUCT, 31);
            this.department.write(output);
            output.writeFieldEnd();
        }
        if (this.attachment != null) {
            output.writeFieldBegin("attachment", thrift.Thrift.Type.STRUCT, 32);
            this.attachment.write(output);
            output.writeFieldEnd();
        }
        if (this.quickFill != null) {
            output.writeFieldBegin("quickFill", thrift.Thrift.Type.BOOL, 33);
            output.writeBool(this.quickFill);
            output.writeFieldEnd();
        }
        if (this.onlyActiveUser != null) {
            output.writeFieldBegin("onlyActiveUser", thrift.Thrift.Type.BOOL, 34);
            output.writeBool(this.onlyActiveUser);
            output.writeFieldEnd();
        }
        if (this.maxUserCount != null) {
            output.writeFieldBegin("maxUserCount", thrift.Thrift.Type.I32, 35);
            output.writeI32(this.maxUserCount);
            output.writeFieldEnd();
        }
        if (this.itemHBFilterList != null) {
            output.writeFieldBegin("itemHBFilterList", thrift.Thrift.Type.LIST, 38);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.itemHBFilterList.length);
            this.itemHBFilterList.forEach((value_5: ContentItemHBFilter.ContentItemHBFilter): void => {
                value_5.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.handBook != null) {
            output.writeFieldBegin("handBook", thrift.Thrift.Type.STRUCT, 39);
            this.handBook.write(output);
            output.writeFieldEnd();
        }
        if (this.columnSelector != null) {
            output.writeFieldBegin("columnSelector", thrift.Thrift.Type.I32, 40);
            output.writeI32(this.columnSelector);
            output.writeFieldEnd();
        }
        if (this.oNameLoc != null) {
            output.writeFieldBegin("oNameLoc", thrift.Thrift.Type.MAP, 41);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.oNameLoc.size);
            this.oNameLoc.forEach((value_6: string, key_1: string): void => {
                output.writeString(key_1);
                output.writeString(value_6);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.descriptionContItemLoc != null) {
            output.writeFieldBegin("descriptionContItemLoc", thrift.Thrift.Type.MAP, 42);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.descriptionContItemLoc.size);
            this.descriptionContItemLoc.forEach((value_7: string, key_2: string): void => {
                output.writeString(key_2);
                output.writeString(value_7);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.tableChildContentsToRemove != null) {
            output.writeFieldBegin("tableChildContentsToRemove", thrift.Thrift.Type.LIST, 43);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.tableChildContentsToRemove.length);
            this.tableChildContentsToRemove.forEach((value_8: string): void => {
                output.writeString(value_8);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.originalKey != null) {
            output.writeFieldBegin("originalKey", thrift.Thrift.Type.STRING, 44);
            output.writeString(this.originalKey);
            output.writeFieldEnd();
        }
        if (this.canRemove != null) {
            output.writeFieldBegin("canRemove", thrift.Thrift.Type.BOOL, 45);
            output.writeBool(this.canRemove);
            output.writeFieldEnd();
        }
        if (this.useByReplace != null) {
            output.writeFieldBegin("useByReplace", thrift.Thrift.Type.BOOL, 46);
            output.writeBool(this.useByReplace);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ContentItem {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_9: string = input.readString();
                        _args.id = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_10: string = input.readString();
                        _args.oName = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_11: ContentItemValue.ContentItemValue = ContentItemValue.ContentItemValue.read(input);
                        _args.value = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_12: ContentItemType.ContentItemType = input.readI32();
                        _args.type = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_13: boolean = input.readBool();
                        _args.search = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_14: boolean = input.readBool();
                        _args.requared = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_15: boolean = input.readBool();
                        _args.readOnly = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_16: number = input.readI32();
                        _args.order = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_17: string = input.readString();
                        _args.descriptionContItem = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_18: ContentItemShowType.ContentItemShowType = input.readI32();
                        _args.showType = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_19: string = input.readString();
                        _args.tabId = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_20: string = input.readString();
                        _args.key = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_21: ContentItemShowPlace.ContentItemShowPlace = input.readI32();
                        _args.showPlace = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_22: string = input.readString();
                        _args.handBookId = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_23: Array<__ROOT_NAMESPACE__.UserOrGroup> = new Array<__ROOT_NAMESPACE__.UserOrGroup>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_24: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                            value_23.push(value_24);
                        }
                        input.readListEnd();
                        _args.users = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_25: ContentTableDefinition.ContentTableDefinition = ContentTableDefinition.ContentTableDefinition.read(input);
                        _args.tableDefenition = value_25;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 17:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_26: string = input.readString();
                        _args.tableKey = value_26;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 18:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_27: number = input.readI32();
                        _args.rowNumber = value_27;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 19:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_28: Array<ContentItem> = new Array<ContentItem>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_29: ContentItem = ContentItem.read(input);
                            value_28.push(value_29);
                        }
                        input.readListEnd();
                        _args.childItems = value_28;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 20:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_30: Array<__ROOT_NAMESPACE__.UserOrGroup> = new Array<__ROOT_NAMESPACE__.UserOrGroup>();
                        const metadata_3: thrift.TList = input.readListBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_31: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                            value_30.push(value_31);
                        }
                        input.readListEnd();
                        _args.availableUsers = value_30;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 21:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_32: string = input.readString();
                        _args.tMask = value_32;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 22:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_33: boolean = input.readBool();
                        _args.listView = value_33;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 23:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_34: boolean = input.readBool();
                        _args.visible = value_34;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 24:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_35: string = input.readString();
                        _args.visibleScript = value_35;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 25:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_36: string = input.readString();
                        _args.readonlyScript = value_36;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 26:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_37: string = input.readString();
                        _args.onChangeScript = value_37;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 27:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_38: Array<string> = new Array<string>();
                        const metadata_4: thrift.TList = input.readListBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const value_39: string = input.readString();
                            value_38.push(value_39);
                        }
                        input.readListEnd();
                        _args.fields = value_38;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 28:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_40: string = input.readString();
                        _args.attributes = value_40;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 29:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_41: string = input.readString();
                        _args.tMaskDesc = value_41;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 30:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_42: string = input.readString();
                        _args.displayedName = value_42;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 31:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_43: __ROOT_NAMESPACE__.Department = __ROOT_NAMESPACE__.Department.read(input);
                        _args.department = value_43;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 32:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_44: Attachment.Attachment = Attachment.Attachment.read(input);
                        _args.attachment = value_44;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 33:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_45: boolean = input.readBool();
                        _args.quickFill = value_45;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 34:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_46: boolean = input.readBool();
                        _args.onlyActiveUser = value_46;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 35:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_47: number = input.readI32();
                        _args.maxUserCount = value_47;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 38:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_48: Array<ContentItemHBFilter.ContentItemHBFilter> = new Array<ContentItemHBFilter.ContentItemHBFilter>();
                        const metadata_5: thrift.TList = input.readListBegin();
                        const size_5: number = metadata_5.size;
                        for (let i_5: number = 0; i_5 < size_5; i_5++) {
                            const value_49: ContentItemHBFilter.ContentItemHBFilter = ContentItemHBFilter.ContentItemHBFilter.read(input);
                            value_48.push(value_49);
                        }
                        input.readListEnd();
                        _args.itemHBFilterList = value_48;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 39:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_50: __ROOT_NAMESPACE__.HandBook = __ROOT_NAMESPACE__.HandBook.read(input);
                        _args.handBook = value_50;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 40:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_51: number = input.readI32();
                        _args.columnSelector = value_51;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 41:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_52: Map<string, string> = new Map<string, string>();
                        const metadata_6: thrift.TMap = input.readMapBegin();
                        const size_6: number = metadata_6.size;
                        for (let i_6: number = 0; i_6 < size_6; i_6++) {
                            const key_3: string = input.readString();
                            const value_53: string = input.readString();
                            value_52.set(key_3, value_53);
                        }
                        input.readMapEnd();
                        _args.oNameLoc = value_52;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 42:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_54: Map<string, string> = new Map<string, string>();
                        const metadata_7: thrift.TMap = input.readMapBegin();
                        const size_7: number = metadata_7.size;
                        for (let i_7: number = 0; i_7 < size_7; i_7++) {
                            const key_4: string = input.readString();
                            const value_55: string = input.readString();
                            value_54.set(key_4, value_55);
                        }
                        input.readMapEnd();
                        _args.descriptionContItemLoc = value_54;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 43:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_56: Array<string> = new Array<string>();
                        const metadata_8: thrift.TList = input.readListBegin();
                        const size_8: number = metadata_8.size;
                        for (let i_8: number = 0; i_8 < size_8; i_8++) {
                            const value_57: string = input.readString();
                            value_56.push(value_57);
                        }
                        input.readListEnd();
                        _args.tableChildContentsToRemove = value_56;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 44:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_58: string = input.readString();
                        _args.originalKey = value_58;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 45:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_59: boolean = input.readBool();
                        _args.canRemove = value_59;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 46:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_60: boolean = input.readBool();
                        _args.useByReplace = value_60;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ContentItem(_args);
    }
}

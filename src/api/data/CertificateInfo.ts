/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import { Int64 } from "thrift";
import * as thrift from "thrift";
import * as KeyState from "./KeyState";
export interface ICertificateInfoArgs {
    serialNumber?: string;
    legalNumber?: string;
    individualNumber?: string;
    issuerDN?: string;
    subjectDN?: string;
    signDate?: number | Int64;
    beforeDate?: number | Int64;
    afterDate?: number | Int64;
    signature?: string;
    email?: string;
    organization?: string;
    fullName?: string;
    base64PublicKey?: string;
    keyState?: KeyState.KeyState;
    keyUsage?: Array<string>;
}
export class CertificateInfo {
    public serialNumber?: string;
    public legalNumber?: string;
    public individualNumber?: string;
    public issuerDN?: string;
    public subjectDN?: string;
    public signDate?: Int64;
    public beforeDate?: Int64;
    public afterDate?: Int64;
    public signature?: string;
    public email?: string;
    public organization?: string;
    public fullName?: string;
    public base64PublicKey?: string;
    public keyState?: KeyState.KeyState;
    public keyUsage?: Array<string>;
    constructor(args?: ICertificateInfoArgs) {
        if (args != null && args.serialNumber != null) {
            this.serialNumber = args.serialNumber;
        }
        if (args != null && args.legalNumber != null) {
            this.legalNumber = args.legalNumber;
        }
        if (args != null && args.individualNumber != null) {
            this.individualNumber = args.individualNumber;
        }
        if (args != null && args.issuerDN != null) {
            this.issuerDN = args.issuerDN;
        }
        if (args != null && args.subjectDN != null) {
            this.subjectDN = args.subjectDN;
        }
        if (args != null && args.signDate != null) {
            if (typeof args.signDate === "number") {
                this.signDate = new Int64(args.signDate);
            }
            else {
                this.signDate = args.signDate;
            }
        }
        if (args != null && args.beforeDate != null) {
            if (typeof args.beforeDate === "number") {
                this.beforeDate = new Int64(args.beforeDate);
            }
            else {
                this.beforeDate = args.beforeDate;
            }
        }
        if (args != null && args.afterDate != null) {
            if (typeof args.afterDate === "number") {
                this.afterDate = new Int64(args.afterDate);
            }
            else {
                this.afterDate = args.afterDate;
            }
        }
        if (args != null && args.signature != null) {
            this.signature = args.signature;
        }
        if (args != null && args.email != null) {
            this.email = args.email;
        }
        if (args != null && args.organization != null) {
            this.organization = args.organization;
        }
        if (args != null && args.fullName != null) {
            this.fullName = args.fullName;
        }
        if (args != null && args.base64PublicKey != null) {
            this.base64PublicKey = args.base64PublicKey;
        }
        if (args != null && args.keyState != null) {
            this.keyState = args.keyState;
        }
        if (args != null && args.keyUsage != null) {
            this.keyUsage = args.keyUsage;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CertificateInfo");
        if (this.serialNumber != null) {
            output.writeFieldBegin("serialNumber", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.serialNumber);
            output.writeFieldEnd();
        }
        if (this.legalNumber != null) {
            output.writeFieldBegin("legalNumber", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.legalNumber);
            output.writeFieldEnd();
        }
        if (this.individualNumber != null) {
            output.writeFieldBegin("individualNumber", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.individualNumber);
            output.writeFieldEnd();
        }
        if (this.issuerDN != null) {
            output.writeFieldBegin("issuerDN", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.issuerDN);
            output.writeFieldEnd();
        }
        if (this.subjectDN != null) {
            output.writeFieldBegin("subjectDN", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.subjectDN);
            output.writeFieldEnd();
        }
        if (this.signDate != null) {
            output.writeFieldBegin("signDate", thrift.Thrift.Type.I64, 6);
            output.writeI64(this.signDate);
            output.writeFieldEnd();
        }
        if (this.beforeDate != null) {
            output.writeFieldBegin("beforeDate", thrift.Thrift.Type.I64, 7);
            output.writeI64(this.beforeDate);
            output.writeFieldEnd();
        }
        if (this.afterDate != null) {
            output.writeFieldBegin("afterDate", thrift.Thrift.Type.I64, 8);
            output.writeI64(this.afterDate);
            output.writeFieldEnd();
        }
        if (this.signature != null) {
            output.writeFieldBegin("signature", thrift.Thrift.Type.STRING, 9);
            output.writeString(this.signature);
            output.writeFieldEnd();
        }
        if (this.email != null) {
            output.writeFieldBegin("email", thrift.Thrift.Type.STRING, 10);
            output.writeString(this.email);
            output.writeFieldEnd();
        }
        if (this.organization != null) {
            output.writeFieldBegin("organization", thrift.Thrift.Type.STRING, 11);
            output.writeString(this.organization);
            output.writeFieldEnd();
        }
        if (this.fullName != null) {
            output.writeFieldBegin("fullName", thrift.Thrift.Type.STRING, 12);
            output.writeString(this.fullName);
            output.writeFieldEnd();
        }
        if (this.base64PublicKey != null) {
            output.writeFieldBegin("base64PublicKey", thrift.Thrift.Type.STRING, 13);
            output.writeString(this.base64PublicKey);
            output.writeFieldEnd();
        }
        if (this.keyState != null) {
            output.writeFieldBegin("keyState", thrift.Thrift.Type.I32, 14);
            output.writeI32(this.keyState);
            output.writeFieldEnd();
        }
        if (this.keyUsage != null) {
            output.writeFieldBegin("keyUsage", thrift.Thrift.Type.LIST, 15);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.keyUsage.length);
            this.keyUsage.forEach((value_1: string): void => {
                output.writeString(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CertificateInfo {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.serialNumber = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.legalNumber = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.individualNumber = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.issuerDN = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.subjectDN = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_7: Int64 = input.readI64();
                        _args.signDate = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_8: Int64 = input.readI64();
                        _args.beforeDate = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_9: Int64 = input.readI64();
                        _args.afterDate = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_10: string = input.readString();
                        _args.signature = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_11: string = input.readString();
                        _args.email = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_12: string = input.readString();
                        _args.organization = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_13: string = input.readString();
                        _args.fullName = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_14: string = input.readString();
                        _args.base64PublicKey = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_15: KeyState.KeyState = input.readI32();
                        _args.keyState = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_16: Array<string> = new Array<string>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_17: string = input.readString();
                            value_16.push(value_17);
                        }
                        input.readListEnd();
                        _args.keyUsage = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new CertificateInfo(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as __ROOT_NAMESPACE__ from "./";
export interface ICustomFilterItemArgs {
    id?: string;
    field?: string;
    fType?: __ROOT_NAMESPACE__.FilterFieldType;
    condition?: __ROOT_NAMESPACE__.FilterCondition;
    value?: string;
    useObject?: boolean;
}
export class CustomFilterItem {
    public id?: string;
    public field?: string;
    public fType?: __ROOT_NAMESPACE__.FilterFieldType;
    public condition?: __ROOT_NAMESPACE__.FilterCondition;
    public value?: string;
    public useObject?: boolean;
    constructor(args?: ICustomFilterItemArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.field != null) {
            this.field = args.field;
        }
        if (args != null && args.fType != null) {
            this.fType = args.fType;
        }
        if (args != null && args.condition != null) {
            this.condition = args.condition;
        }
        if (args != null && args.value != null) {
            this.value = args.value;
        }
        if (args != null && args.useObject != null) {
            this.useObject = args.useObject;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CustomFilterItem");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.field != null) {
            output.writeFieldBegin("field", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.field);
            output.writeFieldEnd();
        }
        if (this.fType != null) {
            output.writeFieldBegin("fType", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.fType);
            output.writeFieldEnd();
        }
        if (this.condition != null) {
            output.writeFieldBegin("condition", thrift.Thrift.Type.I32, 4);
            output.writeI32(this.condition);
            output.writeFieldEnd();
        }
        if (this.value != null) {
            output.writeFieldBegin("value", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.value);
            output.writeFieldEnd();
        }
        if (this.useObject != null) {
            output.writeFieldBegin("useObject", thrift.Thrift.Type.BOOL, 6);
            output.writeBool(this.useObject);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CustomFilterItem {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.id = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.field = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_3: __ROOT_NAMESPACE__.FilterFieldType = input.readI32();
                        _args.fType = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_4: __ROOT_NAMESPACE__.FilterCondition = input.readI32();
                        _args.condition = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.value = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_6: boolean = input.readBool();
                        _args.useObject = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new CustomFilterItem(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface INotificationConfigArgs {
    key?: string;
    caption?: string;
    allowedForUser?: Map<string, boolean>;
    selectedForUser?: Map<string, boolean>;
    selectedForDelegate?: Map<string, boolean>;
}
export class NotificationConfig {
    public key?: string;
    public caption?: string;
    public allowedForUser?: Map<string, boolean>;
    public selectedForUser?: Map<string, boolean>;
    public selectedForDelegate?: Map<string, boolean>;
    constructor(args?: INotificationConfigArgs) {
        if (args != null && args.key != null) {
            this.key = args.key;
        }
        if (args != null && args.caption != null) {
            this.caption = args.caption;
        }
        if (args != null && args.allowedForUser != null) {
            this.allowedForUser = args.allowedForUser;
        }
        if (args != null && args.selectedForUser != null) {
            this.selectedForUser = args.selectedForUser;
        }
        if (args != null && args.selectedForDelegate != null) {
            this.selectedForDelegate = args.selectedForDelegate;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("NotificationConfig");
        if (this.key != null) {
            output.writeFieldBegin("key", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.key);
            output.writeFieldEnd();
        }
        if (this.caption != null) {
            output.writeFieldBegin("caption", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.caption);
            output.writeFieldEnd();
        }
        if (this.allowedForUser != null) {
            output.writeFieldBegin("allowedForUser", thrift.Thrift.Type.MAP, 3);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.BOOL, this.allowedForUser.size);
            this.allowedForUser.forEach((value_1: boolean, key_1: string): void => {
                output.writeString(key_1);
                output.writeBool(value_1);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.selectedForUser != null) {
            output.writeFieldBegin("selectedForUser", thrift.Thrift.Type.MAP, 4);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.BOOL, this.selectedForUser.size);
            this.selectedForUser.forEach((value_2: boolean, key_2: string): void => {
                output.writeString(key_2);
                output.writeBool(value_2);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.selectedForDelegate != null) {
            output.writeFieldBegin("selectedForDelegate", thrift.Thrift.Type.MAP, 5);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.BOOL, this.selectedForDelegate.size);
            this.selectedForDelegate.forEach((value_3: boolean, key_3: string): void => {
                output.writeString(key_3);
                output.writeBool(value_3);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): NotificationConfig {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.key = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.caption = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_6: Map<string, boolean> = new Map<string, boolean>();
                        const metadata_1: thrift.TMap = input.readMapBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const key_4: string = input.readString();
                            const value_7: boolean = input.readBool();
                            value_6.set(key_4, value_7);
                        }
                        input.readMapEnd();
                        _args.allowedForUser = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_8: Map<string, boolean> = new Map<string, boolean>();
                        const metadata_2: thrift.TMap = input.readMapBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const key_5: string = input.readString();
                            const value_9: boolean = input.readBool();
                            value_8.set(key_5, value_9);
                        }
                        input.readMapEnd();
                        _args.selectedForUser = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_10: Map<string, boolean> = new Map<string, boolean>();
                        const metadata_3: thrift.TMap = input.readMapBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const key_6: string = input.readString();
                            const value_11: boolean = input.readBool();
                            value_10.set(key_6, value_11);
                        }
                        input.readMapEnd();
                        _args.selectedForDelegate = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new NotificationConfig(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as __ROOT_NAMESPACE__ from "./";
export interface IClientDelegateInfoArgs {
    id?: string;
    fromUserId?: __ROOT_NAMESPACE__.UserOrGroup;
    toUserId?: __ROOT_NAMESPACE__.UserOrGroup;
    actualDelegatesCount?: number;
    futureDelegatesCount?: number;
    delegateRoles?: boolean;
    delegateSC?: boolean;
    delegateRegistry?: boolean;
}
export class ClientDelegateInfo {
    public id?: string;
    public fromUserId?: __ROOT_NAMESPACE__.UserOrGroup;
    public toUserId?: __ROOT_NAMESPACE__.UserOrGroup;
    public actualDelegatesCount?: number;
    public futureDelegatesCount?: number;
    public delegateRoles?: boolean;
    public delegateSC?: boolean;
    public delegateRegistry?: boolean;
    constructor(args?: IClientDelegateInfoArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.fromUserId != null) {
            this.fromUserId = args.fromUserId;
        }
        if (args != null && args.toUserId != null) {
            this.toUserId = args.toUserId;
        }
        if (args != null && args.actualDelegatesCount != null) {
            this.actualDelegatesCount = args.actualDelegatesCount;
        }
        if (args != null && args.futureDelegatesCount != null) {
            this.futureDelegatesCount = args.futureDelegatesCount;
        }
        if (args != null && args.delegateRoles != null) {
            this.delegateRoles = args.delegateRoles;
        }
        if (args != null && args.delegateSC != null) {
            this.delegateSC = args.delegateSC;
        }
        if (args != null && args.delegateRegistry != null) {
            this.delegateRegistry = args.delegateRegistry;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ClientDelegateInfo");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.fromUserId != null) {
            output.writeFieldBegin("fromUserId", thrift.Thrift.Type.STRUCT, 2);
            this.fromUserId.write(output);
            output.writeFieldEnd();
        }
        if (this.toUserId != null) {
            output.writeFieldBegin("toUserId", thrift.Thrift.Type.STRUCT, 3);
            this.toUserId.write(output);
            output.writeFieldEnd();
        }
        if (this.actualDelegatesCount != null) {
            output.writeFieldBegin("actualDelegatesCount", thrift.Thrift.Type.I32, 4);
            output.writeI32(this.actualDelegatesCount);
            output.writeFieldEnd();
        }
        if (this.futureDelegatesCount != null) {
            output.writeFieldBegin("futureDelegatesCount", thrift.Thrift.Type.I32, 5);
            output.writeI32(this.futureDelegatesCount);
            output.writeFieldEnd();
        }
        if (this.delegateRoles != null) {
            output.writeFieldBegin("delegateRoles", thrift.Thrift.Type.BOOL, 6);
            output.writeBool(this.delegateRoles);
            output.writeFieldEnd();
        }
        if (this.delegateSC != null) {
            output.writeFieldBegin("delegateSC", thrift.Thrift.Type.BOOL, 7);
            output.writeBool(this.delegateSC);
            output.writeFieldEnd();
        }
        if (this.delegateRegistry != null) {
            output.writeFieldBegin("delegateRegistry", thrift.Thrift.Type.BOOL, 8);
            output.writeBool(this.delegateRegistry);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ClientDelegateInfo {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.id = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                        _args.fromUserId = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_3: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                        _args.toUserId = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_4: number = input.readI32();
                        _args.actualDelegatesCount = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_5: number = input.readI32();
                        _args.futureDelegatesCount = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_6: boolean = input.readBool();
                        _args.delegateRoles = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_7: boolean = input.readBool();
                        _args.delegateSC = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_8: boolean = input.readBool();
                        _args.delegateRegistry = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ClientDelegateInfo(_args);
    }
}

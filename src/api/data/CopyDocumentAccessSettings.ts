/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import { Int64 } from "thrift";
import * as thrift from "thrift";
import * as CopyDocumentAccessSettingDetail from "./CopyDocumentAccessSettingDetail";
export interface ICopyDocumentAccessSettingsArgs {
    forAllTime?: boolean;
    dateStart?: number | Int64;
    dateEnd?: number | Int64;
    details?: Array<CopyDocumentAccessSettingDetail.CopyDocumentAccessSettingDetail>;
}
export class CopyDocumentAccessSettings {
    public forAllTime?: boolean;
    public dateStart?: Int64;
    public dateEnd?: Int64;
    public details?: Array<CopyDocumentAccessSettingDetail.CopyDocumentAccessSettingDetail>;
    constructor(args?: ICopyDocumentAccessSettingsArgs) {
        if (args != null && args.forAllTime != null) {
            this.forAllTime = args.forAllTime;
        }
        if (args != null && args.dateStart != null) {
            if (typeof args.dateStart === "number") {
                this.dateStart = new Int64(args.dateStart);
            }
            else {
                this.dateStart = args.dateStart;
            }
        }
        if (args != null && args.dateEnd != null) {
            if (typeof args.dateEnd === "number") {
                this.dateEnd = new Int64(args.dateEnd);
            }
            else {
                this.dateEnd = args.dateEnd;
            }
        }
        if (args != null && args.details != null) {
            this.details = args.details;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CopyDocumentAccessSettings");
        if (this.forAllTime != null) {
            output.writeFieldBegin("forAllTime", thrift.Thrift.Type.BOOL, 1);
            output.writeBool(this.forAllTime);
            output.writeFieldEnd();
        }
        if (this.dateStart != null) {
            output.writeFieldBegin("dateStart", thrift.Thrift.Type.I64, 2);
            output.writeI64(this.dateStart);
            output.writeFieldEnd();
        }
        if (this.dateEnd != null) {
            output.writeFieldBegin("dateEnd", thrift.Thrift.Type.I64, 3);
            output.writeI64(this.dateEnd);
            output.writeFieldEnd();
        }
        if (this.details != null) {
            output.writeFieldBegin("details", thrift.Thrift.Type.LIST, 4);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.details.length);
            this.details.forEach((value_1: CopyDocumentAccessSettingDetail.CopyDocumentAccessSettingDetail): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CopyDocumentAccessSettings {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_2: boolean = input.readBool();
                        _args.forAllTime = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_3: Int64 = input.readI64();
                        _args.dateStart = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_4: Int64 = input.readI64();
                        _args.dateEnd = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_5: Array<CopyDocumentAccessSettingDetail.CopyDocumentAccessSettingDetail> = new Array<CopyDocumentAccessSettingDetail.CopyDocumentAccessSettingDetail>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_6: CopyDocumentAccessSettingDetail.CopyDocumentAccessSettingDetail = CopyDocumentAccessSettingDetail.CopyDocumentAccessSettingDetail.read(input);
                            value_5.push(value_6);
                        }
                        input.readListEnd();
                        _args.details = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new CopyDocumentAccessSettings(_args);
    }
}

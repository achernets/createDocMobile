/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import { Int64 } from "thrift";
import * as thrift from "thrift";
import * as DocRelationType from "./DocRelationType";
import * as DocPatternStageStatus from "./DocPatternStageStatus";
import * as DocPatternStageSubStatus from "./DocPatternStageSubStatus";
import * as DocPatternStageActionType from "./DocPatternStageActionType";
import * as DocumentIconType from "./DocumentIconType";
export interface IDocumentRelationArgs {
    id?: string;
    createDate?: number | Int64;
    docId1?: string;
    docId2?: string;
    createDoc2Date?: number | Int64;
    doc2Name?: string;
    doc2Number?: string;
    doc2SystemNumber?: string;
    doc2Access?: boolean;
    relationType?: DocRelationType.DocRelationType;
    doc2Status?: DocPatternStageStatus.DocPatternStageStatus;
    doc2SubStatus?: DocPatternStageSubStatus.DocPatternStageSubStatus;
    doc2DeadlineDate?: number | Int64;
    doc2CardDeadlineDate?: number | Int64;
    resolution?: string;
    doc2ActionType?: Map<string, DocPatternStageActionType.DocPatternStageActionType>;
    doc2HasConfirmationCard?: boolean;
    doc2Icon?: DocumentIconType.DocumentIconType;
    doc2PatternName?: string;
    doc2PatternGroupName?: string;
    doc2StageName?: string;
    doc2RegDate?: number | Int64;
}
export class DocumentRelation {
    public id?: string;
    public createDate?: Int64;
    public docId1?: string;
    public docId2?: string;
    public createDoc2Date?: Int64;
    public doc2Name?: string;
    public doc2Number?: string;
    public doc2SystemNumber?: string;
    public doc2Access?: boolean;
    public relationType?: DocRelationType.DocRelationType;
    public doc2Status?: DocPatternStageStatus.DocPatternStageStatus;
    public doc2SubStatus?: DocPatternStageSubStatus.DocPatternStageSubStatus;
    public doc2DeadlineDate?: Int64;
    public doc2CardDeadlineDate?: Int64;
    public resolution?: string;
    public doc2ActionType?: Map<string, DocPatternStageActionType.DocPatternStageActionType>;
    public doc2HasConfirmationCard?: boolean;
    public doc2Icon?: DocumentIconType.DocumentIconType;
    public doc2PatternName?: string;
    public doc2PatternGroupName?: string;
    public doc2StageName?: string;
    public doc2RegDate?: Int64;
    constructor(args?: IDocumentRelationArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.createDate != null) {
            if (typeof args.createDate === "number") {
                this.createDate = new Int64(args.createDate);
            }
            else {
                this.createDate = args.createDate;
            }
        }
        if (args != null && args.docId1 != null) {
            this.docId1 = args.docId1;
        }
        if (args != null && args.docId2 != null) {
            this.docId2 = args.docId2;
        }
        if (args != null && args.createDoc2Date != null) {
            if (typeof args.createDoc2Date === "number") {
                this.createDoc2Date = new Int64(args.createDoc2Date);
            }
            else {
                this.createDoc2Date = args.createDoc2Date;
            }
        }
        if (args != null && args.doc2Name != null) {
            this.doc2Name = args.doc2Name;
        }
        if (args != null && args.doc2Number != null) {
            this.doc2Number = args.doc2Number;
        }
        if (args != null && args.doc2SystemNumber != null) {
            this.doc2SystemNumber = args.doc2SystemNumber;
        }
        if (args != null && args.doc2Access != null) {
            this.doc2Access = args.doc2Access;
        }
        if (args != null && args.relationType != null) {
            this.relationType = args.relationType;
        }
        if (args != null && args.doc2Status != null) {
            this.doc2Status = args.doc2Status;
        }
        if (args != null && args.doc2SubStatus != null) {
            this.doc2SubStatus = args.doc2SubStatus;
        }
        if (args != null && args.doc2DeadlineDate != null) {
            if (typeof args.doc2DeadlineDate === "number") {
                this.doc2DeadlineDate = new Int64(args.doc2DeadlineDate);
            }
            else {
                this.doc2DeadlineDate = args.doc2DeadlineDate;
            }
        }
        if (args != null && args.doc2CardDeadlineDate != null) {
            if (typeof args.doc2CardDeadlineDate === "number") {
                this.doc2CardDeadlineDate = new Int64(args.doc2CardDeadlineDate);
            }
            else {
                this.doc2CardDeadlineDate = args.doc2CardDeadlineDate;
            }
        }
        if (args != null && args.resolution != null) {
            this.resolution = args.resolution;
        }
        if (args != null && args.doc2ActionType != null) {
            this.doc2ActionType = args.doc2ActionType;
        }
        if (args != null && args.doc2HasConfirmationCard != null) {
            this.doc2HasConfirmationCard = args.doc2HasConfirmationCard;
        }
        if (args != null && args.doc2Icon != null) {
            this.doc2Icon = args.doc2Icon;
        }
        if (args != null && args.doc2PatternName != null) {
            this.doc2PatternName = args.doc2PatternName;
        }
        if (args != null && args.doc2PatternGroupName != null) {
            this.doc2PatternGroupName = args.doc2PatternGroupName;
        }
        if (args != null && args.doc2StageName != null) {
            this.doc2StageName = args.doc2StageName;
        }
        if (args != null && args.doc2RegDate != null) {
            if (typeof args.doc2RegDate === "number") {
                this.doc2RegDate = new Int64(args.doc2RegDate);
            }
            else {
                this.doc2RegDate = args.doc2RegDate;
            }
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("DocumentRelation");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.createDate != null) {
            output.writeFieldBegin("createDate", thrift.Thrift.Type.I64, 2);
            output.writeI64(this.createDate);
            output.writeFieldEnd();
        }
        if (this.docId1 != null) {
            output.writeFieldBegin("docId1", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.docId1);
            output.writeFieldEnd();
        }
        if (this.docId2 != null) {
            output.writeFieldBegin("docId2", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.docId2);
            output.writeFieldEnd();
        }
        if (this.createDoc2Date != null) {
            output.writeFieldBegin("createDoc2Date", thrift.Thrift.Type.I64, 5);
            output.writeI64(this.createDoc2Date);
            output.writeFieldEnd();
        }
        if (this.doc2Name != null) {
            output.writeFieldBegin("doc2Name", thrift.Thrift.Type.STRING, 6);
            output.writeString(this.doc2Name);
            output.writeFieldEnd();
        }
        if (this.doc2Number != null) {
            output.writeFieldBegin("doc2Number", thrift.Thrift.Type.STRING, 7);
            output.writeString(this.doc2Number);
            output.writeFieldEnd();
        }
        if (this.doc2SystemNumber != null) {
            output.writeFieldBegin("doc2SystemNumber", thrift.Thrift.Type.STRING, 8);
            output.writeString(this.doc2SystemNumber);
            output.writeFieldEnd();
        }
        if (this.doc2Access != null) {
            output.writeFieldBegin("doc2Access", thrift.Thrift.Type.BOOL, 9);
            output.writeBool(this.doc2Access);
            output.writeFieldEnd();
        }
        if (this.relationType != null) {
            output.writeFieldBegin("relationType", thrift.Thrift.Type.I32, 10);
            output.writeI32(this.relationType);
            output.writeFieldEnd();
        }
        if (this.doc2Status != null) {
            output.writeFieldBegin("doc2Status", thrift.Thrift.Type.I32, 11);
            output.writeI32(this.doc2Status);
            output.writeFieldEnd();
        }
        if (this.doc2SubStatus != null) {
            output.writeFieldBegin("doc2SubStatus", thrift.Thrift.Type.I32, 12);
            output.writeI32(this.doc2SubStatus);
            output.writeFieldEnd();
        }
        if (this.doc2DeadlineDate != null) {
            output.writeFieldBegin("doc2DeadlineDate", thrift.Thrift.Type.I64, 13);
            output.writeI64(this.doc2DeadlineDate);
            output.writeFieldEnd();
        }
        if (this.doc2CardDeadlineDate != null) {
            output.writeFieldBegin("doc2CardDeadlineDate", thrift.Thrift.Type.I64, 14);
            output.writeI64(this.doc2CardDeadlineDate);
            output.writeFieldEnd();
        }
        if (this.resolution != null) {
            output.writeFieldBegin("resolution", thrift.Thrift.Type.STRING, 15);
            output.writeString(this.resolution);
            output.writeFieldEnd();
        }
        if (this.doc2ActionType != null) {
            output.writeFieldBegin("doc2ActionType", thrift.Thrift.Type.MAP, 16);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.I32, this.doc2ActionType.size);
            this.doc2ActionType.forEach((value_1: DocPatternStageActionType.DocPatternStageActionType, key_1: string): void => {
                output.writeString(key_1);
                output.writeI32(value_1);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.doc2HasConfirmationCard != null) {
            output.writeFieldBegin("doc2HasConfirmationCard", thrift.Thrift.Type.BOOL, 17);
            output.writeBool(this.doc2HasConfirmationCard);
            output.writeFieldEnd();
        }
        if (this.doc2Icon != null) {
            output.writeFieldBegin("doc2Icon", thrift.Thrift.Type.I32, 18);
            output.writeI32(this.doc2Icon);
            output.writeFieldEnd();
        }
        if (this.doc2PatternName != null) {
            output.writeFieldBegin("doc2PatternName", thrift.Thrift.Type.STRING, 19);
            output.writeString(this.doc2PatternName);
            output.writeFieldEnd();
        }
        if (this.doc2PatternGroupName != null) {
            output.writeFieldBegin("doc2PatternGroupName", thrift.Thrift.Type.STRING, 20);
            output.writeString(this.doc2PatternGroupName);
            output.writeFieldEnd();
        }
        if (this.doc2StageName != null) {
            output.writeFieldBegin("doc2StageName", thrift.Thrift.Type.STRING, 21);
            output.writeString(this.doc2StageName);
            output.writeFieldEnd();
        }
        if (this.doc2RegDate != null) {
            output.writeFieldBegin("doc2RegDate", thrift.Thrift.Type.I64, 27);
            output.writeI64(this.doc2RegDate);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): DocumentRelation {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.id = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_3: Int64 = input.readI64();
                        _args.createDate = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.docId1 = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.docId2 = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_6: Int64 = input.readI64();
                        _args.createDoc2Date = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_7: string = input.readString();
                        _args.doc2Name = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_8: string = input.readString();
                        _args.doc2Number = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_9: string = input.readString();
                        _args.doc2SystemNumber = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_10: boolean = input.readBool();
                        _args.doc2Access = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_11: DocRelationType.DocRelationType = input.readI32();
                        _args.relationType = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_12: DocPatternStageStatus.DocPatternStageStatus = input.readI32();
                        _args.doc2Status = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_13: DocPatternStageSubStatus.DocPatternStageSubStatus = input.readI32();
                        _args.doc2SubStatus = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_14: Int64 = input.readI64();
                        _args.doc2DeadlineDate = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_15: Int64 = input.readI64();
                        _args.doc2CardDeadlineDate = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_16: string = input.readString();
                        _args.resolution = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_17: Map<string, DocPatternStageActionType.DocPatternStageActionType> = new Map<string, DocPatternStageActionType.DocPatternStageActionType>();
                        const metadata_1: thrift.TMap = input.readMapBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const key_2: string = input.readString();
                            const value_18: DocPatternStageActionType.DocPatternStageActionType = input.readI32();
                            value_17.set(key_2, value_18);
                        }
                        input.readMapEnd();
                        _args.doc2ActionType = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 17:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_19: boolean = input.readBool();
                        _args.doc2HasConfirmationCard = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 18:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_20: DocumentIconType.DocumentIconType = input.readI32();
                        _args.doc2Icon = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 19:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_21: string = input.readString();
                        _args.doc2PatternName = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 20:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_22: string = input.readString();
                        _args.doc2PatternGroupName = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 21:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_23: string = input.readString();
                        _args.doc2StageName = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 27:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_24: Int64 = input.readI64();
                        _args.doc2RegDate = value_24;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new DocumentRelation(_args);
    }
}

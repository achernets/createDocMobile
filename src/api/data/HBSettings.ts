/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as __ROOT_NAMESPACE__ from "./";
export interface IHBSettingsArgs {
    handBook?: __ROOT_NAMESPACE__.HandBook;
    hbValue?: __ROOT_NAMESPACE__.ContentItemHBValue;
}
export class HBSettings {
    public handBook?: __ROOT_NAMESPACE__.HandBook;
    public hbValue?: __ROOT_NAMESPACE__.ContentItemHBValue;
    constructor(args?: IHBSettingsArgs) {
        if (args != null && args.handBook != null) {
            this.handBook = args.handBook;
        }
        if (args != null && args.hbValue != null) {
            this.hbValue = args.hbValue;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("HBSettings");
        if (this.handBook != null) {
            output.writeFieldBegin("handBook", thrift.Thrift.Type.STRUCT, 1);
            this.handBook.write(output);
            output.writeFieldEnd();
        }
        if (this.hbValue != null) {
            output.writeFieldBegin("hbValue", thrift.Thrift.Type.STRUCT, 2);
            this.hbValue.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): HBSettings {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_1: __ROOT_NAMESPACE__.HandBook = __ROOT_NAMESPACE__.HandBook.read(input);
                        _args.handBook = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: __ROOT_NAMESPACE__.ContentItemHBValue = __ROOT_NAMESPACE__.ContentItemHBValue.read(input);
                        _args.hbValue = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new HBSettings(_args);
    }
}

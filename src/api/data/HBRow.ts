/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import { Int64 } from "thrift";
import * as thrift from "thrift";
import * as HBColumnValue from "./HBColumnValue";
export interface IHBRowArgs {
    id?: string;
    order?: number | Int64;
    values?: Map<string, HBColumnValue.HBColumnValue>;
    columnIdsForDeleteValues?: Set<string>;
    uuid?: string;
}
export class HBRow {
    public id?: string;
    public order?: Int64;
    public values?: Map<string, HBColumnValue.HBColumnValue>;
    public columnIdsForDeleteValues?: Set<string>;
    public uuid?: string;
    constructor(args?: IHBRowArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.order != null) {
            if (typeof args.order === "number") {
                this.order = new Int64(args.order);
            }
            else {
                this.order = args.order;
            }
        }
        if (args != null && args.values != null) {
            this.values = args.values;
        }
        if (args != null && args.columnIdsForDeleteValues != null) {
            this.columnIdsForDeleteValues = args.columnIdsForDeleteValues;
        }
        if (args != null && args.uuid != null) {
            this.uuid = args.uuid;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("HBRow");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.order != null) {
            output.writeFieldBegin("order", thrift.Thrift.Type.I64, 2);
            output.writeI64(this.order);
            output.writeFieldEnd();
        }
        if (this.values != null) {
            output.writeFieldBegin("values", thrift.Thrift.Type.MAP, 3);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRUCT, this.values.size);
            this.values.forEach((value_1: HBColumnValue.HBColumnValue, key_1: string): void => {
                output.writeString(key_1);
                value_1.write(output);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.columnIdsForDeleteValues != null) {
            output.writeFieldBegin("columnIdsForDeleteValues", thrift.Thrift.Type.SET, 4);
            output.writeSetBegin(thrift.Thrift.Type.STRING, this.columnIdsForDeleteValues.size);
            this.columnIdsForDeleteValues.forEach((value_2: string): void => {
                output.writeString(value_2);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        if (this.uuid != null) {
            output.writeFieldBegin("uuid", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.uuid);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): HBRow {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.id = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_4: Int64 = input.readI64();
                        _args.order = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_5: Map<string, HBColumnValue.HBColumnValue> = new Map<string, HBColumnValue.HBColumnValue>();
                        const metadata_1: thrift.TMap = input.readMapBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const key_2: string = input.readString();
                            const value_6: HBColumnValue.HBColumnValue = HBColumnValue.HBColumnValue.read(input);
                            value_5.set(key_2, value_6);
                        }
                        input.readMapEnd();
                        _args.values = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_7: Set<string> = new Set<string>();
                        const metadata_2: thrift.TSet = input.readSetBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_8: string = input.readString();
                            value_7.add(value_8);
                        }
                        input.readSetEnd();
                        _args.columnIdsForDeleteValues = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_9: string = input.readString();
                        _args.uuid = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new HBRow(_args);
    }
}

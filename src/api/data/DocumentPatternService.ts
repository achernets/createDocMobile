/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import { Int64 } from "thrift";
import * as thrift from "thrift";
import * as __ROOT_NAMESPACE__ from "./";
import * as RuleSelector from "./RuleSelector";
import * as PatternData from "./PatternData";
import * as DocumentPatternStagesExecutor from "./DocumentPatternStagesExecutor";
import * as AvailablePatternStage from "./AvailablePatternStage";
import * as DigitalView from "./DigitalView";
import * as PatternUserGroup from "./PatternUserGroup";
import * as PatternAttachmentTemplate from "./PatternAttachmentTemplate";
import * as PatternRelationModel from "./PatternRelationModel";
import * as InfoForCreateDoc from "./InfoForCreateDoc";
export interface IGetAllDocumentPatternsArgsArgs {
    token: string;
    filter: __ROOT_NAMESPACE__.KazFilter;
    withCurrentDocNumber: boolean;
}
export class GetAllDocumentPatternsArgs {
    public token: string;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    public withCurrentDocNumber: boolean;
    constructor(args: IGetAllDocumentPatternsArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
        if (args != null && args.withCurrentDocNumber != null) {
            this.withCurrentDocNumber = args.withCurrentDocNumber;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[withCurrentDocNumber] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllDocumentPatternsArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 2);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        if (this.withCurrentDocNumber != null) {
            output.writeFieldBegin("withCurrentDocNumber", thrift.Thrift.Type.BOOL, 3);
            output.writeBool(this.withCurrentDocNumber);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllDocumentPatternsArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.token = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_3: boolean = input.readBool();
                        _args.withCurrentDocNumber = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.filter !== undefined && _args.withCurrentDocNumber !== undefined) {
            return new GetAllDocumentPatternsArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAllDocumentPatternsArgs from input");
        }
    }
}
export interface IGetAllDocumentPatternsGroupByNameArgsArgs {
    token: string;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetAllDocumentPatternsGroupByNameArgs {
    public token: string;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetAllDocumentPatternsGroupByNameArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllDocumentPatternsGroupByNameArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 2);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllDocumentPatternsGroupByNameArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.token = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_5: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.filter !== undefined) {
            return new GetAllDocumentPatternsGroupByNameArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAllDocumentPatternsGroupByNameArgs from input");
        }
    }
}
export interface IGetDocumentPatternArgsArgs {
    token: string;
    docPatternId: string;
}
export class GetDocumentPatternArgs {
    public token: string;
    public docPatternId: string;
    constructor(args: IGetDocumentPatternArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.docPatternId != null) {
            this.docPatternId = args.docPatternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[docPatternId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetDocumentPatternArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.docPatternId != null) {
            output.writeFieldBegin("docPatternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.docPatternId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetDocumentPatternArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.token = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_7: string = input.readString();
                        _args.docPatternId = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.docPatternId !== undefined) {
            return new GetDocumentPatternArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetDocumentPatternArgs from input");
        }
    }
}
export interface IDeleteDocumentPatternArgsArgs {
    token: string;
    docPatternId: string;
}
export class DeleteDocumentPatternArgs {
    public token: string;
    public docPatternId: string;
    constructor(args: IDeleteDocumentPatternArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.docPatternId != null) {
            this.docPatternId = args.docPatternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[docPatternId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("DeleteDocumentPatternArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.docPatternId != null) {
            output.writeFieldBegin("docPatternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.docPatternId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): DeleteDocumentPatternArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_8: string = input.readString();
                        _args.token = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_9: string = input.readString();
                        _args.docPatternId = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.docPatternId !== undefined) {
            return new DeleteDocumentPatternArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read DeleteDocumentPatternArgs from input");
        }
    }
}
export interface ICreateOrUpdateDocumentPatternArgsArgs {
    token: string;
    documentPattern: __ROOT_NAMESPACE__.DocumentPattern;
    accountId: string;
}
export class CreateOrUpdateDocumentPatternArgs {
    public token: string;
    public documentPattern: __ROOT_NAMESPACE__.DocumentPattern;
    public accountId: string;
    constructor(args: ICreateOrUpdateDocumentPatternArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.documentPattern != null) {
            this.documentPattern = args.documentPattern;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[documentPattern] is unset!");
        }
        if (args != null && args.accountId != null) {
            this.accountId = args.accountId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[accountId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CreateOrUpdateDocumentPatternArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.documentPattern != null) {
            output.writeFieldBegin("documentPattern", thrift.Thrift.Type.STRUCT, 2);
            this.documentPattern.write(output);
            output.writeFieldEnd();
        }
        if (this.accountId != null) {
            output.writeFieldBegin("accountId", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.accountId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CreateOrUpdateDocumentPatternArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_10: string = input.readString();
                        _args.token = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_11: __ROOT_NAMESPACE__.DocumentPattern = __ROOT_NAMESPACE__.DocumentPattern.read(input);
                        _args.documentPattern = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_12: string = input.readString();
                        _args.accountId = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.documentPattern !== undefined && _args.accountId !== undefined) {
            return new CreateOrUpdateDocumentPatternArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read CreateOrUpdateDocumentPatternArgs from input");
        }
    }
}
export interface ICreateDocumentPatternArgsArgs {
    token: string;
    documentPattern: __ROOT_NAMESPACE__.DocumentPattern;
    accountId: string;
}
export class CreateDocumentPatternArgs {
    public token: string;
    public documentPattern: __ROOT_NAMESPACE__.DocumentPattern;
    public accountId: string;
    constructor(args: ICreateDocumentPatternArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.documentPattern != null) {
            this.documentPattern = args.documentPattern;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[documentPattern] is unset!");
        }
        if (args != null && args.accountId != null) {
            this.accountId = args.accountId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[accountId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CreateDocumentPatternArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.documentPattern != null) {
            output.writeFieldBegin("documentPattern", thrift.Thrift.Type.STRUCT, 2);
            this.documentPattern.write(output);
            output.writeFieldEnd();
        }
        if (this.accountId != null) {
            output.writeFieldBegin("accountId", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.accountId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CreateDocumentPatternArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_13: string = input.readString();
                        _args.token = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_14: __ROOT_NAMESPACE__.DocumentPattern = __ROOT_NAMESPACE__.DocumentPattern.read(input);
                        _args.documentPattern = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_15: string = input.readString();
                        _args.accountId = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.documentPattern !== undefined && _args.accountId !== undefined) {
            return new CreateDocumentPatternArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read CreateDocumentPatternArgs from input");
        }
    }
}
export interface IUpdateDocumentPatternArgsArgs {
    token: string;
    documentPattern: __ROOT_NAMESPACE__.DocumentPattern;
    accountId: string;
}
export class UpdateDocumentPatternArgs {
    public token: string;
    public documentPattern: __ROOT_NAMESPACE__.DocumentPattern;
    public accountId: string;
    constructor(args: IUpdateDocumentPatternArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.documentPattern != null) {
            this.documentPattern = args.documentPattern;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[documentPattern] is unset!");
        }
        if (args != null && args.accountId != null) {
            this.accountId = args.accountId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[accountId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("UpdateDocumentPatternArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.documentPattern != null) {
            output.writeFieldBegin("documentPattern", thrift.Thrift.Type.STRUCT, 2);
            this.documentPattern.write(output);
            output.writeFieldEnd();
        }
        if (this.accountId != null) {
            output.writeFieldBegin("accountId", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.accountId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): UpdateDocumentPatternArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_16: string = input.readString();
                        _args.token = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_17: __ROOT_NAMESPACE__.DocumentPattern = __ROOT_NAMESPACE__.DocumentPattern.read(input);
                        _args.documentPattern = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_18: string = input.readString();
                        _args.accountId = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.documentPattern !== undefined && _args.accountId !== undefined) {
            return new UpdateDocumentPatternArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read UpdateDocumentPatternArgs from input");
        }
    }
}
export interface IExportPatternAsDocumentDraftXMLArgsArgs {
    token: string;
    docPatternId: string;
}
export class ExportPatternAsDocumentDraftXMLArgs {
    public token: string;
    public docPatternId: string;
    constructor(args: IExportPatternAsDocumentDraftXMLArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.docPatternId != null) {
            this.docPatternId = args.docPatternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[docPatternId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ExportPatternAsDocumentDraftXMLArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.docPatternId != null) {
            output.writeFieldBegin("docPatternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.docPatternId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ExportPatternAsDocumentDraftXMLArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_19: string = input.readString();
                        _args.token = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_20: string = input.readString();
                        _args.docPatternId = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.docPatternId !== undefined) {
            return new ExportPatternAsDocumentDraftXMLArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read ExportPatternAsDocumentDraftXMLArgs from input");
        }
    }
}
export interface IGetAllDocumentPatternStagesArgsArgs {
    token: string;
    docPatternId: string;
    filter: __ROOT_NAMESPACE__.KazFilter;
    selector: RuleSelector.RuleSelector;
}
export class GetAllDocumentPatternStagesArgs {
    public token: string;
    public docPatternId: string;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    public selector: RuleSelector.RuleSelector;
    constructor(args: IGetAllDocumentPatternStagesArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.docPatternId != null) {
            this.docPatternId = args.docPatternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[docPatternId] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
        if (args != null && args.selector != null) {
            this.selector = args.selector;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[selector] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllDocumentPatternStagesArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.docPatternId != null) {
            output.writeFieldBegin("docPatternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.docPatternId);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 3);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        if (this.selector != null) {
            output.writeFieldBegin("selector", thrift.Thrift.Type.I32, 4);
            output.writeI32(this.selector);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllDocumentPatternStagesArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_21: string = input.readString();
                        _args.token = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_22: string = input.readString();
                        _args.docPatternId = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_23: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_24: RuleSelector.RuleSelector = input.readI32();
                        _args.selector = value_24;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.docPatternId !== undefined && _args.filter !== undefined && _args.selector !== undefined) {
            return new GetAllDocumentPatternStagesArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAllDocumentPatternStagesArgs from input");
        }
    }
}
export interface IGetDocumentPatternStageArgsArgs {
    token: string;
    docPatternStageId: string;
}
export class GetDocumentPatternStageArgs {
    public token: string;
    public docPatternStageId: string;
    constructor(args: IGetDocumentPatternStageArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.docPatternStageId != null) {
            this.docPatternStageId = args.docPatternStageId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[docPatternStageId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetDocumentPatternStageArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.docPatternStageId != null) {
            output.writeFieldBegin("docPatternStageId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.docPatternStageId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetDocumentPatternStageArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_25: string = input.readString();
                        _args.token = value_25;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_26: string = input.readString();
                        _args.docPatternStageId = value_26;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.docPatternStageId !== undefined) {
            return new GetDocumentPatternStageArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetDocumentPatternStageArgs from input");
        }
    }
}
export interface IDeleteDocumentPatternStageAndMoveDocumentsArgsArgs {
    token: string;
    docPatternStageId: string;
    newDocPatternStageId: string;
    fillDocPatternId: string;
}
export class DeleteDocumentPatternStageAndMoveDocumentsArgs {
    public token: string;
    public docPatternStageId: string;
    public newDocPatternStageId: string;
    public fillDocPatternId: string;
    constructor(args: IDeleteDocumentPatternStageAndMoveDocumentsArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.docPatternStageId != null) {
            this.docPatternStageId = args.docPatternStageId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[docPatternStageId] is unset!");
        }
        if (args != null && args.newDocPatternStageId != null) {
            this.newDocPatternStageId = args.newDocPatternStageId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[newDocPatternStageId] is unset!");
        }
        if (args != null && args.fillDocPatternId != null) {
            this.fillDocPatternId = args.fillDocPatternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[fillDocPatternId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("DeleteDocumentPatternStageAndMoveDocumentsArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.docPatternStageId != null) {
            output.writeFieldBegin("docPatternStageId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.docPatternStageId);
            output.writeFieldEnd();
        }
        if (this.newDocPatternStageId != null) {
            output.writeFieldBegin("newDocPatternStageId", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.newDocPatternStageId);
            output.writeFieldEnd();
        }
        if (this.fillDocPatternId != null) {
            output.writeFieldBegin("fillDocPatternId", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.fillDocPatternId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): DeleteDocumentPatternStageAndMoveDocumentsArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_27: string = input.readString();
                        _args.token = value_27;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_28: string = input.readString();
                        _args.docPatternStageId = value_28;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_29: string = input.readString();
                        _args.newDocPatternStageId = value_29;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_30: string = input.readString();
                        _args.fillDocPatternId = value_30;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.docPatternStageId !== undefined && _args.newDocPatternStageId !== undefined && _args.fillDocPatternId !== undefined) {
            return new DeleteDocumentPatternStageAndMoveDocumentsArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read DeleteDocumentPatternStageAndMoveDocumentsArgs from input");
        }
    }
}
export interface ICreateOrUpdateStagesAndLinksArgsArgs {
    token: string;
    patternId: string;
    stages: Array<__ROOT_NAMESPACE__.DocumentPatternStage>;
    links: Array<__ROOT_NAMESPACE__.DocumentPatternStagesLink>;
}
export class CreateOrUpdateStagesAndLinksArgs {
    public token: string;
    public patternId: string;
    public stages: Array<__ROOT_NAMESPACE__.DocumentPatternStage>;
    public links: Array<__ROOT_NAMESPACE__.DocumentPatternStagesLink>;
    constructor(args: ICreateOrUpdateStagesAndLinksArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.patternId != null) {
            this.patternId = args.patternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[patternId] is unset!");
        }
        if (args != null && args.stages != null) {
            this.stages = args.stages;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[stages] is unset!");
        }
        if (args != null && args.links != null) {
            this.links = args.links;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[links] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CreateOrUpdateStagesAndLinksArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.patternId != null) {
            output.writeFieldBegin("patternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.patternId);
            output.writeFieldEnd();
        }
        if (this.stages != null) {
            output.writeFieldBegin("stages", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.stages.length);
            this.stages.forEach((value_31: __ROOT_NAMESPACE__.DocumentPatternStage): void => {
                value_31.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.links != null) {
            output.writeFieldBegin("links", thrift.Thrift.Type.LIST, 4);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.links.length);
            this.links.forEach((value_32: __ROOT_NAMESPACE__.DocumentPatternStagesLink): void => {
                value_32.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CreateOrUpdateStagesAndLinksArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_33: string = input.readString();
                        _args.token = value_33;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_34: string = input.readString();
                        _args.patternId = value_34;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_35: Array<__ROOT_NAMESPACE__.DocumentPatternStage> = new Array<__ROOT_NAMESPACE__.DocumentPatternStage>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_36: __ROOT_NAMESPACE__.DocumentPatternStage = __ROOT_NAMESPACE__.DocumentPatternStage.read(input);
                            value_35.push(value_36);
                        }
                        input.readListEnd();
                        _args.stages = value_35;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_37: Array<__ROOT_NAMESPACE__.DocumentPatternStagesLink> = new Array<__ROOT_NAMESPACE__.DocumentPatternStagesLink>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_38: __ROOT_NAMESPACE__.DocumentPatternStagesLink = __ROOT_NAMESPACE__.DocumentPatternStagesLink.read(input);
                            value_37.push(value_38);
                        }
                        input.readListEnd();
                        _args.links = value_37;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.patternId !== undefined && _args.stages !== undefined && _args.links !== undefined) {
            return new CreateOrUpdateStagesAndLinksArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read CreateOrUpdateStagesAndLinksArgs from input");
        }
    }
}
export interface IGetAllDocumentPatternStagesLinksArgsArgs {
    token: string;
    docPatternId: string;
    docPatternStageId: string;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetAllDocumentPatternStagesLinksArgs {
    public token: string;
    public docPatternId: string;
    public docPatternStageId: string;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetAllDocumentPatternStagesLinksArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.docPatternId != null) {
            this.docPatternId = args.docPatternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[docPatternId] is unset!");
        }
        if (args != null && args.docPatternStageId != null) {
            this.docPatternStageId = args.docPatternStageId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[docPatternStageId] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllDocumentPatternStagesLinksArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.docPatternId != null) {
            output.writeFieldBegin("docPatternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.docPatternId);
            output.writeFieldEnd();
        }
        if (this.docPatternStageId != null) {
            output.writeFieldBegin("docPatternStageId", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.docPatternStageId);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 4);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllDocumentPatternStagesLinksArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_39: string = input.readString();
                        _args.token = value_39;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_40: string = input.readString();
                        _args.docPatternId = value_40;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_41: string = input.readString();
                        _args.docPatternStageId = value_41;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_42: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_42;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.docPatternId !== undefined && _args.docPatternStageId !== undefined && _args.filter !== undefined) {
            return new GetAllDocumentPatternStagesLinksArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAllDocumentPatternStagesLinksArgs from input");
        }
    }
}
export interface IGetDocumentPatternStageLinkArgsArgs {
    token: string;
    docPatternStageLinkId: string;
}
export class GetDocumentPatternStageLinkArgs {
    public token: string;
    public docPatternStageLinkId: string;
    constructor(args: IGetDocumentPatternStageLinkArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.docPatternStageLinkId != null) {
            this.docPatternStageLinkId = args.docPatternStageLinkId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[docPatternStageLinkId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetDocumentPatternStageLinkArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.docPatternStageLinkId != null) {
            output.writeFieldBegin("docPatternStageLinkId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.docPatternStageLinkId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetDocumentPatternStageLinkArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_43: string = input.readString();
                        _args.token = value_43;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_44: string = input.readString();
                        _args.docPatternStageLinkId = value_44;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.docPatternStageLinkId !== undefined) {
            return new GetDocumentPatternStageLinkArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetDocumentPatternStageLinkArgs from input");
        }
    }
}
export interface ICreateOrUpdateDocumentPatternStagesLinkArgsArgs {
    token: string;
    documentPatternStagesLink: __ROOT_NAMESPACE__.DocumentPatternStagesLink;
}
export class CreateOrUpdateDocumentPatternStagesLinkArgs {
    public token: string;
    public documentPatternStagesLink: __ROOT_NAMESPACE__.DocumentPatternStagesLink;
    constructor(args: ICreateOrUpdateDocumentPatternStagesLinkArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.documentPatternStagesLink != null) {
            this.documentPatternStagesLink = args.documentPatternStagesLink;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[documentPatternStagesLink] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CreateOrUpdateDocumentPatternStagesLinkArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.documentPatternStagesLink != null) {
            output.writeFieldBegin("documentPatternStagesLink", thrift.Thrift.Type.STRUCT, 2);
            this.documentPatternStagesLink.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CreateOrUpdateDocumentPatternStagesLinkArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_45: string = input.readString();
                        _args.token = value_45;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_46: __ROOT_NAMESPACE__.DocumentPatternStagesLink = __ROOT_NAMESPACE__.DocumentPatternStagesLink.read(input);
                        _args.documentPatternStagesLink = value_46;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.documentPatternStagesLink !== undefined) {
            return new CreateOrUpdateDocumentPatternStagesLinkArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read CreateOrUpdateDocumentPatternStagesLinkArgs from input");
        }
    }
}
export interface IDeleteDocumentPatternStageLinkArgsArgs {
    token: string;
    docPatternStageLinkId: string;
}
export class DeleteDocumentPatternStageLinkArgs {
    public token: string;
    public docPatternStageLinkId: string;
    constructor(args: IDeleteDocumentPatternStageLinkArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.docPatternStageLinkId != null) {
            this.docPatternStageLinkId = args.docPatternStageLinkId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[docPatternStageLinkId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("DeleteDocumentPatternStageLinkArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.docPatternStageLinkId != null) {
            output.writeFieldBegin("docPatternStageLinkId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.docPatternStageLinkId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): DeleteDocumentPatternStageLinkArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_47: string = input.readString();
                        _args.token = value_47;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_48: string = input.readString();
                        _args.docPatternStageLinkId = value_48;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.docPatternStageLinkId !== undefined) {
            return new DeleteDocumentPatternStageLinkArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read DeleteDocumentPatternStageLinkArgs from input");
        }
    }
}
export interface IGetAllDocumentPatternStageExecutorsArgsArgs {
    token: string;
    docPatternStageId: string;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetAllDocumentPatternStageExecutorsArgs {
    public token: string;
    public docPatternStageId: string;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetAllDocumentPatternStageExecutorsArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.docPatternStageId != null) {
            this.docPatternStageId = args.docPatternStageId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[docPatternStageId] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllDocumentPatternStageExecutorsArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.docPatternStageId != null) {
            output.writeFieldBegin("docPatternStageId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.docPatternStageId);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 3);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllDocumentPatternStageExecutorsArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_49: string = input.readString();
                        _args.token = value_49;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_50: string = input.readString();
                        _args.docPatternStageId = value_50;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_51: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_51;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.docPatternStageId !== undefined && _args.filter !== undefined) {
            return new GetAllDocumentPatternStageExecutorsArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAllDocumentPatternStageExecutorsArgs from input");
        }
    }
}
export interface IAddExecutorsToDocumentPatternStageArgsArgs {
    token: string;
    docPatternStageId: string;
    userOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>;
}
export class AddExecutorsToDocumentPatternStageArgs {
    public token: string;
    public docPatternStageId: string;
    public userOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>;
    constructor(args: IAddExecutorsToDocumentPatternStageArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.docPatternStageId != null) {
            this.docPatternStageId = args.docPatternStageId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[docPatternStageId] is unset!");
        }
        if (args != null && args.userOrGroups != null) {
            this.userOrGroups = args.userOrGroups;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[userOrGroups] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("AddExecutorsToDocumentPatternStageArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.docPatternStageId != null) {
            output.writeFieldBegin("docPatternStageId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.docPatternStageId);
            output.writeFieldEnd();
        }
        if (this.userOrGroups != null) {
            output.writeFieldBegin("userOrGroups", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.userOrGroups.length);
            this.userOrGroups.forEach((value_52: __ROOT_NAMESPACE__.UserOrGroup): void => {
                value_52.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): AddExecutorsToDocumentPatternStageArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_53: string = input.readString();
                        _args.token = value_53;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_54: string = input.readString();
                        _args.docPatternStageId = value_54;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_55: Array<__ROOT_NAMESPACE__.UserOrGroup> = new Array<__ROOT_NAMESPACE__.UserOrGroup>();
                        const metadata_3: thrift.TList = input.readListBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_56: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                            value_55.push(value_56);
                        }
                        input.readListEnd();
                        _args.userOrGroups = value_55;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.docPatternStageId !== undefined && _args.userOrGroups !== undefined) {
            return new AddExecutorsToDocumentPatternStageArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read AddExecutorsToDocumentPatternStageArgs from input");
        }
    }
}
export interface IDeleteExecutorsFromDocumentPatternStageArgsArgs {
    token: string;
    docPatternStageId: string;
    userOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>;
}
export class DeleteExecutorsFromDocumentPatternStageArgs {
    public token: string;
    public docPatternStageId: string;
    public userOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>;
    constructor(args: IDeleteExecutorsFromDocumentPatternStageArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.docPatternStageId != null) {
            this.docPatternStageId = args.docPatternStageId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[docPatternStageId] is unset!");
        }
        if (args != null && args.userOrGroups != null) {
            this.userOrGroups = args.userOrGroups;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[userOrGroups] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("DeleteExecutorsFromDocumentPatternStageArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.docPatternStageId != null) {
            output.writeFieldBegin("docPatternStageId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.docPatternStageId);
            output.writeFieldEnd();
        }
        if (this.userOrGroups != null) {
            output.writeFieldBegin("userOrGroups", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.userOrGroups.length);
            this.userOrGroups.forEach((value_57: __ROOT_NAMESPACE__.UserOrGroup): void => {
                value_57.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): DeleteExecutorsFromDocumentPatternStageArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_58: string = input.readString();
                        _args.token = value_58;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_59: string = input.readString();
                        _args.docPatternStageId = value_59;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_60: Array<__ROOT_NAMESPACE__.UserOrGroup> = new Array<__ROOT_NAMESPACE__.UserOrGroup>();
                        const metadata_4: thrift.TList = input.readListBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const value_61: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                            value_60.push(value_61);
                        }
                        input.readListEnd();
                        _args.userOrGroups = value_60;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.docPatternStageId !== undefined && _args.userOrGroups !== undefined) {
            return new DeleteExecutorsFromDocumentPatternStageArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read DeleteExecutorsFromDocumentPatternStageArgs from input");
        }
    }
}
export interface ICheckDocumentPatternArgsArgs {
    token: string;
    docPatternId: string;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class CheckDocumentPatternArgs {
    public token: string;
    public docPatternId: string;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: ICheckDocumentPatternArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.docPatternId != null) {
            this.docPatternId = args.docPatternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[docPatternId] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CheckDocumentPatternArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.docPatternId != null) {
            output.writeFieldBegin("docPatternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.docPatternId);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 3);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CheckDocumentPatternArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_62: string = input.readString();
                        _args.token = value_62;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_63: string = input.readString();
                        _args.docPatternId = value_63;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_64: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_64;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.docPatternId !== undefined && _args.filter !== undefined) {
            return new CheckDocumentPatternArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read CheckDocumentPatternArgs from input");
        }
    }
}
export interface ICreateOrUpdatePatternContentItemsArgsArgs {
    token: string;
    docPatternId: string;
    contentItems: Array<__ROOT_NAMESPACE__.ContentItem>;
}
export class CreateOrUpdatePatternContentItemsArgs {
    public token: string;
    public docPatternId: string;
    public contentItems: Array<__ROOT_NAMESPACE__.ContentItem>;
    constructor(args: ICreateOrUpdatePatternContentItemsArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.docPatternId != null) {
            this.docPatternId = args.docPatternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[docPatternId] is unset!");
        }
        if (args != null && args.contentItems != null) {
            this.contentItems = args.contentItems;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[contentItems] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CreateOrUpdatePatternContentItemsArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.docPatternId != null) {
            output.writeFieldBegin("docPatternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.docPatternId);
            output.writeFieldEnd();
        }
        if (this.contentItems != null) {
            output.writeFieldBegin("contentItems", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.contentItems.length);
            this.contentItems.forEach((value_65: __ROOT_NAMESPACE__.ContentItem): void => {
                value_65.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CreateOrUpdatePatternContentItemsArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_66: string = input.readString();
                        _args.token = value_66;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_67: string = input.readString();
                        _args.docPatternId = value_67;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_68: Array<__ROOT_NAMESPACE__.ContentItem> = new Array<__ROOT_NAMESPACE__.ContentItem>();
                        const metadata_5: thrift.TList = input.readListBegin();
                        const size_5: number = metadata_5.size;
                        for (let i_5: number = 0; i_5 < size_5; i_5++) {
                            const value_69: __ROOT_NAMESPACE__.ContentItem = __ROOT_NAMESPACE__.ContentItem.read(input);
                            value_68.push(value_69);
                        }
                        input.readListEnd();
                        _args.contentItems = value_68;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.docPatternId !== undefined && _args.contentItems !== undefined) {
            return new CreateOrUpdatePatternContentItemsArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read CreateOrUpdatePatternContentItemsArgs from input");
        }
    }
}
export interface IGetAllDocumentPatternGroupsArgsArgs {
    token: string;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetAllDocumentPatternGroupsArgs {
    public token: string;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetAllDocumentPatternGroupsArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllDocumentPatternGroupsArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 2);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllDocumentPatternGroupsArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_70: string = input.readString();
                        _args.token = value_70;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_71: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_71;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.filter !== undefined) {
            return new GetAllDocumentPatternGroupsArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAllDocumentPatternGroupsArgs from input");
        }
    }
}
export interface IGetAllDocumentPatternGroupsGroupByNameArgsArgs {
    token: string;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetAllDocumentPatternGroupsGroupByNameArgs {
    public token: string;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetAllDocumentPatternGroupsGroupByNameArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllDocumentPatternGroupsGroupByNameArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 2);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllDocumentPatternGroupsGroupByNameArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_72: string = input.readString();
                        _args.token = value_72;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_73: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_73;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.filter !== undefined) {
            return new GetAllDocumentPatternGroupsGroupByNameArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAllDocumentPatternGroupsGroupByNameArgs from input");
        }
    }
}
export interface ICreateOrUpdateDocumentPatternGroupArgsArgs {
    token: string;
    documentPatternGroup: __ROOT_NAMESPACE__.DocumentPatternGroup;
    accountId: string;
}
export class CreateOrUpdateDocumentPatternGroupArgs {
    public token: string;
    public documentPatternGroup: __ROOT_NAMESPACE__.DocumentPatternGroup;
    public accountId: string;
    constructor(args: ICreateOrUpdateDocumentPatternGroupArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.documentPatternGroup != null) {
            this.documentPatternGroup = args.documentPatternGroup;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[documentPatternGroup] is unset!");
        }
        if (args != null && args.accountId != null) {
            this.accountId = args.accountId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[accountId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CreateOrUpdateDocumentPatternGroupArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.documentPatternGroup != null) {
            output.writeFieldBegin("documentPatternGroup", thrift.Thrift.Type.STRUCT, 2);
            this.documentPatternGroup.write(output);
            output.writeFieldEnd();
        }
        if (this.accountId != null) {
            output.writeFieldBegin("accountId", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.accountId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CreateOrUpdateDocumentPatternGroupArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_74: string = input.readString();
                        _args.token = value_74;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_75: __ROOT_NAMESPACE__.DocumentPatternGroup = __ROOT_NAMESPACE__.DocumentPatternGroup.read(input);
                        _args.documentPatternGroup = value_75;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_76: string = input.readString();
                        _args.accountId = value_76;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.documentPatternGroup !== undefined && _args.accountId !== undefined) {
            return new CreateOrUpdateDocumentPatternGroupArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read CreateOrUpdateDocumentPatternGroupArgs from input");
        }
    }
}
export interface IDeleteDocumentPatternGroupArgsArgs {
    token: string;
    documentPatternGroupId: string;
}
export class DeleteDocumentPatternGroupArgs {
    public token: string;
    public documentPatternGroupId: string;
    constructor(args: IDeleteDocumentPatternGroupArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.documentPatternGroupId != null) {
            this.documentPatternGroupId = args.documentPatternGroupId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[documentPatternGroupId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("DeleteDocumentPatternGroupArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.documentPatternGroupId != null) {
            output.writeFieldBegin("documentPatternGroupId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.documentPatternGroupId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): DeleteDocumentPatternGroupArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_77: string = input.readString();
                        _args.token = value_77;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_78: string = input.readString();
                        _args.documentPatternGroupId = value_78;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.documentPatternGroupId !== undefined) {
            return new DeleteDocumentPatternGroupArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read DeleteDocumentPatternGroupArgs from input");
        }
    }
}
export interface IGetAllAvailableStagesArgsArgs {
    token: string;
    filter: __ROOT_NAMESPACE__.KazFilter;
    patternType: __ROOT_NAMESPACE__.PatternType;
}
export class GetAllAvailableStagesArgs {
    public token: string;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    public patternType: __ROOT_NAMESPACE__.PatternType;
    constructor(args: IGetAllAvailableStagesArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
        if (args != null && args.patternType != null) {
            this.patternType = args.patternType;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[patternType] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllAvailableStagesArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 2);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        if (this.patternType != null) {
            output.writeFieldBegin("patternType", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.patternType);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllAvailableStagesArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_79: string = input.readString();
                        _args.token = value_79;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_80: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_80;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_81: __ROOT_NAMESPACE__.PatternType = input.readI32();
                        _args.patternType = value_81;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.filter !== undefined && _args.patternType !== undefined) {
            return new GetAllAvailableStagesArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAllAvailableStagesArgs from input");
        }
    }
}
export interface IGetAvailableLinkAnswersByPatternArgsArgs {
    token: string;
    patternId: string;
}
export class GetAvailableLinkAnswersByPatternArgs {
    public token: string;
    public patternId: string;
    constructor(args: IGetAvailableLinkAnswersByPatternArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.patternId != null) {
            this.patternId = args.patternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[patternId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAvailableLinkAnswersByPatternArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.patternId != null) {
            output.writeFieldBegin("patternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.patternId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAvailableLinkAnswersByPatternArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_82: string = input.readString();
                        _args.token = value_82;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_83: string = input.readString();
                        _args.patternId = value_83;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.patternId !== undefined) {
            return new GetAvailableLinkAnswersByPatternArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAvailableLinkAnswersByPatternArgs from input");
        }
    }
}
export interface IRemoveAvailableStageArgsArgs {
    token: string;
    availStageId: string;
}
export class RemoveAvailableStageArgs {
    public token: string;
    public availStageId: string;
    constructor(args: IRemoveAvailableStageArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.availStageId != null) {
            this.availStageId = args.availStageId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[availStageId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RemoveAvailableStageArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.availStageId != null) {
            output.writeFieldBegin("availStageId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.availStageId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RemoveAvailableStageArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_84: string = input.readString();
                        _args.token = value_84;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_85: string = input.readString();
                        _args.availStageId = value_85;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.availStageId !== undefined) {
            return new RemoveAvailableStageArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read RemoveAvailableStageArgs from input");
        }
    }
}
export interface IGetAllDigitalViewsArgsArgs {
    token: string;
    docPatternId: string;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetAllDigitalViewsArgs {
    public token: string;
    public docPatternId: string;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetAllDigitalViewsArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.docPatternId != null) {
            this.docPatternId = args.docPatternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[docPatternId] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllDigitalViewsArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.docPatternId != null) {
            output.writeFieldBegin("docPatternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.docPatternId);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 3);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllDigitalViewsArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_86: string = input.readString();
                        _args.token = value_86;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_87: string = input.readString();
                        _args.docPatternId = value_87;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_88: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_88;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.docPatternId !== undefined && _args.filter !== undefined) {
            return new GetAllDigitalViewsArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAllDigitalViewsArgs from input");
        }
    }
}
export interface ICreateOrUpdateDigitalViewArgsArgs {
    token: string;
    digitalView: DigitalView.DigitalView;
}
export class CreateOrUpdateDigitalViewArgs {
    public token: string;
    public digitalView: DigitalView.DigitalView;
    constructor(args: ICreateOrUpdateDigitalViewArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.digitalView != null) {
            this.digitalView = args.digitalView;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[digitalView] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CreateOrUpdateDigitalViewArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.digitalView != null) {
            output.writeFieldBegin("digitalView", thrift.Thrift.Type.STRUCT, 2);
            this.digitalView.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CreateOrUpdateDigitalViewArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_89: string = input.readString();
                        _args.token = value_89;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_90: DigitalView.DigitalView = DigitalView.DigitalView.read(input);
                        _args.digitalView = value_90;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.digitalView !== undefined) {
            return new CreateOrUpdateDigitalViewArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read CreateOrUpdateDigitalViewArgs from input");
        }
    }
}
export interface IDeleteDigitalViewArgsArgs {
    token: string;
    digitalViewId: string;
}
export class DeleteDigitalViewArgs {
    public token: string;
    public digitalViewId: string;
    constructor(args: IDeleteDigitalViewArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.digitalViewId != null) {
            this.digitalViewId = args.digitalViewId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[digitalViewId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("DeleteDigitalViewArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.digitalViewId != null) {
            output.writeFieldBegin("digitalViewId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.digitalViewId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): DeleteDigitalViewArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_91: string = input.readString();
                        _args.token = value_91;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_92: string = input.readString();
                        _args.digitalViewId = value_92;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.digitalViewId !== undefined) {
            return new DeleteDigitalViewArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read DeleteDigitalViewArgs from input");
        }
    }
}
export interface IExportDocumentPatternArgsArgs {
    token: string;
    docPatternId: string;
}
export class ExportDocumentPatternArgs {
    public token: string;
    public docPatternId: string;
    constructor(args: IExportDocumentPatternArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.docPatternId != null) {
            this.docPatternId = args.docPatternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[docPatternId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ExportDocumentPatternArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.docPatternId != null) {
            output.writeFieldBegin("docPatternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.docPatternId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ExportDocumentPatternArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_93: string = input.readString();
                        _args.token = value_93;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_94: string = input.readString();
                        _args.docPatternId = value_94;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.docPatternId !== undefined) {
            return new ExportDocumentPatternArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read ExportDocumentPatternArgs from input");
        }
    }
}
export interface IImportDocumentPatternArgsArgs {
    token: string;
    json: Buffer;
    docPatternNameLoc: Map<string, string>;
    pDescriptionLoc: Map<string, string>;
    docPatternGroupId: string;
    accountId: string;
    ignoreError: boolean;
}
export class ImportDocumentPatternArgs {
    public token: string;
    public json: Buffer;
    public docPatternNameLoc: Map<string, string>;
    public pDescriptionLoc: Map<string, string>;
    public docPatternGroupId: string;
    public accountId: string;
    public ignoreError: boolean;
    constructor(args: IImportDocumentPatternArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.json != null) {
            this.json = args.json;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[json] is unset!");
        }
        if (args != null && args.docPatternNameLoc != null) {
            this.docPatternNameLoc = args.docPatternNameLoc;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[docPatternNameLoc] is unset!");
        }
        if (args != null && args.pDescriptionLoc != null) {
            this.pDescriptionLoc = args.pDescriptionLoc;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[pDescriptionLoc] is unset!");
        }
        if (args != null && args.docPatternGroupId != null) {
            this.docPatternGroupId = args.docPatternGroupId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[docPatternGroupId] is unset!");
        }
        if (args != null && args.accountId != null) {
            this.accountId = args.accountId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[accountId] is unset!");
        }
        if (args != null && args.ignoreError != null) {
            this.ignoreError = args.ignoreError;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[ignoreError] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ImportDocumentPatternArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.json != null) {
            output.writeFieldBegin("json", thrift.Thrift.Type.STRING, 2);
            output.writeBinary(this.json);
            output.writeFieldEnd();
        }
        if (this.docPatternNameLoc != null) {
            output.writeFieldBegin("docPatternNameLoc", thrift.Thrift.Type.MAP, 3);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.docPatternNameLoc.size);
            this.docPatternNameLoc.forEach((value_95: string, key_1: string): void => {
                output.writeString(key_1);
                output.writeString(value_95);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.pDescriptionLoc != null) {
            output.writeFieldBegin("pDescriptionLoc", thrift.Thrift.Type.MAP, 4);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.pDescriptionLoc.size);
            this.pDescriptionLoc.forEach((value_96: string, key_2: string): void => {
                output.writeString(key_2);
                output.writeString(value_96);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.docPatternGroupId != null) {
            output.writeFieldBegin("docPatternGroupId", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.docPatternGroupId);
            output.writeFieldEnd();
        }
        if (this.accountId != null) {
            output.writeFieldBegin("accountId", thrift.Thrift.Type.STRING, 6);
            output.writeString(this.accountId);
            output.writeFieldEnd();
        }
        if (this.ignoreError != null) {
            output.writeFieldBegin("ignoreError", thrift.Thrift.Type.BOOL, 7);
            output.writeBool(this.ignoreError);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ImportDocumentPatternArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_97: string = input.readString();
                        _args.token = value_97;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_98: Buffer = input.readBinary();
                        _args.json = value_98;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_99: Map<string, string> = new Map<string, string>();
                        const metadata_6: thrift.TMap = input.readMapBegin();
                        const size_6: number = metadata_6.size;
                        for (let i_6: number = 0; i_6 < size_6; i_6++) {
                            const key_3: string = input.readString();
                            const value_100: string = input.readString();
                            value_99.set(key_3, value_100);
                        }
                        input.readMapEnd();
                        _args.docPatternNameLoc = value_99;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_101: Map<string, string> = new Map<string, string>();
                        const metadata_7: thrift.TMap = input.readMapBegin();
                        const size_7: number = metadata_7.size;
                        for (let i_7: number = 0; i_7 < size_7; i_7++) {
                            const key_4: string = input.readString();
                            const value_102: string = input.readString();
                            value_101.set(key_4, value_102);
                        }
                        input.readMapEnd();
                        _args.pDescriptionLoc = value_101;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_103: string = input.readString();
                        _args.docPatternGroupId = value_103;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_104: string = input.readString();
                        _args.accountId = value_104;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_105: boolean = input.readBool();
                        _args.ignoreError = value_105;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.json !== undefined && _args.docPatternNameLoc !== undefined && _args.pDescriptionLoc !== undefined && _args.docPatternGroupId !== undefined && _args.accountId !== undefined && _args.ignoreError !== undefined) {
            return new ImportDocumentPatternArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read ImportDocumentPatternArgs from input");
        }
    }
}
export interface IGetPatternUserGroupArgsArgs {
    token: string;
    docPatternId: string;
}
export class GetPatternUserGroupArgs {
    public token: string;
    public docPatternId: string;
    constructor(args: IGetPatternUserGroupArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.docPatternId != null) {
            this.docPatternId = args.docPatternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[docPatternId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetPatternUserGroupArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.docPatternId != null) {
            output.writeFieldBegin("docPatternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.docPatternId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetPatternUserGroupArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_106: string = input.readString();
                        _args.token = value_106;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_107: string = input.readString();
                        _args.docPatternId = value_107;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.docPatternId !== undefined) {
            return new GetPatternUserGroupArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetPatternUserGroupArgs from input");
        }
    }
}
export interface ICreateOrUpdatePatternUserGroupArgsArgs {
    token: string;
    docPatternId: string;
    userOrGroups: Array<PatternUserGroup.PatternUserGroup>;
}
export class CreateOrUpdatePatternUserGroupArgs {
    public token: string;
    public docPatternId: string;
    public userOrGroups: Array<PatternUserGroup.PatternUserGroup>;
    constructor(args: ICreateOrUpdatePatternUserGroupArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.docPatternId != null) {
            this.docPatternId = args.docPatternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[docPatternId] is unset!");
        }
        if (args != null && args.userOrGroups != null) {
            this.userOrGroups = args.userOrGroups;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[userOrGroups] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CreateOrUpdatePatternUserGroupArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.docPatternId != null) {
            output.writeFieldBegin("docPatternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.docPatternId);
            output.writeFieldEnd();
        }
        if (this.userOrGroups != null) {
            output.writeFieldBegin("userOrGroups", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.userOrGroups.length);
            this.userOrGroups.forEach((value_108: PatternUserGroup.PatternUserGroup): void => {
                value_108.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CreateOrUpdatePatternUserGroupArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_109: string = input.readString();
                        _args.token = value_109;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_110: string = input.readString();
                        _args.docPatternId = value_110;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_111: Array<PatternUserGroup.PatternUserGroup> = new Array<PatternUserGroup.PatternUserGroup>();
                        const metadata_8: thrift.TList = input.readListBegin();
                        const size_8: number = metadata_8.size;
                        for (let i_8: number = 0; i_8 < size_8; i_8++) {
                            const value_112: PatternUserGroup.PatternUserGroup = PatternUserGroup.PatternUserGroup.read(input);
                            value_111.push(value_112);
                        }
                        input.readListEnd();
                        _args.userOrGroups = value_111;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.docPatternId !== undefined && _args.userOrGroups !== undefined) {
            return new CreateOrUpdatePatternUserGroupArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read CreateOrUpdatePatternUserGroupArgs from input");
        }
    }
}
export interface IGetPatternProcessRolesArgsArgs {
    token: string;
    docPatternId: string;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetPatternProcessRolesArgs {
    public token: string;
    public docPatternId: string;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetPatternProcessRolesArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.docPatternId != null) {
            this.docPatternId = args.docPatternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[docPatternId] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetPatternProcessRolesArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.docPatternId != null) {
            output.writeFieldBegin("docPatternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.docPatternId);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 3);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetPatternProcessRolesArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_113: string = input.readString();
                        _args.token = value_113;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_114: string = input.readString();
                        _args.docPatternId = value_114;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_115: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_115;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.docPatternId !== undefined && _args.filter !== undefined) {
            return new GetPatternProcessRolesArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetPatternProcessRolesArgs from input");
        }
    }
}
export interface IChangePatternProcessRolesArgsArgs {
    token: string;
    docPatternId: string;
    userOrGroupsToAdd: Array<__ROOT_NAMESPACE__.PatternProcessRole>;
    keyIdToRemove: Set<string>;
}
export class ChangePatternProcessRolesArgs {
    public token: string;
    public docPatternId: string;
    public userOrGroupsToAdd: Array<__ROOT_NAMESPACE__.PatternProcessRole>;
    public keyIdToRemove: Set<string>;
    constructor(args: IChangePatternProcessRolesArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.docPatternId != null) {
            this.docPatternId = args.docPatternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[docPatternId] is unset!");
        }
        if (args != null && args.userOrGroupsToAdd != null) {
            this.userOrGroupsToAdd = args.userOrGroupsToAdd;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[userOrGroupsToAdd] is unset!");
        }
        if (args != null && args.keyIdToRemove != null) {
            this.keyIdToRemove = args.keyIdToRemove;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[keyIdToRemove] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ChangePatternProcessRolesArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.docPatternId != null) {
            output.writeFieldBegin("docPatternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.docPatternId);
            output.writeFieldEnd();
        }
        if (this.userOrGroupsToAdd != null) {
            output.writeFieldBegin("userOrGroupsToAdd", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.userOrGroupsToAdd.length);
            this.userOrGroupsToAdd.forEach((value_116: __ROOT_NAMESPACE__.PatternProcessRole): void => {
                value_116.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.keyIdToRemove != null) {
            output.writeFieldBegin("keyIdToRemove", thrift.Thrift.Type.SET, 4);
            output.writeSetBegin(thrift.Thrift.Type.STRING, this.keyIdToRemove.size);
            this.keyIdToRemove.forEach((value_117: string): void => {
                output.writeString(value_117);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ChangePatternProcessRolesArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_118: string = input.readString();
                        _args.token = value_118;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_119: string = input.readString();
                        _args.docPatternId = value_119;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_120: Array<__ROOT_NAMESPACE__.PatternProcessRole> = new Array<__ROOT_NAMESPACE__.PatternProcessRole>();
                        const metadata_9: thrift.TList = input.readListBegin();
                        const size_9: number = metadata_9.size;
                        for (let i_9: number = 0; i_9 < size_9; i_9++) {
                            const value_121: __ROOT_NAMESPACE__.PatternProcessRole = __ROOT_NAMESPACE__.PatternProcessRole.read(input);
                            value_120.push(value_121);
                        }
                        input.readListEnd();
                        _args.userOrGroupsToAdd = value_120;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_122: Set<string> = new Set<string>();
                        const metadata_10: thrift.TSet = input.readSetBegin();
                        const size_10: number = metadata_10.size;
                        for (let i_10: number = 0; i_10 < size_10; i_10++) {
                            const value_123: string = input.readString();
                            value_122.add(value_123);
                        }
                        input.readSetEnd();
                        _args.keyIdToRemove = value_122;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.docPatternId !== undefined && _args.userOrGroupsToAdd !== undefined && _args.keyIdToRemove !== undefined) {
            return new ChangePatternProcessRolesArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read ChangePatternProcessRolesArgs from input");
        }
    }
}
export interface IGetPatternVariablesArgsArgs {
    token: string;
    docPatternId: string;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetPatternVariablesArgs {
    public token: string;
    public docPatternId: string;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetPatternVariablesArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.docPatternId != null) {
            this.docPatternId = args.docPatternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[docPatternId] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetPatternVariablesArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.docPatternId != null) {
            output.writeFieldBegin("docPatternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.docPatternId);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 3);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetPatternVariablesArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_124: string = input.readString();
                        _args.token = value_124;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_125: string = input.readString();
                        _args.docPatternId = value_125;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_126: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_126;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.docPatternId !== undefined && _args.filter !== undefined) {
            return new GetPatternVariablesArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetPatternVariablesArgs from input");
        }
    }
}
export interface IChangePatternVariablesArgsArgs {
    token: string;
    docPatternId: string;
    patternVariablesToAdd: Array<__ROOT_NAMESPACE__.PatternVariable>;
    keyIdToRemove: Set<string>;
}
export class ChangePatternVariablesArgs {
    public token: string;
    public docPatternId: string;
    public patternVariablesToAdd: Array<__ROOT_NAMESPACE__.PatternVariable>;
    public keyIdToRemove: Set<string>;
    constructor(args: IChangePatternVariablesArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.docPatternId != null) {
            this.docPatternId = args.docPatternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[docPatternId] is unset!");
        }
        if (args != null && args.patternVariablesToAdd != null) {
            this.patternVariablesToAdd = args.patternVariablesToAdd;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[patternVariablesToAdd] is unset!");
        }
        if (args != null && args.keyIdToRemove != null) {
            this.keyIdToRemove = args.keyIdToRemove;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[keyIdToRemove] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ChangePatternVariablesArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.docPatternId != null) {
            output.writeFieldBegin("docPatternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.docPatternId);
            output.writeFieldEnd();
        }
        if (this.patternVariablesToAdd != null) {
            output.writeFieldBegin("patternVariablesToAdd", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.patternVariablesToAdd.length);
            this.patternVariablesToAdd.forEach((value_127: __ROOT_NAMESPACE__.PatternVariable): void => {
                value_127.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.keyIdToRemove != null) {
            output.writeFieldBegin("keyIdToRemove", thrift.Thrift.Type.SET, 4);
            output.writeSetBegin(thrift.Thrift.Type.STRING, this.keyIdToRemove.size);
            this.keyIdToRemove.forEach((value_128: string): void => {
                output.writeString(value_128);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ChangePatternVariablesArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_129: string = input.readString();
                        _args.token = value_129;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_130: string = input.readString();
                        _args.docPatternId = value_130;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_131: Array<__ROOT_NAMESPACE__.PatternVariable> = new Array<__ROOT_NAMESPACE__.PatternVariable>();
                        const metadata_11: thrift.TList = input.readListBegin();
                        const size_11: number = metadata_11.size;
                        for (let i_11: number = 0; i_11 < size_11; i_11++) {
                            const value_132: __ROOT_NAMESPACE__.PatternVariable = __ROOT_NAMESPACE__.PatternVariable.read(input);
                            value_131.push(value_132);
                        }
                        input.readListEnd();
                        _args.patternVariablesToAdd = value_131;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_133: Set<string> = new Set<string>();
                        const metadata_12: thrift.TSet = input.readSetBegin();
                        const size_12: number = metadata_12.size;
                        for (let i_12: number = 0; i_12 < size_12; i_12++) {
                            const value_134: string = input.readString();
                            value_133.add(value_134);
                        }
                        input.readSetEnd();
                        _args.keyIdToRemove = value_133;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.docPatternId !== undefined && _args.patternVariablesToAdd !== undefined && _args.keyIdToRemove !== undefined) {
            return new ChangePatternVariablesArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read ChangePatternVariablesArgs from input");
        }
    }
}
export interface IAddAvailablePatternStageToAccountsArgsArgs {
    token: string;
    availablePatternStageId: string;
    accountIds: Array<string>;
}
export class AddAvailablePatternStageToAccountsArgs {
    public token: string;
    public availablePatternStageId: string;
    public accountIds: Array<string>;
    constructor(args: IAddAvailablePatternStageToAccountsArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.availablePatternStageId != null) {
            this.availablePatternStageId = args.availablePatternStageId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[availablePatternStageId] is unset!");
        }
        if (args != null && args.accountIds != null) {
            this.accountIds = args.accountIds;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[accountIds] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("AddAvailablePatternStageToAccountsArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.availablePatternStageId != null) {
            output.writeFieldBegin("availablePatternStageId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.availablePatternStageId);
            output.writeFieldEnd();
        }
        if (this.accountIds != null) {
            output.writeFieldBegin("accountIds", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.accountIds.length);
            this.accountIds.forEach((value_135: string): void => {
                output.writeString(value_135);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): AddAvailablePatternStageToAccountsArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_136: string = input.readString();
                        _args.token = value_136;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_137: string = input.readString();
                        _args.availablePatternStageId = value_137;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_138: Array<string> = new Array<string>();
                        const metadata_13: thrift.TList = input.readListBegin();
                        const size_13: number = metadata_13.size;
                        for (let i_13: number = 0; i_13 < size_13; i_13++) {
                            const value_139: string = input.readString();
                            value_138.push(value_139);
                        }
                        input.readListEnd();
                        _args.accountIds = value_138;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.availablePatternStageId !== undefined && _args.accountIds !== undefined) {
            return new AddAvailablePatternStageToAccountsArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read AddAvailablePatternStageToAccountsArgs from input");
        }
    }
}
export interface IGetAllPatternAttachmentTemplatesArgsArgs {
    token: string;
    patternId: string;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetAllPatternAttachmentTemplatesArgs {
    public token: string;
    public patternId: string;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetAllPatternAttachmentTemplatesArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.patternId != null) {
            this.patternId = args.patternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[patternId] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllPatternAttachmentTemplatesArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.patternId != null) {
            output.writeFieldBegin("patternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.patternId);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 3);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllPatternAttachmentTemplatesArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_140: string = input.readString();
                        _args.token = value_140;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_141: string = input.readString();
                        _args.patternId = value_141;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_142: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_142;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.patternId !== undefined && _args.filter !== undefined) {
            return new GetAllPatternAttachmentTemplatesArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAllPatternAttachmentTemplatesArgs from input");
        }
    }
}
export interface IGetPatternAttachmentTemplateByIdArgsArgs {
    token: string;
    patternId: string;
}
export class GetPatternAttachmentTemplateByIdArgs {
    public token: string;
    public patternId: string;
    constructor(args: IGetPatternAttachmentTemplateByIdArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.patternId != null) {
            this.patternId = args.patternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[patternId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetPatternAttachmentTemplateByIdArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.patternId != null) {
            output.writeFieldBegin("patternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.patternId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetPatternAttachmentTemplateByIdArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_143: string = input.readString();
                        _args.token = value_143;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_144: string = input.readString();
                        _args.patternId = value_144;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.patternId !== undefined) {
            return new GetPatternAttachmentTemplateByIdArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetPatternAttachmentTemplateByIdArgs from input");
        }
    }
}
export interface ICreateOrUpdatePatternAttachmentTemplateArgsArgs {
    token: string;
    patternAttachmentTemplate: PatternAttachmentTemplate.PatternAttachmentTemplate;
    xmlFile: Buffer;
}
export class CreateOrUpdatePatternAttachmentTemplateArgs {
    public token: string;
    public patternAttachmentTemplate: PatternAttachmentTemplate.PatternAttachmentTemplate;
    public xmlFile: Buffer;
    constructor(args: ICreateOrUpdatePatternAttachmentTemplateArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.patternAttachmentTemplate != null) {
            this.patternAttachmentTemplate = args.patternAttachmentTemplate;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[patternAttachmentTemplate] is unset!");
        }
        if (args != null && args.xmlFile != null) {
            this.xmlFile = args.xmlFile;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[xmlFile] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CreateOrUpdatePatternAttachmentTemplateArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.patternAttachmentTemplate != null) {
            output.writeFieldBegin("patternAttachmentTemplate", thrift.Thrift.Type.STRUCT, 2);
            this.patternAttachmentTemplate.write(output);
            output.writeFieldEnd();
        }
        if (this.xmlFile != null) {
            output.writeFieldBegin("xmlFile", thrift.Thrift.Type.STRING, 3);
            output.writeBinary(this.xmlFile);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CreateOrUpdatePatternAttachmentTemplateArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_145: string = input.readString();
                        _args.token = value_145;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_146: PatternAttachmentTemplate.PatternAttachmentTemplate = PatternAttachmentTemplate.PatternAttachmentTemplate.read(input);
                        _args.patternAttachmentTemplate = value_146;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_147: Buffer = input.readBinary();
                        _args.xmlFile = value_147;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.patternAttachmentTemplate !== undefined && _args.xmlFile !== undefined) {
            return new CreateOrUpdatePatternAttachmentTemplateArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read CreateOrUpdatePatternAttachmentTemplateArgs from input");
        }
    }
}
export interface IDownloadPatternAttachmentTemplateArgsArgs {
    token: string;
    patternAttachmentTemplateId: string;
}
export class DownloadPatternAttachmentTemplateArgs {
    public token: string;
    public patternAttachmentTemplateId: string;
    constructor(args: IDownloadPatternAttachmentTemplateArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.patternAttachmentTemplateId != null) {
            this.patternAttachmentTemplateId = args.patternAttachmentTemplateId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[patternAttachmentTemplateId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("DownloadPatternAttachmentTemplateArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.patternAttachmentTemplateId != null) {
            output.writeFieldBegin("patternAttachmentTemplateId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.patternAttachmentTemplateId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): DownloadPatternAttachmentTemplateArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_148: string = input.readString();
                        _args.token = value_148;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_149: string = input.readString();
                        _args.patternAttachmentTemplateId = value_149;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.patternAttachmentTemplateId !== undefined) {
            return new DownloadPatternAttachmentTemplateArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read DownloadPatternAttachmentTemplateArgs from input");
        }
    }
}
export interface IRemovePatternAttachmentTemplateArgsArgs {
    token: string;
    patternAttachmentTemplateId: string;
}
export class RemovePatternAttachmentTemplateArgs {
    public token: string;
    public patternAttachmentTemplateId: string;
    constructor(args: IRemovePatternAttachmentTemplateArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.patternAttachmentTemplateId != null) {
            this.patternAttachmentTemplateId = args.patternAttachmentTemplateId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[patternAttachmentTemplateId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RemovePatternAttachmentTemplateArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.patternAttachmentTemplateId != null) {
            output.writeFieldBegin("patternAttachmentTemplateId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.patternAttachmentTemplateId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RemovePatternAttachmentTemplateArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_150: string = input.readString();
                        _args.token = value_150;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_151: string = input.readString();
                        _args.patternAttachmentTemplateId = value_151;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.patternAttachmentTemplateId !== undefined) {
            return new RemovePatternAttachmentTemplateArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read RemovePatternAttachmentTemplateArgs from input");
        }
    }
}
export interface IChangeStartDocNumberSequenceArgsArgs {
    token: string;
    patternId: string;
    value: number | Int64;
}
export class ChangeStartDocNumberSequenceArgs {
    public token: string;
    public patternId: string;
    public value: Int64;
    constructor(args: IChangeStartDocNumberSequenceArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.patternId != null) {
            this.patternId = args.patternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[patternId] is unset!");
        }
        if (args != null && args.value != null) {
            if (typeof args.value === "number") {
                this.value = new Int64(args.value);
            }
            else {
                this.value = args.value;
            }
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[value] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ChangeStartDocNumberSequenceArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.patternId != null) {
            output.writeFieldBegin("patternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.patternId);
            output.writeFieldEnd();
        }
        if (this.value != null) {
            output.writeFieldBegin("value", thrift.Thrift.Type.I64, 3);
            output.writeI64(this.value);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ChangeStartDocNumberSequenceArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_152: string = input.readString();
                        _args.token = value_152;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_153: string = input.readString();
                        _args.patternId = value_153;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_154: Int64 = input.readI64();
                        _args.value = value_154;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.patternId !== undefined && _args.value !== undefined) {
            return new ChangeStartDocNumberSequenceArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read ChangeStartDocNumberSequenceArgs from input");
        }
    }
}
export interface IGetAllContentHoldersArgsArgs {
    token: string;
    patternId: string;
    withContent: boolean;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetAllContentHoldersArgs {
    public token: string;
    public patternId: string;
    public withContent: boolean;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetAllContentHoldersArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.patternId != null) {
            this.patternId = args.patternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[patternId] is unset!");
        }
        if (args != null && args.withContent != null) {
            this.withContent = args.withContent;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[withContent] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllContentHoldersArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.patternId != null) {
            output.writeFieldBegin("patternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.patternId);
            output.writeFieldEnd();
        }
        if (this.withContent != null) {
            output.writeFieldBegin("withContent", thrift.Thrift.Type.BOOL, 3);
            output.writeBool(this.withContent);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 4);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllContentHoldersArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_155: string = input.readString();
                        _args.token = value_155;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_156: string = input.readString();
                        _args.patternId = value_156;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_157: boolean = input.readBool();
                        _args.withContent = value_157;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_158: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_158;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.patternId !== undefined && _args.withContent !== undefined && _args.filter !== undefined) {
            return new GetAllContentHoldersArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAllContentHoldersArgs from input");
        }
    }
}
export interface IChangeContentHoldersArgsArgs {
    token: string;
    toUpdate: Array<__ROOT_NAMESPACE__.ContentHolder>;
    toRemoveIds: Array<string>;
}
export class ChangeContentHoldersArgs {
    public token: string;
    public toUpdate: Array<__ROOT_NAMESPACE__.ContentHolder>;
    public toRemoveIds: Array<string>;
    constructor(args: IChangeContentHoldersArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.toUpdate != null) {
            this.toUpdate = args.toUpdate;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[toUpdate] is unset!");
        }
        if (args != null && args.toRemoveIds != null) {
            this.toRemoveIds = args.toRemoveIds;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[toRemoveIds] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ChangeContentHoldersArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.toUpdate != null) {
            output.writeFieldBegin("toUpdate", thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.toUpdate.length);
            this.toUpdate.forEach((value_159: __ROOT_NAMESPACE__.ContentHolder): void => {
                value_159.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.toRemoveIds != null) {
            output.writeFieldBegin("toRemoveIds", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.toRemoveIds.length);
            this.toRemoveIds.forEach((value_160: string): void => {
                output.writeString(value_160);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ChangeContentHoldersArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_161: string = input.readString();
                        _args.token = value_161;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_162: Array<__ROOT_NAMESPACE__.ContentHolder> = new Array<__ROOT_NAMESPACE__.ContentHolder>();
                        const metadata_14: thrift.TList = input.readListBegin();
                        const size_14: number = metadata_14.size;
                        for (let i_14: number = 0; i_14 < size_14; i_14++) {
                            const value_163: __ROOT_NAMESPACE__.ContentHolder = __ROOT_NAMESPACE__.ContentHolder.read(input);
                            value_162.push(value_163);
                        }
                        input.readListEnd();
                        _args.toUpdate = value_162;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_164: Array<string> = new Array<string>();
                        const metadata_15: thrift.TList = input.readListBegin();
                        const size_15: number = metadata_15.size;
                        for (let i_15: number = 0; i_15 < size_15; i_15++) {
                            const value_165: string = input.readString();
                            value_164.push(value_165);
                        }
                        input.readListEnd();
                        _args.toRemoveIds = value_164;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.toUpdate !== undefined && _args.toRemoveIds !== undefined) {
            return new ChangeContentHoldersArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read ChangeContentHoldersArgs from input");
        }
    }
}
export interface IGetPatternRelationModelArgsArgs {
    token: string;
    patternId: string;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetPatternRelationModelArgs {
    public token: string;
    public patternId: string;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetPatternRelationModelArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.patternId != null) {
            this.patternId = args.patternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[patternId] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetPatternRelationModelArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.patternId != null) {
            output.writeFieldBegin("patternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.patternId);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 3);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetPatternRelationModelArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_166: string = input.readString();
                        _args.token = value_166;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_167: string = input.readString();
                        _args.patternId = value_167;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_168: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_168;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.patternId !== undefined && _args.filter !== undefined) {
            return new GetPatternRelationModelArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetPatternRelationModelArgs from input");
        }
    }
}
export interface IGetNomenclatureNumberArgsArgs {
    token: string;
    nomenclatureNumberId: string;
}
export class GetNomenclatureNumberArgs {
    public token: string;
    public nomenclatureNumberId: string;
    constructor(args: IGetNomenclatureNumberArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.nomenclatureNumberId != null) {
            this.nomenclatureNumberId = args.nomenclatureNumberId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[nomenclatureNumberId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetNomenclatureNumberArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.nomenclatureNumberId != null) {
            output.writeFieldBegin("nomenclatureNumberId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.nomenclatureNumberId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetNomenclatureNumberArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_169: string = input.readString();
                        _args.token = value_169;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_170: string = input.readString();
                        _args.nomenclatureNumberId = value_170;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.nomenclatureNumberId !== undefined) {
            return new GetNomenclatureNumberArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetNomenclatureNumberArgs from input");
        }
    }
}
export interface IGetAllNomenclatureNumberArgsArgs {
    token: string;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetAllNomenclatureNumberArgs {
    public token: string;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetAllNomenclatureNumberArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllNomenclatureNumberArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 2);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllNomenclatureNumberArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_171: string = input.readString();
                        _args.token = value_171;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_172: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_172;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.filter !== undefined) {
            return new GetAllNomenclatureNumberArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAllNomenclatureNumberArgs from input");
        }
    }
}
export interface IGetCountAllNomenclatureNumberArgsArgs {
    token: string;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetCountAllNomenclatureNumberArgs {
    public token: string;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetCountAllNomenclatureNumberArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetCountAllNomenclatureNumberArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 2);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetCountAllNomenclatureNumberArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_173: string = input.readString();
                        _args.token = value_173;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_174: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_174;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.filter !== undefined) {
            return new GetCountAllNomenclatureNumberArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetCountAllNomenclatureNumberArgs from input");
        }
    }
}
export interface ICreateOrUpdateNomenclatureNumberArgsArgs {
    token: string;
    nomenclatureNumber: __ROOT_NAMESPACE__.NomenclatureNumber;
}
export class CreateOrUpdateNomenclatureNumberArgs {
    public token: string;
    public nomenclatureNumber: __ROOT_NAMESPACE__.NomenclatureNumber;
    constructor(args: ICreateOrUpdateNomenclatureNumberArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.nomenclatureNumber != null) {
            this.nomenclatureNumber = args.nomenclatureNumber;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[nomenclatureNumber] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CreateOrUpdateNomenclatureNumberArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.nomenclatureNumber != null) {
            output.writeFieldBegin("nomenclatureNumber", thrift.Thrift.Type.STRUCT, 2);
            this.nomenclatureNumber.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CreateOrUpdateNomenclatureNumberArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_175: string = input.readString();
                        _args.token = value_175;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_176: __ROOT_NAMESPACE__.NomenclatureNumber = __ROOT_NAMESPACE__.NomenclatureNumber.read(input);
                        _args.nomenclatureNumber = value_176;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.nomenclatureNumber !== undefined) {
            return new CreateOrUpdateNomenclatureNumberArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read CreateOrUpdateNomenclatureNumberArgs from input");
        }
    }
}
export interface IRemoveNomenclatureNumberArgsArgs {
    token: string;
    nomenclatureNumberId: string;
}
export class RemoveNomenclatureNumberArgs {
    public token: string;
    public nomenclatureNumberId: string;
    constructor(args: IRemoveNomenclatureNumberArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.nomenclatureNumberId != null) {
            this.nomenclatureNumberId = args.nomenclatureNumberId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[nomenclatureNumberId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RemoveNomenclatureNumberArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.nomenclatureNumberId != null) {
            output.writeFieldBegin("nomenclatureNumberId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.nomenclatureNumberId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RemoveNomenclatureNumberArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_177: string = input.readString();
                        _args.token = value_177;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_178: string = input.readString();
                        _args.nomenclatureNumberId = value_178;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.nomenclatureNumberId !== undefined) {
            return new RemoveNomenclatureNumberArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read RemoveNomenclatureNumberArgs from input");
        }
    }
}
export interface IGetNomenclatureGroupArgsArgs {
    token: string;
    nomenclatureGroupId: string;
}
export class GetNomenclatureGroupArgs {
    public token: string;
    public nomenclatureGroupId: string;
    constructor(args: IGetNomenclatureGroupArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.nomenclatureGroupId != null) {
            this.nomenclatureGroupId = args.nomenclatureGroupId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[nomenclatureGroupId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetNomenclatureGroupArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.nomenclatureGroupId != null) {
            output.writeFieldBegin("nomenclatureGroupId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.nomenclatureGroupId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetNomenclatureGroupArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_179: string = input.readString();
                        _args.token = value_179;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_180: string = input.readString();
                        _args.nomenclatureGroupId = value_180;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.nomenclatureGroupId !== undefined) {
            return new GetNomenclatureGroupArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetNomenclatureGroupArgs from input");
        }
    }
}
export interface IGetAllNomenclatureGroupArgsArgs {
    token: string;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetAllNomenclatureGroupArgs {
    public token: string;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetAllNomenclatureGroupArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllNomenclatureGroupArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 2);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllNomenclatureGroupArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_181: string = input.readString();
                        _args.token = value_181;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_182: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_182;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.filter !== undefined) {
            return new GetAllNomenclatureGroupArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAllNomenclatureGroupArgs from input");
        }
    }
}
export interface IGetCountAllNomenclatureGroupArgsArgs {
    token: string;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetCountAllNomenclatureGroupArgs {
    public token: string;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetCountAllNomenclatureGroupArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetCountAllNomenclatureGroupArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 2);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetCountAllNomenclatureGroupArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_183: string = input.readString();
                        _args.token = value_183;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_184: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_184;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.filter !== undefined) {
            return new GetCountAllNomenclatureGroupArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetCountAllNomenclatureGroupArgs from input");
        }
    }
}
export interface ICreateOrUpdateNomenclatureGroupArgsArgs {
    token: string;
    nomenclatureGroup: __ROOT_NAMESPACE__.NomenclatureGroup;
}
export class CreateOrUpdateNomenclatureGroupArgs {
    public token: string;
    public nomenclatureGroup: __ROOT_NAMESPACE__.NomenclatureGroup;
    constructor(args: ICreateOrUpdateNomenclatureGroupArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.nomenclatureGroup != null) {
            this.nomenclatureGroup = args.nomenclatureGroup;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[nomenclatureGroup] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CreateOrUpdateNomenclatureGroupArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.nomenclatureGroup != null) {
            output.writeFieldBegin("nomenclatureGroup", thrift.Thrift.Type.STRUCT, 2);
            this.nomenclatureGroup.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CreateOrUpdateNomenclatureGroupArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_185: string = input.readString();
                        _args.token = value_185;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_186: __ROOT_NAMESPACE__.NomenclatureGroup = __ROOT_NAMESPACE__.NomenclatureGroup.read(input);
                        _args.nomenclatureGroup = value_186;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.nomenclatureGroup !== undefined) {
            return new CreateOrUpdateNomenclatureGroupArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read CreateOrUpdateNomenclatureGroupArgs from input");
        }
    }
}
export interface IRemoveNomenclatureGroupArgsArgs {
    token: string;
    nomenclatureGrouprId: string;
}
export class RemoveNomenclatureGroupArgs {
    public token: string;
    public nomenclatureGrouprId: string;
    constructor(args: IRemoveNomenclatureGroupArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.nomenclatureGrouprId != null) {
            this.nomenclatureGrouprId = args.nomenclatureGrouprId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[nomenclatureGrouprId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RemoveNomenclatureGroupArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.nomenclatureGrouprId != null) {
            output.writeFieldBegin("nomenclatureGrouprId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.nomenclatureGrouprId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RemoveNomenclatureGroupArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_187: string = input.readString();
                        _args.token = value_187;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_188: string = input.readString();
                        _args.nomenclatureGrouprId = value_188;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.nomenclatureGrouprId !== undefined) {
            return new RemoveNomenclatureGroupArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read RemoveNomenclatureGroupArgs from input");
        }
    }
}
export interface IGetInfoForCreateDocArgsArgs {
    token: string;
    patternId: string;
    parentDocId: string;
    accessPolicy: __ROOT_NAMESPACE__.DocumentAccessPolicy;
}
export class GetInfoForCreateDocArgs {
    public token: string;
    public patternId: string;
    public parentDocId: string;
    public accessPolicy: __ROOT_NAMESPACE__.DocumentAccessPolicy;
    constructor(args: IGetInfoForCreateDocArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.patternId != null) {
            this.patternId = args.patternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[patternId] is unset!");
        }
        if (args != null && args.parentDocId != null) {
            this.parentDocId = args.parentDocId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[parentDocId] is unset!");
        }
        if (args != null && args.accessPolicy != null) {
            this.accessPolicy = args.accessPolicy;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[accessPolicy] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetInfoForCreateDocArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.patternId != null) {
            output.writeFieldBegin("patternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.patternId);
            output.writeFieldEnd();
        }
        if (this.parentDocId != null) {
            output.writeFieldBegin("parentDocId", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.parentDocId);
            output.writeFieldEnd();
        }
        if (this.accessPolicy != null) {
            output.writeFieldBegin("accessPolicy", thrift.Thrift.Type.STRUCT, 4);
            this.accessPolicy.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetInfoForCreateDocArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_189: string = input.readString();
                        _args.token = value_189;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_190: string = input.readString();
                        _args.patternId = value_190;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_191: string = input.readString();
                        _args.parentDocId = value_191;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_192: __ROOT_NAMESPACE__.DocumentAccessPolicy = __ROOT_NAMESPACE__.DocumentAccessPolicy.read(input);
                        _args.accessPolicy = value_192;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.patternId !== undefined && _args.parentDocId !== undefined && _args.accessPolicy !== undefined) {
            return new GetInfoForCreateDocArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetInfoForCreateDocArgs from input");
        }
    }
}
export interface IGetPatternContentItemsArgsArgs {
    token: string;
    patternId: string;
}
export class GetPatternContentItemsArgs {
    public token: string;
    public patternId: string;
    constructor(args: IGetPatternContentItemsArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.patternId != null) {
            this.patternId = args.patternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[patternId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetPatternContentItemsArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.patternId != null) {
            output.writeFieldBegin("patternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.patternId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetPatternContentItemsArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_193: string = input.readString();
                        _args.token = value_193;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_194: string = input.readString();
                        _args.patternId = value_194;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.patternId !== undefined) {
            return new GetPatternContentItemsArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetPatternContentItemsArgs from input");
        }
    }
}
export interface ICreateOrUpdateStagesAndLinksExArgsArgs {
    token: string;
    patternId: string;
    stages: Array<__ROOT_NAMESPACE__.DocumentPatternStage>;
    links: Array<__ROOT_NAMESPACE__.DocumentPatternStagesLink>;
    stageToRemove: Array<string>;
    linkToRemove: Array<string>;
}
export class CreateOrUpdateStagesAndLinksExArgs {
    public token: string;
    public patternId: string;
    public stages: Array<__ROOT_NAMESPACE__.DocumentPatternStage>;
    public links: Array<__ROOT_NAMESPACE__.DocumentPatternStagesLink>;
    public stageToRemove: Array<string>;
    public linkToRemove: Array<string>;
    constructor(args: ICreateOrUpdateStagesAndLinksExArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.patternId != null) {
            this.patternId = args.patternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[patternId] is unset!");
        }
        if (args != null && args.stages != null) {
            this.stages = args.stages;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[stages] is unset!");
        }
        if (args != null && args.links != null) {
            this.links = args.links;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[links] is unset!");
        }
        if (args != null && args.stageToRemove != null) {
            this.stageToRemove = args.stageToRemove;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[stageToRemove] is unset!");
        }
        if (args != null && args.linkToRemove != null) {
            this.linkToRemove = args.linkToRemove;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[linkToRemove] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CreateOrUpdateStagesAndLinksExArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.patternId != null) {
            output.writeFieldBegin("patternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.patternId);
            output.writeFieldEnd();
        }
        if (this.stages != null) {
            output.writeFieldBegin("stages", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.stages.length);
            this.stages.forEach((value_195: __ROOT_NAMESPACE__.DocumentPatternStage): void => {
                value_195.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.links != null) {
            output.writeFieldBegin("links", thrift.Thrift.Type.LIST, 4);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.links.length);
            this.links.forEach((value_196: __ROOT_NAMESPACE__.DocumentPatternStagesLink): void => {
                value_196.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.stageToRemove != null) {
            output.writeFieldBegin("stageToRemove", thrift.Thrift.Type.LIST, 5);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.stageToRemove.length);
            this.stageToRemove.forEach((value_197: string): void => {
                output.writeString(value_197);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.linkToRemove != null) {
            output.writeFieldBegin("linkToRemove", thrift.Thrift.Type.LIST, 6);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.linkToRemove.length);
            this.linkToRemove.forEach((value_198: string): void => {
                output.writeString(value_198);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CreateOrUpdateStagesAndLinksExArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_199: string = input.readString();
                        _args.token = value_199;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_200: string = input.readString();
                        _args.patternId = value_200;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_201: Array<__ROOT_NAMESPACE__.DocumentPatternStage> = new Array<__ROOT_NAMESPACE__.DocumentPatternStage>();
                        const metadata_16: thrift.TList = input.readListBegin();
                        const size_16: number = metadata_16.size;
                        for (let i_16: number = 0; i_16 < size_16; i_16++) {
                            const value_202: __ROOT_NAMESPACE__.DocumentPatternStage = __ROOT_NAMESPACE__.DocumentPatternStage.read(input);
                            value_201.push(value_202);
                        }
                        input.readListEnd();
                        _args.stages = value_201;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_203: Array<__ROOT_NAMESPACE__.DocumentPatternStagesLink> = new Array<__ROOT_NAMESPACE__.DocumentPatternStagesLink>();
                        const metadata_17: thrift.TList = input.readListBegin();
                        const size_17: number = metadata_17.size;
                        for (let i_17: number = 0; i_17 < size_17; i_17++) {
                            const value_204: __ROOT_NAMESPACE__.DocumentPatternStagesLink = __ROOT_NAMESPACE__.DocumentPatternStagesLink.read(input);
                            value_203.push(value_204);
                        }
                        input.readListEnd();
                        _args.links = value_203;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_205: Array<string> = new Array<string>();
                        const metadata_18: thrift.TList = input.readListBegin();
                        const size_18: number = metadata_18.size;
                        for (let i_18: number = 0; i_18 < size_18; i_18++) {
                            const value_206: string = input.readString();
                            value_205.push(value_206);
                        }
                        input.readListEnd();
                        _args.stageToRemove = value_205;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_207: Array<string> = new Array<string>();
                        const metadata_19: thrift.TList = input.readListBegin();
                        const size_19: number = metadata_19.size;
                        for (let i_19: number = 0; i_19 < size_19; i_19++) {
                            const value_208: string = input.readString();
                            value_207.push(value_208);
                        }
                        input.readListEnd();
                        _args.linkToRemove = value_207;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.patternId !== undefined && _args.stages !== undefined && _args.links !== undefined && _args.stageToRemove !== undefined && _args.linkToRemove !== undefined) {
            return new CreateOrUpdateStagesAndLinksExArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read CreateOrUpdateStagesAndLinksExArgs from input");
        }
    }
}
export interface IGetAvailableActionListArgsArgs {
    token: string;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetAvailableActionListArgs {
    public token: string;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetAvailableActionListArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAvailableActionListArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 2);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAvailableActionListArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_209: string = input.readString();
                        _args.token = value_209;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_210: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_210;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.filter !== undefined) {
            return new GetAvailableActionListArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAvailableActionListArgs from input");
        }
    }
}
export interface IAddPatternNightlyDocFieldsTaskArgsArgs {
    token: string;
    patternId: string;
}
export class AddPatternNightlyDocFieldsTaskArgs {
    public token: string;
    public patternId: string;
    constructor(args: IAddPatternNightlyDocFieldsTaskArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.patternId != null) {
            this.patternId = args.patternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[patternId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("AddPatternNightlyDocFieldsTaskArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.patternId != null) {
            output.writeFieldBegin("patternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.patternId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): AddPatternNightlyDocFieldsTaskArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_211: string = input.readString();
                        _args.token = value_211;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_212: string = input.readString();
                        _args.patternId = value_212;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.patternId !== undefined) {
            return new AddPatternNightlyDocFieldsTaskArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read AddPatternNightlyDocFieldsTaskArgs from input");
        }
    }
}
export interface IGetAllColumnsForPatternArgsArgs {
    token: string;
    patternId: string;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetAllColumnsForPatternArgs {
    public token: string;
    public patternId: string;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetAllColumnsForPatternArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.patternId != null) {
            this.patternId = args.patternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[patternId] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllColumnsForPatternArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.patternId != null) {
            output.writeFieldBegin("patternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.patternId);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 3);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllColumnsForPatternArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_213: string = input.readString();
                        _args.token = value_213;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_214: string = input.readString();
                        _args.patternId = value_214;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_215: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_215;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.patternId !== undefined && _args.filter !== undefined) {
            return new GetAllColumnsForPatternArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAllColumnsForPatternArgs from input");
        }
    }
}
export interface IChangePatternColumnsArgsArgs {
    token: string;
    patternId: string;
    useDefaultColumns: boolean;
    toSave: Array<__ROOT_NAMESPACE__.DocColumn>;
}
export class ChangePatternColumnsArgs {
    public token: string;
    public patternId: string;
    public useDefaultColumns: boolean;
    public toSave: Array<__ROOT_NAMESPACE__.DocColumn>;
    constructor(args: IChangePatternColumnsArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.patternId != null) {
            this.patternId = args.patternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[patternId] is unset!");
        }
        if (args != null && args.useDefaultColumns != null) {
            this.useDefaultColumns = args.useDefaultColumns;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[useDefaultColumns] is unset!");
        }
        if (args != null && args.toSave != null) {
            this.toSave = args.toSave;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[toSave] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ChangePatternColumnsArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.patternId != null) {
            output.writeFieldBegin("patternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.patternId);
            output.writeFieldEnd();
        }
        if (this.useDefaultColumns != null) {
            output.writeFieldBegin("useDefaultColumns", thrift.Thrift.Type.BOOL, 3);
            output.writeBool(this.useDefaultColumns);
            output.writeFieldEnd();
        }
        if (this.toSave != null) {
            output.writeFieldBegin("toSave", thrift.Thrift.Type.LIST, 4);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.toSave.length);
            this.toSave.forEach((value_216: __ROOT_NAMESPACE__.DocColumn): void => {
                value_216.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ChangePatternColumnsArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_217: string = input.readString();
                        _args.token = value_217;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_218: string = input.readString();
                        _args.patternId = value_218;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_219: boolean = input.readBool();
                        _args.useDefaultColumns = value_219;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_220: Array<__ROOT_NAMESPACE__.DocColumn> = new Array<__ROOT_NAMESPACE__.DocColumn>();
                        const metadata_20: thrift.TList = input.readListBegin();
                        const size_20: number = metadata_20.size;
                        for (let i_20: number = 0; i_20 < size_20; i_20++) {
                            const value_221: __ROOT_NAMESPACE__.DocColumn = __ROOT_NAMESPACE__.DocColumn.read(input);
                            value_220.push(value_221);
                        }
                        input.readListEnd();
                        _args.toSave = value_220;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.patternId !== undefined && _args.useDefaultColumns !== undefined && _args.toSave !== undefined) {
            return new ChangePatternColumnsArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read ChangePatternColumnsArgs from input");
        }
    }
}
export interface IGetAllPDFPostDecoratorForPatternArgsArgs {
    token: string;
    patternId: string;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetAllPDFPostDecoratorForPatternArgs {
    public token: string;
    public patternId: string;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetAllPDFPostDecoratorForPatternArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.patternId != null) {
            this.patternId = args.patternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[patternId] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllPDFPostDecoratorForPatternArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.patternId != null) {
            output.writeFieldBegin("patternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.patternId);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 3);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllPDFPostDecoratorForPatternArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_222: string = input.readString();
                        _args.token = value_222;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_223: string = input.readString();
                        _args.patternId = value_223;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_224: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_224;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.patternId !== undefined && _args.filter !== undefined) {
            return new GetAllPDFPostDecoratorForPatternArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAllPDFPostDecoratorForPatternArgs from input");
        }
    }
}
export interface IChangePatternPDFPostDecoratorArgsArgs {
    token: string;
    patternId: string;
    useDefaultPDFPostDecorators: boolean;
    toSave: Array<__ROOT_NAMESPACE__.PDFPostDecorator>;
}
export class ChangePatternPDFPostDecoratorArgs {
    public token: string;
    public patternId: string;
    public useDefaultPDFPostDecorators: boolean;
    public toSave: Array<__ROOT_NAMESPACE__.PDFPostDecorator>;
    constructor(args: IChangePatternPDFPostDecoratorArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.patternId != null) {
            this.patternId = args.patternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[patternId] is unset!");
        }
        if (args != null && args.useDefaultPDFPostDecorators != null) {
            this.useDefaultPDFPostDecorators = args.useDefaultPDFPostDecorators;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[useDefaultPDFPostDecorators] is unset!");
        }
        if (args != null && args.toSave != null) {
            this.toSave = args.toSave;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[toSave] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ChangePatternPDFPostDecoratorArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.patternId != null) {
            output.writeFieldBegin("patternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.patternId);
            output.writeFieldEnd();
        }
        if (this.useDefaultPDFPostDecorators != null) {
            output.writeFieldBegin("useDefaultPDFPostDecorators", thrift.Thrift.Type.BOOL, 3);
            output.writeBool(this.useDefaultPDFPostDecorators);
            output.writeFieldEnd();
        }
        if (this.toSave != null) {
            output.writeFieldBegin("toSave", thrift.Thrift.Type.LIST, 4);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.toSave.length);
            this.toSave.forEach((value_225: __ROOT_NAMESPACE__.PDFPostDecorator): void => {
                value_225.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ChangePatternPDFPostDecoratorArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_226: string = input.readString();
                        _args.token = value_226;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_227: string = input.readString();
                        _args.patternId = value_227;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_228: boolean = input.readBool();
                        _args.useDefaultPDFPostDecorators = value_228;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_229: Array<__ROOT_NAMESPACE__.PDFPostDecorator> = new Array<__ROOT_NAMESPACE__.PDFPostDecorator>();
                        const metadata_21: thrift.TList = input.readListBegin();
                        const size_21: number = metadata_21.size;
                        for (let i_21: number = 0; i_21 < size_21; i_21++) {
                            const value_230: __ROOT_NAMESPACE__.PDFPostDecorator = __ROOT_NAMESPACE__.PDFPostDecorator.read(input);
                            value_229.push(value_230);
                        }
                        input.readListEnd();
                        _args.toSave = value_229;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.patternId !== undefined && _args.useDefaultPDFPostDecorators !== undefined && _args.toSave !== undefined) {
            return new ChangePatternPDFPostDecoratorArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read ChangePatternPDFPostDecoratorArgs from input");
        }
    }
}
export interface IGetAllowedContentItemTypeArgsArgs {
    token: string;
}
export class GetAllowedContentItemTypeArgs {
    public token: string;
    constructor(args: IGetAllowedContentItemTypeArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllowedContentItemTypeArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllowedContentItemTypeArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_231: string = input.readString();
                        _args.token = value_231;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined) {
            return new GetAllowedContentItemTypeArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAllowedContentItemTypeArgs from input");
        }
    }
}
export interface IChangeKSPNumberArgsArgs {
    token: string;
    patternId: string;
    departmentId: string;
    kspNumber: number;
}
export class ChangeKSPNumberArgs {
    public token: string;
    public patternId: string;
    public departmentId: string;
    public kspNumber: number;
    constructor(args: IChangeKSPNumberArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.patternId != null) {
            this.patternId = args.patternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[patternId] is unset!");
        }
        if (args != null && args.departmentId != null) {
            this.departmentId = args.departmentId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[departmentId] is unset!");
        }
        if (args != null && args.kspNumber != null) {
            this.kspNumber = args.kspNumber;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[kspNumber] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ChangeKSPNumberArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.patternId != null) {
            output.writeFieldBegin("patternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.patternId);
            output.writeFieldEnd();
        }
        if (this.departmentId != null) {
            output.writeFieldBegin("departmentId", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.departmentId);
            output.writeFieldEnd();
        }
        if (this.kspNumber != null) {
            output.writeFieldBegin("kspNumber", thrift.Thrift.Type.I32, 4);
            output.writeI32(this.kspNumber);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ChangeKSPNumberArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_232: string = input.readString();
                        _args.token = value_232;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_233: string = input.readString();
                        _args.patternId = value_233;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_234: string = input.readString();
                        _args.departmentId = value_234;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_235: number = input.readI32();
                        _args.kspNumber = value_235;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.patternId !== undefined && _args.departmentId !== undefined && _args.kspNumber !== undefined) {
            return new ChangeKSPNumberArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read ChangeKSPNumberArgs from input");
        }
    }
}
export interface IGetSubStatusesConfigArgsArgs {
    token: string;
}
export class GetSubStatusesConfigArgs {
    public token: string;
    constructor(args: IGetSubStatusesConfigArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetSubStatusesConfigArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetSubStatusesConfigArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_236: string = input.readString();
                        _args.token = value_236;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined) {
            return new GetSubStatusesConfigArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetSubStatusesConfigArgs from input");
        }
    }
}
export interface IGetAllDocumentPatternsResultArgs {
    success?: Array<__ROOT_NAMESPACE__.DocumentPattern>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetAllDocumentPatternsResult {
    public success?: Array<__ROOT_NAMESPACE__.DocumentPattern>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetAllDocumentPatternsResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllDocumentPatternsResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_237: __ROOT_NAMESPACE__.DocumentPattern): void => {
                value_237.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllDocumentPatternsResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_238: Array<__ROOT_NAMESPACE__.DocumentPattern> = new Array<__ROOT_NAMESPACE__.DocumentPattern>();
                        const metadata_22: thrift.TList = input.readListBegin();
                        const size_22: number = metadata_22.size;
                        for (let i_22: number = 0; i_22 < size_22; i_22++) {
                            const value_239: __ROOT_NAMESPACE__.DocumentPattern = __ROOT_NAMESPACE__.DocumentPattern.read(input);
                            value_238.push(value_239);
                        }
                        input.readListEnd();
                        _args.success = value_238;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_240: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_240;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_241: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_241;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAllDocumentPatternsResult(_args);
    }
}
export interface IGetAllDocumentPatternsGroupByNameResultArgs {
    success?: Array<__ROOT_NAMESPACE__.SimpleDocumentPatternOrGroup>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetAllDocumentPatternsGroupByNameResult {
    public success?: Array<__ROOT_NAMESPACE__.SimpleDocumentPatternOrGroup>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetAllDocumentPatternsGroupByNameResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllDocumentPatternsGroupByNameResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_242: __ROOT_NAMESPACE__.SimpleDocumentPatternOrGroup): void => {
                value_242.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllDocumentPatternsGroupByNameResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_243: Array<__ROOT_NAMESPACE__.SimpleDocumentPatternOrGroup> = new Array<__ROOT_NAMESPACE__.SimpleDocumentPatternOrGroup>();
                        const metadata_23: thrift.TList = input.readListBegin();
                        const size_23: number = metadata_23.size;
                        for (let i_23: number = 0; i_23 < size_23; i_23++) {
                            const value_244: __ROOT_NAMESPACE__.SimpleDocumentPatternOrGroup = __ROOT_NAMESPACE__.SimpleDocumentPatternOrGroup.read(input);
                            value_243.push(value_244);
                        }
                        input.readListEnd();
                        _args.success = value_243;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_245: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_245;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_246: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_246;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAllDocumentPatternsGroupByNameResult(_args);
    }
}
export interface IGetDocumentPatternResultArgs {
    success?: __ROOT_NAMESPACE__.DocumentPattern;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetDocumentPatternResult {
    public success?: __ROOT_NAMESPACE__.DocumentPattern;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetDocumentPatternResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetDocumentPatternResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetDocumentPatternResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_247: __ROOT_NAMESPACE__.DocumentPattern = __ROOT_NAMESPACE__.DocumentPattern.read(input);
                        _args.success = value_247;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_248: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_248;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_249: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_249;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetDocumentPatternResult(_args);
    }
}
export interface IDeleteDocumentPatternResultArgs {
    success?: boolean;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class DeleteDocumentPatternResult {
    public success?: boolean;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IDeleteDocumentPatternResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("DeleteDocumentPatternResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): DeleteDocumentPatternResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_250: boolean = input.readBool();
                        _args.success = value_250;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_251: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_251;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_252: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_252;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new DeleteDocumentPatternResult(_args);
    }
}
export interface ICreateOrUpdateDocumentPatternResultArgs {
    success?: __ROOT_NAMESPACE__.DocumentPattern;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class CreateOrUpdateDocumentPatternResult {
    public success?: __ROOT_NAMESPACE__.DocumentPattern;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: ICreateOrUpdateDocumentPatternResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CreateOrUpdateDocumentPatternResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CreateOrUpdateDocumentPatternResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_253: __ROOT_NAMESPACE__.DocumentPattern = __ROOT_NAMESPACE__.DocumentPattern.read(input);
                        _args.success = value_253;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_254: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_254;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_255: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_255;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new CreateOrUpdateDocumentPatternResult(_args);
    }
}
export interface ICreateDocumentPatternResultArgs {
    success?: __ROOT_NAMESPACE__.DocumentPattern;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class CreateDocumentPatternResult {
    public success?: __ROOT_NAMESPACE__.DocumentPattern;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: ICreateDocumentPatternResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CreateDocumentPatternResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CreateDocumentPatternResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_256: __ROOT_NAMESPACE__.DocumentPattern = __ROOT_NAMESPACE__.DocumentPattern.read(input);
                        _args.success = value_256;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_257: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_257;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_258: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_258;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new CreateDocumentPatternResult(_args);
    }
}
export interface IUpdateDocumentPatternResultArgs {
    success?: __ROOT_NAMESPACE__.DocumentPattern;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class UpdateDocumentPatternResult {
    public success?: __ROOT_NAMESPACE__.DocumentPattern;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IUpdateDocumentPatternResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("UpdateDocumentPatternResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): UpdateDocumentPatternResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_259: __ROOT_NAMESPACE__.DocumentPattern = __ROOT_NAMESPACE__.DocumentPattern.read(input);
                        _args.success = value_259;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_260: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_260;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_261: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_261;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new UpdateDocumentPatternResult(_args);
    }
}
export interface IExportPatternAsDocumentDraftXMLResultArgs {
    success?: Buffer;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class ExportPatternAsDocumentDraftXMLResult {
    public success?: Buffer;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IExportPatternAsDocumentDraftXMLResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ExportPatternAsDocumentDraftXMLResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRING, 0);
            output.writeBinary(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ExportPatternAsDocumentDraftXMLResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_262: Buffer = input.readBinary();
                        _args.success = value_262;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_263: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_263;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_264: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_264;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ExportPatternAsDocumentDraftXMLResult(_args);
    }
}
export interface IGetAllDocumentPatternStagesResultArgs {
    success?: Array<__ROOT_NAMESPACE__.DocumentPatternStage>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetAllDocumentPatternStagesResult {
    public success?: Array<__ROOT_NAMESPACE__.DocumentPatternStage>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetAllDocumentPatternStagesResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllDocumentPatternStagesResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_265: __ROOT_NAMESPACE__.DocumentPatternStage): void => {
                value_265.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllDocumentPatternStagesResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_266: Array<__ROOT_NAMESPACE__.DocumentPatternStage> = new Array<__ROOT_NAMESPACE__.DocumentPatternStage>();
                        const metadata_24: thrift.TList = input.readListBegin();
                        const size_24: number = metadata_24.size;
                        for (let i_24: number = 0; i_24 < size_24; i_24++) {
                            const value_267: __ROOT_NAMESPACE__.DocumentPatternStage = __ROOT_NAMESPACE__.DocumentPatternStage.read(input);
                            value_266.push(value_267);
                        }
                        input.readListEnd();
                        _args.success = value_266;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_268: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_268;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_269: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_269;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAllDocumentPatternStagesResult(_args);
    }
}
export interface IGetDocumentPatternStageResultArgs {
    success?: __ROOT_NAMESPACE__.DocumentPatternStage;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetDocumentPatternStageResult {
    public success?: __ROOT_NAMESPACE__.DocumentPatternStage;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetDocumentPatternStageResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetDocumentPatternStageResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetDocumentPatternStageResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_270: __ROOT_NAMESPACE__.DocumentPatternStage = __ROOT_NAMESPACE__.DocumentPatternStage.read(input);
                        _args.success = value_270;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_271: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_271;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_272: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_272;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetDocumentPatternStageResult(_args);
    }
}
export interface IDeleteDocumentPatternStageAndMoveDocumentsResultArgs {
    success?: boolean;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class DeleteDocumentPatternStageAndMoveDocumentsResult {
    public success?: boolean;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IDeleteDocumentPatternStageAndMoveDocumentsResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("DeleteDocumentPatternStageAndMoveDocumentsResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): DeleteDocumentPatternStageAndMoveDocumentsResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_273: boolean = input.readBool();
                        _args.success = value_273;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_274: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_274;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_275: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_275;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new DeleteDocumentPatternStageAndMoveDocumentsResult(_args);
    }
}
export interface ICreateOrUpdateStagesAndLinksResultArgs {
    success?: PatternData.PatternData;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class CreateOrUpdateStagesAndLinksResult {
    public success?: PatternData.PatternData;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: ICreateOrUpdateStagesAndLinksResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CreateOrUpdateStagesAndLinksResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CreateOrUpdateStagesAndLinksResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_276: PatternData.PatternData = PatternData.PatternData.read(input);
                        _args.success = value_276;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_277: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_277;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_278: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_278;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new CreateOrUpdateStagesAndLinksResult(_args);
    }
}
export interface IGetAllDocumentPatternStagesLinksResultArgs {
    success?: Array<__ROOT_NAMESPACE__.DocumentPatternStagesLink>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetAllDocumentPatternStagesLinksResult {
    public success?: Array<__ROOT_NAMESPACE__.DocumentPatternStagesLink>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetAllDocumentPatternStagesLinksResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllDocumentPatternStagesLinksResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_279: __ROOT_NAMESPACE__.DocumentPatternStagesLink): void => {
                value_279.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllDocumentPatternStagesLinksResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_280: Array<__ROOT_NAMESPACE__.DocumentPatternStagesLink> = new Array<__ROOT_NAMESPACE__.DocumentPatternStagesLink>();
                        const metadata_25: thrift.TList = input.readListBegin();
                        const size_25: number = metadata_25.size;
                        for (let i_25: number = 0; i_25 < size_25; i_25++) {
                            const value_281: __ROOT_NAMESPACE__.DocumentPatternStagesLink = __ROOT_NAMESPACE__.DocumentPatternStagesLink.read(input);
                            value_280.push(value_281);
                        }
                        input.readListEnd();
                        _args.success = value_280;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_282: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_282;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_283: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_283;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAllDocumentPatternStagesLinksResult(_args);
    }
}
export interface IGetDocumentPatternStageLinkResultArgs {
    success?: __ROOT_NAMESPACE__.DocumentPatternStagesLink;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetDocumentPatternStageLinkResult {
    public success?: __ROOT_NAMESPACE__.DocumentPatternStagesLink;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetDocumentPatternStageLinkResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetDocumentPatternStageLinkResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetDocumentPatternStageLinkResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_284: __ROOT_NAMESPACE__.DocumentPatternStagesLink = __ROOT_NAMESPACE__.DocumentPatternStagesLink.read(input);
                        _args.success = value_284;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_285: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_285;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_286: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_286;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetDocumentPatternStageLinkResult(_args);
    }
}
export interface ICreateOrUpdateDocumentPatternStagesLinkResultArgs {
    success?: __ROOT_NAMESPACE__.DocumentPatternStagesLink;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class CreateOrUpdateDocumentPatternStagesLinkResult {
    public success?: __ROOT_NAMESPACE__.DocumentPatternStagesLink;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: ICreateOrUpdateDocumentPatternStagesLinkResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CreateOrUpdateDocumentPatternStagesLinkResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CreateOrUpdateDocumentPatternStagesLinkResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_287: __ROOT_NAMESPACE__.DocumentPatternStagesLink = __ROOT_NAMESPACE__.DocumentPatternStagesLink.read(input);
                        _args.success = value_287;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_288: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_288;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_289: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_289;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new CreateOrUpdateDocumentPatternStagesLinkResult(_args);
    }
}
export interface IDeleteDocumentPatternStageLinkResultArgs {
    success?: boolean;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class DeleteDocumentPatternStageLinkResult {
    public success?: boolean;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IDeleteDocumentPatternStageLinkResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("DeleteDocumentPatternStageLinkResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): DeleteDocumentPatternStageLinkResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_290: boolean = input.readBool();
                        _args.success = value_290;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_291: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_291;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_292: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_292;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new DeleteDocumentPatternStageLinkResult(_args);
    }
}
export interface IGetAllDocumentPatternStageExecutorsResultArgs {
    success?: Array<DocumentPatternStagesExecutor.DocumentPatternStagesExecutor>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetAllDocumentPatternStageExecutorsResult {
    public success?: Array<DocumentPatternStagesExecutor.DocumentPatternStagesExecutor>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetAllDocumentPatternStageExecutorsResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllDocumentPatternStageExecutorsResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_293: DocumentPatternStagesExecutor.DocumentPatternStagesExecutor): void => {
                value_293.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllDocumentPatternStageExecutorsResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_294: Array<DocumentPatternStagesExecutor.DocumentPatternStagesExecutor> = new Array<DocumentPatternStagesExecutor.DocumentPatternStagesExecutor>();
                        const metadata_26: thrift.TList = input.readListBegin();
                        const size_26: number = metadata_26.size;
                        for (let i_26: number = 0; i_26 < size_26; i_26++) {
                            const value_295: DocumentPatternStagesExecutor.DocumentPatternStagesExecutor = DocumentPatternStagesExecutor.DocumentPatternStagesExecutor.read(input);
                            value_294.push(value_295);
                        }
                        input.readListEnd();
                        _args.success = value_294;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_296: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_296;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_297: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_297;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAllDocumentPatternStageExecutorsResult(_args);
    }
}
export interface IAddExecutorsToDocumentPatternStageResultArgs {
    success?: boolean;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class AddExecutorsToDocumentPatternStageResult {
    public success?: boolean;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IAddExecutorsToDocumentPatternStageResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("AddExecutorsToDocumentPatternStageResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): AddExecutorsToDocumentPatternStageResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_298: boolean = input.readBool();
                        _args.success = value_298;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_299: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_299;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_300: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_300;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new AddExecutorsToDocumentPatternStageResult(_args);
    }
}
export interface IDeleteExecutorsFromDocumentPatternStageResultArgs {
    success?: boolean;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class DeleteExecutorsFromDocumentPatternStageResult {
    public success?: boolean;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IDeleteExecutorsFromDocumentPatternStageResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("DeleteExecutorsFromDocumentPatternStageResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): DeleteExecutorsFromDocumentPatternStageResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_301: boolean = input.readBool();
                        _args.success = value_301;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_302: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_302;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_303: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_303;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new DeleteExecutorsFromDocumentPatternStageResult(_args);
    }
}
export interface ICheckDocumentPatternResultArgs {
    success?: Array<__ROOT_NAMESPACE__.PreconditionException>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class CheckDocumentPatternResult {
    public success?: Array<__ROOT_NAMESPACE__.PreconditionException>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: ICheckDocumentPatternResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CheckDocumentPatternResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_304: __ROOT_NAMESPACE__.PreconditionException): void => {
                value_304.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CheckDocumentPatternResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_305: Array<__ROOT_NAMESPACE__.PreconditionException> = new Array<__ROOT_NAMESPACE__.PreconditionException>();
                        const metadata_27: thrift.TList = input.readListBegin();
                        const size_27: number = metadata_27.size;
                        for (let i_27: number = 0; i_27 < size_27; i_27++) {
                            const value_306: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                            value_305.push(value_306);
                        }
                        input.readListEnd();
                        _args.success = value_305;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_307: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_307;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_308: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_308;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new CheckDocumentPatternResult(_args);
    }
}
export interface ICreateOrUpdatePatternContentItemsResultArgs {
    success?: Array<__ROOT_NAMESPACE__.ContentItem>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class CreateOrUpdatePatternContentItemsResult {
    public success?: Array<__ROOT_NAMESPACE__.ContentItem>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: ICreateOrUpdatePatternContentItemsResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CreateOrUpdatePatternContentItemsResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_309: __ROOT_NAMESPACE__.ContentItem): void => {
                value_309.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CreateOrUpdatePatternContentItemsResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_310: Array<__ROOT_NAMESPACE__.ContentItem> = new Array<__ROOT_NAMESPACE__.ContentItem>();
                        const metadata_28: thrift.TList = input.readListBegin();
                        const size_28: number = metadata_28.size;
                        for (let i_28: number = 0; i_28 < size_28; i_28++) {
                            const value_311: __ROOT_NAMESPACE__.ContentItem = __ROOT_NAMESPACE__.ContentItem.read(input);
                            value_310.push(value_311);
                        }
                        input.readListEnd();
                        _args.success = value_310;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_312: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_312;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_313: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_313;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new CreateOrUpdatePatternContentItemsResult(_args);
    }
}
export interface IGetAllDocumentPatternGroupsResultArgs {
    success?: Array<__ROOT_NAMESPACE__.DocumentPatternGroup>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetAllDocumentPatternGroupsResult {
    public success?: Array<__ROOT_NAMESPACE__.DocumentPatternGroup>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetAllDocumentPatternGroupsResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllDocumentPatternGroupsResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_314: __ROOT_NAMESPACE__.DocumentPatternGroup): void => {
                value_314.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllDocumentPatternGroupsResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_315: Array<__ROOT_NAMESPACE__.DocumentPatternGroup> = new Array<__ROOT_NAMESPACE__.DocumentPatternGroup>();
                        const metadata_29: thrift.TList = input.readListBegin();
                        const size_29: number = metadata_29.size;
                        for (let i_29: number = 0; i_29 < size_29; i_29++) {
                            const value_316: __ROOT_NAMESPACE__.DocumentPatternGroup = __ROOT_NAMESPACE__.DocumentPatternGroup.read(input);
                            value_315.push(value_316);
                        }
                        input.readListEnd();
                        _args.success = value_315;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_317: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_317;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_318: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_318;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAllDocumentPatternGroupsResult(_args);
    }
}
export interface IGetAllDocumentPatternGroupsGroupByNameResultArgs {
    success?: Array<__ROOT_NAMESPACE__.SimpleDocumentPatternOrGroup>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetAllDocumentPatternGroupsGroupByNameResult {
    public success?: Array<__ROOT_NAMESPACE__.SimpleDocumentPatternOrGroup>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetAllDocumentPatternGroupsGroupByNameResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllDocumentPatternGroupsGroupByNameResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_319: __ROOT_NAMESPACE__.SimpleDocumentPatternOrGroup): void => {
                value_319.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllDocumentPatternGroupsGroupByNameResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_320: Array<__ROOT_NAMESPACE__.SimpleDocumentPatternOrGroup> = new Array<__ROOT_NAMESPACE__.SimpleDocumentPatternOrGroup>();
                        const metadata_30: thrift.TList = input.readListBegin();
                        const size_30: number = metadata_30.size;
                        for (let i_30: number = 0; i_30 < size_30; i_30++) {
                            const value_321: __ROOT_NAMESPACE__.SimpleDocumentPatternOrGroup = __ROOT_NAMESPACE__.SimpleDocumentPatternOrGroup.read(input);
                            value_320.push(value_321);
                        }
                        input.readListEnd();
                        _args.success = value_320;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_322: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_322;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_323: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_323;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAllDocumentPatternGroupsGroupByNameResult(_args);
    }
}
export interface ICreateOrUpdateDocumentPatternGroupResultArgs {
    success?: __ROOT_NAMESPACE__.DocumentPatternGroup;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class CreateOrUpdateDocumentPatternGroupResult {
    public success?: __ROOT_NAMESPACE__.DocumentPatternGroup;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: ICreateOrUpdateDocumentPatternGroupResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CreateOrUpdateDocumentPatternGroupResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CreateOrUpdateDocumentPatternGroupResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_324: __ROOT_NAMESPACE__.DocumentPatternGroup = __ROOT_NAMESPACE__.DocumentPatternGroup.read(input);
                        _args.success = value_324;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_325: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_325;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_326: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_326;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new CreateOrUpdateDocumentPatternGroupResult(_args);
    }
}
export interface IDeleteDocumentPatternGroupResultArgs {
    success?: boolean;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class DeleteDocumentPatternGroupResult {
    public success?: boolean;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IDeleteDocumentPatternGroupResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("DeleteDocumentPatternGroupResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): DeleteDocumentPatternGroupResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_327: boolean = input.readBool();
                        _args.success = value_327;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_328: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_328;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_329: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_329;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new DeleteDocumentPatternGroupResult(_args);
    }
}
export interface IGetAllAvailableStagesResultArgs {
    success?: Array<AvailablePatternStage.AvailablePatternStage>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetAllAvailableStagesResult {
    public success?: Array<AvailablePatternStage.AvailablePatternStage>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetAllAvailableStagesResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllAvailableStagesResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_330: AvailablePatternStage.AvailablePatternStage): void => {
                value_330.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllAvailableStagesResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_331: Array<AvailablePatternStage.AvailablePatternStage> = new Array<AvailablePatternStage.AvailablePatternStage>();
                        const metadata_31: thrift.TList = input.readListBegin();
                        const size_31: number = metadata_31.size;
                        for (let i_31: number = 0; i_31 < size_31; i_31++) {
                            const value_332: AvailablePatternStage.AvailablePatternStage = AvailablePatternStage.AvailablePatternStage.read(input);
                            value_331.push(value_332);
                        }
                        input.readListEnd();
                        _args.success = value_331;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_333: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_333;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_334: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_334;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAllAvailableStagesResult(_args);
    }
}
export interface IGetAvailableLinkAnswersByPatternResultArgs {
    success?: Set<string>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetAvailableLinkAnswersByPatternResult {
    public success?: Set<string>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetAvailableLinkAnswersByPatternResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAvailableLinkAnswersByPatternResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.SET, 0);
            output.writeSetBegin(thrift.Thrift.Type.STRING, this.success.size);
            this.success.forEach((value_335: string): void => {
                output.writeString(value_335);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAvailableLinkAnswersByPatternResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_336: Set<string> = new Set<string>();
                        const metadata_32: thrift.TSet = input.readSetBegin();
                        const size_32: number = metadata_32.size;
                        for (let i_32: number = 0; i_32 < size_32; i_32++) {
                            const value_337: string = input.readString();
                            value_336.add(value_337);
                        }
                        input.readSetEnd();
                        _args.success = value_336;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_338: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_338;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_339: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_339;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAvailableLinkAnswersByPatternResult(_args);
    }
}
export interface IRemoveAvailableStageResultArgs {
    success?: boolean;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class RemoveAvailableStageResult {
    public success?: boolean;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IRemoveAvailableStageResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RemoveAvailableStageResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RemoveAvailableStageResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_340: boolean = input.readBool();
                        _args.success = value_340;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_341: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_341;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_342: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_342;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new RemoveAvailableStageResult(_args);
    }
}
export interface IGetAllDigitalViewsResultArgs {
    success?: Array<DigitalView.DigitalView>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetAllDigitalViewsResult {
    public success?: Array<DigitalView.DigitalView>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetAllDigitalViewsResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllDigitalViewsResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_343: DigitalView.DigitalView): void => {
                value_343.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllDigitalViewsResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_344: Array<DigitalView.DigitalView> = new Array<DigitalView.DigitalView>();
                        const metadata_33: thrift.TList = input.readListBegin();
                        const size_33: number = metadata_33.size;
                        for (let i_33: number = 0; i_33 < size_33; i_33++) {
                            const value_345: DigitalView.DigitalView = DigitalView.DigitalView.read(input);
                            value_344.push(value_345);
                        }
                        input.readListEnd();
                        _args.success = value_344;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_346: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_346;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_347: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_347;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAllDigitalViewsResult(_args);
    }
}
export interface ICreateOrUpdateDigitalViewResultArgs {
    success?: DigitalView.DigitalView;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class CreateOrUpdateDigitalViewResult {
    public success?: DigitalView.DigitalView;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: ICreateOrUpdateDigitalViewResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CreateOrUpdateDigitalViewResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CreateOrUpdateDigitalViewResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_348: DigitalView.DigitalView = DigitalView.DigitalView.read(input);
                        _args.success = value_348;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_349: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_349;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_350: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_350;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new CreateOrUpdateDigitalViewResult(_args);
    }
}
export interface IDeleteDigitalViewResultArgs {
    success?: boolean;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class DeleteDigitalViewResult {
    public success?: boolean;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IDeleteDigitalViewResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("DeleteDigitalViewResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): DeleteDigitalViewResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_351: boolean = input.readBool();
                        _args.success = value_351;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_352: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_352;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_353: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_353;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new DeleteDigitalViewResult(_args);
    }
}
export interface IExportDocumentPatternResultArgs {
    success?: Buffer;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class ExportDocumentPatternResult {
    public success?: Buffer;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IExportDocumentPatternResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ExportDocumentPatternResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRING, 0);
            output.writeBinary(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ExportDocumentPatternResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_354: Buffer = input.readBinary();
                        _args.success = value_354;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_355: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_355;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_356: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_356;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ExportDocumentPatternResult(_args);
    }
}
export interface IImportDocumentPatternResultArgs {
    success?: __ROOT_NAMESPACE__.DocumentPattern;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class ImportDocumentPatternResult {
    public success?: __ROOT_NAMESPACE__.DocumentPattern;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IImportDocumentPatternResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ImportDocumentPatternResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ImportDocumentPatternResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_357: __ROOT_NAMESPACE__.DocumentPattern = __ROOT_NAMESPACE__.DocumentPattern.read(input);
                        _args.success = value_357;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_358: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_358;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_359: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_359;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ImportDocumentPatternResult(_args);
    }
}
export interface IGetPatternUserGroupResultArgs {
    success?: Array<PatternUserGroup.PatternUserGroup>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetPatternUserGroupResult {
    public success?: Array<PatternUserGroup.PatternUserGroup>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetPatternUserGroupResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetPatternUserGroupResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_360: PatternUserGroup.PatternUserGroup): void => {
                value_360.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetPatternUserGroupResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_361: Array<PatternUserGroup.PatternUserGroup> = new Array<PatternUserGroup.PatternUserGroup>();
                        const metadata_34: thrift.TList = input.readListBegin();
                        const size_34: number = metadata_34.size;
                        for (let i_34: number = 0; i_34 < size_34; i_34++) {
                            const value_362: PatternUserGroup.PatternUserGroup = PatternUserGroup.PatternUserGroup.read(input);
                            value_361.push(value_362);
                        }
                        input.readListEnd();
                        _args.success = value_361;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_363: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_363;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_364: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_364;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetPatternUserGroupResult(_args);
    }
}
export interface ICreateOrUpdatePatternUserGroupResultArgs {
    success?: boolean;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class CreateOrUpdatePatternUserGroupResult {
    public success?: boolean;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: ICreateOrUpdatePatternUserGroupResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CreateOrUpdatePatternUserGroupResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CreateOrUpdatePatternUserGroupResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_365: boolean = input.readBool();
                        _args.success = value_365;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_366: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_366;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_367: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_367;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new CreateOrUpdatePatternUserGroupResult(_args);
    }
}
export interface IGetPatternProcessRolesResultArgs {
    success?: Array<__ROOT_NAMESPACE__.PatternProcessRole>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetPatternProcessRolesResult {
    public success?: Array<__ROOT_NAMESPACE__.PatternProcessRole>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetPatternProcessRolesResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetPatternProcessRolesResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_368: __ROOT_NAMESPACE__.PatternProcessRole): void => {
                value_368.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetPatternProcessRolesResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_369: Array<__ROOT_NAMESPACE__.PatternProcessRole> = new Array<__ROOT_NAMESPACE__.PatternProcessRole>();
                        const metadata_35: thrift.TList = input.readListBegin();
                        const size_35: number = metadata_35.size;
                        for (let i_35: number = 0; i_35 < size_35; i_35++) {
                            const value_370: __ROOT_NAMESPACE__.PatternProcessRole = __ROOT_NAMESPACE__.PatternProcessRole.read(input);
                            value_369.push(value_370);
                        }
                        input.readListEnd();
                        _args.success = value_369;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_371: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_371;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_372: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_372;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetPatternProcessRolesResult(_args);
    }
}
export interface IChangePatternProcessRolesResultArgs {
    success?: Array<__ROOT_NAMESPACE__.PatternProcessRole>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class ChangePatternProcessRolesResult {
    public success?: Array<__ROOT_NAMESPACE__.PatternProcessRole>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IChangePatternProcessRolesResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ChangePatternProcessRolesResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_373: __ROOT_NAMESPACE__.PatternProcessRole): void => {
                value_373.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ChangePatternProcessRolesResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_374: Array<__ROOT_NAMESPACE__.PatternProcessRole> = new Array<__ROOT_NAMESPACE__.PatternProcessRole>();
                        const metadata_36: thrift.TList = input.readListBegin();
                        const size_36: number = metadata_36.size;
                        for (let i_36: number = 0; i_36 < size_36; i_36++) {
                            const value_375: __ROOT_NAMESPACE__.PatternProcessRole = __ROOT_NAMESPACE__.PatternProcessRole.read(input);
                            value_374.push(value_375);
                        }
                        input.readListEnd();
                        _args.success = value_374;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_376: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_376;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_377: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_377;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ChangePatternProcessRolesResult(_args);
    }
}
export interface IGetPatternVariablesResultArgs {
    success?: Array<__ROOT_NAMESPACE__.PatternVariable>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetPatternVariablesResult {
    public success?: Array<__ROOT_NAMESPACE__.PatternVariable>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetPatternVariablesResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetPatternVariablesResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_378: __ROOT_NAMESPACE__.PatternVariable): void => {
                value_378.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetPatternVariablesResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_379: Array<__ROOT_NAMESPACE__.PatternVariable> = new Array<__ROOT_NAMESPACE__.PatternVariable>();
                        const metadata_37: thrift.TList = input.readListBegin();
                        const size_37: number = metadata_37.size;
                        for (let i_37: number = 0; i_37 < size_37; i_37++) {
                            const value_380: __ROOT_NAMESPACE__.PatternVariable = __ROOT_NAMESPACE__.PatternVariable.read(input);
                            value_379.push(value_380);
                        }
                        input.readListEnd();
                        _args.success = value_379;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_381: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_381;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_382: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_382;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetPatternVariablesResult(_args);
    }
}
export interface IChangePatternVariablesResultArgs {
    success?: Array<__ROOT_NAMESPACE__.PatternVariable>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class ChangePatternVariablesResult {
    public success?: Array<__ROOT_NAMESPACE__.PatternVariable>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IChangePatternVariablesResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ChangePatternVariablesResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_383: __ROOT_NAMESPACE__.PatternVariable): void => {
                value_383.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ChangePatternVariablesResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_384: Array<__ROOT_NAMESPACE__.PatternVariable> = new Array<__ROOT_NAMESPACE__.PatternVariable>();
                        const metadata_38: thrift.TList = input.readListBegin();
                        const size_38: number = metadata_38.size;
                        for (let i_38: number = 0; i_38 < size_38; i_38++) {
                            const value_385: __ROOT_NAMESPACE__.PatternVariable = __ROOT_NAMESPACE__.PatternVariable.read(input);
                            value_384.push(value_385);
                        }
                        input.readListEnd();
                        _args.success = value_384;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_386: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_386;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_387: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_387;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ChangePatternVariablesResult(_args);
    }
}
export interface IAddAvailablePatternStageToAccountsResultArgs {
    success?: boolean;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class AddAvailablePatternStageToAccountsResult {
    public success?: boolean;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IAddAvailablePatternStageToAccountsResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("AddAvailablePatternStageToAccountsResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): AddAvailablePatternStageToAccountsResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_388: boolean = input.readBool();
                        _args.success = value_388;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_389: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_389;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_390: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_390;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new AddAvailablePatternStageToAccountsResult(_args);
    }
}
export interface IGetAllPatternAttachmentTemplatesResultArgs {
    success?: Array<PatternAttachmentTemplate.PatternAttachmentTemplate>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetAllPatternAttachmentTemplatesResult {
    public success?: Array<PatternAttachmentTemplate.PatternAttachmentTemplate>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetAllPatternAttachmentTemplatesResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllPatternAttachmentTemplatesResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_391: PatternAttachmentTemplate.PatternAttachmentTemplate): void => {
                value_391.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllPatternAttachmentTemplatesResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_392: Array<PatternAttachmentTemplate.PatternAttachmentTemplate> = new Array<PatternAttachmentTemplate.PatternAttachmentTemplate>();
                        const metadata_39: thrift.TList = input.readListBegin();
                        const size_39: number = metadata_39.size;
                        for (let i_39: number = 0; i_39 < size_39; i_39++) {
                            const value_393: PatternAttachmentTemplate.PatternAttachmentTemplate = PatternAttachmentTemplate.PatternAttachmentTemplate.read(input);
                            value_392.push(value_393);
                        }
                        input.readListEnd();
                        _args.success = value_392;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_394: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_394;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_395: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_395;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAllPatternAttachmentTemplatesResult(_args);
    }
}
export interface IGetPatternAttachmentTemplateByIdResultArgs {
    success?: PatternAttachmentTemplate.PatternAttachmentTemplate;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetPatternAttachmentTemplateByIdResult {
    public success?: PatternAttachmentTemplate.PatternAttachmentTemplate;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetPatternAttachmentTemplateByIdResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetPatternAttachmentTemplateByIdResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetPatternAttachmentTemplateByIdResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_396: PatternAttachmentTemplate.PatternAttachmentTemplate = PatternAttachmentTemplate.PatternAttachmentTemplate.read(input);
                        _args.success = value_396;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_397: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_397;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_398: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_398;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetPatternAttachmentTemplateByIdResult(_args);
    }
}
export interface ICreateOrUpdatePatternAttachmentTemplateResultArgs {
    success?: PatternAttachmentTemplate.PatternAttachmentTemplate;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class CreateOrUpdatePatternAttachmentTemplateResult {
    public success?: PatternAttachmentTemplate.PatternAttachmentTemplate;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: ICreateOrUpdatePatternAttachmentTemplateResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CreateOrUpdatePatternAttachmentTemplateResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CreateOrUpdatePatternAttachmentTemplateResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_399: PatternAttachmentTemplate.PatternAttachmentTemplate = PatternAttachmentTemplate.PatternAttachmentTemplate.read(input);
                        _args.success = value_399;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_400: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_400;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_401: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_401;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new CreateOrUpdatePatternAttachmentTemplateResult(_args);
    }
}
export interface IDownloadPatternAttachmentTemplateResultArgs {
    success?: Buffer;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class DownloadPatternAttachmentTemplateResult {
    public success?: Buffer;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IDownloadPatternAttachmentTemplateResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("DownloadPatternAttachmentTemplateResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRING, 0);
            output.writeBinary(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): DownloadPatternAttachmentTemplateResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_402: Buffer = input.readBinary();
                        _args.success = value_402;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_403: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_403;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_404: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_404;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new DownloadPatternAttachmentTemplateResult(_args);
    }
}
export interface IRemovePatternAttachmentTemplateResultArgs {
    success?: boolean;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class RemovePatternAttachmentTemplateResult {
    public success?: boolean;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IRemovePatternAttachmentTemplateResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RemovePatternAttachmentTemplateResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RemovePatternAttachmentTemplateResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_405: boolean = input.readBool();
                        _args.success = value_405;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_406: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_406;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_407: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_407;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new RemovePatternAttachmentTemplateResult(_args);
    }
}
export interface IChangeStartDocNumberSequenceResultArgs {
    success?: boolean;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class ChangeStartDocNumberSequenceResult {
    public success?: boolean;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IChangeStartDocNumberSequenceResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ChangeStartDocNumberSequenceResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ChangeStartDocNumberSequenceResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_408: boolean = input.readBool();
                        _args.success = value_408;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_409: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_409;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_410: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_410;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ChangeStartDocNumberSequenceResult(_args);
    }
}
export interface IGetAllContentHoldersResultArgs {
    success?: Array<__ROOT_NAMESPACE__.ContentHolder>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetAllContentHoldersResult {
    public success?: Array<__ROOT_NAMESPACE__.ContentHolder>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetAllContentHoldersResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllContentHoldersResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_411: __ROOT_NAMESPACE__.ContentHolder): void => {
                value_411.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllContentHoldersResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_412: Array<__ROOT_NAMESPACE__.ContentHolder> = new Array<__ROOT_NAMESPACE__.ContentHolder>();
                        const metadata_40: thrift.TList = input.readListBegin();
                        const size_40: number = metadata_40.size;
                        for (let i_40: number = 0; i_40 < size_40; i_40++) {
                            const value_413: __ROOT_NAMESPACE__.ContentHolder = __ROOT_NAMESPACE__.ContentHolder.read(input);
                            value_412.push(value_413);
                        }
                        input.readListEnd();
                        _args.success = value_412;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_414: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_414;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_415: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_415;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAllContentHoldersResult(_args);
    }
}
export interface IChangeContentHoldersResultArgs {
    success?: Array<__ROOT_NAMESPACE__.ContentHolder>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class ChangeContentHoldersResult {
    public success?: Array<__ROOT_NAMESPACE__.ContentHolder>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IChangeContentHoldersResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ChangeContentHoldersResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_416: __ROOT_NAMESPACE__.ContentHolder): void => {
                value_416.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ChangeContentHoldersResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_417: Array<__ROOT_NAMESPACE__.ContentHolder> = new Array<__ROOT_NAMESPACE__.ContentHolder>();
                        const metadata_41: thrift.TList = input.readListBegin();
                        const size_41: number = metadata_41.size;
                        for (let i_41: number = 0; i_41 < size_41; i_41++) {
                            const value_418: __ROOT_NAMESPACE__.ContentHolder = __ROOT_NAMESPACE__.ContentHolder.read(input);
                            value_417.push(value_418);
                        }
                        input.readListEnd();
                        _args.success = value_417;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_419: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_419;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_420: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_420;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ChangeContentHoldersResult(_args);
    }
}
export interface IGetPatternRelationModelResultArgs {
    success?: PatternRelationModel.PatternRelationModel;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetPatternRelationModelResult {
    public success?: PatternRelationModel.PatternRelationModel;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetPatternRelationModelResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetPatternRelationModelResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetPatternRelationModelResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_421: PatternRelationModel.PatternRelationModel = PatternRelationModel.PatternRelationModel.read(input);
                        _args.success = value_421;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_422: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_422;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_423: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_423;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetPatternRelationModelResult(_args);
    }
}
export interface IGetNomenclatureNumberResultArgs {
    success?: __ROOT_NAMESPACE__.NomenclatureNumber;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetNomenclatureNumberResult {
    public success?: __ROOT_NAMESPACE__.NomenclatureNumber;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetNomenclatureNumberResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetNomenclatureNumberResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetNomenclatureNumberResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_424: __ROOT_NAMESPACE__.NomenclatureNumber = __ROOT_NAMESPACE__.NomenclatureNumber.read(input);
                        _args.success = value_424;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_425: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_425;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_426: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_426;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetNomenclatureNumberResult(_args);
    }
}
export interface IGetAllNomenclatureNumberResultArgs {
    success?: Array<__ROOT_NAMESPACE__.NomenclatureNumber>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetAllNomenclatureNumberResult {
    public success?: Array<__ROOT_NAMESPACE__.NomenclatureNumber>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetAllNomenclatureNumberResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllNomenclatureNumberResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_427: __ROOT_NAMESPACE__.NomenclatureNumber): void => {
                value_427.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllNomenclatureNumberResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_428: Array<__ROOT_NAMESPACE__.NomenclatureNumber> = new Array<__ROOT_NAMESPACE__.NomenclatureNumber>();
                        const metadata_42: thrift.TList = input.readListBegin();
                        const size_42: number = metadata_42.size;
                        for (let i_42: number = 0; i_42 < size_42; i_42++) {
                            const value_429: __ROOT_NAMESPACE__.NomenclatureNumber = __ROOT_NAMESPACE__.NomenclatureNumber.read(input);
                            value_428.push(value_429);
                        }
                        input.readListEnd();
                        _args.success = value_428;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_430: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_430;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_431: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_431;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAllNomenclatureNumberResult(_args);
    }
}
export interface IGetCountAllNomenclatureNumberResultArgs {
    success?: number | Int64;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetCountAllNomenclatureNumberResult {
    public success?: Int64;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetCountAllNomenclatureNumberResultArgs) {
        if (args != null && args.success != null) {
            if (typeof args.success === "number") {
                this.success = new Int64(args.success);
            }
            else {
                this.success = args.success;
            }
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetCountAllNomenclatureNumberResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.I64, 0);
            output.writeI64(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetCountAllNomenclatureNumberResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_432: Int64 = input.readI64();
                        _args.success = value_432;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_433: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_433;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_434: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_434;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetCountAllNomenclatureNumberResult(_args);
    }
}
export interface ICreateOrUpdateNomenclatureNumberResultArgs {
    success?: __ROOT_NAMESPACE__.NomenclatureNumber;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class CreateOrUpdateNomenclatureNumberResult {
    public success?: __ROOT_NAMESPACE__.NomenclatureNumber;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: ICreateOrUpdateNomenclatureNumberResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CreateOrUpdateNomenclatureNumberResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CreateOrUpdateNomenclatureNumberResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_435: __ROOT_NAMESPACE__.NomenclatureNumber = __ROOT_NAMESPACE__.NomenclatureNumber.read(input);
                        _args.success = value_435;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_436: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_436;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_437: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_437;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new CreateOrUpdateNomenclatureNumberResult(_args);
    }
}
export interface IRemoveNomenclatureNumberResultArgs {
    success?: boolean;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class RemoveNomenclatureNumberResult {
    public success?: boolean;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IRemoveNomenclatureNumberResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RemoveNomenclatureNumberResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RemoveNomenclatureNumberResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_438: boolean = input.readBool();
                        _args.success = value_438;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_439: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_439;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_440: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_440;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new RemoveNomenclatureNumberResult(_args);
    }
}
export interface IGetNomenclatureGroupResultArgs {
    success?: __ROOT_NAMESPACE__.NomenclatureGroup;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetNomenclatureGroupResult {
    public success?: __ROOT_NAMESPACE__.NomenclatureGroup;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetNomenclatureGroupResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetNomenclatureGroupResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetNomenclatureGroupResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_441: __ROOT_NAMESPACE__.NomenclatureGroup = __ROOT_NAMESPACE__.NomenclatureGroup.read(input);
                        _args.success = value_441;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_442: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_442;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_443: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_443;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetNomenclatureGroupResult(_args);
    }
}
export interface IGetAllNomenclatureGroupResultArgs {
    success?: Array<__ROOT_NAMESPACE__.NomenclatureGroup>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetAllNomenclatureGroupResult {
    public success?: Array<__ROOT_NAMESPACE__.NomenclatureGroup>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetAllNomenclatureGroupResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllNomenclatureGroupResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_444: __ROOT_NAMESPACE__.NomenclatureGroup): void => {
                value_444.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllNomenclatureGroupResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_445: Array<__ROOT_NAMESPACE__.NomenclatureGroup> = new Array<__ROOT_NAMESPACE__.NomenclatureGroup>();
                        const metadata_43: thrift.TList = input.readListBegin();
                        const size_43: number = metadata_43.size;
                        for (let i_43: number = 0; i_43 < size_43; i_43++) {
                            const value_446: __ROOT_NAMESPACE__.NomenclatureGroup = __ROOT_NAMESPACE__.NomenclatureGroup.read(input);
                            value_445.push(value_446);
                        }
                        input.readListEnd();
                        _args.success = value_445;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_447: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_447;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_448: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_448;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAllNomenclatureGroupResult(_args);
    }
}
export interface IGetCountAllNomenclatureGroupResultArgs {
    success?: number | Int64;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetCountAllNomenclatureGroupResult {
    public success?: Int64;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetCountAllNomenclatureGroupResultArgs) {
        if (args != null && args.success != null) {
            if (typeof args.success === "number") {
                this.success = new Int64(args.success);
            }
            else {
                this.success = args.success;
            }
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetCountAllNomenclatureGroupResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.I64, 0);
            output.writeI64(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetCountAllNomenclatureGroupResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_449: Int64 = input.readI64();
                        _args.success = value_449;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_450: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_450;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_451: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_451;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetCountAllNomenclatureGroupResult(_args);
    }
}
export interface ICreateOrUpdateNomenclatureGroupResultArgs {
    success?: __ROOT_NAMESPACE__.NomenclatureGroup;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class CreateOrUpdateNomenclatureGroupResult {
    public success?: __ROOT_NAMESPACE__.NomenclatureGroup;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: ICreateOrUpdateNomenclatureGroupResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CreateOrUpdateNomenclatureGroupResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CreateOrUpdateNomenclatureGroupResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_452: __ROOT_NAMESPACE__.NomenclatureGroup = __ROOT_NAMESPACE__.NomenclatureGroup.read(input);
                        _args.success = value_452;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_453: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_453;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_454: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_454;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new CreateOrUpdateNomenclatureGroupResult(_args);
    }
}
export interface IRemoveNomenclatureGroupResultArgs {
    success?: boolean;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class RemoveNomenclatureGroupResult {
    public success?: boolean;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IRemoveNomenclatureGroupResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RemoveNomenclatureGroupResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RemoveNomenclatureGroupResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_455: boolean = input.readBool();
                        _args.success = value_455;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_456: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_456;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_457: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_457;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new RemoveNomenclatureGroupResult(_args);
    }
}
export interface IGetInfoForCreateDocResultArgs {
    success?: InfoForCreateDoc.InfoForCreateDoc;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetInfoForCreateDocResult {
    public success?: InfoForCreateDoc.InfoForCreateDoc;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetInfoForCreateDocResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetInfoForCreateDocResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetInfoForCreateDocResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_458: InfoForCreateDoc.InfoForCreateDoc = InfoForCreateDoc.InfoForCreateDoc.read(input);
                        _args.success = value_458;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_459: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_459;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_460: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_460;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetInfoForCreateDocResult(_args);
    }
}
export interface IGetPatternContentItemsResultArgs {
    success?: Array<__ROOT_NAMESPACE__.ContentItem>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetPatternContentItemsResult {
    public success?: Array<__ROOT_NAMESPACE__.ContentItem>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetPatternContentItemsResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetPatternContentItemsResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_461: __ROOT_NAMESPACE__.ContentItem): void => {
                value_461.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetPatternContentItemsResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_462: Array<__ROOT_NAMESPACE__.ContentItem> = new Array<__ROOT_NAMESPACE__.ContentItem>();
                        const metadata_44: thrift.TList = input.readListBegin();
                        const size_44: number = metadata_44.size;
                        for (let i_44: number = 0; i_44 < size_44; i_44++) {
                            const value_463: __ROOT_NAMESPACE__.ContentItem = __ROOT_NAMESPACE__.ContentItem.read(input);
                            value_462.push(value_463);
                        }
                        input.readListEnd();
                        _args.success = value_462;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_464: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_464;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_465: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_465;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetPatternContentItemsResult(_args);
    }
}
export interface ICreateOrUpdateStagesAndLinksExResultArgs {
    success?: PatternData.PatternData;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class CreateOrUpdateStagesAndLinksExResult {
    public success?: PatternData.PatternData;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: ICreateOrUpdateStagesAndLinksExResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CreateOrUpdateStagesAndLinksExResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CreateOrUpdateStagesAndLinksExResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_466: PatternData.PatternData = PatternData.PatternData.read(input);
                        _args.success = value_466;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_467: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_467;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_468: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_468;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new CreateOrUpdateStagesAndLinksExResult(_args);
    }
}
export interface IGetAvailableActionListResultArgs {
    success?: Array<__ROOT_NAMESPACE__.AvailableAction>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetAvailableActionListResult {
    public success?: Array<__ROOT_NAMESPACE__.AvailableAction>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetAvailableActionListResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAvailableActionListResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_469: __ROOT_NAMESPACE__.AvailableAction): void => {
                value_469.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAvailableActionListResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_470: Array<__ROOT_NAMESPACE__.AvailableAction> = new Array<__ROOT_NAMESPACE__.AvailableAction>();
                        const metadata_45: thrift.TList = input.readListBegin();
                        const size_45: number = metadata_45.size;
                        for (let i_45: number = 0; i_45 < size_45; i_45++) {
                            const value_471: __ROOT_NAMESPACE__.AvailableAction = __ROOT_NAMESPACE__.AvailableAction.read(input);
                            value_470.push(value_471);
                        }
                        input.readListEnd();
                        _args.success = value_470;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_472: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_472;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_473: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_473;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAvailableActionListResult(_args);
    }
}
export interface IAddPatternNightlyDocFieldsTaskResultArgs {
    success?: boolean;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class AddPatternNightlyDocFieldsTaskResult {
    public success?: boolean;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IAddPatternNightlyDocFieldsTaskResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("AddPatternNightlyDocFieldsTaskResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): AddPatternNightlyDocFieldsTaskResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_474: boolean = input.readBool();
                        _args.success = value_474;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_475: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_475;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_476: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_476;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new AddPatternNightlyDocFieldsTaskResult(_args);
    }
}
export interface IGetAllColumnsForPatternResultArgs {
    success?: Array<__ROOT_NAMESPACE__.DocColumn>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetAllColumnsForPatternResult {
    public success?: Array<__ROOT_NAMESPACE__.DocColumn>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetAllColumnsForPatternResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllColumnsForPatternResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_477: __ROOT_NAMESPACE__.DocColumn): void => {
                value_477.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllColumnsForPatternResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_478: Array<__ROOT_NAMESPACE__.DocColumn> = new Array<__ROOT_NAMESPACE__.DocColumn>();
                        const metadata_46: thrift.TList = input.readListBegin();
                        const size_46: number = metadata_46.size;
                        for (let i_46: number = 0; i_46 < size_46; i_46++) {
                            const value_479: __ROOT_NAMESPACE__.DocColumn = __ROOT_NAMESPACE__.DocColumn.read(input);
                            value_478.push(value_479);
                        }
                        input.readListEnd();
                        _args.success = value_478;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_480: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_480;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_481: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_481;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAllColumnsForPatternResult(_args);
    }
}
export interface IChangePatternColumnsResultArgs {
    success?: boolean;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class ChangePatternColumnsResult {
    public success?: boolean;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IChangePatternColumnsResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ChangePatternColumnsResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ChangePatternColumnsResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_482: boolean = input.readBool();
                        _args.success = value_482;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_483: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_483;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_484: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_484;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ChangePatternColumnsResult(_args);
    }
}
export interface IGetAllPDFPostDecoratorForPatternResultArgs {
    success?: Array<__ROOT_NAMESPACE__.PDFPostDecorator>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetAllPDFPostDecoratorForPatternResult {
    public success?: Array<__ROOT_NAMESPACE__.PDFPostDecorator>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetAllPDFPostDecoratorForPatternResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllPDFPostDecoratorForPatternResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_485: __ROOT_NAMESPACE__.PDFPostDecorator): void => {
                value_485.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllPDFPostDecoratorForPatternResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_486: Array<__ROOT_NAMESPACE__.PDFPostDecorator> = new Array<__ROOT_NAMESPACE__.PDFPostDecorator>();
                        const metadata_47: thrift.TList = input.readListBegin();
                        const size_47: number = metadata_47.size;
                        for (let i_47: number = 0; i_47 < size_47; i_47++) {
                            const value_487: __ROOT_NAMESPACE__.PDFPostDecorator = __ROOT_NAMESPACE__.PDFPostDecorator.read(input);
                            value_486.push(value_487);
                        }
                        input.readListEnd();
                        _args.success = value_486;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_488: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_488;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_489: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_489;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAllPDFPostDecoratorForPatternResult(_args);
    }
}
export interface IChangePatternPDFPostDecoratorResultArgs {
    success?: boolean;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class ChangePatternPDFPostDecoratorResult {
    public success?: boolean;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IChangePatternPDFPostDecoratorResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ChangePatternPDFPostDecoratorResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ChangePatternPDFPostDecoratorResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_490: boolean = input.readBool();
                        _args.success = value_490;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_491: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_491;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_492: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_492;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ChangePatternPDFPostDecoratorResult(_args);
    }
}
export interface IGetAllowedContentItemTypeResultArgs {
    success?: Array<__ROOT_NAMESPACE__.ContentItemType>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetAllowedContentItemTypeResult {
    public success?: Array<__ROOT_NAMESPACE__.ContentItemType>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetAllowedContentItemTypeResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllowedContentItemTypeResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.I32, this.success.length);
            this.success.forEach((value_493: __ROOT_NAMESPACE__.ContentItemType): void => {
                output.writeI32(value_493);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllowedContentItemTypeResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_494: Array<__ROOT_NAMESPACE__.ContentItemType> = new Array<__ROOT_NAMESPACE__.ContentItemType>();
                        const metadata_48: thrift.TList = input.readListBegin();
                        const size_48: number = metadata_48.size;
                        for (let i_48: number = 0; i_48 < size_48; i_48++) {
                            const value_495: __ROOT_NAMESPACE__.ContentItemType = input.readI32();
                            value_494.push(value_495);
                        }
                        input.readListEnd();
                        _args.success = value_494;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_496: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_496;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_497: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_497;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAllowedContentItemTypeResult(_args);
    }
}
export interface IChangeKSPNumberResultArgs {
    success?: boolean;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class ChangeKSPNumberResult {
    public success?: boolean;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IChangeKSPNumberResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ChangeKSPNumberResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ChangeKSPNumberResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_498: boolean = input.readBool();
                        _args.success = value_498;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_499: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_499;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_500: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_500;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ChangeKSPNumberResult(_args);
    }
}
export interface IGetSubStatusesConfigResultArgs {
    success?: Array<__ROOT_NAMESPACE__.AvailableSubStatus>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetSubStatusesConfigResult {
    public success?: Array<__ROOT_NAMESPACE__.AvailableSubStatus>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetSubStatusesConfigResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetSubStatusesConfigResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_501: __ROOT_NAMESPACE__.AvailableSubStatus): void => {
                value_501.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetSubStatusesConfigResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_502: Array<__ROOT_NAMESPACE__.AvailableSubStatus> = new Array<__ROOT_NAMESPACE__.AvailableSubStatus>();
                        const metadata_49: thrift.TList = input.readListBegin();
                        const size_49: number = metadata_49.size;
                        for (let i_49: number = 0; i_49 < size_49; i_49++) {
                            const value_503: __ROOT_NAMESPACE__.AvailableSubStatus = __ROOT_NAMESPACE__.AvailableSubStatus.read(input);
                            value_502.push(value_503);
                        }
                        input.readListEnd();
                        _args.success = value_502;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_504: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_504;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_505: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_505;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetSubStatusesConfigResult(_args);
    }
}
export class Client {
    public _seqid: number;
    public _reqs: {
        [name: number]: (err: Error | object | undefined, val?: any) => void;
    };
    public output: thrift.TTransport;
    public protocol: new (trans: thrift.TTransport) => thrift.TProtocol;
    constructor(output: thrift.TTransport, protocol: new (trans: thrift.TTransport) => thrift.TProtocol) {
        this._seqid = 0;
        this._reqs = {};
        this.output = output;
        this.protocol = protocol;
    }
    public incrementSeqId(): number {
        return this._seqid += 1;
    }
    public getAllDocumentPatterns(token: string, filter: __ROOT_NAMESPACE__.KazFilter, withCurrentDocNumber: boolean): Promise<Array<__ROOT_NAMESPACE__.DocumentPattern>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<__ROOT_NAMESPACE__.DocumentPattern>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAllDocumentPatterns(token, filter, withCurrentDocNumber, requestId);
        });
    }
    public getAllDocumentPatternsGroupByName(token: string, filter: __ROOT_NAMESPACE__.KazFilter): Promise<Array<__ROOT_NAMESPACE__.SimpleDocumentPatternOrGroup>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<__ROOT_NAMESPACE__.SimpleDocumentPatternOrGroup>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAllDocumentPatternsGroupByName(token, filter, requestId);
        });
    }
    public getDocumentPattern(token: string, docPatternId: string): Promise<__ROOT_NAMESPACE__.DocumentPattern> {
        const requestId: number = this.incrementSeqId();
        return new Promise<__ROOT_NAMESPACE__.DocumentPattern>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getDocumentPattern(token, docPatternId, requestId);
        });
    }
    public deleteDocumentPattern(token: string, docPatternId: string): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_deleteDocumentPattern(token, docPatternId, requestId);
        });
    }
    public createOrUpdateDocumentPattern(token: string, documentPattern: __ROOT_NAMESPACE__.DocumentPattern, accountId: string): Promise<__ROOT_NAMESPACE__.DocumentPattern> {
        const requestId: number = this.incrementSeqId();
        return new Promise<__ROOT_NAMESPACE__.DocumentPattern>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_createOrUpdateDocumentPattern(token, documentPattern, accountId, requestId);
        });
    }
    public createDocumentPattern(token: string, documentPattern: __ROOT_NAMESPACE__.DocumentPattern, accountId: string): Promise<__ROOT_NAMESPACE__.DocumentPattern> {
        const requestId: number = this.incrementSeqId();
        return new Promise<__ROOT_NAMESPACE__.DocumentPattern>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_createDocumentPattern(token, documentPattern, accountId, requestId);
        });
    }
    public updateDocumentPattern(token: string, documentPattern: __ROOT_NAMESPACE__.DocumentPattern, accountId: string): Promise<__ROOT_NAMESPACE__.DocumentPattern> {
        const requestId: number = this.incrementSeqId();
        return new Promise<__ROOT_NAMESPACE__.DocumentPattern>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_updateDocumentPattern(token, documentPattern, accountId, requestId);
        });
    }
    public exportPatternAsDocumentDraftXML(token: string, docPatternId: string): Promise<Buffer> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Buffer>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_exportPatternAsDocumentDraftXML(token, docPatternId, requestId);
        });
    }
    public getAllDocumentPatternStages(token: string, docPatternId: string, filter: __ROOT_NAMESPACE__.KazFilter, selector: RuleSelector.RuleSelector): Promise<Array<__ROOT_NAMESPACE__.DocumentPatternStage>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<__ROOT_NAMESPACE__.DocumentPatternStage>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAllDocumentPatternStages(token, docPatternId, filter, selector, requestId);
        });
    }
    public getDocumentPatternStage(token: string, docPatternStageId: string): Promise<__ROOT_NAMESPACE__.DocumentPatternStage> {
        const requestId: number = this.incrementSeqId();
        return new Promise<__ROOT_NAMESPACE__.DocumentPatternStage>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getDocumentPatternStage(token, docPatternStageId, requestId);
        });
    }
    public deleteDocumentPatternStageAndMoveDocuments(token: string, docPatternStageId: string, newDocPatternStageId: string, fillDocPatternId: string): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_deleteDocumentPatternStageAndMoveDocuments(token, docPatternStageId, newDocPatternStageId, fillDocPatternId, requestId);
        });
    }
    public createOrUpdateStagesAndLinks(token: string, patternId: string, stages: Array<__ROOT_NAMESPACE__.DocumentPatternStage>, links: Array<__ROOT_NAMESPACE__.DocumentPatternStagesLink>): Promise<PatternData.PatternData> {
        const requestId: number = this.incrementSeqId();
        return new Promise<PatternData.PatternData>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_createOrUpdateStagesAndLinks(token, patternId, stages, links, requestId);
        });
    }
    public getAllDocumentPatternStagesLinks(token: string, docPatternId: string, docPatternStageId: string, filter: __ROOT_NAMESPACE__.KazFilter): Promise<Array<__ROOT_NAMESPACE__.DocumentPatternStagesLink>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<__ROOT_NAMESPACE__.DocumentPatternStagesLink>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAllDocumentPatternStagesLinks(token, docPatternId, docPatternStageId, filter, requestId);
        });
    }
    public getDocumentPatternStageLink(token: string, docPatternStageLinkId: string): Promise<__ROOT_NAMESPACE__.DocumentPatternStagesLink> {
        const requestId: number = this.incrementSeqId();
        return new Promise<__ROOT_NAMESPACE__.DocumentPatternStagesLink>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getDocumentPatternStageLink(token, docPatternStageLinkId, requestId);
        });
    }
    public createOrUpdateDocumentPatternStagesLink(token: string, documentPatternStagesLink: __ROOT_NAMESPACE__.DocumentPatternStagesLink): Promise<__ROOT_NAMESPACE__.DocumentPatternStagesLink> {
        const requestId: number = this.incrementSeqId();
        return new Promise<__ROOT_NAMESPACE__.DocumentPatternStagesLink>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_createOrUpdateDocumentPatternStagesLink(token, documentPatternStagesLink, requestId);
        });
    }
    public deleteDocumentPatternStageLink(token: string, docPatternStageLinkId: string): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_deleteDocumentPatternStageLink(token, docPatternStageLinkId, requestId);
        });
    }
    public getAllDocumentPatternStageExecutors(token: string, docPatternStageId: string, filter: __ROOT_NAMESPACE__.KazFilter): Promise<Array<DocumentPatternStagesExecutor.DocumentPatternStagesExecutor>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<DocumentPatternStagesExecutor.DocumentPatternStagesExecutor>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAllDocumentPatternStageExecutors(token, docPatternStageId, filter, requestId);
        });
    }
    public addExecutorsToDocumentPatternStage(token: string, docPatternStageId: string, userOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_addExecutorsToDocumentPatternStage(token, docPatternStageId, userOrGroups, requestId);
        });
    }
    public deleteExecutorsFromDocumentPatternStage(token: string, docPatternStageId: string, userOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_deleteExecutorsFromDocumentPatternStage(token, docPatternStageId, userOrGroups, requestId);
        });
    }
    public checkDocumentPattern(token: string, docPatternId: string, filter: __ROOT_NAMESPACE__.KazFilter): Promise<Array<__ROOT_NAMESPACE__.PreconditionException>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<__ROOT_NAMESPACE__.PreconditionException>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_checkDocumentPattern(token, docPatternId, filter, requestId);
        });
    }
    public createOrUpdatePatternContentItems(token: string, docPatternId: string, contentItems: Array<__ROOT_NAMESPACE__.ContentItem>): Promise<Array<__ROOT_NAMESPACE__.ContentItem>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<__ROOT_NAMESPACE__.ContentItem>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_createOrUpdatePatternContentItems(token, docPatternId, contentItems, requestId);
        });
    }
    public getAllDocumentPatternGroups(token: string, filter: __ROOT_NAMESPACE__.KazFilter): Promise<Array<__ROOT_NAMESPACE__.DocumentPatternGroup>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<__ROOT_NAMESPACE__.DocumentPatternGroup>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAllDocumentPatternGroups(token, filter, requestId);
        });
    }
    public getAllDocumentPatternGroupsGroupByName(token: string, filter: __ROOT_NAMESPACE__.KazFilter): Promise<Array<__ROOT_NAMESPACE__.SimpleDocumentPatternOrGroup>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<__ROOT_NAMESPACE__.SimpleDocumentPatternOrGroup>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAllDocumentPatternGroupsGroupByName(token, filter, requestId);
        });
    }
    public createOrUpdateDocumentPatternGroup(token: string, documentPatternGroup: __ROOT_NAMESPACE__.DocumentPatternGroup, accountId: string): Promise<__ROOT_NAMESPACE__.DocumentPatternGroup> {
        const requestId: number = this.incrementSeqId();
        return new Promise<__ROOT_NAMESPACE__.DocumentPatternGroup>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_createOrUpdateDocumentPatternGroup(token, documentPatternGroup, accountId, requestId);
        });
    }
    public deleteDocumentPatternGroup(token: string, documentPatternGroupId: string): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_deleteDocumentPatternGroup(token, documentPatternGroupId, requestId);
        });
    }
    public getAllAvailableStages(token: string, filter: __ROOT_NAMESPACE__.KazFilter, patternType: __ROOT_NAMESPACE__.PatternType): Promise<Array<AvailablePatternStage.AvailablePatternStage>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<AvailablePatternStage.AvailablePatternStage>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAllAvailableStages(token, filter, patternType, requestId);
        });
    }
    public getAvailableLinkAnswersByPattern(token: string, patternId: string): Promise<Set<string>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Set<string>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAvailableLinkAnswersByPattern(token, patternId, requestId);
        });
    }
    public removeAvailableStage(token: string, availStageId: string): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_removeAvailableStage(token, availStageId, requestId);
        });
    }
    public getAllDigitalViews(token: string, docPatternId: string, filter: __ROOT_NAMESPACE__.KazFilter): Promise<Array<DigitalView.DigitalView>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<DigitalView.DigitalView>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAllDigitalViews(token, docPatternId, filter, requestId);
        });
    }
    public createOrUpdateDigitalView(token: string, digitalView: DigitalView.DigitalView): Promise<DigitalView.DigitalView> {
        const requestId: number = this.incrementSeqId();
        return new Promise<DigitalView.DigitalView>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_createOrUpdateDigitalView(token, digitalView, requestId);
        });
    }
    public deleteDigitalView(token: string, digitalViewId: string): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_deleteDigitalView(token, digitalViewId, requestId);
        });
    }
    public exportDocumentPattern(token: string, docPatternId: string): Promise<Buffer> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Buffer>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_exportDocumentPattern(token, docPatternId, requestId);
        });
    }
    public importDocumentPattern(token: string, json: Buffer, docPatternNameLoc: Map<string, string>, pDescriptionLoc: Map<string, string>, docPatternGroupId: string, accountId: string, ignoreError: boolean): Promise<__ROOT_NAMESPACE__.DocumentPattern> {
        const requestId: number = this.incrementSeqId();
        return new Promise<__ROOT_NAMESPACE__.DocumentPattern>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_importDocumentPattern(token, json, docPatternNameLoc, pDescriptionLoc, docPatternGroupId, accountId, ignoreError, requestId);
        });
    }
    public getPatternUserGroup(token: string, docPatternId: string): Promise<Array<PatternUserGroup.PatternUserGroup>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<PatternUserGroup.PatternUserGroup>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getPatternUserGroup(token, docPatternId, requestId);
        });
    }
    public createOrUpdatePatternUserGroup(token: string, docPatternId: string, userOrGroups: Array<PatternUserGroup.PatternUserGroup>): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_createOrUpdatePatternUserGroup(token, docPatternId, userOrGroups, requestId);
        });
    }
    public getPatternProcessRoles(token: string, docPatternId: string, filter: __ROOT_NAMESPACE__.KazFilter): Promise<Array<__ROOT_NAMESPACE__.PatternProcessRole>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<__ROOT_NAMESPACE__.PatternProcessRole>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getPatternProcessRoles(token, docPatternId, filter, requestId);
        });
    }
    public changePatternProcessRoles(token: string, docPatternId: string, userOrGroupsToAdd: Array<__ROOT_NAMESPACE__.PatternProcessRole>, keyIdToRemove: Set<string>): Promise<Array<__ROOT_NAMESPACE__.PatternProcessRole>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<__ROOT_NAMESPACE__.PatternProcessRole>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_changePatternProcessRoles(token, docPatternId, userOrGroupsToAdd, keyIdToRemove, requestId);
        });
    }
    public getPatternVariables(token: string, docPatternId: string, filter: __ROOT_NAMESPACE__.KazFilter): Promise<Array<__ROOT_NAMESPACE__.PatternVariable>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<__ROOT_NAMESPACE__.PatternVariable>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getPatternVariables(token, docPatternId, filter, requestId);
        });
    }
    public changePatternVariables(token: string, docPatternId: string, patternVariablesToAdd: Array<__ROOT_NAMESPACE__.PatternVariable>, keyIdToRemove: Set<string>): Promise<Array<__ROOT_NAMESPACE__.PatternVariable>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<__ROOT_NAMESPACE__.PatternVariable>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_changePatternVariables(token, docPatternId, patternVariablesToAdd, keyIdToRemove, requestId);
        });
    }
    public addAvailablePatternStageToAccounts(token: string, availablePatternStageId: string, accountIds: Array<string>): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_addAvailablePatternStageToAccounts(token, availablePatternStageId, accountIds, requestId);
        });
    }
    public getAllPatternAttachmentTemplates(token: string, patternId: string, filter: __ROOT_NAMESPACE__.KazFilter): Promise<Array<PatternAttachmentTemplate.PatternAttachmentTemplate>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<PatternAttachmentTemplate.PatternAttachmentTemplate>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAllPatternAttachmentTemplates(token, patternId, filter, requestId);
        });
    }
    public getPatternAttachmentTemplateById(token: string, patternId: string): Promise<PatternAttachmentTemplate.PatternAttachmentTemplate> {
        const requestId: number = this.incrementSeqId();
        return new Promise<PatternAttachmentTemplate.PatternAttachmentTemplate>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getPatternAttachmentTemplateById(token, patternId, requestId);
        });
    }
    public createOrUpdatePatternAttachmentTemplate(token: string, patternAttachmentTemplate: PatternAttachmentTemplate.PatternAttachmentTemplate, xmlFile: Buffer): Promise<PatternAttachmentTemplate.PatternAttachmentTemplate> {
        const requestId: number = this.incrementSeqId();
        return new Promise<PatternAttachmentTemplate.PatternAttachmentTemplate>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_createOrUpdatePatternAttachmentTemplate(token, patternAttachmentTemplate, xmlFile, requestId);
        });
    }
    public downloadPatternAttachmentTemplate(token: string, patternAttachmentTemplateId: string): Promise<Buffer> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Buffer>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_downloadPatternAttachmentTemplate(token, patternAttachmentTemplateId, requestId);
        });
    }
    public removePatternAttachmentTemplate(token: string, patternAttachmentTemplateId: string): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_removePatternAttachmentTemplate(token, patternAttachmentTemplateId, requestId);
        });
    }
    public changeStartDocNumberSequence(token: string, patternId: string, value: Int64): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_changeStartDocNumberSequence(token, patternId, value, requestId);
        });
    }
    public getAllContentHolders(token: string, patternId: string, withContent: boolean, filter: __ROOT_NAMESPACE__.KazFilter): Promise<Array<__ROOT_NAMESPACE__.ContentHolder>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<__ROOT_NAMESPACE__.ContentHolder>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAllContentHolders(token, patternId, withContent, filter, requestId);
        });
    }
    public changeContentHolders(token: string, toUpdate: Array<__ROOT_NAMESPACE__.ContentHolder>, toRemoveIds: Array<string>): Promise<Array<__ROOT_NAMESPACE__.ContentHolder>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<__ROOT_NAMESPACE__.ContentHolder>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_changeContentHolders(token, toUpdate, toRemoveIds, requestId);
        });
    }
    public getPatternRelationModel(token: string, patternId: string, filter: __ROOT_NAMESPACE__.KazFilter): Promise<PatternRelationModel.PatternRelationModel> {
        const requestId: number = this.incrementSeqId();
        return new Promise<PatternRelationModel.PatternRelationModel>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getPatternRelationModel(token, patternId, filter, requestId);
        });
    }
    public getNomenclatureNumber(token: string, nomenclatureNumberId: string): Promise<__ROOT_NAMESPACE__.NomenclatureNumber> {
        const requestId: number = this.incrementSeqId();
        return new Promise<__ROOT_NAMESPACE__.NomenclatureNumber>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getNomenclatureNumber(token, nomenclatureNumberId, requestId);
        });
    }
    public getAllNomenclatureNumber(token: string, filter: __ROOT_NAMESPACE__.KazFilter): Promise<Array<__ROOT_NAMESPACE__.NomenclatureNumber>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<__ROOT_NAMESPACE__.NomenclatureNumber>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAllNomenclatureNumber(token, filter, requestId);
        });
    }
    public getCountAllNomenclatureNumber(token: string, filter: __ROOT_NAMESPACE__.KazFilter): Promise<Int64> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Int64>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getCountAllNomenclatureNumber(token, filter, requestId);
        });
    }
    public createOrUpdateNomenclatureNumber(token: string, nomenclatureNumber: __ROOT_NAMESPACE__.NomenclatureNumber): Promise<__ROOT_NAMESPACE__.NomenclatureNumber> {
        const requestId: number = this.incrementSeqId();
        return new Promise<__ROOT_NAMESPACE__.NomenclatureNumber>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_createOrUpdateNomenclatureNumber(token, nomenclatureNumber, requestId);
        });
    }
    public removeNomenclatureNumber(token: string, nomenclatureNumberId: string): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_removeNomenclatureNumber(token, nomenclatureNumberId, requestId);
        });
    }
    public getNomenclatureGroup(token: string, nomenclatureGroupId: string): Promise<__ROOT_NAMESPACE__.NomenclatureGroup> {
        const requestId: number = this.incrementSeqId();
        return new Promise<__ROOT_NAMESPACE__.NomenclatureGroup>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getNomenclatureGroup(token, nomenclatureGroupId, requestId);
        });
    }
    public getAllNomenclatureGroup(token: string, filter: __ROOT_NAMESPACE__.KazFilter): Promise<Array<__ROOT_NAMESPACE__.NomenclatureGroup>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<__ROOT_NAMESPACE__.NomenclatureGroup>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAllNomenclatureGroup(token, filter, requestId);
        });
    }
    public getCountAllNomenclatureGroup(token: string, filter: __ROOT_NAMESPACE__.KazFilter): Promise<Int64> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Int64>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getCountAllNomenclatureGroup(token, filter, requestId);
        });
    }
    public createOrUpdateNomenclatureGroup(token: string, nomenclatureGroup: __ROOT_NAMESPACE__.NomenclatureGroup): Promise<__ROOT_NAMESPACE__.NomenclatureGroup> {
        const requestId: number = this.incrementSeqId();
        return new Promise<__ROOT_NAMESPACE__.NomenclatureGroup>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_createOrUpdateNomenclatureGroup(token, nomenclatureGroup, requestId);
        });
    }
    public removeNomenclatureGroup(token: string, nomenclatureGrouprId: string): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_removeNomenclatureGroup(token, nomenclatureGrouprId, requestId);
        });
    }
    public getInfoForCreateDoc(token: string, patternId: string, parentDocId: string, accessPolicy: __ROOT_NAMESPACE__.DocumentAccessPolicy): Promise<InfoForCreateDoc.InfoForCreateDoc> {
        const requestId: number = this.incrementSeqId();
        return new Promise<InfoForCreateDoc.InfoForCreateDoc>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getInfoForCreateDoc(token, patternId, parentDocId, accessPolicy, requestId);
        });
    }
    public getPatternContentItems(token: string, patternId: string): Promise<Array<__ROOT_NAMESPACE__.ContentItem>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<__ROOT_NAMESPACE__.ContentItem>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getPatternContentItems(token, patternId, requestId);
        });
    }
    public createOrUpdateStagesAndLinksEx(token: string, patternId: string, stages: Array<__ROOT_NAMESPACE__.DocumentPatternStage>, links: Array<__ROOT_NAMESPACE__.DocumentPatternStagesLink>, stageToRemove: Array<string>, linkToRemove: Array<string>): Promise<PatternData.PatternData> {
        const requestId: number = this.incrementSeqId();
        return new Promise<PatternData.PatternData>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_createOrUpdateStagesAndLinksEx(token, patternId, stages, links, stageToRemove, linkToRemove, requestId);
        });
    }
    public getAvailableActionList(token: string, filter: __ROOT_NAMESPACE__.KazFilter): Promise<Array<__ROOT_NAMESPACE__.AvailableAction>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<__ROOT_NAMESPACE__.AvailableAction>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAvailableActionList(token, filter, requestId);
        });
    }
    public addPatternNightlyDocFieldsTask(token: string, patternId: string): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_addPatternNightlyDocFieldsTask(token, patternId, requestId);
        });
    }
    public getAllColumnsForPattern(token: string, patternId: string, filter: __ROOT_NAMESPACE__.KazFilter): Promise<Array<__ROOT_NAMESPACE__.DocColumn>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<__ROOT_NAMESPACE__.DocColumn>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAllColumnsForPattern(token, patternId, filter, requestId);
        });
    }
    public changePatternColumns(token: string, patternId: string, useDefaultColumns: boolean, toSave: Array<__ROOT_NAMESPACE__.DocColumn>): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_changePatternColumns(token, patternId, useDefaultColumns, toSave, requestId);
        });
    }
    public getAllPDFPostDecoratorForPattern(token: string, patternId: string, filter: __ROOT_NAMESPACE__.KazFilter): Promise<Array<__ROOT_NAMESPACE__.PDFPostDecorator>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<__ROOT_NAMESPACE__.PDFPostDecorator>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAllPDFPostDecoratorForPattern(token, patternId, filter, requestId);
        });
    }
    public changePatternPDFPostDecorator(token: string, patternId: string, useDefaultPDFPostDecorators: boolean, toSave: Array<__ROOT_NAMESPACE__.PDFPostDecorator>): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_changePatternPDFPostDecorator(token, patternId, useDefaultPDFPostDecorators, toSave, requestId);
        });
    }
    public getAllowedContentItemType(token: string): Promise<Array<__ROOT_NAMESPACE__.ContentItemType>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<__ROOT_NAMESPACE__.ContentItemType>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAllowedContentItemType(token, requestId);
        });
    }
    public changeKSPNumber(token: string, patternId: string, departmentId: string, kspNumber: number): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_changeKSPNumber(token, patternId, departmentId, kspNumber, requestId);
        });
    }
    public getSubStatusesConfig(token: string): Promise<Array<__ROOT_NAMESPACE__.AvailableSubStatus>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<__ROOT_NAMESPACE__.AvailableSubStatus>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getSubStatusesConfig(token, requestId);
        });
    }
    public send_getAllDocumentPatterns(token: string, filter: __ROOT_NAMESPACE__.KazFilter, withCurrentDocNumber: boolean, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAllDocumentPatterns", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAllDocumentPatternsArgs = new GetAllDocumentPatternsArgs({ token, filter, withCurrentDocNumber });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getAllDocumentPatternsGroupByName(token: string, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAllDocumentPatternsGroupByName", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAllDocumentPatternsGroupByNameArgs = new GetAllDocumentPatternsGroupByNameArgs({ token, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getDocumentPattern(token: string, docPatternId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getDocumentPattern", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetDocumentPatternArgs = new GetDocumentPatternArgs({ token, docPatternId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_deleteDocumentPattern(token: string, docPatternId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("deleteDocumentPattern", thrift.Thrift.MessageType.CALL, requestId);
        const args: DeleteDocumentPatternArgs = new DeleteDocumentPatternArgs({ token, docPatternId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_createOrUpdateDocumentPattern(token: string, documentPattern: __ROOT_NAMESPACE__.DocumentPattern, accountId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("createOrUpdateDocumentPattern", thrift.Thrift.MessageType.CALL, requestId);
        const args: CreateOrUpdateDocumentPatternArgs = new CreateOrUpdateDocumentPatternArgs({ token, documentPattern, accountId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_createDocumentPattern(token: string, documentPattern: __ROOT_NAMESPACE__.DocumentPattern, accountId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("createDocumentPattern", thrift.Thrift.MessageType.CALL, requestId);
        const args: CreateDocumentPatternArgs = new CreateDocumentPatternArgs({ token, documentPattern, accountId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_updateDocumentPattern(token: string, documentPattern: __ROOT_NAMESPACE__.DocumentPattern, accountId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("updateDocumentPattern", thrift.Thrift.MessageType.CALL, requestId);
        const args: UpdateDocumentPatternArgs = new UpdateDocumentPatternArgs({ token, documentPattern, accountId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_exportPatternAsDocumentDraftXML(token: string, docPatternId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("exportPatternAsDocumentDraftXML", thrift.Thrift.MessageType.CALL, requestId);
        const args: ExportPatternAsDocumentDraftXMLArgs = new ExportPatternAsDocumentDraftXMLArgs({ token, docPatternId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getAllDocumentPatternStages(token: string, docPatternId: string, filter: __ROOT_NAMESPACE__.KazFilter, selector: RuleSelector.RuleSelector, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAllDocumentPatternStages", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAllDocumentPatternStagesArgs = new GetAllDocumentPatternStagesArgs({ token, docPatternId, filter, selector });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getDocumentPatternStage(token: string, docPatternStageId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getDocumentPatternStage", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetDocumentPatternStageArgs = new GetDocumentPatternStageArgs({ token, docPatternStageId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_deleteDocumentPatternStageAndMoveDocuments(token: string, docPatternStageId: string, newDocPatternStageId: string, fillDocPatternId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("deleteDocumentPatternStageAndMoveDocuments", thrift.Thrift.MessageType.CALL, requestId);
        const args: DeleteDocumentPatternStageAndMoveDocumentsArgs = new DeleteDocumentPatternStageAndMoveDocumentsArgs({ token, docPatternStageId, newDocPatternStageId, fillDocPatternId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_createOrUpdateStagesAndLinks(token: string, patternId: string, stages: Array<__ROOT_NAMESPACE__.DocumentPatternStage>, links: Array<__ROOT_NAMESPACE__.DocumentPatternStagesLink>, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("createOrUpdateStagesAndLinks", thrift.Thrift.MessageType.CALL, requestId);
        const args: CreateOrUpdateStagesAndLinksArgs = new CreateOrUpdateStagesAndLinksArgs({ token, patternId, stages, links });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getAllDocumentPatternStagesLinks(token: string, docPatternId: string, docPatternStageId: string, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAllDocumentPatternStagesLinks", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAllDocumentPatternStagesLinksArgs = new GetAllDocumentPatternStagesLinksArgs({ token, docPatternId, docPatternStageId, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getDocumentPatternStageLink(token: string, docPatternStageLinkId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getDocumentPatternStageLink", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetDocumentPatternStageLinkArgs = new GetDocumentPatternStageLinkArgs({ token, docPatternStageLinkId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_createOrUpdateDocumentPatternStagesLink(token: string, documentPatternStagesLink: __ROOT_NAMESPACE__.DocumentPatternStagesLink, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("createOrUpdateDocumentPatternStagesLink", thrift.Thrift.MessageType.CALL, requestId);
        const args: CreateOrUpdateDocumentPatternStagesLinkArgs = new CreateOrUpdateDocumentPatternStagesLinkArgs({ token, documentPatternStagesLink });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_deleteDocumentPatternStageLink(token: string, docPatternStageLinkId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("deleteDocumentPatternStageLink", thrift.Thrift.MessageType.CALL, requestId);
        const args: DeleteDocumentPatternStageLinkArgs = new DeleteDocumentPatternStageLinkArgs({ token, docPatternStageLinkId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getAllDocumentPatternStageExecutors(token: string, docPatternStageId: string, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAllDocumentPatternStageExecutors", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAllDocumentPatternStageExecutorsArgs = new GetAllDocumentPatternStageExecutorsArgs({ token, docPatternStageId, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_addExecutorsToDocumentPatternStage(token: string, docPatternStageId: string, userOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("addExecutorsToDocumentPatternStage", thrift.Thrift.MessageType.CALL, requestId);
        const args: AddExecutorsToDocumentPatternStageArgs = new AddExecutorsToDocumentPatternStageArgs({ token, docPatternStageId, userOrGroups });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_deleteExecutorsFromDocumentPatternStage(token: string, docPatternStageId: string, userOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("deleteExecutorsFromDocumentPatternStage", thrift.Thrift.MessageType.CALL, requestId);
        const args: DeleteExecutorsFromDocumentPatternStageArgs = new DeleteExecutorsFromDocumentPatternStageArgs({ token, docPatternStageId, userOrGroups });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_checkDocumentPattern(token: string, docPatternId: string, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("checkDocumentPattern", thrift.Thrift.MessageType.CALL, requestId);
        const args: CheckDocumentPatternArgs = new CheckDocumentPatternArgs({ token, docPatternId, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_createOrUpdatePatternContentItems(token: string, docPatternId: string, contentItems: Array<__ROOT_NAMESPACE__.ContentItem>, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("createOrUpdatePatternContentItems", thrift.Thrift.MessageType.CALL, requestId);
        const args: CreateOrUpdatePatternContentItemsArgs = new CreateOrUpdatePatternContentItemsArgs({ token, docPatternId, contentItems });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getAllDocumentPatternGroups(token: string, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAllDocumentPatternGroups", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAllDocumentPatternGroupsArgs = new GetAllDocumentPatternGroupsArgs({ token, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getAllDocumentPatternGroupsGroupByName(token: string, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAllDocumentPatternGroupsGroupByName", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAllDocumentPatternGroupsGroupByNameArgs = new GetAllDocumentPatternGroupsGroupByNameArgs({ token, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_createOrUpdateDocumentPatternGroup(token: string, documentPatternGroup: __ROOT_NAMESPACE__.DocumentPatternGroup, accountId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("createOrUpdateDocumentPatternGroup", thrift.Thrift.MessageType.CALL, requestId);
        const args: CreateOrUpdateDocumentPatternGroupArgs = new CreateOrUpdateDocumentPatternGroupArgs({ token, documentPatternGroup, accountId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_deleteDocumentPatternGroup(token: string, documentPatternGroupId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("deleteDocumentPatternGroup", thrift.Thrift.MessageType.CALL, requestId);
        const args: DeleteDocumentPatternGroupArgs = new DeleteDocumentPatternGroupArgs({ token, documentPatternGroupId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getAllAvailableStages(token: string, filter: __ROOT_NAMESPACE__.KazFilter, patternType: __ROOT_NAMESPACE__.PatternType, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAllAvailableStages", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAllAvailableStagesArgs = new GetAllAvailableStagesArgs({ token, filter, patternType });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getAvailableLinkAnswersByPattern(token: string, patternId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAvailableLinkAnswersByPattern", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAvailableLinkAnswersByPatternArgs = new GetAvailableLinkAnswersByPatternArgs({ token, patternId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_removeAvailableStage(token: string, availStageId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("removeAvailableStage", thrift.Thrift.MessageType.CALL, requestId);
        const args: RemoveAvailableStageArgs = new RemoveAvailableStageArgs({ token, availStageId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getAllDigitalViews(token: string, docPatternId: string, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAllDigitalViews", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAllDigitalViewsArgs = new GetAllDigitalViewsArgs({ token, docPatternId, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_createOrUpdateDigitalView(token: string, digitalView: DigitalView.DigitalView, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("createOrUpdateDigitalView", thrift.Thrift.MessageType.CALL, requestId);
        const args: CreateOrUpdateDigitalViewArgs = new CreateOrUpdateDigitalViewArgs({ token, digitalView });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_deleteDigitalView(token: string, digitalViewId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("deleteDigitalView", thrift.Thrift.MessageType.CALL, requestId);
        const args: DeleteDigitalViewArgs = new DeleteDigitalViewArgs({ token, digitalViewId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_exportDocumentPattern(token: string, docPatternId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("exportDocumentPattern", thrift.Thrift.MessageType.CALL, requestId);
        const args: ExportDocumentPatternArgs = new ExportDocumentPatternArgs({ token, docPatternId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_importDocumentPattern(token: string, json: Buffer, docPatternNameLoc: Map<string, string>, pDescriptionLoc: Map<string, string>, docPatternGroupId: string, accountId: string, ignoreError: boolean, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("importDocumentPattern", thrift.Thrift.MessageType.CALL, requestId);
        const args: ImportDocumentPatternArgs = new ImportDocumentPatternArgs({ token, json, docPatternNameLoc, pDescriptionLoc, docPatternGroupId, accountId, ignoreError });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getPatternUserGroup(token: string, docPatternId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getPatternUserGroup", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetPatternUserGroupArgs = new GetPatternUserGroupArgs({ token, docPatternId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_createOrUpdatePatternUserGroup(token: string, docPatternId: string, userOrGroups: Array<PatternUserGroup.PatternUserGroup>, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("createOrUpdatePatternUserGroup", thrift.Thrift.MessageType.CALL, requestId);
        const args: CreateOrUpdatePatternUserGroupArgs = new CreateOrUpdatePatternUserGroupArgs({ token, docPatternId, userOrGroups });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getPatternProcessRoles(token: string, docPatternId: string, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getPatternProcessRoles", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetPatternProcessRolesArgs = new GetPatternProcessRolesArgs({ token, docPatternId, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_changePatternProcessRoles(token: string, docPatternId: string, userOrGroupsToAdd: Array<__ROOT_NAMESPACE__.PatternProcessRole>, keyIdToRemove: Set<string>, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("changePatternProcessRoles", thrift.Thrift.MessageType.CALL, requestId);
        const args: ChangePatternProcessRolesArgs = new ChangePatternProcessRolesArgs({ token, docPatternId, userOrGroupsToAdd, keyIdToRemove });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getPatternVariables(token: string, docPatternId: string, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getPatternVariables", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetPatternVariablesArgs = new GetPatternVariablesArgs({ token, docPatternId, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_changePatternVariables(token: string, docPatternId: string, patternVariablesToAdd: Array<__ROOT_NAMESPACE__.PatternVariable>, keyIdToRemove: Set<string>, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("changePatternVariables", thrift.Thrift.MessageType.CALL, requestId);
        const args: ChangePatternVariablesArgs = new ChangePatternVariablesArgs({ token, docPatternId, patternVariablesToAdd, keyIdToRemove });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_addAvailablePatternStageToAccounts(token: string, availablePatternStageId: string, accountIds: Array<string>, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("addAvailablePatternStageToAccounts", thrift.Thrift.MessageType.CALL, requestId);
        const args: AddAvailablePatternStageToAccountsArgs = new AddAvailablePatternStageToAccountsArgs({ token, availablePatternStageId, accountIds });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getAllPatternAttachmentTemplates(token: string, patternId: string, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAllPatternAttachmentTemplates", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAllPatternAttachmentTemplatesArgs = new GetAllPatternAttachmentTemplatesArgs({ token, patternId, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getPatternAttachmentTemplateById(token: string, patternId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getPatternAttachmentTemplateById", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetPatternAttachmentTemplateByIdArgs = new GetPatternAttachmentTemplateByIdArgs({ token, patternId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_createOrUpdatePatternAttachmentTemplate(token: string, patternAttachmentTemplate: PatternAttachmentTemplate.PatternAttachmentTemplate, xmlFile: Buffer, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("createOrUpdatePatternAttachmentTemplate", thrift.Thrift.MessageType.CALL, requestId);
        const args: CreateOrUpdatePatternAttachmentTemplateArgs = new CreateOrUpdatePatternAttachmentTemplateArgs({ token, patternAttachmentTemplate, xmlFile });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_downloadPatternAttachmentTemplate(token: string, patternAttachmentTemplateId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("downloadPatternAttachmentTemplate", thrift.Thrift.MessageType.CALL, requestId);
        const args: DownloadPatternAttachmentTemplateArgs = new DownloadPatternAttachmentTemplateArgs({ token, patternAttachmentTemplateId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_removePatternAttachmentTemplate(token: string, patternAttachmentTemplateId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("removePatternAttachmentTemplate", thrift.Thrift.MessageType.CALL, requestId);
        const args: RemovePatternAttachmentTemplateArgs = new RemovePatternAttachmentTemplateArgs({ token, patternAttachmentTemplateId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_changeStartDocNumberSequence(token: string, patternId: string, value: Int64, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("changeStartDocNumberSequence", thrift.Thrift.MessageType.CALL, requestId);
        const args: ChangeStartDocNumberSequenceArgs = new ChangeStartDocNumberSequenceArgs({ token, patternId, value });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getAllContentHolders(token: string, patternId: string, withContent: boolean, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAllContentHolders", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAllContentHoldersArgs = new GetAllContentHoldersArgs({ token, patternId, withContent, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_changeContentHolders(token: string, toUpdate: Array<__ROOT_NAMESPACE__.ContentHolder>, toRemoveIds: Array<string>, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("changeContentHolders", thrift.Thrift.MessageType.CALL, requestId);
        const args: ChangeContentHoldersArgs = new ChangeContentHoldersArgs({ token, toUpdate, toRemoveIds });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getPatternRelationModel(token: string, patternId: string, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getPatternRelationModel", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetPatternRelationModelArgs = new GetPatternRelationModelArgs({ token, patternId, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getNomenclatureNumber(token: string, nomenclatureNumberId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getNomenclatureNumber", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetNomenclatureNumberArgs = new GetNomenclatureNumberArgs({ token, nomenclatureNumberId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getAllNomenclatureNumber(token: string, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAllNomenclatureNumber", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAllNomenclatureNumberArgs = new GetAllNomenclatureNumberArgs({ token, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getCountAllNomenclatureNumber(token: string, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getCountAllNomenclatureNumber", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetCountAllNomenclatureNumberArgs = new GetCountAllNomenclatureNumberArgs({ token, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_createOrUpdateNomenclatureNumber(token: string, nomenclatureNumber: __ROOT_NAMESPACE__.NomenclatureNumber, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("createOrUpdateNomenclatureNumber", thrift.Thrift.MessageType.CALL, requestId);
        const args: CreateOrUpdateNomenclatureNumberArgs = new CreateOrUpdateNomenclatureNumberArgs({ token, nomenclatureNumber });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_removeNomenclatureNumber(token: string, nomenclatureNumberId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("removeNomenclatureNumber", thrift.Thrift.MessageType.CALL, requestId);
        const args: RemoveNomenclatureNumberArgs = new RemoveNomenclatureNumberArgs({ token, nomenclatureNumberId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getNomenclatureGroup(token: string, nomenclatureGroupId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getNomenclatureGroup", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetNomenclatureGroupArgs = new GetNomenclatureGroupArgs({ token, nomenclatureGroupId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getAllNomenclatureGroup(token: string, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAllNomenclatureGroup", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAllNomenclatureGroupArgs = new GetAllNomenclatureGroupArgs({ token, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getCountAllNomenclatureGroup(token: string, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getCountAllNomenclatureGroup", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetCountAllNomenclatureGroupArgs = new GetCountAllNomenclatureGroupArgs({ token, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_createOrUpdateNomenclatureGroup(token: string, nomenclatureGroup: __ROOT_NAMESPACE__.NomenclatureGroup, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("createOrUpdateNomenclatureGroup", thrift.Thrift.MessageType.CALL, requestId);
        const args: CreateOrUpdateNomenclatureGroupArgs = new CreateOrUpdateNomenclatureGroupArgs({ token, nomenclatureGroup });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_removeNomenclatureGroup(token: string, nomenclatureGrouprId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("removeNomenclatureGroup", thrift.Thrift.MessageType.CALL, requestId);
        const args: RemoveNomenclatureGroupArgs = new RemoveNomenclatureGroupArgs({ token, nomenclatureGrouprId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getInfoForCreateDoc(token: string, patternId: string, parentDocId: string, accessPolicy: __ROOT_NAMESPACE__.DocumentAccessPolicy, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getInfoForCreateDoc", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetInfoForCreateDocArgs = new GetInfoForCreateDocArgs({ token, patternId, parentDocId, accessPolicy });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getPatternContentItems(token: string, patternId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getPatternContentItems", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetPatternContentItemsArgs = new GetPatternContentItemsArgs({ token, patternId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_createOrUpdateStagesAndLinksEx(token: string, patternId: string, stages: Array<__ROOT_NAMESPACE__.DocumentPatternStage>, links: Array<__ROOT_NAMESPACE__.DocumentPatternStagesLink>, stageToRemove: Array<string>, linkToRemove: Array<string>, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("createOrUpdateStagesAndLinksEx", thrift.Thrift.MessageType.CALL, requestId);
        const args: CreateOrUpdateStagesAndLinksExArgs = new CreateOrUpdateStagesAndLinksExArgs({ token, patternId, stages, links, stageToRemove, linkToRemove });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getAvailableActionList(token: string, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAvailableActionList", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAvailableActionListArgs = new GetAvailableActionListArgs({ token, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_addPatternNightlyDocFieldsTask(token: string, patternId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("addPatternNightlyDocFieldsTask", thrift.Thrift.MessageType.CALL, requestId);
        const args: AddPatternNightlyDocFieldsTaskArgs = new AddPatternNightlyDocFieldsTaskArgs({ token, patternId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getAllColumnsForPattern(token: string, patternId: string, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAllColumnsForPattern", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAllColumnsForPatternArgs = new GetAllColumnsForPatternArgs({ token, patternId, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_changePatternColumns(token: string, patternId: string, useDefaultColumns: boolean, toSave: Array<__ROOT_NAMESPACE__.DocColumn>, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("changePatternColumns", thrift.Thrift.MessageType.CALL, requestId);
        const args: ChangePatternColumnsArgs = new ChangePatternColumnsArgs({ token, patternId, useDefaultColumns, toSave });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getAllPDFPostDecoratorForPattern(token: string, patternId: string, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAllPDFPostDecoratorForPattern", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAllPDFPostDecoratorForPatternArgs = new GetAllPDFPostDecoratorForPatternArgs({ token, patternId, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_changePatternPDFPostDecorator(token: string, patternId: string, useDefaultPDFPostDecorators: boolean, toSave: Array<__ROOT_NAMESPACE__.PDFPostDecorator>, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("changePatternPDFPostDecorator", thrift.Thrift.MessageType.CALL, requestId);
        const args: ChangePatternPDFPostDecoratorArgs = new ChangePatternPDFPostDecoratorArgs({ token, patternId, useDefaultPDFPostDecorators, toSave });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getAllowedContentItemType(token: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAllowedContentItemType", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAllowedContentItemTypeArgs = new GetAllowedContentItemTypeArgs({ token });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_changeKSPNumber(token: string, patternId: string, departmentId: string, kspNumber: number, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("changeKSPNumber", thrift.Thrift.MessageType.CALL, requestId);
        const args: ChangeKSPNumberArgs = new ChangeKSPNumberArgs({ token, patternId, departmentId, kspNumber });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getSubStatusesConfig(token: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getSubStatusesConfig", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetSubStatusesConfigArgs = new GetSubStatusesConfigArgs({ token });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public recv_getAllDocumentPatterns(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAllDocumentPatternsResult = GetAllDocumentPatternsResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAllDocumentPatterns failed: unknown result"));
                }
            }
        }
    }
    public recv_getAllDocumentPatternsGroupByName(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAllDocumentPatternsGroupByNameResult = GetAllDocumentPatternsGroupByNameResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAllDocumentPatternsGroupByName failed: unknown result"));
                }
            }
        }
    }
    public recv_getDocumentPattern(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetDocumentPatternResult = GetDocumentPatternResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getDocumentPattern failed: unknown result"));
                }
            }
        }
    }
    public recv_deleteDocumentPattern(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: DeleteDocumentPatternResult = DeleteDocumentPatternResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "deleteDocumentPattern failed: unknown result"));
                }
            }
        }
    }
    public recv_createOrUpdateDocumentPattern(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: CreateOrUpdateDocumentPatternResult = CreateOrUpdateDocumentPatternResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "createOrUpdateDocumentPattern failed: unknown result"));
                }
            }
        }
    }
    public recv_createDocumentPattern(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: CreateDocumentPatternResult = CreateDocumentPatternResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "createDocumentPattern failed: unknown result"));
                }
            }
        }
    }
    public recv_updateDocumentPattern(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: UpdateDocumentPatternResult = UpdateDocumentPatternResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "updateDocumentPattern failed: unknown result"));
                }
            }
        }
    }
    public recv_exportPatternAsDocumentDraftXML(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: ExportPatternAsDocumentDraftXMLResult = ExportPatternAsDocumentDraftXMLResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "exportPatternAsDocumentDraftXML failed: unknown result"));
                }
            }
        }
    }
    public recv_getAllDocumentPatternStages(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAllDocumentPatternStagesResult = GetAllDocumentPatternStagesResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAllDocumentPatternStages failed: unknown result"));
                }
            }
        }
    }
    public recv_getDocumentPatternStage(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetDocumentPatternStageResult = GetDocumentPatternStageResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getDocumentPatternStage failed: unknown result"));
                }
            }
        }
    }
    public recv_deleteDocumentPatternStageAndMoveDocuments(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: DeleteDocumentPatternStageAndMoveDocumentsResult = DeleteDocumentPatternStageAndMoveDocumentsResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "deleteDocumentPatternStageAndMoveDocuments failed: unknown result"));
                }
            }
        }
    }
    public recv_createOrUpdateStagesAndLinks(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: CreateOrUpdateStagesAndLinksResult = CreateOrUpdateStagesAndLinksResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "createOrUpdateStagesAndLinks failed: unknown result"));
                }
            }
        }
    }
    public recv_getAllDocumentPatternStagesLinks(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAllDocumentPatternStagesLinksResult = GetAllDocumentPatternStagesLinksResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAllDocumentPatternStagesLinks failed: unknown result"));
                }
            }
        }
    }
    public recv_getDocumentPatternStageLink(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetDocumentPatternStageLinkResult = GetDocumentPatternStageLinkResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getDocumentPatternStageLink failed: unknown result"));
                }
            }
        }
    }
    public recv_createOrUpdateDocumentPatternStagesLink(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: CreateOrUpdateDocumentPatternStagesLinkResult = CreateOrUpdateDocumentPatternStagesLinkResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "createOrUpdateDocumentPatternStagesLink failed: unknown result"));
                }
            }
        }
    }
    public recv_deleteDocumentPatternStageLink(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: DeleteDocumentPatternStageLinkResult = DeleteDocumentPatternStageLinkResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "deleteDocumentPatternStageLink failed: unknown result"));
                }
            }
        }
    }
    public recv_getAllDocumentPatternStageExecutors(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAllDocumentPatternStageExecutorsResult = GetAllDocumentPatternStageExecutorsResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAllDocumentPatternStageExecutors failed: unknown result"));
                }
            }
        }
    }
    public recv_addExecutorsToDocumentPatternStage(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: AddExecutorsToDocumentPatternStageResult = AddExecutorsToDocumentPatternStageResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "addExecutorsToDocumentPatternStage failed: unknown result"));
                }
            }
        }
    }
    public recv_deleteExecutorsFromDocumentPatternStage(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: DeleteExecutorsFromDocumentPatternStageResult = DeleteExecutorsFromDocumentPatternStageResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "deleteExecutorsFromDocumentPatternStage failed: unknown result"));
                }
            }
        }
    }
    public recv_checkDocumentPattern(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: CheckDocumentPatternResult = CheckDocumentPatternResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "checkDocumentPattern failed: unknown result"));
                }
            }
        }
    }
    public recv_createOrUpdatePatternContentItems(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: CreateOrUpdatePatternContentItemsResult = CreateOrUpdatePatternContentItemsResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "createOrUpdatePatternContentItems failed: unknown result"));
                }
            }
        }
    }
    public recv_getAllDocumentPatternGroups(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAllDocumentPatternGroupsResult = GetAllDocumentPatternGroupsResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAllDocumentPatternGroups failed: unknown result"));
                }
            }
        }
    }
    public recv_getAllDocumentPatternGroupsGroupByName(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAllDocumentPatternGroupsGroupByNameResult = GetAllDocumentPatternGroupsGroupByNameResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAllDocumentPatternGroupsGroupByName failed: unknown result"));
                }
            }
        }
    }
    public recv_createOrUpdateDocumentPatternGroup(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: CreateOrUpdateDocumentPatternGroupResult = CreateOrUpdateDocumentPatternGroupResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "createOrUpdateDocumentPatternGroup failed: unknown result"));
                }
            }
        }
    }
    public recv_deleteDocumentPatternGroup(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: DeleteDocumentPatternGroupResult = DeleteDocumentPatternGroupResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "deleteDocumentPatternGroup failed: unknown result"));
                }
            }
        }
    }
    public recv_getAllAvailableStages(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAllAvailableStagesResult = GetAllAvailableStagesResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAllAvailableStages failed: unknown result"));
                }
            }
        }
    }
    public recv_getAvailableLinkAnswersByPattern(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAvailableLinkAnswersByPatternResult = GetAvailableLinkAnswersByPatternResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAvailableLinkAnswersByPattern failed: unknown result"));
                }
            }
        }
    }
    public recv_removeAvailableStage(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: RemoveAvailableStageResult = RemoveAvailableStageResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "removeAvailableStage failed: unknown result"));
                }
            }
        }
    }
    public recv_getAllDigitalViews(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAllDigitalViewsResult = GetAllDigitalViewsResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAllDigitalViews failed: unknown result"));
                }
            }
        }
    }
    public recv_createOrUpdateDigitalView(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: CreateOrUpdateDigitalViewResult = CreateOrUpdateDigitalViewResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "createOrUpdateDigitalView failed: unknown result"));
                }
            }
        }
    }
    public recv_deleteDigitalView(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: DeleteDigitalViewResult = DeleteDigitalViewResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "deleteDigitalView failed: unknown result"));
                }
            }
        }
    }
    public recv_exportDocumentPattern(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: ExportDocumentPatternResult = ExportDocumentPatternResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "exportDocumentPattern failed: unknown result"));
                }
            }
        }
    }
    public recv_importDocumentPattern(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: ImportDocumentPatternResult = ImportDocumentPatternResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "importDocumentPattern failed: unknown result"));
                }
            }
        }
    }
    public recv_getPatternUserGroup(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetPatternUserGroupResult = GetPatternUserGroupResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getPatternUserGroup failed: unknown result"));
                }
            }
        }
    }
    public recv_createOrUpdatePatternUserGroup(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: CreateOrUpdatePatternUserGroupResult = CreateOrUpdatePatternUserGroupResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "createOrUpdatePatternUserGroup failed: unknown result"));
                }
            }
        }
    }
    public recv_getPatternProcessRoles(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetPatternProcessRolesResult = GetPatternProcessRolesResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getPatternProcessRoles failed: unknown result"));
                }
            }
        }
    }
    public recv_changePatternProcessRoles(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: ChangePatternProcessRolesResult = ChangePatternProcessRolesResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "changePatternProcessRoles failed: unknown result"));
                }
            }
        }
    }
    public recv_getPatternVariables(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetPatternVariablesResult = GetPatternVariablesResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getPatternVariables failed: unknown result"));
                }
            }
        }
    }
    public recv_changePatternVariables(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: ChangePatternVariablesResult = ChangePatternVariablesResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "changePatternVariables failed: unknown result"));
                }
            }
        }
    }
    public recv_addAvailablePatternStageToAccounts(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: AddAvailablePatternStageToAccountsResult = AddAvailablePatternStageToAccountsResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "addAvailablePatternStageToAccounts failed: unknown result"));
                }
            }
        }
    }
    public recv_getAllPatternAttachmentTemplates(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAllPatternAttachmentTemplatesResult = GetAllPatternAttachmentTemplatesResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAllPatternAttachmentTemplates failed: unknown result"));
                }
            }
        }
    }
    public recv_getPatternAttachmentTemplateById(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetPatternAttachmentTemplateByIdResult = GetPatternAttachmentTemplateByIdResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getPatternAttachmentTemplateById failed: unknown result"));
                }
            }
        }
    }
    public recv_createOrUpdatePatternAttachmentTemplate(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: CreateOrUpdatePatternAttachmentTemplateResult = CreateOrUpdatePatternAttachmentTemplateResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "createOrUpdatePatternAttachmentTemplate failed: unknown result"));
                }
            }
        }
    }
    public recv_downloadPatternAttachmentTemplate(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: DownloadPatternAttachmentTemplateResult = DownloadPatternAttachmentTemplateResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "downloadPatternAttachmentTemplate failed: unknown result"));
                }
            }
        }
    }
    public recv_removePatternAttachmentTemplate(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: RemovePatternAttachmentTemplateResult = RemovePatternAttachmentTemplateResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "removePatternAttachmentTemplate failed: unknown result"));
                }
            }
        }
    }
    public recv_changeStartDocNumberSequence(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: ChangeStartDocNumberSequenceResult = ChangeStartDocNumberSequenceResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "changeStartDocNumberSequence failed: unknown result"));
                }
            }
        }
    }
    public recv_getAllContentHolders(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAllContentHoldersResult = GetAllContentHoldersResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAllContentHolders failed: unknown result"));
                }
            }
        }
    }
    public recv_changeContentHolders(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: ChangeContentHoldersResult = ChangeContentHoldersResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "changeContentHolders failed: unknown result"));
                }
            }
        }
    }
    public recv_getPatternRelationModel(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetPatternRelationModelResult = GetPatternRelationModelResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getPatternRelationModel failed: unknown result"));
                }
            }
        }
    }
    public recv_getNomenclatureNumber(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetNomenclatureNumberResult = GetNomenclatureNumberResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getNomenclatureNumber failed: unknown result"));
                }
            }
        }
    }
    public recv_getAllNomenclatureNumber(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAllNomenclatureNumberResult = GetAllNomenclatureNumberResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAllNomenclatureNumber failed: unknown result"));
                }
            }
        }
    }
    public recv_getCountAllNomenclatureNumber(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetCountAllNomenclatureNumberResult = GetCountAllNomenclatureNumberResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getCountAllNomenclatureNumber failed: unknown result"));
                }
            }
        }
    }
    public recv_createOrUpdateNomenclatureNumber(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: CreateOrUpdateNomenclatureNumberResult = CreateOrUpdateNomenclatureNumberResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "createOrUpdateNomenclatureNumber failed: unknown result"));
                }
            }
        }
    }
    public recv_removeNomenclatureNumber(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: RemoveNomenclatureNumberResult = RemoveNomenclatureNumberResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "removeNomenclatureNumber failed: unknown result"));
                }
            }
        }
    }
    public recv_getNomenclatureGroup(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetNomenclatureGroupResult = GetNomenclatureGroupResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getNomenclatureGroup failed: unknown result"));
                }
            }
        }
    }
    public recv_getAllNomenclatureGroup(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAllNomenclatureGroupResult = GetAllNomenclatureGroupResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAllNomenclatureGroup failed: unknown result"));
                }
            }
        }
    }
    public recv_getCountAllNomenclatureGroup(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetCountAllNomenclatureGroupResult = GetCountAllNomenclatureGroupResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getCountAllNomenclatureGroup failed: unknown result"));
                }
            }
        }
    }
    public recv_createOrUpdateNomenclatureGroup(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: CreateOrUpdateNomenclatureGroupResult = CreateOrUpdateNomenclatureGroupResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "createOrUpdateNomenclatureGroup failed: unknown result"));
                }
            }
        }
    }
    public recv_removeNomenclatureGroup(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: RemoveNomenclatureGroupResult = RemoveNomenclatureGroupResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "removeNomenclatureGroup failed: unknown result"));
                }
            }
        }
    }
    public recv_getInfoForCreateDoc(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetInfoForCreateDocResult = GetInfoForCreateDocResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getInfoForCreateDoc failed: unknown result"));
                }
            }
        }
    }
    public recv_getPatternContentItems(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetPatternContentItemsResult = GetPatternContentItemsResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getPatternContentItems failed: unknown result"));
                }
            }
        }
    }
    public recv_createOrUpdateStagesAndLinksEx(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: CreateOrUpdateStagesAndLinksExResult = CreateOrUpdateStagesAndLinksExResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "createOrUpdateStagesAndLinksEx failed: unknown result"));
                }
            }
        }
    }
    public recv_getAvailableActionList(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAvailableActionListResult = GetAvailableActionListResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAvailableActionList failed: unknown result"));
                }
            }
        }
    }
    public recv_addPatternNightlyDocFieldsTask(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: AddPatternNightlyDocFieldsTaskResult = AddPatternNightlyDocFieldsTaskResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "addPatternNightlyDocFieldsTask failed: unknown result"));
                }
            }
        }
    }
    public recv_getAllColumnsForPattern(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAllColumnsForPatternResult = GetAllColumnsForPatternResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAllColumnsForPattern failed: unknown result"));
                }
            }
        }
    }
    public recv_changePatternColumns(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: ChangePatternColumnsResult = ChangePatternColumnsResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "changePatternColumns failed: unknown result"));
                }
            }
        }
    }
    public recv_getAllPDFPostDecoratorForPattern(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAllPDFPostDecoratorForPatternResult = GetAllPDFPostDecoratorForPatternResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAllPDFPostDecoratorForPattern failed: unknown result"));
                }
            }
        }
    }
    public recv_changePatternPDFPostDecorator(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: ChangePatternPDFPostDecoratorResult = ChangePatternPDFPostDecoratorResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "changePatternPDFPostDecorator failed: unknown result"));
                }
            }
        }
    }
    public recv_getAllowedContentItemType(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAllowedContentItemTypeResult = GetAllowedContentItemTypeResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAllowedContentItemType failed: unknown result"));
                }
            }
        }
    }
    public recv_changeKSPNumber(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: ChangeKSPNumberResult = ChangeKSPNumberResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "changeKSPNumber failed: unknown result"));
                }
            }
        }
    }
    public recv_getSubStatusesConfig(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetSubStatusesConfigResult = GetSubStatusesConfigResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getSubStatusesConfig failed: unknown result"));
                }
            }
        }
    }
}
export interface IHandler {
    getAllDocumentPatterns(token: string, filter: __ROOT_NAMESPACE__.KazFilter, withCurrentDocNumber: boolean): Array<__ROOT_NAMESPACE__.DocumentPattern> | Promise<Array<__ROOT_NAMESPACE__.DocumentPattern>>;
    getAllDocumentPatternsGroupByName(token: string, filter: __ROOT_NAMESPACE__.KazFilter): Array<__ROOT_NAMESPACE__.SimpleDocumentPatternOrGroup> | Promise<Array<__ROOT_NAMESPACE__.SimpleDocumentPatternOrGroup>>;
    getDocumentPattern(token: string, docPatternId: string): __ROOT_NAMESPACE__.DocumentPattern | Promise<__ROOT_NAMESPACE__.DocumentPattern>;
    deleteDocumentPattern(token: string, docPatternId: string): boolean | Promise<boolean>;
    createOrUpdateDocumentPattern(token: string, documentPattern: __ROOT_NAMESPACE__.DocumentPattern, accountId: string): __ROOT_NAMESPACE__.DocumentPattern | Promise<__ROOT_NAMESPACE__.DocumentPattern>;
    createDocumentPattern(token: string, documentPattern: __ROOT_NAMESPACE__.DocumentPattern, accountId: string): __ROOT_NAMESPACE__.DocumentPattern | Promise<__ROOT_NAMESPACE__.DocumentPattern>;
    updateDocumentPattern(token: string, documentPattern: __ROOT_NAMESPACE__.DocumentPattern, accountId: string): __ROOT_NAMESPACE__.DocumentPattern | Promise<__ROOT_NAMESPACE__.DocumentPattern>;
    exportPatternAsDocumentDraftXML(token: string, docPatternId: string): Buffer | Promise<Buffer>;
    getAllDocumentPatternStages(token: string, docPatternId: string, filter: __ROOT_NAMESPACE__.KazFilter, selector: RuleSelector.RuleSelector): Array<__ROOT_NAMESPACE__.DocumentPatternStage> | Promise<Array<__ROOT_NAMESPACE__.DocumentPatternStage>>;
    getDocumentPatternStage(token: string, docPatternStageId: string): __ROOT_NAMESPACE__.DocumentPatternStage | Promise<__ROOT_NAMESPACE__.DocumentPatternStage>;
    deleteDocumentPatternStageAndMoveDocuments(token: string, docPatternStageId: string, newDocPatternStageId: string, fillDocPatternId: string): boolean | Promise<boolean>;
    createOrUpdateStagesAndLinks(token: string, patternId: string, stages: Array<__ROOT_NAMESPACE__.DocumentPatternStage>, links: Array<__ROOT_NAMESPACE__.DocumentPatternStagesLink>): PatternData.PatternData | Promise<PatternData.PatternData>;
    getAllDocumentPatternStagesLinks(token: string, docPatternId: string, docPatternStageId: string, filter: __ROOT_NAMESPACE__.KazFilter): Array<__ROOT_NAMESPACE__.DocumentPatternStagesLink> | Promise<Array<__ROOT_NAMESPACE__.DocumentPatternStagesLink>>;
    getDocumentPatternStageLink(token: string, docPatternStageLinkId: string): __ROOT_NAMESPACE__.DocumentPatternStagesLink | Promise<__ROOT_NAMESPACE__.DocumentPatternStagesLink>;
    createOrUpdateDocumentPatternStagesLink(token: string, documentPatternStagesLink: __ROOT_NAMESPACE__.DocumentPatternStagesLink): __ROOT_NAMESPACE__.DocumentPatternStagesLink | Promise<__ROOT_NAMESPACE__.DocumentPatternStagesLink>;
    deleteDocumentPatternStageLink(token: string, docPatternStageLinkId: string): boolean | Promise<boolean>;
    getAllDocumentPatternStageExecutors(token: string, docPatternStageId: string, filter: __ROOT_NAMESPACE__.KazFilter): Array<DocumentPatternStagesExecutor.DocumentPatternStagesExecutor> | Promise<Array<DocumentPatternStagesExecutor.DocumentPatternStagesExecutor>>;
    addExecutorsToDocumentPatternStage(token: string, docPatternStageId: string, userOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>): boolean | Promise<boolean>;
    deleteExecutorsFromDocumentPatternStage(token: string, docPatternStageId: string, userOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>): boolean | Promise<boolean>;
    checkDocumentPattern(token: string, docPatternId: string, filter: __ROOT_NAMESPACE__.KazFilter): Array<__ROOT_NAMESPACE__.PreconditionException> | Promise<Array<__ROOT_NAMESPACE__.PreconditionException>>;
    createOrUpdatePatternContentItems(token: string, docPatternId: string, contentItems: Array<__ROOT_NAMESPACE__.ContentItem>): Array<__ROOT_NAMESPACE__.ContentItem> | Promise<Array<__ROOT_NAMESPACE__.ContentItem>>;
    getAllDocumentPatternGroups(token: string, filter: __ROOT_NAMESPACE__.KazFilter): Array<__ROOT_NAMESPACE__.DocumentPatternGroup> | Promise<Array<__ROOT_NAMESPACE__.DocumentPatternGroup>>;
    getAllDocumentPatternGroupsGroupByName(token: string, filter: __ROOT_NAMESPACE__.KazFilter): Array<__ROOT_NAMESPACE__.SimpleDocumentPatternOrGroup> | Promise<Array<__ROOT_NAMESPACE__.SimpleDocumentPatternOrGroup>>;
    createOrUpdateDocumentPatternGroup(token: string, documentPatternGroup: __ROOT_NAMESPACE__.DocumentPatternGroup, accountId: string): __ROOT_NAMESPACE__.DocumentPatternGroup | Promise<__ROOT_NAMESPACE__.DocumentPatternGroup>;
    deleteDocumentPatternGroup(token: string, documentPatternGroupId: string): boolean | Promise<boolean>;
    getAllAvailableStages(token: string, filter: __ROOT_NAMESPACE__.KazFilter, patternType: __ROOT_NAMESPACE__.PatternType): Array<AvailablePatternStage.AvailablePatternStage> | Promise<Array<AvailablePatternStage.AvailablePatternStage>>;
    getAvailableLinkAnswersByPattern(token: string, patternId: string): Set<string> | Promise<Set<string>>;
    removeAvailableStage(token: string, availStageId: string): boolean | Promise<boolean>;
    getAllDigitalViews(token: string, docPatternId: string, filter: __ROOT_NAMESPACE__.KazFilter): Array<DigitalView.DigitalView> | Promise<Array<DigitalView.DigitalView>>;
    createOrUpdateDigitalView(token: string, digitalView: DigitalView.DigitalView): DigitalView.DigitalView | Promise<DigitalView.DigitalView>;
    deleteDigitalView(token: string, digitalViewId: string): boolean | Promise<boolean>;
    exportDocumentPattern(token: string, docPatternId: string): Buffer | Promise<Buffer>;
    importDocumentPattern(token: string, json: Buffer, docPatternNameLoc: Map<string, string>, pDescriptionLoc: Map<string, string>, docPatternGroupId: string, accountId: string, ignoreError: boolean): __ROOT_NAMESPACE__.DocumentPattern | Promise<__ROOT_NAMESPACE__.DocumentPattern>;
    getPatternUserGroup(token: string, docPatternId: string): Array<PatternUserGroup.PatternUserGroup> | Promise<Array<PatternUserGroup.PatternUserGroup>>;
    createOrUpdatePatternUserGroup(token: string, docPatternId: string, userOrGroups: Array<PatternUserGroup.PatternUserGroup>): boolean | Promise<boolean>;
    getPatternProcessRoles(token: string, docPatternId: string, filter: __ROOT_NAMESPACE__.KazFilter): Array<__ROOT_NAMESPACE__.PatternProcessRole> | Promise<Array<__ROOT_NAMESPACE__.PatternProcessRole>>;
    changePatternProcessRoles(token: string, docPatternId: string, userOrGroupsToAdd: Array<__ROOT_NAMESPACE__.PatternProcessRole>, keyIdToRemove: Set<string>): Array<__ROOT_NAMESPACE__.PatternProcessRole> | Promise<Array<__ROOT_NAMESPACE__.PatternProcessRole>>;
    getPatternVariables(token: string, docPatternId: string, filter: __ROOT_NAMESPACE__.KazFilter): Array<__ROOT_NAMESPACE__.PatternVariable> | Promise<Array<__ROOT_NAMESPACE__.PatternVariable>>;
    changePatternVariables(token: string, docPatternId: string, patternVariablesToAdd: Array<__ROOT_NAMESPACE__.PatternVariable>, keyIdToRemove: Set<string>): Array<__ROOT_NAMESPACE__.PatternVariable> | Promise<Array<__ROOT_NAMESPACE__.PatternVariable>>;
    addAvailablePatternStageToAccounts(token: string, availablePatternStageId: string, accountIds: Array<string>): boolean | Promise<boolean>;
    getAllPatternAttachmentTemplates(token: string, patternId: string, filter: __ROOT_NAMESPACE__.KazFilter): Array<PatternAttachmentTemplate.PatternAttachmentTemplate> | Promise<Array<PatternAttachmentTemplate.PatternAttachmentTemplate>>;
    getPatternAttachmentTemplateById(token: string, patternId: string): PatternAttachmentTemplate.PatternAttachmentTemplate | Promise<PatternAttachmentTemplate.PatternAttachmentTemplate>;
    createOrUpdatePatternAttachmentTemplate(token: string, patternAttachmentTemplate: PatternAttachmentTemplate.PatternAttachmentTemplate, xmlFile: Buffer): PatternAttachmentTemplate.PatternAttachmentTemplate | Promise<PatternAttachmentTemplate.PatternAttachmentTemplate>;
    downloadPatternAttachmentTemplate(token: string, patternAttachmentTemplateId: string): Buffer | Promise<Buffer>;
    removePatternAttachmentTemplate(token: string, patternAttachmentTemplateId: string): boolean | Promise<boolean>;
    changeStartDocNumberSequence(token: string, patternId: string, value: Int64): boolean | Promise<boolean>;
    getAllContentHolders(token: string, patternId: string, withContent: boolean, filter: __ROOT_NAMESPACE__.KazFilter): Array<__ROOT_NAMESPACE__.ContentHolder> | Promise<Array<__ROOT_NAMESPACE__.ContentHolder>>;
    changeContentHolders(token: string, toUpdate: Array<__ROOT_NAMESPACE__.ContentHolder>, toRemoveIds: Array<string>): Array<__ROOT_NAMESPACE__.ContentHolder> | Promise<Array<__ROOT_NAMESPACE__.ContentHolder>>;
    getPatternRelationModel(token: string, patternId: string, filter: __ROOT_NAMESPACE__.KazFilter): PatternRelationModel.PatternRelationModel | Promise<PatternRelationModel.PatternRelationModel>;
    getNomenclatureNumber(token: string, nomenclatureNumberId: string): __ROOT_NAMESPACE__.NomenclatureNumber | Promise<__ROOT_NAMESPACE__.NomenclatureNumber>;
    getAllNomenclatureNumber(token: string, filter: __ROOT_NAMESPACE__.KazFilter): Array<__ROOT_NAMESPACE__.NomenclatureNumber> | Promise<Array<__ROOT_NAMESPACE__.NomenclatureNumber>>;
    getCountAllNomenclatureNumber(token: string, filter: __ROOT_NAMESPACE__.KazFilter): Int64 | Promise<Int64>;
    createOrUpdateNomenclatureNumber(token: string, nomenclatureNumber: __ROOT_NAMESPACE__.NomenclatureNumber): __ROOT_NAMESPACE__.NomenclatureNumber | Promise<__ROOT_NAMESPACE__.NomenclatureNumber>;
    removeNomenclatureNumber(token: string, nomenclatureNumberId: string): boolean | Promise<boolean>;
    getNomenclatureGroup(token: string, nomenclatureGroupId: string): __ROOT_NAMESPACE__.NomenclatureGroup | Promise<__ROOT_NAMESPACE__.NomenclatureGroup>;
    getAllNomenclatureGroup(token: string, filter: __ROOT_NAMESPACE__.KazFilter): Array<__ROOT_NAMESPACE__.NomenclatureGroup> | Promise<Array<__ROOT_NAMESPACE__.NomenclatureGroup>>;
    getCountAllNomenclatureGroup(token: string, filter: __ROOT_NAMESPACE__.KazFilter): Int64 | Promise<Int64>;
    createOrUpdateNomenclatureGroup(token: string, nomenclatureGroup: __ROOT_NAMESPACE__.NomenclatureGroup): __ROOT_NAMESPACE__.NomenclatureGroup | Promise<__ROOT_NAMESPACE__.NomenclatureGroup>;
    removeNomenclatureGroup(token: string, nomenclatureGrouprId: string): boolean | Promise<boolean>;
    getInfoForCreateDoc(token: string, patternId: string, parentDocId: string, accessPolicy: __ROOT_NAMESPACE__.DocumentAccessPolicy): InfoForCreateDoc.InfoForCreateDoc | Promise<InfoForCreateDoc.InfoForCreateDoc>;
    getPatternContentItems(token: string, patternId: string): Array<__ROOT_NAMESPACE__.ContentItem> | Promise<Array<__ROOT_NAMESPACE__.ContentItem>>;
    createOrUpdateStagesAndLinksEx(token: string, patternId: string, stages: Array<__ROOT_NAMESPACE__.DocumentPatternStage>, links: Array<__ROOT_NAMESPACE__.DocumentPatternStagesLink>, stageToRemove: Array<string>, linkToRemove: Array<string>): PatternData.PatternData | Promise<PatternData.PatternData>;
    getAvailableActionList(token: string, filter: __ROOT_NAMESPACE__.KazFilter): Array<__ROOT_NAMESPACE__.AvailableAction> | Promise<Array<__ROOT_NAMESPACE__.AvailableAction>>;
    addPatternNightlyDocFieldsTask(token: string, patternId: string): boolean | Promise<boolean>;
    getAllColumnsForPattern(token: string, patternId: string, filter: __ROOT_NAMESPACE__.KazFilter): Array<__ROOT_NAMESPACE__.DocColumn> | Promise<Array<__ROOT_NAMESPACE__.DocColumn>>;
    changePatternColumns(token: string, patternId: string, useDefaultColumns: boolean, toSave: Array<__ROOT_NAMESPACE__.DocColumn>): boolean | Promise<boolean>;
    getAllPDFPostDecoratorForPattern(token: string, patternId: string, filter: __ROOT_NAMESPACE__.KazFilter): Array<__ROOT_NAMESPACE__.PDFPostDecorator> | Promise<Array<__ROOT_NAMESPACE__.PDFPostDecorator>>;
    changePatternPDFPostDecorator(token: string, patternId: string, useDefaultPDFPostDecorators: boolean, toSave: Array<__ROOT_NAMESPACE__.PDFPostDecorator>): boolean | Promise<boolean>;
    getAllowedContentItemType(token: string): Array<__ROOT_NAMESPACE__.ContentItemType> | Promise<Array<__ROOT_NAMESPACE__.ContentItemType>>;
    changeKSPNumber(token: string, patternId: string, departmentId: string, kspNumber: number): boolean | Promise<boolean>;
    getSubStatusesConfig(token: string): Array<__ROOT_NAMESPACE__.AvailableSubStatus> | Promise<Array<__ROOT_NAMESPACE__.AvailableSubStatus>>;
}
export class Processor {
    public _handler: IHandler;
    constructor(handler: IHandler) {
        this._handler = handler;
    }
    public process(input: thrift.TProtocol, output: thrift.TProtocol): void {
        const metadata: thrift.TMessage = input.readMessageBegin();
        const fname: string = metadata.fname;
        const requestId: number = metadata.rseqid;
        const methodName: string = "process_" + fname;
        switch (methodName) {
            case "process_getAllDocumentPatterns": {
                this.process_getAllDocumentPatterns(requestId, input, output);
                return;
            }
            case "process_getAllDocumentPatternsGroupByName": {
                this.process_getAllDocumentPatternsGroupByName(requestId, input, output);
                return;
            }
            case "process_getDocumentPattern": {
                this.process_getDocumentPattern(requestId, input, output);
                return;
            }
            case "process_deleteDocumentPattern": {
                this.process_deleteDocumentPattern(requestId, input, output);
                return;
            }
            case "process_createOrUpdateDocumentPattern": {
                this.process_createOrUpdateDocumentPattern(requestId, input, output);
                return;
            }
            case "process_createDocumentPattern": {
                this.process_createDocumentPattern(requestId, input, output);
                return;
            }
            case "process_updateDocumentPattern": {
                this.process_updateDocumentPattern(requestId, input, output);
                return;
            }
            case "process_exportPatternAsDocumentDraftXML": {
                this.process_exportPatternAsDocumentDraftXML(requestId, input, output);
                return;
            }
            case "process_getAllDocumentPatternStages": {
                this.process_getAllDocumentPatternStages(requestId, input, output);
                return;
            }
            case "process_getDocumentPatternStage": {
                this.process_getDocumentPatternStage(requestId, input, output);
                return;
            }
            case "process_deleteDocumentPatternStageAndMoveDocuments": {
                this.process_deleteDocumentPatternStageAndMoveDocuments(requestId, input, output);
                return;
            }
            case "process_createOrUpdateStagesAndLinks": {
                this.process_createOrUpdateStagesAndLinks(requestId, input, output);
                return;
            }
            case "process_getAllDocumentPatternStagesLinks": {
                this.process_getAllDocumentPatternStagesLinks(requestId, input, output);
                return;
            }
            case "process_getDocumentPatternStageLink": {
                this.process_getDocumentPatternStageLink(requestId, input, output);
                return;
            }
            case "process_createOrUpdateDocumentPatternStagesLink": {
                this.process_createOrUpdateDocumentPatternStagesLink(requestId, input, output);
                return;
            }
            case "process_deleteDocumentPatternStageLink": {
                this.process_deleteDocumentPatternStageLink(requestId, input, output);
                return;
            }
            case "process_getAllDocumentPatternStageExecutors": {
                this.process_getAllDocumentPatternStageExecutors(requestId, input, output);
                return;
            }
            case "process_addExecutorsToDocumentPatternStage": {
                this.process_addExecutorsToDocumentPatternStage(requestId, input, output);
                return;
            }
            case "process_deleteExecutorsFromDocumentPatternStage": {
                this.process_deleteExecutorsFromDocumentPatternStage(requestId, input, output);
                return;
            }
            case "process_checkDocumentPattern": {
                this.process_checkDocumentPattern(requestId, input, output);
                return;
            }
            case "process_createOrUpdatePatternContentItems": {
                this.process_createOrUpdatePatternContentItems(requestId, input, output);
                return;
            }
            case "process_getAllDocumentPatternGroups": {
                this.process_getAllDocumentPatternGroups(requestId, input, output);
                return;
            }
            case "process_getAllDocumentPatternGroupsGroupByName": {
                this.process_getAllDocumentPatternGroupsGroupByName(requestId, input, output);
                return;
            }
            case "process_createOrUpdateDocumentPatternGroup": {
                this.process_createOrUpdateDocumentPatternGroup(requestId, input, output);
                return;
            }
            case "process_deleteDocumentPatternGroup": {
                this.process_deleteDocumentPatternGroup(requestId, input, output);
                return;
            }
            case "process_getAllAvailableStages": {
                this.process_getAllAvailableStages(requestId, input, output);
                return;
            }
            case "process_getAvailableLinkAnswersByPattern": {
                this.process_getAvailableLinkAnswersByPattern(requestId, input, output);
                return;
            }
            case "process_removeAvailableStage": {
                this.process_removeAvailableStage(requestId, input, output);
                return;
            }
            case "process_getAllDigitalViews": {
                this.process_getAllDigitalViews(requestId, input, output);
                return;
            }
            case "process_createOrUpdateDigitalView": {
                this.process_createOrUpdateDigitalView(requestId, input, output);
                return;
            }
            case "process_deleteDigitalView": {
                this.process_deleteDigitalView(requestId, input, output);
                return;
            }
            case "process_exportDocumentPattern": {
                this.process_exportDocumentPattern(requestId, input, output);
                return;
            }
            case "process_importDocumentPattern": {
                this.process_importDocumentPattern(requestId, input, output);
                return;
            }
            case "process_getPatternUserGroup": {
                this.process_getPatternUserGroup(requestId, input, output);
                return;
            }
            case "process_createOrUpdatePatternUserGroup": {
                this.process_createOrUpdatePatternUserGroup(requestId, input, output);
                return;
            }
            case "process_getPatternProcessRoles": {
                this.process_getPatternProcessRoles(requestId, input, output);
                return;
            }
            case "process_changePatternProcessRoles": {
                this.process_changePatternProcessRoles(requestId, input, output);
                return;
            }
            case "process_getPatternVariables": {
                this.process_getPatternVariables(requestId, input, output);
                return;
            }
            case "process_changePatternVariables": {
                this.process_changePatternVariables(requestId, input, output);
                return;
            }
            case "process_addAvailablePatternStageToAccounts": {
                this.process_addAvailablePatternStageToAccounts(requestId, input, output);
                return;
            }
            case "process_getAllPatternAttachmentTemplates": {
                this.process_getAllPatternAttachmentTemplates(requestId, input, output);
                return;
            }
            case "process_getPatternAttachmentTemplateById": {
                this.process_getPatternAttachmentTemplateById(requestId, input, output);
                return;
            }
            case "process_createOrUpdatePatternAttachmentTemplate": {
                this.process_createOrUpdatePatternAttachmentTemplate(requestId, input, output);
                return;
            }
            case "process_downloadPatternAttachmentTemplate": {
                this.process_downloadPatternAttachmentTemplate(requestId, input, output);
                return;
            }
            case "process_removePatternAttachmentTemplate": {
                this.process_removePatternAttachmentTemplate(requestId, input, output);
                return;
            }
            case "process_changeStartDocNumberSequence": {
                this.process_changeStartDocNumberSequence(requestId, input, output);
                return;
            }
            case "process_getAllContentHolders": {
                this.process_getAllContentHolders(requestId, input, output);
                return;
            }
            case "process_changeContentHolders": {
                this.process_changeContentHolders(requestId, input, output);
                return;
            }
            case "process_getPatternRelationModel": {
                this.process_getPatternRelationModel(requestId, input, output);
                return;
            }
            case "process_getNomenclatureNumber": {
                this.process_getNomenclatureNumber(requestId, input, output);
                return;
            }
            case "process_getAllNomenclatureNumber": {
                this.process_getAllNomenclatureNumber(requestId, input, output);
                return;
            }
            case "process_getCountAllNomenclatureNumber": {
                this.process_getCountAllNomenclatureNumber(requestId, input, output);
                return;
            }
            case "process_createOrUpdateNomenclatureNumber": {
                this.process_createOrUpdateNomenclatureNumber(requestId, input, output);
                return;
            }
            case "process_removeNomenclatureNumber": {
                this.process_removeNomenclatureNumber(requestId, input, output);
                return;
            }
            case "process_getNomenclatureGroup": {
                this.process_getNomenclatureGroup(requestId, input, output);
                return;
            }
            case "process_getAllNomenclatureGroup": {
                this.process_getAllNomenclatureGroup(requestId, input, output);
                return;
            }
            case "process_getCountAllNomenclatureGroup": {
                this.process_getCountAllNomenclatureGroup(requestId, input, output);
                return;
            }
            case "process_createOrUpdateNomenclatureGroup": {
                this.process_createOrUpdateNomenclatureGroup(requestId, input, output);
                return;
            }
            case "process_removeNomenclatureGroup": {
                this.process_removeNomenclatureGroup(requestId, input, output);
                return;
            }
            case "process_getInfoForCreateDoc": {
                this.process_getInfoForCreateDoc(requestId, input, output);
                return;
            }
            case "process_getPatternContentItems": {
                this.process_getPatternContentItems(requestId, input, output);
                return;
            }
            case "process_createOrUpdateStagesAndLinksEx": {
                this.process_createOrUpdateStagesAndLinksEx(requestId, input, output);
                return;
            }
            case "process_getAvailableActionList": {
                this.process_getAvailableActionList(requestId, input, output);
                return;
            }
            case "process_addPatternNightlyDocFieldsTask": {
                this.process_addPatternNightlyDocFieldsTask(requestId, input, output);
                return;
            }
            case "process_getAllColumnsForPattern": {
                this.process_getAllColumnsForPattern(requestId, input, output);
                return;
            }
            case "process_changePatternColumns": {
                this.process_changePatternColumns(requestId, input, output);
                return;
            }
            case "process_getAllPDFPostDecoratorForPattern": {
                this.process_getAllPDFPostDecoratorForPattern(requestId, input, output);
                return;
            }
            case "process_changePatternPDFPostDecorator": {
                this.process_changePatternPDFPostDecorator(requestId, input, output);
                return;
            }
            case "process_getAllowedContentItemType": {
                this.process_getAllowedContentItemType(requestId, input, output);
                return;
            }
            case "process_changeKSPNumber": {
                this.process_changeKSPNumber(requestId, input, output);
                return;
            }
            case "process_getSubStatusesConfig": {
                this.process_getSubStatusesConfig(requestId, input, output);
                return;
            }
            default: {
                input.skip(thrift.Thrift.Type.STRUCT);
                input.readMessageEnd();
                const errMessage = "Unknown function " + fname;
                const err = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN_METHOD, errMessage);
                output.writeMessageBegin(fname, thrift.Thrift.MessageType.EXCEPTION, requestId);
                err.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        }
    }
    public process_getAllDocumentPatterns(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<__ROOT_NAMESPACE__.DocumentPattern>>((resolve, reject): void => {
            try {
                const args: GetAllDocumentPatternsArgs = GetAllDocumentPatternsArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAllDocumentPatterns(args.token, args.filter, args.withCurrentDocNumber));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<__ROOT_NAMESPACE__.DocumentPattern>): void => {
            const result: GetAllDocumentPatternsResult = new GetAllDocumentPatternsResult({ success: data });
            output.writeMessageBegin("getAllDocumentPatterns", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetAllDocumentPatternsResult = new GetAllDocumentPatternsResult({ validError: err });
                output.writeMessageBegin("getAllDocumentPatterns", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetAllDocumentPatternsResult = new GetAllDocumentPatternsResult({ error: err });
                output.writeMessageBegin("getAllDocumentPatterns", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAllDocumentPatterns", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getAllDocumentPatternsGroupByName(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<__ROOT_NAMESPACE__.SimpleDocumentPatternOrGroup>>((resolve, reject): void => {
            try {
                const args: GetAllDocumentPatternsGroupByNameArgs = GetAllDocumentPatternsGroupByNameArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAllDocumentPatternsGroupByName(args.token, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<__ROOT_NAMESPACE__.SimpleDocumentPatternOrGroup>): void => {
            const result: GetAllDocumentPatternsGroupByNameResult = new GetAllDocumentPatternsGroupByNameResult({ success: data });
            output.writeMessageBegin("getAllDocumentPatternsGroupByName", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetAllDocumentPatternsGroupByNameResult = new GetAllDocumentPatternsGroupByNameResult({ validError: err });
                output.writeMessageBegin("getAllDocumentPatternsGroupByName", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetAllDocumentPatternsGroupByNameResult = new GetAllDocumentPatternsGroupByNameResult({ error: err });
                output.writeMessageBegin("getAllDocumentPatternsGroupByName", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAllDocumentPatternsGroupByName", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getDocumentPattern(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<__ROOT_NAMESPACE__.DocumentPattern>((resolve, reject): void => {
            try {
                const args: GetDocumentPatternArgs = GetDocumentPatternArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getDocumentPattern(args.token, args.docPatternId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: __ROOT_NAMESPACE__.DocumentPattern): void => {
            const result: GetDocumentPatternResult = new GetDocumentPatternResult({ success: data });
            output.writeMessageBegin("getDocumentPattern", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetDocumentPatternResult = new GetDocumentPatternResult({ validError: err });
                output.writeMessageBegin("getDocumentPattern", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetDocumentPatternResult = new GetDocumentPatternResult({ error: err });
                output.writeMessageBegin("getDocumentPattern", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getDocumentPattern", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_deleteDocumentPattern(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: DeleteDocumentPatternArgs = DeleteDocumentPatternArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.deleteDocumentPattern(args.token, args.docPatternId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: DeleteDocumentPatternResult = new DeleteDocumentPatternResult({ success: data });
            output.writeMessageBegin("deleteDocumentPattern", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: DeleteDocumentPatternResult = new DeleteDocumentPatternResult({ validError: err });
                output.writeMessageBegin("deleteDocumentPattern", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: DeleteDocumentPatternResult = new DeleteDocumentPatternResult({ error: err });
                output.writeMessageBegin("deleteDocumentPattern", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("deleteDocumentPattern", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_createOrUpdateDocumentPattern(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<__ROOT_NAMESPACE__.DocumentPattern>((resolve, reject): void => {
            try {
                const args: CreateOrUpdateDocumentPatternArgs = CreateOrUpdateDocumentPatternArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.createOrUpdateDocumentPattern(args.token, args.documentPattern, args.accountId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: __ROOT_NAMESPACE__.DocumentPattern): void => {
            const result: CreateOrUpdateDocumentPatternResult = new CreateOrUpdateDocumentPatternResult({ success: data });
            output.writeMessageBegin("createOrUpdateDocumentPattern", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: CreateOrUpdateDocumentPatternResult = new CreateOrUpdateDocumentPatternResult({ validError: err });
                output.writeMessageBegin("createOrUpdateDocumentPattern", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: CreateOrUpdateDocumentPatternResult = new CreateOrUpdateDocumentPatternResult({ error: err });
                output.writeMessageBegin("createOrUpdateDocumentPattern", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("createOrUpdateDocumentPattern", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_createDocumentPattern(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<__ROOT_NAMESPACE__.DocumentPattern>((resolve, reject): void => {
            try {
                const args: CreateDocumentPatternArgs = CreateDocumentPatternArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.createDocumentPattern(args.token, args.documentPattern, args.accountId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: __ROOT_NAMESPACE__.DocumentPattern): void => {
            const result: CreateDocumentPatternResult = new CreateDocumentPatternResult({ success: data });
            output.writeMessageBegin("createDocumentPattern", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: CreateDocumentPatternResult = new CreateDocumentPatternResult({ validError: err });
                output.writeMessageBegin("createDocumentPattern", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: CreateDocumentPatternResult = new CreateDocumentPatternResult({ error: err });
                output.writeMessageBegin("createDocumentPattern", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("createDocumentPattern", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_updateDocumentPattern(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<__ROOT_NAMESPACE__.DocumentPattern>((resolve, reject): void => {
            try {
                const args: UpdateDocumentPatternArgs = UpdateDocumentPatternArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.updateDocumentPattern(args.token, args.documentPattern, args.accountId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: __ROOT_NAMESPACE__.DocumentPattern): void => {
            const result: UpdateDocumentPatternResult = new UpdateDocumentPatternResult({ success: data });
            output.writeMessageBegin("updateDocumentPattern", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: UpdateDocumentPatternResult = new UpdateDocumentPatternResult({ validError: err });
                output.writeMessageBegin("updateDocumentPattern", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: UpdateDocumentPatternResult = new UpdateDocumentPatternResult({ error: err });
                output.writeMessageBegin("updateDocumentPattern", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("updateDocumentPattern", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_exportPatternAsDocumentDraftXML(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Buffer>((resolve, reject): void => {
            try {
                const args: ExportPatternAsDocumentDraftXMLArgs = ExportPatternAsDocumentDraftXMLArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.exportPatternAsDocumentDraftXML(args.token, args.docPatternId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Buffer): void => {
            const result: ExportPatternAsDocumentDraftXMLResult = new ExportPatternAsDocumentDraftXMLResult({ success: data });
            output.writeMessageBegin("exportPatternAsDocumentDraftXML", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: ExportPatternAsDocumentDraftXMLResult = new ExportPatternAsDocumentDraftXMLResult({ validError: err });
                output.writeMessageBegin("exportPatternAsDocumentDraftXML", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: ExportPatternAsDocumentDraftXMLResult = new ExportPatternAsDocumentDraftXMLResult({ error: err });
                output.writeMessageBegin("exportPatternAsDocumentDraftXML", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("exportPatternAsDocumentDraftXML", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getAllDocumentPatternStages(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<__ROOT_NAMESPACE__.DocumentPatternStage>>((resolve, reject): void => {
            try {
                const args: GetAllDocumentPatternStagesArgs = GetAllDocumentPatternStagesArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAllDocumentPatternStages(args.token, args.docPatternId, args.filter, args.selector));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<__ROOT_NAMESPACE__.DocumentPatternStage>): void => {
            const result: GetAllDocumentPatternStagesResult = new GetAllDocumentPatternStagesResult({ success: data });
            output.writeMessageBegin("getAllDocumentPatternStages", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetAllDocumentPatternStagesResult = new GetAllDocumentPatternStagesResult({ validError: err });
                output.writeMessageBegin("getAllDocumentPatternStages", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetAllDocumentPatternStagesResult = new GetAllDocumentPatternStagesResult({ error: err });
                output.writeMessageBegin("getAllDocumentPatternStages", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAllDocumentPatternStages", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getDocumentPatternStage(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<__ROOT_NAMESPACE__.DocumentPatternStage>((resolve, reject): void => {
            try {
                const args: GetDocumentPatternStageArgs = GetDocumentPatternStageArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getDocumentPatternStage(args.token, args.docPatternStageId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: __ROOT_NAMESPACE__.DocumentPatternStage): void => {
            const result: GetDocumentPatternStageResult = new GetDocumentPatternStageResult({ success: data });
            output.writeMessageBegin("getDocumentPatternStage", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetDocumentPatternStageResult = new GetDocumentPatternStageResult({ validError: err });
                output.writeMessageBegin("getDocumentPatternStage", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetDocumentPatternStageResult = new GetDocumentPatternStageResult({ error: err });
                output.writeMessageBegin("getDocumentPatternStage", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getDocumentPatternStage", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_deleteDocumentPatternStageAndMoveDocuments(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: DeleteDocumentPatternStageAndMoveDocumentsArgs = DeleteDocumentPatternStageAndMoveDocumentsArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.deleteDocumentPatternStageAndMoveDocuments(args.token, args.docPatternStageId, args.newDocPatternStageId, args.fillDocPatternId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: DeleteDocumentPatternStageAndMoveDocumentsResult = new DeleteDocumentPatternStageAndMoveDocumentsResult({ success: data });
            output.writeMessageBegin("deleteDocumentPatternStageAndMoveDocuments", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: DeleteDocumentPatternStageAndMoveDocumentsResult = new DeleteDocumentPatternStageAndMoveDocumentsResult({ validError: err });
                output.writeMessageBegin("deleteDocumentPatternStageAndMoveDocuments", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: DeleteDocumentPatternStageAndMoveDocumentsResult = new DeleteDocumentPatternStageAndMoveDocumentsResult({ error: err });
                output.writeMessageBegin("deleteDocumentPatternStageAndMoveDocuments", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("deleteDocumentPatternStageAndMoveDocuments", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_createOrUpdateStagesAndLinks(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<PatternData.PatternData>((resolve, reject): void => {
            try {
                const args: CreateOrUpdateStagesAndLinksArgs = CreateOrUpdateStagesAndLinksArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.createOrUpdateStagesAndLinks(args.token, args.patternId, args.stages, args.links));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: PatternData.PatternData): void => {
            const result: CreateOrUpdateStagesAndLinksResult = new CreateOrUpdateStagesAndLinksResult({ success: data });
            output.writeMessageBegin("createOrUpdateStagesAndLinks", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: CreateOrUpdateStagesAndLinksResult = new CreateOrUpdateStagesAndLinksResult({ validError: err });
                output.writeMessageBegin("createOrUpdateStagesAndLinks", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: CreateOrUpdateStagesAndLinksResult = new CreateOrUpdateStagesAndLinksResult({ error: err });
                output.writeMessageBegin("createOrUpdateStagesAndLinks", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("createOrUpdateStagesAndLinks", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getAllDocumentPatternStagesLinks(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<__ROOT_NAMESPACE__.DocumentPatternStagesLink>>((resolve, reject): void => {
            try {
                const args: GetAllDocumentPatternStagesLinksArgs = GetAllDocumentPatternStagesLinksArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAllDocumentPatternStagesLinks(args.token, args.docPatternId, args.docPatternStageId, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<__ROOT_NAMESPACE__.DocumentPatternStagesLink>): void => {
            const result: GetAllDocumentPatternStagesLinksResult = new GetAllDocumentPatternStagesLinksResult({ success: data });
            output.writeMessageBegin("getAllDocumentPatternStagesLinks", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetAllDocumentPatternStagesLinksResult = new GetAllDocumentPatternStagesLinksResult({ validError: err });
                output.writeMessageBegin("getAllDocumentPatternStagesLinks", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetAllDocumentPatternStagesLinksResult = new GetAllDocumentPatternStagesLinksResult({ error: err });
                output.writeMessageBegin("getAllDocumentPatternStagesLinks", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAllDocumentPatternStagesLinks", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getDocumentPatternStageLink(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<__ROOT_NAMESPACE__.DocumentPatternStagesLink>((resolve, reject): void => {
            try {
                const args: GetDocumentPatternStageLinkArgs = GetDocumentPatternStageLinkArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getDocumentPatternStageLink(args.token, args.docPatternStageLinkId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: __ROOT_NAMESPACE__.DocumentPatternStagesLink): void => {
            const result: GetDocumentPatternStageLinkResult = new GetDocumentPatternStageLinkResult({ success: data });
            output.writeMessageBegin("getDocumentPatternStageLink", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetDocumentPatternStageLinkResult = new GetDocumentPatternStageLinkResult({ validError: err });
                output.writeMessageBegin("getDocumentPatternStageLink", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetDocumentPatternStageLinkResult = new GetDocumentPatternStageLinkResult({ error: err });
                output.writeMessageBegin("getDocumentPatternStageLink", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getDocumentPatternStageLink", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_createOrUpdateDocumentPatternStagesLink(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<__ROOT_NAMESPACE__.DocumentPatternStagesLink>((resolve, reject): void => {
            try {
                const args: CreateOrUpdateDocumentPatternStagesLinkArgs = CreateOrUpdateDocumentPatternStagesLinkArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.createOrUpdateDocumentPatternStagesLink(args.token, args.documentPatternStagesLink));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: __ROOT_NAMESPACE__.DocumentPatternStagesLink): void => {
            const result: CreateOrUpdateDocumentPatternStagesLinkResult = new CreateOrUpdateDocumentPatternStagesLinkResult({ success: data });
            output.writeMessageBegin("createOrUpdateDocumentPatternStagesLink", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: CreateOrUpdateDocumentPatternStagesLinkResult = new CreateOrUpdateDocumentPatternStagesLinkResult({ validError: err });
                output.writeMessageBegin("createOrUpdateDocumentPatternStagesLink", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: CreateOrUpdateDocumentPatternStagesLinkResult = new CreateOrUpdateDocumentPatternStagesLinkResult({ error: err });
                output.writeMessageBegin("createOrUpdateDocumentPatternStagesLink", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("createOrUpdateDocumentPatternStagesLink", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_deleteDocumentPatternStageLink(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: DeleteDocumentPatternStageLinkArgs = DeleteDocumentPatternStageLinkArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.deleteDocumentPatternStageLink(args.token, args.docPatternStageLinkId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: DeleteDocumentPatternStageLinkResult = new DeleteDocumentPatternStageLinkResult({ success: data });
            output.writeMessageBegin("deleteDocumentPatternStageLink", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: DeleteDocumentPatternStageLinkResult = new DeleteDocumentPatternStageLinkResult({ validError: err });
                output.writeMessageBegin("deleteDocumentPatternStageLink", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: DeleteDocumentPatternStageLinkResult = new DeleteDocumentPatternStageLinkResult({ error: err });
                output.writeMessageBegin("deleteDocumentPatternStageLink", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("deleteDocumentPatternStageLink", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getAllDocumentPatternStageExecutors(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<DocumentPatternStagesExecutor.DocumentPatternStagesExecutor>>((resolve, reject): void => {
            try {
                const args: GetAllDocumentPatternStageExecutorsArgs = GetAllDocumentPatternStageExecutorsArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAllDocumentPatternStageExecutors(args.token, args.docPatternStageId, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<DocumentPatternStagesExecutor.DocumentPatternStagesExecutor>): void => {
            const result: GetAllDocumentPatternStageExecutorsResult = new GetAllDocumentPatternStageExecutorsResult({ success: data });
            output.writeMessageBegin("getAllDocumentPatternStageExecutors", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetAllDocumentPatternStageExecutorsResult = new GetAllDocumentPatternStageExecutorsResult({ validError: err });
                output.writeMessageBegin("getAllDocumentPatternStageExecutors", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetAllDocumentPatternStageExecutorsResult = new GetAllDocumentPatternStageExecutorsResult({ error: err });
                output.writeMessageBegin("getAllDocumentPatternStageExecutors", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAllDocumentPatternStageExecutors", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_addExecutorsToDocumentPatternStage(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: AddExecutorsToDocumentPatternStageArgs = AddExecutorsToDocumentPatternStageArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.addExecutorsToDocumentPatternStage(args.token, args.docPatternStageId, args.userOrGroups));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: AddExecutorsToDocumentPatternStageResult = new AddExecutorsToDocumentPatternStageResult({ success: data });
            output.writeMessageBegin("addExecutorsToDocumentPatternStage", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: AddExecutorsToDocumentPatternStageResult = new AddExecutorsToDocumentPatternStageResult({ validError: err });
                output.writeMessageBegin("addExecutorsToDocumentPatternStage", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: AddExecutorsToDocumentPatternStageResult = new AddExecutorsToDocumentPatternStageResult({ error: err });
                output.writeMessageBegin("addExecutorsToDocumentPatternStage", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("addExecutorsToDocumentPatternStage", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_deleteExecutorsFromDocumentPatternStage(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: DeleteExecutorsFromDocumentPatternStageArgs = DeleteExecutorsFromDocumentPatternStageArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.deleteExecutorsFromDocumentPatternStage(args.token, args.docPatternStageId, args.userOrGroups));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: DeleteExecutorsFromDocumentPatternStageResult = new DeleteExecutorsFromDocumentPatternStageResult({ success: data });
            output.writeMessageBegin("deleteExecutorsFromDocumentPatternStage", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: DeleteExecutorsFromDocumentPatternStageResult = new DeleteExecutorsFromDocumentPatternStageResult({ validError: err });
                output.writeMessageBegin("deleteExecutorsFromDocumentPatternStage", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: DeleteExecutorsFromDocumentPatternStageResult = new DeleteExecutorsFromDocumentPatternStageResult({ error: err });
                output.writeMessageBegin("deleteExecutorsFromDocumentPatternStage", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("deleteExecutorsFromDocumentPatternStage", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_checkDocumentPattern(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<__ROOT_NAMESPACE__.PreconditionException>>((resolve, reject): void => {
            try {
                const args: CheckDocumentPatternArgs = CheckDocumentPatternArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.checkDocumentPattern(args.token, args.docPatternId, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<__ROOT_NAMESPACE__.PreconditionException>): void => {
            const result: CheckDocumentPatternResult = new CheckDocumentPatternResult({ success: data });
            output.writeMessageBegin("checkDocumentPattern", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: CheckDocumentPatternResult = new CheckDocumentPatternResult({ validError: err });
                output.writeMessageBegin("checkDocumentPattern", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: CheckDocumentPatternResult = new CheckDocumentPatternResult({ error: err });
                output.writeMessageBegin("checkDocumentPattern", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("checkDocumentPattern", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_createOrUpdatePatternContentItems(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<__ROOT_NAMESPACE__.ContentItem>>((resolve, reject): void => {
            try {
                const args: CreateOrUpdatePatternContentItemsArgs = CreateOrUpdatePatternContentItemsArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.createOrUpdatePatternContentItems(args.token, args.docPatternId, args.contentItems));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<__ROOT_NAMESPACE__.ContentItem>): void => {
            const result: CreateOrUpdatePatternContentItemsResult = new CreateOrUpdatePatternContentItemsResult({ success: data });
            output.writeMessageBegin("createOrUpdatePatternContentItems", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: CreateOrUpdatePatternContentItemsResult = new CreateOrUpdatePatternContentItemsResult({ validError: err });
                output.writeMessageBegin("createOrUpdatePatternContentItems", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: CreateOrUpdatePatternContentItemsResult = new CreateOrUpdatePatternContentItemsResult({ error: err });
                output.writeMessageBegin("createOrUpdatePatternContentItems", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("createOrUpdatePatternContentItems", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getAllDocumentPatternGroups(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<__ROOT_NAMESPACE__.DocumentPatternGroup>>((resolve, reject): void => {
            try {
                const args: GetAllDocumentPatternGroupsArgs = GetAllDocumentPatternGroupsArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAllDocumentPatternGroups(args.token, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<__ROOT_NAMESPACE__.DocumentPatternGroup>): void => {
            const result: GetAllDocumentPatternGroupsResult = new GetAllDocumentPatternGroupsResult({ success: data });
            output.writeMessageBegin("getAllDocumentPatternGroups", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetAllDocumentPatternGroupsResult = new GetAllDocumentPatternGroupsResult({ validError: err });
                output.writeMessageBegin("getAllDocumentPatternGroups", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetAllDocumentPatternGroupsResult = new GetAllDocumentPatternGroupsResult({ error: err });
                output.writeMessageBegin("getAllDocumentPatternGroups", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAllDocumentPatternGroups", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getAllDocumentPatternGroupsGroupByName(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<__ROOT_NAMESPACE__.SimpleDocumentPatternOrGroup>>((resolve, reject): void => {
            try {
                const args: GetAllDocumentPatternGroupsGroupByNameArgs = GetAllDocumentPatternGroupsGroupByNameArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAllDocumentPatternGroupsGroupByName(args.token, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<__ROOT_NAMESPACE__.SimpleDocumentPatternOrGroup>): void => {
            const result: GetAllDocumentPatternGroupsGroupByNameResult = new GetAllDocumentPatternGroupsGroupByNameResult({ success: data });
            output.writeMessageBegin("getAllDocumentPatternGroupsGroupByName", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetAllDocumentPatternGroupsGroupByNameResult = new GetAllDocumentPatternGroupsGroupByNameResult({ validError: err });
                output.writeMessageBegin("getAllDocumentPatternGroupsGroupByName", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetAllDocumentPatternGroupsGroupByNameResult = new GetAllDocumentPatternGroupsGroupByNameResult({ error: err });
                output.writeMessageBegin("getAllDocumentPatternGroupsGroupByName", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAllDocumentPatternGroupsGroupByName", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_createOrUpdateDocumentPatternGroup(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<__ROOT_NAMESPACE__.DocumentPatternGroup>((resolve, reject): void => {
            try {
                const args: CreateOrUpdateDocumentPatternGroupArgs = CreateOrUpdateDocumentPatternGroupArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.createOrUpdateDocumentPatternGroup(args.token, args.documentPatternGroup, args.accountId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: __ROOT_NAMESPACE__.DocumentPatternGroup): void => {
            const result: CreateOrUpdateDocumentPatternGroupResult = new CreateOrUpdateDocumentPatternGroupResult({ success: data });
            output.writeMessageBegin("createOrUpdateDocumentPatternGroup", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: CreateOrUpdateDocumentPatternGroupResult = new CreateOrUpdateDocumentPatternGroupResult({ validError: err });
                output.writeMessageBegin("createOrUpdateDocumentPatternGroup", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: CreateOrUpdateDocumentPatternGroupResult = new CreateOrUpdateDocumentPatternGroupResult({ error: err });
                output.writeMessageBegin("createOrUpdateDocumentPatternGroup", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("createOrUpdateDocumentPatternGroup", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_deleteDocumentPatternGroup(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: DeleteDocumentPatternGroupArgs = DeleteDocumentPatternGroupArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.deleteDocumentPatternGroup(args.token, args.documentPatternGroupId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: DeleteDocumentPatternGroupResult = new DeleteDocumentPatternGroupResult({ success: data });
            output.writeMessageBegin("deleteDocumentPatternGroup", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: DeleteDocumentPatternGroupResult = new DeleteDocumentPatternGroupResult({ validError: err });
                output.writeMessageBegin("deleteDocumentPatternGroup", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: DeleteDocumentPatternGroupResult = new DeleteDocumentPatternGroupResult({ error: err });
                output.writeMessageBegin("deleteDocumentPatternGroup", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("deleteDocumentPatternGroup", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getAllAvailableStages(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<AvailablePatternStage.AvailablePatternStage>>((resolve, reject): void => {
            try {
                const args: GetAllAvailableStagesArgs = GetAllAvailableStagesArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAllAvailableStages(args.token, args.filter, args.patternType));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<AvailablePatternStage.AvailablePatternStage>): void => {
            const result: GetAllAvailableStagesResult = new GetAllAvailableStagesResult({ success: data });
            output.writeMessageBegin("getAllAvailableStages", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetAllAvailableStagesResult = new GetAllAvailableStagesResult({ validError: err });
                output.writeMessageBegin("getAllAvailableStages", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetAllAvailableStagesResult = new GetAllAvailableStagesResult({ error: err });
                output.writeMessageBegin("getAllAvailableStages", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAllAvailableStages", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getAvailableLinkAnswersByPattern(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Set<string>>((resolve, reject): void => {
            try {
                const args: GetAvailableLinkAnswersByPatternArgs = GetAvailableLinkAnswersByPatternArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAvailableLinkAnswersByPattern(args.token, args.patternId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Set<string>): void => {
            const result: GetAvailableLinkAnswersByPatternResult = new GetAvailableLinkAnswersByPatternResult({ success: data });
            output.writeMessageBegin("getAvailableLinkAnswersByPattern", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetAvailableLinkAnswersByPatternResult = new GetAvailableLinkAnswersByPatternResult({ validError: err });
                output.writeMessageBegin("getAvailableLinkAnswersByPattern", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetAvailableLinkAnswersByPatternResult = new GetAvailableLinkAnswersByPatternResult({ error: err });
                output.writeMessageBegin("getAvailableLinkAnswersByPattern", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAvailableLinkAnswersByPattern", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_removeAvailableStage(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: RemoveAvailableStageArgs = RemoveAvailableStageArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.removeAvailableStage(args.token, args.availStageId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: RemoveAvailableStageResult = new RemoveAvailableStageResult({ success: data });
            output.writeMessageBegin("removeAvailableStage", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: RemoveAvailableStageResult = new RemoveAvailableStageResult({ validError: err });
                output.writeMessageBegin("removeAvailableStage", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: RemoveAvailableStageResult = new RemoveAvailableStageResult({ error: err });
                output.writeMessageBegin("removeAvailableStage", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("removeAvailableStage", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getAllDigitalViews(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<DigitalView.DigitalView>>((resolve, reject): void => {
            try {
                const args: GetAllDigitalViewsArgs = GetAllDigitalViewsArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAllDigitalViews(args.token, args.docPatternId, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<DigitalView.DigitalView>): void => {
            const result: GetAllDigitalViewsResult = new GetAllDigitalViewsResult({ success: data });
            output.writeMessageBegin("getAllDigitalViews", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetAllDigitalViewsResult = new GetAllDigitalViewsResult({ validError: err });
                output.writeMessageBegin("getAllDigitalViews", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetAllDigitalViewsResult = new GetAllDigitalViewsResult({ error: err });
                output.writeMessageBegin("getAllDigitalViews", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAllDigitalViews", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_createOrUpdateDigitalView(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<DigitalView.DigitalView>((resolve, reject): void => {
            try {
                const args: CreateOrUpdateDigitalViewArgs = CreateOrUpdateDigitalViewArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.createOrUpdateDigitalView(args.token, args.digitalView));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: DigitalView.DigitalView): void => {
            const result: CreateOrUpdateDigitalViewResult = new CreateOrUpdateDigitalViewResult({ success: data });
            output.writeMessageBegin("createOrUpdateDigitalView", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: CreateOrUpdateDigitalViewResult = new CreateOrUpdateDigitalViewResult({ validError: err });
                output.writeMessageBegin("createOrUpdateDigitalView", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: CreateOrUpdateDigitalViewResult = new CreateOrUpdateDigitalViewResult({ error: err });
                output.writeMessageBegin("createOrUpdateDigitalView", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("createOrUpdateDigitalView", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_deleteDigitalView(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: DeleteDigitalViewArgs = DeleteDigitalViewArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.deleteDigitalView(args.token, args.digitalViewId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: DeleteDigitalViewResult = new DeleteDigitalViewResult({ success: data });
            output.writeMessageBegin("deleteDigitalView", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: DeleteDigitalViewResult = new DeleteDigitalViewResult({ validError: err });
                output.writeMessageBegin("deleteDigitalView", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: DeleteDigitalViewResult = new DeleteDigitalViewResult({ error: err });
                output.writeMessageBegin("deleteDigitalView", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("deleteDigitalView", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_exportDocumentPattern(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Buffer>((resolve, reject): void => {
            try {
                const args: ExportDocumentPatternArgs = ExportDocumentPatternArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.exportDocumentPattern(args.token, args.docPatternId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Buffer): void => {
            const result: ExportDocumentPatternResult = new ExportDocumentPatternResult({ success: data });
            output.writeMessageBegin("exportDocumentPattern", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: ExportDocumentPatternResult = new ExportDocumentPatternResult({ validError: err });
                output.writeMessageBegin("exportDocumentPattern", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: ExportDocumentPatternResult = new ExportDocumentPatternResult({ error: err });
                output.writeMessageBegin("exportDocumentPattern", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("exportDocumentPattern", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_importDocumentPattern(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<__ROOT_NAMESPACE__.DocumentPattern>((resolve, reject): void => {
            try {
                const args: ImportDocumentPatternArgs = ImportDocumentPatternArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.importDocumentPattern(args.token, args.json, args.docPatternNameLoc, args.pDescriptionLoc, args.docPatternGroupId, args.accountId, args.ignoreError));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: __ROOT_NAMESPACE__.DocumentPattern): void => {
            const result: ImportDocumentPatternResult = new ImportDocumentPatternResult({ success: data });
            output.writeMessageBegin("importDocumentPattern", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: ImportDocumentPatternResult = new ImportDocumentPatternResult({ validError: err });
                output.writeMessageBegin("importDocumentPattern", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: ImportDocumentPatternResult = new ImportDocumentPatternResult({ error: err });
                output.writeMessageBegin("importDocumentPattern", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("importDocumentPattern", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getPatternUserGroup(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<PatternUserGroup.PatternUserGroup>>((resolve, reject): void => {
            try {
                const args: GetPatternUserGroupArgs = GetPatternUserGroupArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getPatternUserGroup(args.token, args.docPatternId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<PatternUserGroup.PatternUserGroup>): void => {
            const result: GetPatternUserGroupResult = new GetPatternUserGroupResult({ success: data });
            output.writeMessageBegin("getPatternUserGroup", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetPatternUserGroupResult = new GetPatternUserGroupResult({ validError: err });
                output.writeMessageBegin("getPatternUserGroup", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetPatternUserGroupResult = new GetPatternUserGroupResult({ error: err });
                output.writeMessageBegin("getPatternUserGroup", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getPatternUserGroup", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_createOrUpdatePatternUserGroup(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: CreateOrUpdatePatternUserGroupArgs = CreateOrUpdatePatternUserGroupArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.createOrUpdatePatternUserGroup(args.token, args.docPatternId, args.userOrGroups));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: CreateOrUpdatePatternUserGroupResult = new CreateOrUpdatePatternUserGroupResult({ success: data });
            output.writeMessageBegin("createOrUpdatePatternUserGroup", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: CreateOrUpdatePatternUserGroupResult = new CreateOrUpdatePatternUserGroupResult({ validError: err });
                output.writeMessageBegin("createOrUpdatePatternUserGroup", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: CreateOrUpdatePatternUserGroupResult = new CreateOrUpdatePatternUserGroupResult({ error: err });
                output.writeMessageBegin("createOrUpdatePatternUserGroup", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("createOrUpdatePatternUserGroup", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getPatternProcessRoles(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<__ROOT_NAMESPACE__.PatternProcessRole>>((resolve, reject): void => {
            try {
                const args: GetPatternProcessRolesArgs = GetPatternProcessRolesArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getPatternProcessRoles(args.token, args.docPatternId, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<__ROOT_NAMESPACE__.PatternProcessRole>): void => {
            const result: GetPatternProcessRolesResult = new GetPatternProcessRolesResult({ success: data });
            output.writeMessageBegin("getPatternProcessRoles", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetPatternProcessRolesResult = new GetPatternProcessRolesResult({ validError: err });
                output.writeMessageBegin("getPatternProcessRoles", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetPatternProcessRolesResult = new GetPatternProcessRolesResult({ error: err });
                output.writeMessageBegin("getPatternProcessRoles", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getPatternProcessRoles", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_changePatternProcessRoles(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<__ROOT_NAMESPACE__.PatternProcessRole>>((resolve, reject): void => {
            try {
                const args: ChangePatternProcessRolesArgs = ChangePatternProcessRolesArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.changePatternProcessRoles(args.token, args.docPatternId, args.userOrGroupsToAdd, args.keyIdToRemove));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<__ROOT_NAMESPACE__.PatternProcessRole>): void => {
            const result: ChangePatternProcessRolesResult = new ChangePatternProcessRolesResult({ success: data });
            output.writeMessageBegin("changePatternProcessRoles", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: ChangePatternProcessRolesResult = new ChangePatternProcessRolesResult({ validError: err });
                output.writeMessageBegin("changePatternProcessRoles", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: ChangePatternProcessRolesResult = new ChangePatternProcessRolesResult({ error: err });
                output.writeMessageBegin("changePatternProcessRoles", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("changePatternProcessRoles", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getPatternVariables(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<__ROOT_NAMESPACE__.PatternVariable>>((resolve, reject): void => {
            try {
                const args: GetPatternVariablesArgs = GetPatternVariablesArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getPatternVariables(args.token, args.docPatternId, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<__ROOT_NAMESPACE__.PatternVariable>): void => {
            const result: GetPatternVariablesResult = new GetPatternVariablesResult({ success: data });
            output.writeMessageBegin("getPatternVariables", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetPatternVariablesResult = new GetPatternVariablesResult({ validError: err });
                output.writeMessageBegin("getPatternVariables", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetPatternVariablesResult = new GetPatternVariablesResult({ error: err });
                output.writeMessageBegin("getPatternVariables", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getPatternVariables", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_changePatternVariables(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<__ROOT_NAMESPACE__.PatternVariable>>((resolve, reject): void => {
            try {
                const args: ChangePatternVariablesArgs = ChangePatternVariablesArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.changePatternVariables(args.token, args.docPatternId, args.patternVariablesToAdd, args.keyIdToRemove));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<__ROOT_NAMESPACE__.PatternVariable>): void => {
            const result: ChangePatternVariablesResult = new ChangePatternVariablesResult({ success: data });
            output.writeMessageBegin("changePatternVariables", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: ChangePatternVariablesResult = new ChangePatternVariablesResult({ validError: err });
                output.writeMessageBegin("changePatternVariables", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: ChangePatternVariablesResult = new ChangePatternVariablesResult({ error: err });
                output.writeMessageBegin("changePatternVariables", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("changePatternVariables", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_addAvailablePatternStageToAccounts(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: AddAvailablePatternStageToAccountsArgs = AddAvailablePatternStageToAccountsArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.addAvailablePatternStageToAccounts(args.token, args.availablePatternStageId, args.accountIds));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: AddAvailablePatternStageToAccountsResult = new AddAvailablePatternStageToAccountsResult({ success: data });
            output.writeMessageBegin("addAvailablePatternStageToAccounts", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: AddAvailablePatternStageToAccountsResult = new AddAvailablePatternStageToAccountsResult({ validError: err });
                output.writeMessageBegin("addAvailablePatternStageToAccounts", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: AddAvailablePatternStageToAccountsResult = new AddAvailablePatternStageToAccountsResult({ error: err });
                output.writeMessageBegin("addAvailablePatternStageToAccounts", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("addAvailablePatternStageToAccounts", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getAllPatternAttachmentTemplates(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<PatternAttachmentTemplate.PatternAttachmentTemplate>>((resolve, reject): void => {
            try {
                const args: GetAllPatternAttachmentTemplatesArgs = GetAllPatternAttachmentTemplatesArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAllPatternAttachmentTemplates(args.token, args.patternId, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<PatternAttachmentTemplate.PatternAttachmentTemplate>): void => {
            const result: GetAllPatternAttachmentTemplatesResult = new GetAllPatternAttachmentTemplatesResult({ success: data });
            output.writeMessageBegin("getAllPatternAttachmentTemplates", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetAllPatternAttachmentTemplatesResult = new GetAllPatternAttachmentTemplatesResult({ validError: err });
                output.writeMessageBegin("getAllPatternAttachmentTemplates", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetAllPatternAttachmentTemplatesResult = new GetAllPatternAttachmentTemplatesResult({ error: err });
                output.writeMessageBegin("getAllPatternAttachmentTemplates", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAllPatternAttachmentTemplates", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getPatternAttachmentTemplateById(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<PatternAttachmentTemplate.PatternAttachmentTemplate>((resolve, reject): void => {
            try {
                const args: GetPatternAttachmentTemplateByIdArgs = GetPatternAttachmentTemplateByIdArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getPatternAttachmentTemplateById(args.token, args.patternId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: PatternAttachmentTemplate.PatternAttachmentTemplate): void => {
            const result: GetPatternAttachmentTemplateByIdResult = new GetPatternAttachmentTemplateByIdResult({ success: data });
            output.writeMessageBegin("getPatternAttachmentTemplateById", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetPatternAttachmentTemplateByIdResult = new GetPatternAttachmentTemplateByIdResult({ validError: err });
                output.writeMessageBegin("getPatternAttachmentTemplateById", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetPatternAttachmentTemplateByIdResult = new GetPatternAttachmentTemplateByIdResult({ error: err });
                output.writeMessageBegin("getPatternAttachmentTemplateById", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getPatternAttachmentTemplateById", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_createOrUpdatePatternAttachmentTemplate(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<PatternAttachmentTemplate.PatternAttachmentTemplate>((resolve, reject): void => {
            try {
                const args: CreateOrUpdatePatternAttachmentTemplateArgs = CreateOrUpdatePatternAttachmentTemplateArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.createOrUpdatePatternAttachmentTemplate(args.token, args.patternAttachmentTemplate, args.xmlFile));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: PatternAttachmentTemplate.PatternAttachmentTemplate): void => {
            const result: CreateOrUpdatePatternAttachmentTemplateResult = new CreateOrUpdatePatternAttachmentTemplateResult({ success: data });
            output.writeMessageBegin("createOrUpdatePatternAttachmentTemplate", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: CreateOrUpdatePatternAttachmentTemplateResult = new CreateOrUpdatePatternAttachmentTemplateResult({ validError: err });
                output.writeMessageBegin("createOrUpdatePatternAttachmentTemplate", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: CreateOrUpdatePatternAttachmentTemplateResult = new CreateOrUpdatePatternAttachmentTemplateResult({ error: err });
                output.writeMessageBegin("createOrUpdatePatternAttachmentTemplate", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("createOrUpdatePatternAttachmentTemplate", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_downloadPatternAttachmentTemplate(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Buffer>((resolve, reject): void => {
            try {
                const args: DownloadPatternAttachmentTemplateArgs = DownloadPatternAttachmentTemplateArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.downloadPatternAttachmentTemplate(args.token, args.patternAttachmentTemplateId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Buffer): void => {
            const result: DownloadPatternAttachmentTemplateResult = new DownloadPatternAttachmentTemplateResult({ success: data });
            output.writeMessageBegin("downloadPatternAttachmentTemplate", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: DownloadPatternAttachmentTemplateResult = new DownloadPatternAttachmentTemplateResult({ validError: err });
                output.writeMessageBegin("downloadPatternAttachmentTemplate", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: DownloadPatternAttachmentTemplateResult = new DownloadPatternAttachmentTemplateResult({ error: err });
                output.writeMessageBegin("downloadPatternAttachmentTemplate", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("downloadPatternAttachmentTemplate", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_removePatternAttachmentTemplate(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: RemovePatternAttachmentTemplateArgs = RemovePatternAttachmentTemplateArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.removePatternAttachmentTemplate(args.token, args.patternAttachmentTemplateId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: RemovePatternAttachmentTemplateResult = new RemovePatternAttachmentTemplateResult({ success: data });
            output.writeMessageBegin("removePatternAttachmentTemplate", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: RemovePatternAttachmentTemplateResult = new RemovePatternAttachmentTemplateResult({ validError: err });
                output.writeMessageBegin("removePatternAttachmentTemplate", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: RemovePatternAttachmentTemplateResult = new RemovePatternAttachmentTemplateResult({ error: err });
                output.writeMessageBegin("removePatternAttachmentTemplate", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("removePatternAttachmentTemplate", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_changeStartDocNumberSequence(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: ChangeStartDocNumberSequenceArgs = ChangeStartDocNumberSequenceArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.changeStartDocNumberSequence(args.token, args.patternId, args.value));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: ChangeStartDocNumberSequenceResult = new ChangeStartDocNumberSequenceResult({ success: data });
            output.writeMessageBegin("changeStartDocNumberSequence", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: ChangeStartDocNumberSequenceResult = new ChangeStartDocNumberSequenceResult({ validError: err });
                output.writeMessageBegin("changeStartDocNumberSequence", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: ChangeStartDocNumberSequenceResult = new ChangeStartDocNumberSequenceResult({ error: err });
                output.writeMessageBegin("changeStartDocNumberSequence", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("changeStartDocNumberSequence", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getAllContentHolders(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<__ROOT_NAMESPACE__.ContentHolder>>((resolve, reject): void => {
            try {
                const args: GetAllContentHoldersArgs = GetAllContentHoldersArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAllContentHolders(args.token, args.patternId, args.withContent, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<__ROOT_NAMESPACE__.ContentHolder>): void => {
            const result: GetAllContentHoldersResult = new GetAllContentHoldersResult({ success: data });
            output.writeMessageBegin("getAllContentHolders", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetAllContentHoldersResult = new GetAllContentHoldersResult({ validError: err });
                output.writeMessageBegin("getAllContentHolders", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetAllContentHoldersResult = new GetAllContentHoldersResult({ error: err });
                output.writeMessageBegin("getAllContentHolders", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAllContentHolders", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_changeContentHolders(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<__ROOT_NAMESPACE__.ContentHolder>>((resolve, reject): void => {
            try {
                const args: ChangeContentHoldersArgs = ChangeContentHoldersArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.changeContentHolders(args.token, args.toUpdate, args.toRemoveIds));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<__ROOT_NAMESPACE__.ContentHolder>): void => {
            const result: ChangeContentHoldersResult = new ChangeContentHoldersResult({ success: data });
            output.writeMessageBegin("changeContentHolders", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: ChangeContentHoldersResult = new ChangeContentHoldersResult({ validError: err });
                output.writeMessageBegin("changeContentHolders", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: ChangeContentHoldersResult = new ChangeContentHoldersResult({ error: err });
                output.writeMessageBegin("changeContentHolders", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("changeContentHolders", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getPatternRelationModel(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<PatternRelationModel.PatternRelationModel>((resolve, reject): void => {
            try {
                const args: GetPatternRelationModelArgs = GetPatternRelationModelArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getPatternRelationModel(args.token, args.patternId, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: PatternRelationModel.PatternRelationModel): void => {
            const result: GetPatternRelationModelResult = new GetPatternRelationModelResult({ success: data });
            output.writeMessageBegin("getPatternRelationModel", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetPatternRelationModelResult = new GetPatternRelationModelResult({ validError: err });
                output.writeMessageBegin("getPatternRelationModel", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetPatternRelationModelResult = new GetPatternRelationModelResult({ error: err });
                output.writeMessageBegin("getPatternRelationModel", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getPatternRelationModel", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getNomenclatureNumber(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<__ROOT_NAMESPACE__.NomenclatureNumber>((resolve, reject): void => {
            try {
                const args: GetNomenclatureNumberArgs = GetNomenclatureNumberArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getNomenclatureNumber(args.token, args.nomenclatureNumberId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: __ROOT_NAMESPACE__.NomenclatureNumber): void => {
            const result: GetNomenclatureNumberResult = new GetNomenclatureNumberResult({ success: data });
            output.writeMessageBegin("getNomenclatureNumber", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetNomenclatureNumberResult = new GetNomenclatureNumberResult({ validError: err });
                output.writeMessageBegin("getNomenclatureNumber", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetNomenclatureNumberResult = new GetNomenclatureNumberResult({ error: err });
                output.writeMessageBegin("getNomenclatureNumber", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getNomenclatureNumber", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getAllNomenclatureNumber(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<__ROOT_NAMESPACE__.NomenclatureNumber>>((resolve, reject): void => {
            try {
                const args: GetAllNomenclatureNumberArgs = GetAllNomenclatureNumberArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAllNomenclatureNumber(args.token, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<__ROOT_NAMESPACE__.NomenclatureNumber>): void => {
            const result: GetAllNomenclatureNumberResult = new GetAllNomenclatureNumberResult({ success: data });
            output.writeMessageBegin("getAllNomenclatureNumber", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetAllNomenclatureNumberResult = new GetAllNomenclatureNumberResult({ validError: err });
                output.writeMessageBegin("getAllNomenclatureNumber", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetAllNomenclatureNumberResult = new GetAllNomenclatureNumberResult({ error: err });
                output.writeMessageBegin("getAllNomenclatureNumber", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAllNomenclatureNumber", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getCountAllNomenclatureNumber(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Int64>((resolve, reject): void => {
            try {
                const args: GetCountAllNomenclatureNumberArgs = GetCountAllNomenclatureNumberArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getCountAllNomenclatureNumber(args.token, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Int64): void => {
            const result: GetCountAllNomenclatureNumberResult = new GetCountAllNomenclatureNumberResult({ success: data });
            output.writeMessageBegin("getCountAllNomenclatureNumber", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetCountAllNomenclatureNumberResult = new GetCountAllNomenclatureNumberResult({ validError: err });
                output.writeMessageBegin("getCountAllNomenclatureNumber", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetCountAllNomenclatureNumberResult = new GetCountAllNomenclatureNumberResult({ error: err });
                output.writeMessageBegin("getCountAllNomenclatureNumber", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getCountAllNomenclatureNumber", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_createOrUpdateNomenclatureNumber(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<__ROOT_NAMESPACE__.NomenclatureNumber>((resolve, reject): void => {
            try {
                const args: CreateOrUpdateNomenclatureNumberArgs = CreateOrUpdateNomenclatureNumberArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.createOrUpdateNomenclatureNumber(args.token, args.nomenclatureNumber));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: __ROOT_NAMESPACE__.NomenclatureNumber): void => {
            const result: CreateOrUpdateNomenclatureNumberResult = new CreateOrUpdateNomenclatureNumberResult({ success: data });
            output.writeMessageBegin("createOrUpdateNomenclatureNumber", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: CreateOrUpdateNomenclatureNumberResult = new CreateOrUpdateNomenclatureNumberResult({ validError: err });
                output.writeMessageBegin("createOrUpdateNomenclatureNumber", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: CreateOrUpdateNomenclatureNumberResult = new CreateOrUpdateNomenclatureNumberResult({ error: err });
                output.writeMessageBegin("createOrUpdateNomenclatureNumber", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("createOrUpdateNomenclatureNumber", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_removeNomenclatureNumber(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: RemoveNomenclatureNumberArgs = RemoveNomenclatureNumberArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.removeNomenclatureNumber(args.token, args.nomenclatureNumberId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: RemoveNomenclatureNumberResult = new RemoveNomenclatureNumberResult({ success: data });
            output.writeMessageBegin("removeNomenclatureNumber", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: RemoveNomenclatureNumberResult = new RemoveNomenclatureNumberResult({ validError: err });
                output.writeMessageBegin("removeNomenclatureNumber", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: RemoveNomenclatureNumberResult = new RemoveNomenclatureNumberResult({ error: err });
                output.writeMessageBegin("removeNomenclatureNumber", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("removeNomenclatureNumber", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getNomenclatureGroup(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<__ROOT_NAMESPACE__.NomenclatureGroup>((resolve, reject): void => {
            try {
                const args: GetNomenclatureGroupArgs = GetNomenclatureGroupArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getNomenclatureGroup(args.token, args.nomenclatureGroupId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: __ROOT_NAMESPACE__.NomenclatureGroup): void => {
            const result: GetNomenclatureGroupResult = new GetNomenclatureGroupResult({ success: data });
            output.writeMessageBegin("getNomenclatureGroup", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetNomenclatureGroupResult = new GetNomenclatureGroupResult({ validError: err });
                output.writeMessageBegin("getNomenclatureGroup", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetNomenclatureGroupResult = new GetNomenclatureGroupResult({ error: err });
                output.writeMessageBegin("getNomenclatureGroup", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getNomenclatureGroup", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getAllNomenclatureGroup(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<__ROOT_NAMESPACE__.NomenclatureGroup>>((resolve, reject): void => {
            try {
                const args: GetAllNomenclatureGroupArgs = GetAllNomenclatureGroupArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAllNomenclatureGroup(args.token, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<__ROOT_NAMESPACE__.NomenclatureGroup>): void => {
            const result: GetAllNomenclatureGroupResult = new GetAllNomenclatureGroupResult({ success: data });
            output.writeMessageBegin("getAllNomenclatureGroup", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetAllNomenclatureGroupResult = new GetAllNomenclatureGroupResult({ validError: err });
                output.writeMessageBegin("getAllNomenclatureGroup", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetAllNomenclatureGroupResult = new GetAllNomenclatureGroupResult({ error: err });
                output.writeMessageBegin("getAllNomenclatureGroup", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAllNomenclatureGroup", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getCountAllNomenclatureGroup(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Int64>((resolve, reject): void => {
            try {
                const args: GetCountAllNomenclatureGroupArgs = GetCountAllNomenclatureGroupArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getCountAllNomenclatureGroup(args.token, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Int64): void => {
            const result: GetCountAllNomenclatureGroupResult = new GetCountAllNomenclatureGroupResult({ success: data });
            output.writeMessageBegin("getCountAllNomenclatureGroup", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetCountAllNomenclatureGroupResult = new GetCountAllNomenclatureGroupResult({ validError: err });
                output.writeMessageBegin("getCountAllNomenclatureGroup", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetCountAllNomenclatureGroupResult = new GetCountAllNomenclatureGroupResult({ error: err });
                output.writeMessageBegin("getCountAllNomenclatureGroup", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getCountAllNomenclatureGroup", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_createOrUpdateNomenclatureGroup(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<__ROOT_NAMESPACE__.NomenclatureGroup>((resolve, reject): void => {
            try {
                const args: CreateOrUpdateNomenclatureGroupArgs = CreateOrUpdateNomenclatureGroupArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.createOrUpdateNomenclatureGroup(args.token, args.nomenclatureGroup));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: __ROOT_NAMESPACE__.NomenclatureGroup): void => {
            const result: CreateOrUpdateNomenclatureGroupResult = new CreateOrUpdateNomenclatureGroupResult({ success: data });
            output.writeMessageBegin("createOrUpdateNomenclatureGroup", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: CreateOrUpdateNomenclatureGroupResult = new CreateOrUpdateNomenclatureGroupResult({ validError: err });
                output.writeMessageBegin("createOrUpdateNomenclatureGroup", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: CreateOrUpdateNomenclatureGroupResult = new CreateOrUpdateNomenclatureGroupResult({ error: err });
                output.writeMessageBegin("createOrUpdateNomenclatureGroup", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("createOrUpdateNomenclatureGroup", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_removeNomenclatureGroup(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: RemoveNomenclatureGroupArgs = RemoveNomenclatureGroupArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.removeNomenclatureGroup(args.token, args.nomenclatureGrouprId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: RemoveNomenclatureGroupResult = new RemoveNomenclatureGroupResult({ success: data });
            output.writeMessageBegin("removeNomenclatureGroup", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: RemoveNomenclatureGroupResult = new RemoveNomenclatureGroupResult({ validError: err });
                output.writeMessageBegin("removeNomenclatureGroup", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: RemoveNomenclatureGroupResult = new RemoveNomenclatureGroupResult({ error: err });
                output.writeMessageBegin("removeNomenclatureGroup", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("removeNomenclatureGroup", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getInfoForCreateDoc(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<InfoForCreateDoc.InfoForCreateDoc>((resolve, reject): void => {
            try {
                const args: GetInfoForCreateDocArgs = GetInfoForCreateDocArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getInfoForCreateDoc(args.token, args.patternId, args.parentDocId, args.accessPolicy));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: InfoForCreateDoc.InfoForCreateDoc): void => {
            const result: GetInfoForCreateDocResult = new GetInfoForCreateDocResult({ success: data });
            output.writeMessageBegin("getInfoForCreateDoc", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetInfoForCreateDocResult = new GetInfoForCreateDocResult({ validError: err });
                output.writeMessageBegin("getInfoForCreateDoc", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetInfoForCreateDocResult = new GetInfoForCreateDocResult({ error: err });
                output.writeMessageBegin("getInfoForCreateDoc", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getInfoForCreateDoc", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getPatternContentItems(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<__ROOT_NAMESPACE__.ContentItem>>((resolve, reject): void => {
            try {
                const args: GetPatternContentItemsArgs = GetPatternContentItemsArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getPatternContentItems(args.token, args.patternId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<__ROOT_NAMESPACE__.ContentItem>): void => {
            const result: GetPatternContentItemsResult = new GetPatternContentItemsResult({ success: data });
            output.writeMessageBegin("getPatternContentItems", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetPatternContentItemsResult = new GetPatternContentItemsResult({ validError: err });
                output.writeMessageBegin("getPatternContentItems", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetPatternContentItemsResult = new GetPatternContentItemsResult({ error: err });
                output.writeMessageBegin("getPatternContentItems", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getPatternContentItems", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_createOrUpdateStagesAndLinksEx(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<PatternData.PatternData>((resolve, reject): void => {
            try {
                const args: CreateOrUpdateStagesAndLinksExArgs = CreateOrUpdateStagesAndLinksExArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.createOrUpdateStagesAndLinksEx(args.token, args.patternId, args.stages, args.links, args.stageToRemove, args.linkToRemove));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: PatternData.PatternData): void => {
            const result: CreateOrUpdateStagesAndLinksExResult = new CreateOrUpdateStagesAndLinksExResult({ success: data });
            output.writeMessageBegin("createOrUpdateStagesAndLinksEx", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: CreateOrUpdateStagesAndLinksExResult = new CreateOrUpdateStagesAndLinksExResult({ validError: err });
                output.writeMessageBegin("createOrUpdateStagesAndLinksEx", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: CreateOrUpdateStagesAndLinksExResult = new CreateOrUpdateStagesAndLinksExResult({ error: err });
                output.writeMessageBegin("createOrUpdateStagesAndLinksEx", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("createOrUpdateStagesAndLinksEx", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getAvailableActionList(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<__ROOT_NAMESPACE__.AvailableAction>>((resolve, reject): void => {
            try {
                const args: GetAvailableActionListArgs = GetAvailableActionListArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAvailableActionList(args.token, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<__ROOT_NAMESPACE__.AvailableAction>): void => {
            const result: GetAvailableActionListResult = new GetAvailableActionListResult({ success: data });
            output.writeMessageBegin("getAvailableActionList", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetAvailableActionListResult = new GetAvailableActionListResult({ validError: err });
                output.writeMessageBegin("getAvailableActionList", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetAvailableActionListResult = new GetAvailableActionListResult({ error: err });
                output.writeMessageBegin("getAvailableActionList", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAvailableActionList", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_addPatternNightlyDocFieldsTask(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: AddPatternNightlyDocFieldsTaskArgs = AddPatternNightlyDocFieldsTaskArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.addPatternNightlyDocFieldsTask(args.token, args.patternId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: AddPatternNightlyDocFieldsTaskResult = new AddPatternNightlyDocFieldsTaskResult({ success: data });
            output.writeMessageBegin("addPatternNightlyDocFieldsTask", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: AddPatternNightlyDocFieldsTaskResult = new AddPatternNightlyDocFieldsTaskResult({ validError: err });
                output.writeMessageBegin("addPatternNightlyDocFieldsTask", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: AddPatternNightlyDocFieldsTaskResult = new AddPatternNightlyDocFieldsTaskResult({ error: err });
                output.writeMessageBegin("addPatternNightlyDocFieldsTask", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("addPatternNightlyDocFieldsTask", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getAllColumnsForPattern(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<__ROOT_NAMESPACE__.DocColumn>>((resolve, reject): void => {
            try {
                const args: GetAllColumnsForPatternArgs = GetAllColumnsForPatternArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAllColumnsForPattern(args.token, args.patternId, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<__ROOT_NAMESPACE__.DocColumn>): void => {
            const result: GetAllColumnsForPatternResult = new GetAllColumnsForPatternResult({ success: data });
            output.writeMessageBegin("getAllColumnsForPattern", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetAllColumnsForPatternResult = new GetAllColumnsForPatternResult({ validError: err });
                output.writeMessageBegin("getAllColumnsForPattern", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetAllColumnsForPatternResult = new GetAllColumnsForPatternResult({ error: err });
                output.writeMessageBegin("getAllColumnsForPattern", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAllColumnsForPattern", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_changePatternColumns(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: ChangePatternColumnsArgs = ChangePatternColumnsArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.changePatternColumns(args.token, args.patternId, args.useDefaultColumns, args.toSave));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: ChangePatternColumnsResult = new ChangePatternColumnsResult({ success: data });
            output.writeMessageBegin("changePatternColumns", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: ChangePatternColumnsResult = new ChangePatternColumnsResult({ validError: err });
                output.writeMessageBegin("changePatternColumns", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: ChangePatternColumnsResult = new ChangePatternColumnsResult({ error: err });
                output.writeMessageBegin("changePatternColumns", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("changePatternColumns", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getAllPDFPostDecoratorForPattern(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<__ROOT_NAMESPACE__.PDFPostDecorator>>((resolve, reject): void => {
            try {
                const args: GetAllPDFPostDecoratorForPatternArgs = GetAllPDFPostDecoratorForPatternArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAllPDFPostDecoratorForPattern(args.token, args.patternId, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<__ROOT_NAMESPACE__.PDFPostDecorator>): void => {
            const result: GetAllPDFPostDecoratorForPatternResult = new GetAllPDFPostDecoratorForPatternResult({ success: data });
            output.writeMessageBegin("getAllPDFPostDecoratorForPattern", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetAllPDFPostDecoratorForPatternResult = new GetAllPDFPostDecoratorForPatternResult({ validError: err });
                output.writeMessageBegin("getAllPDFPostDecoratorForPattern", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetAllPDFPostDecoratorForPatternResult = new GetAllPDFPostDecoratorForPatternResult({ error: err });
                output.writeMessageBegin("getAllPDFPostDecoratorForPattern", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAllPDFPostDecoratorForPattern", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_changePatternPDFPostDecorator(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: ChangePatternPDFPostDecoratorArgs = ChangePatternPDFPostDecoratorArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.changePatternPDFPostDecorator(args.token, args.patternId, args.useDefaultPDFPostDecorators, args.toSave));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: ChangePatternPDFPostDecoratorResult = new ChangePatternPDFPostDecoratorResult({ success: data });
            output.writeMessageBegin("changePatternPDFPostDecorator", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: ChangePatternPDFPostDecoratorResult = new ChangePatternPDFPostDecoratorResult({ validError: err });
                output.writeMessageBegin("changePatternPDFPostDecorator", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: ChangePatternPDFPostDecoratorResult = new ChangePatternPDFPostDecoratorResult({ error: err });
                output.writeMessageBegin("changePatternPDFPostDecorator", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("changePatternPDFPostDecorator", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getAllowedContentItemType(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<__ROOT_NAMESPACE__.ContentItemType>>((resolve, reject): void => {
            try {
                const args: GetAllowedContentItemTypeArgs = GetAllowedContentItemTypeArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAllowedContentItemType(args.token));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<__ROOT_NAMESPACE__.ContentItemType>): void => {
            const result: GetAllowedContentItemTypeResult = new GetAllowedContentItemTypeResult({ success: data });
            output.writeMessageBegin("getAllowedContentItemType", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetAllowedContentItemTypeResult = new GetAllowedContentItemTypeResult({ validError: err });
                output.writeMessageBegin("getAllowedContentItemType", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetAllowedContentItemTypeResult = new GetAllowedContentItemTypeResult({ error: err });
                output.writeMessageBegin("getAllowedContentItemType", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAllowedContentItemType", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_changeKSPNumber(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: ChangeKSPNumberArgs = ChangeKSPNumberArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.changeKSPNumber(args.token, args.patternId, args.departmentId, args.kspNumber));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: ChangeKSPNumberResult = new ChangeKSPNumberResult({ success: data });
            output.writeMessageBegin("changeKSPNumber", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: ChangeKSPNumberResult = new ChangeKSPNumberResult({ validError: err });
                output.writeMessageBegin("changeKSPNumber", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: ChangeKSPNumberResult = new ChangeKSPNumberResult({ error: err });
                output.writeMessageBegin("changeKSPNumber", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("changeKSPNumber", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getSubStatusesConfig(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<__ROOT_NAMESPACE__.AvailableSubStatus>>((resolve, reject): void => {
            try {
                const args: GetSubStatusesConfigArgs = GetSubStatusesConfigArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getSubStatusesConfig(args.token));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<__ROOT_NAMESPACE__.AvailableSubStatus>): void => {
            const result: GetSubStatusesConfigResult = new GetSubStatusesConfigResult({ success: data });
            output.writeMessageBegin("getSubStatusesConfig", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetSubStatusesConfigResult = new GetSubStatusesConfigResult({ validError: err });
                output.writeMessageBegin("getSubStatusesConfig", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetSubStatusesConfigResult = new GetSubStatusesConfigResult({ error: err });
                output.writeMessageBegin("getSubStatusesConfig", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getSubStatusesConfig", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
}

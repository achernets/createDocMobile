/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as __ROOT_NAMESPACE__ from "./";
export interface IGetAllSecurityClassificationArgsArgs {
    token: string;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetAllSecurityClassificationArgs {
    public token: string;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetAllSecurityClassificationArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllSecurityClassificationArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 2);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllSecurityClassificationArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.token = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.filter !== undefined) {
            return new GetAllSecurityClassificationArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAllSecurityClassificationArgs from input");
        }
    }
}
export interface IGetCountAllSecurityClassificationArgsArgs {
    token: string;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetCountAllSecurityClassificationArgs {
    public token: string;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetCountAllSecurityClassificationArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetCountAllSecurityClassificationArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 2);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetCountAllSecurityClassificationArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.token = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_4: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.filter !== undefined) {
            return new GetCountAllSecurityClassificationArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetCountAllSecurityClassificationArgs from input");
        }
    }
}
export interface ICreateOrUpdateSecurityClassificationArgsArgs {
    token: string;
    securityClassification: __ROOT_NAMESPACE__.SecurityClassification;
}
export class CreateOrUpdateSecurityClassificationArgs {
    public token: string;
    public securityClassification: __ROOT_NAMESPACE__.SecurityClassification;
    constructor(args: ICreateOrUpdateSecurityClassificationArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.securityClassification != null) {
            this.securityClassification = args.securityClassification;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[securityClassification] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CreateOrUpdateSecurityClassificationArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.securityClassification != null) {
            output.writeFieldBegin("securityClassification", thrift.Thrift.Type.STRUCT, 2);
            this.securityClassification.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CreateOrUpdateSecurityClassificationArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.token = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_6: __ROOT_NAMESPACE__.SecurityClassification = __ROOT_NAMESPACE__.SecurityClassification.read(input);
                        _args.securityClassification = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.securityClassification !== undefined) {
            return new CreateOrUpdateSecurityClassificationArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read CreateOrUpdateSecurityClassificationArgs from input");
        }
    }
}
export interface IRemoveSecurityClassificationArgsArgs {
    token: string;
    securityClassificationId: string;
}
export class RemoveSecurityClassificationArgs {
    public token: string;
    public securityClassificationId: string;
    constructor(args: IRemoveSecurityClassificationArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.securityClassificationId != null) {
            this.securityClassificationId = args.securityClassificationId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[securityClassificationId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RemoveSecurityClassificationArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.securityClassificationId != null) {
            output.writeFieldBegin("securityClassificationId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.securityClassificationId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RemoveSecurityClassificationArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_7: string = input.readString();
                        _args.token = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_8: string = input.readString();
                        _args.securityClassificationId = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.securityClassificationId !== undefined) {
            return new RemoveSecurityClassificationArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read RemoveSecurityClassificationArgs from input");
        }
    }
}
export interface IAddSecurityClassificationsToUserGroupsArgsArgs {
    token: string;
    securityClassificationIds: Array<string>;
    userOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>;
}
export class AddSecurityClassificationsToUserGroupsArgs {
    public token: string;
    public securityClassificationIds: Array<string>;
    public userOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>;
    constructor(args: IAddSecurityClassificationsToUserGroupsArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.securityClassificationIds != null) {
            this.securityClassificationIds = args.securityClassificationIds;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[securityClassificationIds] is unset!");
        }
        if (args != null && args.userOrGroups != null) {
            this.userOrGroups = args.userOrGroups;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[userOrGroups] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("AddSecurityClassificationsToUserGroupsArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.securityClassificationIds != null) {
            output.writeFieldBegin("securityClassificationIds", thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.securityClassificationIds.length);
            this.securityClassificationIds.forEach((value_9: string): void => {
                output.writeString(value_9);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.userOrGroups != null) {
            output.writeFieldBegin("userOrGroups", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.userOrGroups.length);
            this.userOrGroups.forEach((value_10: __ROOT_NAMESPACE__.UserOrGroup): void => {
                value_10.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): AddSecurityClassificationsToUserGroupsArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_11: string = input.readString();
                        _args.token = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_12: Array<string> = new Array<string>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_13: string = input.readString();
                            value_12.push(value_13);
                        }
                        input.readListEnd();
                        _args.securityClassificationIds = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_14: Array<__ROOT_NAMESPACE__.UserOrGroup> = new Array<__ROOT_NAMESPACE__.UserOrGroup>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_15: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                            value_14.push(value_15);
                        }
                        input.readListEnd();
                        _args.userOrGroups = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.securityClassificationIds !== undefined && _args.userOrGroups !== undefined) {
            return new AddSecurityClassificationsToUserGroupsArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read AddSecurityClassificationsToUserGroupsArgs from input");
        }
    }
}
export interface IRemoveSecurityClassificationsFromUserGroupsArgsArgs {
    token: string;
    securityClassificationIds: Array<string>;
    userOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>;
}
export class RemoveSecurityClassificationsFromUserGroupsArgs {
    public token: string;
    public securityClassificationIds: Array<string>;
    public userOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>;
    constructor(args: IRemoveSecurityClassificationsFromUserGroupsArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.securityClassificationIds != null) {
            this.securityClassificationIds = args.securityClassificationIds;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[securityClassificationIds] is unset!");
        }
        if (args != null && args.userOrGroups != null) {
            this.userOrGroups = args.userOrGroups;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[userOrGroups] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RemoveSecurityClassificationsFromUserGroupsArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.securityClassificationIds != null) {
            output.writeFieldBegin("securityClassificationIds", thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.securityClassificationIds.length);
            this.securityClassificationIds.forEach((value_16: string): void => {
                output.writeString(value_16);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.userOrGroups != null) {
            output.writeFieldBegin("userOrGroups", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.userOrGroups.length);
            this.userOrGroups.forEach((value_17: __ROOT_NAMESPACE__.UserOrGroup): void => {
                value_17.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RemoveSecurityClassificationsFromUserGroupsArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_18: string = input.readString();
                        _args.token = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_19: Array<string> = new Array<string>();
                        const metadata_3: thrift.TList = input.readListBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_20: string = input.readString();
                            value_19.push(value_20);
                        }
                        input.readListEnd();
                        _args.securityClassificationIds = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_21: Array<__ROOT_NAMESPACE__.UserOrGroup> = new Array<__ROOT_NAMESPACE__.UserOrGroup>();
                        const metadata_4: thrift.TList = input.readListBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const value_22: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                            value_21.push(value_22);
                        }
                        input.readListEnd();
                        _args.userOrGroups = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.securityClassificationIds !== undefined && _args.userOrGroups !== undefined) {
            return new RemoveSecurityClassificationsFromUserGroupsArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read RemoveSecurityClassificationsFromUserGroupsArgs from input");
        }
    }
}
export interface IGetAllSecurityClassificationsByUserOrGroupArgsArgs {
    token: string;
    type: __ROOT_NAMESPACE__.UserOrGroupType;
    userOrGroupId: string;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetAllSecurityClassificationsByUserOrGroupArgs {
    public token: string;
    public type: __ROOT_NAMESPACE__.UserOrGroupType;
    public userOrGroupId: string;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetAllSecurityClassificationsByUserOrGroupArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.type != null) {
            this.type = args.type;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[type] is unset!");
        }
        if (args != null && args.userOrGroupId != null) {
            this.userOrGroupId = args.userOrGroupId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[userOrGroupId] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllSecurityClassificationsByUserOrGroupArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.type != null) {
            output.writeFieldBegin("type", thrift.Thrift.Type.I32, 2);
            output.writeI32(this.type);
            output.writeFieldEnd();
        }
        if (this.userOrGroupId != null) {
            output.writeFieldBegin("userOrGroupId", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.userOrGroupId);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 4);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllSecurityClassificationsByUserOrGroupArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_23: string = input.readString();
                        _args.token = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_24: __ROOT_NAMESPACE__.UserOrGroupType = input.readI32();
                        _args.type = value_24;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_25: string = input.readString();
                        _args.userOrGroupId = value_25;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_26: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_26;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.type !== undefined && _args.userOrGroupId !== undefined && _args.filter !== undefined) {
            return new GetAllSecurityClassificationsByUserOrGroupArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAllSecurityClassificationsByUserOrGroupArgs from input");
        }
    }
}
export interface IGetAllSecurityClassificationByPatternIdArgsArgs {
    token: string;
    patternId: string;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetAllSecurityClassificationByPatternIdArgs {
    public token: string;
    public patternId: string;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetAllSecurityClassificationByPatternIdArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.patternId != null) {
            this.patternId = args.patternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[patternId] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllSecurityClassificationByPatternIdArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.patternId != null) {
            output.writeFieldBegin("patternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.patternId);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 3);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllSecurityClassificationByPatternIdArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_27: string = input.readString();
                        _args.token = value_27;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_28: string = input.readString();
                        _args.patternId = value_28;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_29: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_29;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.patternId !== undefined && _args.filter !== undefined) {
            return new GetAllSecurityClassificationByPatternIdArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAllSecurityClassificationByPatternIdArgs from input");
        }
    }
}
export interface IGetAllSecurityClassificationByDocumentIdArgsArgs {
    token: string;
    documentId: string;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetAllSecurityClassificationByDocumentIdArgs {
    public token: string;
    public documentId: string;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetAllSecurityClassificationByDocumentIdArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.documentId != null) {
            this.documentId = args.documentId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[documentId] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllSecurityClassificationByDocumentIdArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.documentId != null) {
            output.writeFieldBegin("documentId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.documentId);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 3);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllSecurityClassificationByDocumentIdArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_30: string = input.readString();
                        _args.token = value_30;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_31: string = input.readString();
                        _args.documentId = value_31;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_32: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_32;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.documentId !== undefined && _args.filter !== undefined) {
            return new GetAllSecurityClassificationByDocumentIdArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAllSecurityClassificationByDocumentIdArgs from input");
        }
    }
}
export interface IAddSecurityClassificationsToDocPatternArgsArgs {
    token: string;
    securityClassificationsId: Array<string>;
    docPatternId: string;
}
export class AddSecurityClassificationsToDocPatternArgs {
    public token: string;
    public securityClassificationsId: Array<string>;
    public docPatternId: string;
    constructor(args: IAddSecurityClassificationsToDocPatternArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.securityClassificationsId != null) {
            this.securityClassificationsId = args.securityClassificationsId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[securityClassificationsId] is unset!");
        }
        if (args != null && args.docPatternId != null) {
            this.docPatternId = args.docPatternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[docPatternId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("AddSecurityClassificationsToDocPatternArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.securityClassificationsId != null) {
            output.writeFieldBegin("securityClassificationsId", thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.securityClassificationsId.length);
            this.securityClassificationsId.forEach((value_33: string): void => {
                output.writeString(value_33);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.docPatternId != null) {
            output.writeFieldBegin("docPatternId", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.docPatternId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): AddSecurityClassificationsToDocPatternArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_34: string = input.readString();
                        _args.token = value_34;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_35: Array<string> = new Array<string>();
                        const metadata_5: thrift.TList = input.readListBegin();
                        const size_5: number = metadata_5.size;
                        for (let i_5: number = 0; i_5 < size_5; i_5++) {
                            const value_36: string = input.readString();
                            value_35.push(value_36);
                        }
                        input.readListEnd();
                        _args.securityClassificationsId = value_35;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_37: string = input.readString();
                        _args.docPatternId = value_37;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.securityClassificationsId !== undefined && _args.docPatternId !== undefined) {
            return new AddSecurityClassificationsToDocPatternArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read AddSecurityClassificationsToDocPatternArgs from input");
        }
    }
}
export interface IRemoveSecurityClassificationsFromDocPatternArgsArgs {
    token: string;
    securityClassificationsId: Array<string>;
    docPatternId: string;
}
export class RemoveSecurityClassificationsFromDocPatternArgs {
    public token: string;
    public securityClassificationsId: Array<string>;
    public docPatternId: string;
    constructor(args: IRemoveSecurityClassificationsFromDocPatternArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.securityClassificationsId != null) {
            this.securityClassificationsId = args.securityClassificationsId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[securityClassificationsId] is unset!");
        }
        if (args != null && args.docPatternId != null) {
            this.docPatternId = args.docPatternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[docPatternId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RemoveSecurityClassificationsFromDocPatternArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.securityClassificationsId != null) {
            output.writeFieldBegin("securityClassificationsId", thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.securityClassificationsId.length);
            this.securityClassificationsId.forEach((value_38: string): void => {
                output.writeString(value_38);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.docPatternId != null) {
            output.writeFieldBegin("docPatternId", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.docPatternId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RemoveSecurityClassificationsFromDocPatternArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_39: string = input.readString();
                        _args.token = value_39;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_40: Array<string> = new Array<string>();
                        const metadata_6: thrift.TList = input.readListBegin();
                        const size_6: number = metadata_6.size;
                        for (let i_6: number = 0; i_6 < size_6; i_6++) {
                            const value_41: string = input.readString();
                            value_40.push(value_41);
                        }
                        input.readListEnd();
                        _args.securityClassificationsId = value_40;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_42: string = input.readString();
                        _args.docPatternId = value_42;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.securityClassificationsId !== undefined && _args.docPatternId !== undefined) {
            return new RemoveSecurityClassificationsFromDocPatternArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read RemoveSecurityClassificationsFromDocPatternArgs from input");
        }
    }
}
export interface IAddSecurityClassificationsToDocumentArgsArgs {
    token: string;
    securityClassificationsId: Array<string>;
    documentId: string;
    accessPolicy: __ROOT_NAMESPACE__.DocumentAccessPolicy;
}
export class AddSecurityClassificationsToDocumentArgs {
    public token: string;
    public securityClassificationsId: Array<string>;
    public documentId: string;
    public accessPolicy: __ROOT_NAMESPACE__.DocumentAccessPolicy;
    constructor(args: IAddSecurityClassificationsToDocumentArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.securityClassificationsId != null) {
            this.securityClassificationsId = args.securityClassificationsId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[securityClassificationsId] is unset!");
        }
        if (args != null && args.documentId != null) {
            this.documentId = args.documentId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[documentId] is unset!");
        }
        if (args != null && args.accessPolicy != null) {
            this.accessPolicy = args.accessPolicy;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[accessPolicy] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("AddSecurityClassificationsToDocumentArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.securityClassificationsId != null) {
            output.writeFieldBegin("securityClassificationsId", thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.securityClassificationsId.length);
            this.securityClassificationsId.forEach((value_43: string): void => {
                output.writeString(value_43);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.documentId != null) {
            output.writeFieldBegin("documentId", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.documentId);
            output.writeFieldEnd();
        }
        if (this.accessPolicy != null) {
            output.writeFieldBegin("accessPolicy", thrift.Thrift.Type.STRUCT, 4);
            this.accessPolicy.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): AddSecurityClassificationsToDocumentArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_44: string = input.readString();
                        _args.token = value_44;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_45: Array<string> = new Array<string>();
                        const metadata_7: thrift.TList = input.readListBegin();
                        const size_7: number = metadata_7.size;
                        for (let i_7: number = 0; i_7 < size_7; i_7++) {
                            const value_46: string = input.readString();
                            value_45.push(value_46);
                        }
                        input.readListEnd();
                        _args.securityClassificationsId = value_45;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_47: string = input.readString();
                        _args.documentId = value_47;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_48: __ROOT_NAMESPACE__.DocumentAccessPolicy = __ROOT_NAMESPACE__.DocumentAccessPolicy.read(input);
                        _args.accessPolicy = value_48;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.securityClassificationsId !== undefined && _args.documentId !== undefined && _args.accessPolicy !== undefined) {
            return new AddSecurityClassificationsToDocumentArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read AddSecurityClassificationsToDocumentArgs from input");
        }
    }
}
export interface IChangeSecurityClassificationsForDocumentArgsArgs {
    token: string;
    addedSecurityClassificationsId: Array<string>;
    removedSecurityClassificationsId: Array<string>;
    documentId: string;
    accessPolicy: __ROOT_NAMESPACE__.DocumentAccessPolicy;
}
export class ChangeSecurityClassificationsForDocumentArgs {
    public token: string;
    public addedSecurityClassificationsId: Array<string>;
    public removedSecurityClassificationsId: Array<string>;
    public documentId: string;
    public accessPolicy: __ROOT_NAMESPACE__.DocumentAccessPolicy;
    constructor(args: IChangeSecurityClassificationsForDocumentArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.addedSecurityClassificationsId != null) {
            this.addedSecurityClassificationsId = args.addedSecurityClassificationsId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[addedSecurityClassificationsId] is unset!");
        }
        if (args != null && args.removedSecurityClassificationsId != null) {
            this.removedSecurityClassificationsId = args.removedSecurityClassificationsId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[removedSecurityClassificationsId] is unset!");
        }
        if (args != null && args.documentId != null) {
            this.documentId = args.documentId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[documentId] is unset!");
        }
        if (args != null && args.accessPolicy != null) {
            this.accessPolicy = args.accessPolicy;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[accessPolicy] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ChangeSecurityClassificationsForDocumentArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.addedSecurityClassificationsId != null) {
            output.writeFieldBegin("addedSecurityClassificationsId", thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.addedSecurityClassificationsId.length);
            this.addedSecurityClassificationsId.forEach((value_49: string): void => {
                output.writeString(value_49);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.removedSecurityClassificationsId != null) {
            output.writeFieldBegin("removedSecurityClassificationsId", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.removedSecurityClassificationsId.length);
            this.removedSecurityClassificationsId.forEach((value_50: string): void => {
                output.writeString(value_50);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.documentId != null) {
            output.writeFieldBegin("documentId", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.documentId);
            output.writeFieldEnd();
        }
        if (this.accessPolicy != null) {
            output.writeFieldBegin("accessPolicy", thrift.Thrift.Type.STRUCT, 5);
            this.accessPolicy.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ChangeSecurityClassificationsForDocumentArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_51: string = input.readString();
                        _args.token = value_51;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_52: Array<string> = new Array<string>();
                        const metadata_8: thrift.TList = input.readListBegin();
                        const size_8: number = metadata_8.size;
                        for (let i_8: number = 0; i_8 < size_8; i_8++) {
                            const value_53: string = input.readString();
                            value_52.push(value_53);
                        }
                        input.readListEnd();
                        _args.addedSecurityClassificationsId = value_52;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_54: Array<string> = new Array<string>();
                        const metadata_9: thrift.TList = input.readListBegin();
                        const size_9: number = metadata_9.size;
                        for (let i_9: number = 0; i_9 < size_9; i_9++) {
                            const value_55: string = input.readString();
                            value_54.push(value_55);
                        }
                        input.readListEnd();
                        _args.removedSecurityClassificationsId = value_54;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_56: string = input.readString();
                        _args.documentId = value_56;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_57: __ROOT_NAMESPACE__.DocumentAccessPolicy = __ROOT_NAMESPACE__.DocumentAccessPolicy.read(input);
                        _args.accessPolicy = value_57;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.addedSecurityClassificationsId !== undefined && _args.removedSecurityClassificationsId !== undefined && _args.documentId !== undefined && _args.accessPolicy !== undefined) {
            return new ChangeSecurityClassificationsForDocumentArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read ChangeSecurityClassificationsForDocumentArgs from input");
        }
    }
}
export interface IRemoveSecurityClassificationsFromDocumentArgsArgs {
    token: string;
    securityClassificationsId: Array<string>;
    documentId: string;
    accessPolicy: __ROOT_NAMESPACE__.DocumentAccessPolicy;
}
export class RemoveSecurityClassificationsFromDocumentArgs {
    public token: string;
    public securityClassificationsId: Array<string>;
    public documentId: string;
    public accessPolicy: __ROOT_NAMESPACE__.DocumentAccessPolicy;
    constructor(args: IRemoveSecurityClassificationsFromDocumentArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.securityClassificationsId != null) {
            this.securityClassificationsId = args.securityClassificationsId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[securityClassificationsId] is unset!");
        }
        if (args != null && args.documentId != null) {
            this.documentId = args.documentId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[documentId] is unset!");
        }
        if (args != null && args.accessPolicy != null) {
            this.accessPolicy = args.accessPolicy;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[accessPolicy] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RemoveSecurityClassificationsFromDocumentArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.securityClassificationsId != null) {
            output.writeFieldBegin("securityClassificationsId", thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.securityClassificationsId.length);
            this.securityClassificationsId.forEach((value_58: string): void => {
                output.writeString(value_58);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.documentId != null) {
            output.writeFieldBegin("documentId", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.documentId);
            output.writeFieldEnd();
        }
        if (this.accessPolicy != null) {
            output.writeFieldBegin("accessPolicy", thrift.Thrift.Type.STRUCT, 4);
            this.accessPolicy.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RemoveSecurityClassificationsFromDocumentArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_59: string = input.readString();
                        _args.token = value_59;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_60: Array<string> = new Array<string>();
                        const metadata_10: thrift.TList = input.readListBegin();
                        const size_10: number = metadata_10.size;
                        for (let i_10: number = 0; i_10 < size_10; i_10++) {
                            const value_61: string = input.readString();
                            value_60.push(value_61);
                        }
                        input.readListEnd();
                        _args.securityClassificationsId = value_60;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_62: string = input.readString();
                        _args.documentId = value_62;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_63: __ROOT_NAMESPACE__.DocumentAccessPolicy = __ROOT_NAMESPACE__.DocumentAccessPolicy.read(input);
                        _args.accessPolicy = value_63;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.securityClassificationsId !== undefined && _args.documentId !== undefined && _args.accessPolicy !== undefined) {
            return new RemoveSecurityClassificationsFromDocumentArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read RemoveSecurityClassificationsFromDocumentArgs from input");
        }
    }
}
export interface IGetAllSecurityClassificationDependenciesArgsArgs {
    token: string;
    securityClassificationId: string;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetAllSecurityClassificationDependenciesArgs {
    public token: string;
    public securityClassificationId: string;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetAllSecurityClassificationDependenciesArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.securityClassificationId != null) {
            this.securityClassificationId = args.securityClassificationId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[securityClassificationId] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllSecurityClassificationDependenciesArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.securityClassificationId != null) {
            output.writeFieldBegin("securityClassificationId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.securityClassificationId);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 3);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllSecurityClassificationDependenciesArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_64: string = input.readString();
                        _args.token = value_64;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_65: string = input.readString();
                        _args.securityClassificationId = value_65;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_66: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_66;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.securityClassificationId !== undefined && _args.filter !== undefined) {
            return new GetAllSecurityClassificationDependenciesArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAllSecurityClassificationDependenciesArgs from input");
        }
    }
}
export interface IAddSecurityClassificationDependenciesArgsArgs {
    token: string;
    securityClassificationId: string;
    securityClassificationsId: Array<string>;
}
export class AddSecurityClassificationDependenciesArgs {
    public token: string;
    public securityClassificationId: string;
    public securityClassificationsId: Array<string>;
    constructor(args: IAddSecurityClassificationDependenciesArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.securityClassificationId != null) {
            this.securityClassificationId = args.securityClassificationId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[securityClassificationId] is unset!");
        }
        if (args != null && args.securityClassificationsId != null) {
            this.securityClassificationsId = args.securityClassificationsId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[securityClassificationsId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("AddSecurityClassificationDependenciesArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.securityClassificationId != null) {
            output.writeFieldBegin("securityClassificationId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.securityClassificationId);
            output.writeFieldEnd();
        }
        if (this.securityClassificationsId != null) {
            output.writeFieldBegin("securityClassificationsId", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.securityClassificationsId.length);
            this.securityClassificationsId.forEach((value_67: string): void => {
                output.writeString(value_67);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): AddSecurityClassificationDependenciesArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_68: string = input.readString();
                        _args.token = value_68;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_69: string = input.readString();
                        _args.securityClassificationId = value_69;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_70: Array<string> = new Array<string>();
                        const metadata_11: thrift.TList = input.readListBegin();
                        const size_11: number = metadata_11.size;
                        for (let i_11: number = 0; i_11 < size_11; i_11++) {
                            const value_71: string = input.readString();
                            value_70.push(value_71);
                        }
                        input.readListEnd();
                        _args.securityClassificationsId = value_70;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.securityClassificationId !== undefined && _args.securityClassificationsId !== undefined) {
            return new AddSecurityClassificationDependenciesArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read AddSecurityClassificationDependenciesArgs from input");
        }
    }
}
export interface IRemoveSecurityClassificationDependenciesArgsArgs {
    token: string;
    securityClassificationId: string;
    securityClassificationsId: Array<string>;
}
export class RemoveSecurityClassificationDependenciesArgs {
    public token: string;
    public securityClassificationId: string;
    public securityClassificationsId: Array<string>;
    constructor(args: IRemoveSecurityClassificationDependenciesArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.securityClassificationId != null) {
            this.securityClassificationId = args.securityClassificationId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[securityClassificationId] is unset!");
        }
        if (args != null && args.securityClassificationsId != null) {
            this.securityClassificationsId = args.securityClassificationsId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[securityClassificationsId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RemoveSecurityClassificationDependenciesArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.securityClassificationId != null) {
            output.writeFieldBegin("securityClassificationId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.securityClassificationId);
            output.writeFieldEnd();
        }
        if (this.securityClassificationsId != null) {
            output.writeFieldBegin("securityClassificationsId", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.securityClassificationsId.length);
            this.securityClassificationsId.forEach((value_72: string): void => {
                output.writeString(value_72);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RemoveSecurityClassificationDependenciesArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_73: string = input.readString();
                        _args.token = value_73;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_74: string = input.readString();
                        _args.securityClassificationId = value_74;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_75: Array<string> = new Array<string>();
                        const metadata_12: thrift.TList = input.readListBegin();
                        const size_12: number = metadata_12.size;
                        for (let i_12: number = 0; i_12 < size_12; i_12++) {
                            const value_76: string = input.readString();
                            value_75.push(value_76);
                        }
                        input.readListEnd();
                        _args.securityClassificationsId = value_75;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.securityClassificationId !== undefined && _args.securityClassificationsId !== undefined) {
            return new RemoveSecurityClassificationDependenciesArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read RemoveSecurityClassificationDependenciesArgs from input");
        }
    }
}
export interface IGetAllSecurityClassificationResultArgs {
    success?: Array<__ROOT_NAMESPACE__.SecurityClassification>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetAllSecurityClassificationResult {
    public success?: Array<__ROOT_NAMESPACE__.SecurityClassification>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetAllSecurityClassificationResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllSecurityClassificationResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_77: __ROOT_NAMESPACE__.SecurityClassification): void => {
                value_77.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllSecurityClassificationResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_78: Array<__ROOT_NAMESPACE__.SecurityClassification> = new Array<__ROOT_NAMESPACE__.SecurityClassification>();
                        const metadata_13: thrift.TList = input.readListBegin();
                        const size_13: number = metadata_13.size;
                        for (let i_13: number = 0; i_13 < size_13; i_13++) {
                            const value_79: __ROOT_NAMESPACE__.SecurityClassification = __ROOT_NAMESPACE__.SecurityClassification.read(input);
                            value_78.push(value_79);
                        }
                        input.readListEnd();
                        _args.success = value_78;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_80: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_80;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_81: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_81;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAllSecurityClassificationResult(_args);
    }
}
export interface IGetCountAllSecurityClassificationResultArgs {
    success?: number;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetCountAllSecurityClassificationResult {
    public success?: number;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetCountAllSecurityClassificationResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetCountAllSecurityClassificationResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.I32, 0);
            output.writeI32(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetCountAllSecurityClassificationResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_82: number = input.readI32();
                        _args.success = value_82;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_83: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_83;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_84: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_84;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetCountAllSecurityClassificationResult(_args);
    }
}
export interface ICreateOrUpdateSecurityClassificationResultArgs {
    success?: __ROOT_NAMESPACE__.SecurityClassification;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class CreateOrUpdateSecurityClassificationResult {
    public success?: __ROOT_NAMESPACE__.SecurityClassification;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: ICreateOrUpdateSecurityClassificationResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CreateOrUpdateSecurityClassificationResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CreateOrUpdateSecurityClassificationResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_85: __ROOT_NAMESPACE__.SecurityClassification = __ROOT_NAMESPACE__.SecurityClassification.read(input);
                        _args.success = value_85;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_86: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_86;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_87: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_87;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new CreateOrUpdateSecurityClassificationResult(_args);
    }
}
export interface IRemoveSecurityClassificationResultArgs {
    success?: boolean;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class RemoveSecurityClassificationResult {
    public success?: boolean;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IRemoveSecurityClassificationResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RemoveSecurityClassificationResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RemoveSecurityClassificationResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_88: boolean = input.readBool();
                        _args.success = value_88;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_89: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_89;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_90: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_90;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new RemoveSecurityClassificationResult(_args);
    }
}
export interface IAddSecurityClassificationsToUserGroupsResultArgs {
    success?: boolean;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class AddSecurityClassificationsToUserGroupsResult {
    public success?: boolean;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IAddSecurityClassificationsToUserGroupsResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("AddSecurityClassificationsToUserGroupsResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): AddSecurityClassificationsToUserGroupsResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_91: boolean = input.readBool();
                        _args.success = value_91;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_92: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_92;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_93: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_93;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new AddSecurityClassificationsToUserGroupsResult(_args);
    }
}
export interface IRemoveSecurityClassificationsFromUserGroupsResultArgs {
    success?: boolean;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class RemoveSecurityClassificationsFromUserGroupsResult {
    public success?: boolean;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IRemoveSecurityClassificationsFromUserGroupsResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RemoveSecurityClassificationsFromUserGroupsResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RemoveSecurityClassificationsFromUserGroupsResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_94: boolean = input.readBool();
                        _args.success = value_94;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_95: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_95;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_96: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_96;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new RemoveSecurityClassificationsFromUserGroupsResult(_args);
    }
}
export interface IGetAllSecurityClassificationsByUserOrGroupResultArgs {
    success?: Array<__ROOT_NAMESPACE__.SecurityClassification>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetAllSecurityClassificationsByUserOrGroupResult {
    public success?: Array<__ROOT_NAMESPACE__.SecurityClassification>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetAllSecurityClassificationsByUserOrGroupResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllSecurityClassificationsByUserOrGroupResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_97: __ROOT_NAMESPACE__.SecurityClassification): void => {
                value_97.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllSecurityClassificationsByUserOrGroupResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_98: Array<__ROOT_NAMESPACE__.SecurityClassification> = new Array<__ROOT_NAMESPACE__.SecurityClassification>();
                        const metadata_14: thrift.TList = input.readListBegin();
                        const size_14: number = metadata_14.size;
                        for (let i_14: number = 0; i_14 < size_14; i_14++) {
                            const value_99: __ROOT_NAMESPACE__.SecurityClassification = __ROOT_NAMESPACE__.SecurityClassification.read(input);
                            value_98.push(value_99);
                        }
                        input.readListEnd();
                        _args.success = value_98;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_100: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_100;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_101: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_101;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAllSecurityClassificationsByUserOrGroupResult(_args);
    }
}
export interface IGetAllSecurityClassificationByPatternIdResultArgs {
    success?: Array<__ROOT_NAMESPACE__.SecurityClassification>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetAllSecurityClassificationByPatternIdResult {
    public success?: Array<__ROOT_NAMESPACE__.SecurityClassification>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetAllSecurityClassificationByPatternIdResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllSecurityClassificationByPatternIdResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_102: __ROOT_NAMESPACE__.SecurityClassification): void => {
                value_102.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllSecurityClassificationByPatternIdResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_103: Array<__ROOT_NAMESPACE__.SecurityClassification> = new Array<__ROOT_NAMESPACE__.SecurityClassification>();
                        const metadata_15: thrift.TList = input.readListBegin();
                        const size_15: number = metadata_15.size;
                        for (let i_15: number = 0; i_15 < size_15; i_15++) {
                            const value_104: __ROOT_NAMESPACE__.SecurityClassification = __ROOT_NAMESPACE__.SecurityClassification.read(input);
                            value_103.push(value_104);
                        }
                        input.readListEnd();
                        _args.success = value_103;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_105: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_105;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_106: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_106;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAllSecurityClassificationByPatternIdResult(_args);
    }
}
export interface IGetAllSecurityClassificationByDocumentIdResultArgs {
    success?: Array<__ROOT_NAMESPACE__.SecurityClassification>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetAllSecurityClassificationByDocumentIdResult {
    public success?: Array<__ROOT_NAMESPACE__.SecurityClassification>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetAllSecurityClassificationByDocumentIdResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllSecurityClassificationByDocumentIdResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_107: __ROOT_NAMESPACE__.SecurityClassification): void => {
                value_107.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllSecurityClassificationByDocumentIdResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_108: Array<__ROOT_NAMESPACE__.SecurityClassification> = new Array<__ROOT_NAMESPACE__.SecurityClassification>();
                        const metadata_16: thrift.TList = input.readListBegin();
                        const size_16: number = metadata_16.size;
                        for (let i_16: number = 0; i_16 < size_16; i_16++) {
                            const value_109: __ROOT_NAMESPACE__.SecurityClassification = __ROOT_NAMESPACE__.SecurityClassification.read(input);
                            value_108.push(value_109);
                        }
                        input.readListEnd();
                        _args.success = value_108;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_110: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_110;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_111: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_111;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAllSecurityClassificationByDocumentIdResult(_args);
    }
}
export interface IAddSecurityClassificationsToDocPatternResultArgs {
    success?: boolean;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class AddSecurityClassificationsToDocPatternResult {
    public success?: boolean;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IAddSecurityClassificationsToDocPatternResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("AddSecurityClassificationsToDocPatternResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): AddSecurityClassificationsToDocPatternResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_112: boolean = input.readBool();
                        _args.success = value_112;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_113: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_113;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_114: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_114;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new AddSecurityClassificationsToDocPatternResult(_args);
    }
}
export interface IRemoveSecurityClassificationsFromDocPatternResultArgs {
    success?: boolean;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class RemoveSecurityClassificationsFromDocPatternResult {
    public success?: boolean;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IRemoveSecurityClassificationsFromDocPatternResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RemoveSecurityClassificationsFromDocPatternResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RemoveSecurityClassificationsFromDocPatternResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_115: boolean = input.readBool();
                        _args.success = value_115;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_116: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_116;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_117: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_117;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new RemoveSecurityClassificationsFromDocPatternResult(_args);
    }
}
export interface IAddSecurityClassificationsToDocumentResultArgs {
    success?: boolean;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class AddSecurityClassificationsToDocumentResult {
    public success?: boolean;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IAddSecurityClassificationsToDocumentResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("AddSecurityClassificationsToDocumentResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): AddSecurityClassificationsToDocumentResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_118: boolean = input.readBool();
                        _args.success = value_118;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_119: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_119;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_120: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_120;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new AddSecurityClassificationsToDocumentResult(_args);
    }
}
export interface IChangeSecurityClassificationsForDocumentResultArgs {
    success?: boolean;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class ChangeSecurityClassificationsForDocumentResult {
    public success?: boolean;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IChangeSecurityClassificationsForDocumentResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ChangeSecurityClassificationsForDocumentResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ChangeSecurityClassificationsForDocumentResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_121: boolean = input.readBool();
                        _args.success = value_121;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_122: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_122;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_123: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_123;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ChangeSecurityClassificationsForDocumentResult(_args);
    }
}
export interface IRemoveSecurityClassificationsFromDocumentResultArgs {
    success?: boolean;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class RemoveSecurityClassificationsFromDocumentResult {
    public success?: boolean;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IRemoveSecurityClassificationsFromDocumentResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RemoveSecurityClassificationsFromDocumentResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RemoveSecurityClassificationsFromDocumentResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_124: boolean = input.readBool();
                        _args.success = value_124;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_125: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_125;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_126: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_126;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new RemoveSecurityClassificationsFromDocumentResult(_args);
    }
}
export interface IGetAllSecurityClassificationDependenciesResultArgs {
    success?: Array<__ROOT_NAMESPACE__.SecurityClassification>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetAllSecurityClassificationDependenciesResult {
    public success?: Array<__ROOT_NAMESPACE__.SecurityClassification>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetAllSecurityClassificationDependenciesResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllSecurityClassificationDependenciesResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_127: __ROOT_NAMESPACE__.SecurityClassification): void => {
                value_127.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllSecurityClassificationDependenciesResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_128: Array<__ROOT_NAMESPACE__.SecurityClassification> = new Array<__ROOT_NAMESPACE__.SecurityClassification>();
                        const metadata_17: thrift.TList = input.readListBegin();
                        const size_17: number = metadata_17.size;
                        for (let i_17: number = 0; i_17 < size_17; i_17++) {
                            const value_129: __ROOT_NAMESPACE__.SecurityClassification = __ROOT_NAMESPACE__.SecurityClassification.read(input);
                            value_128.push(value_129);
                        }
                        input.readListEnd();
                        _args.success = value_128;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_130: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_130;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_131: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_131;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAllSecurityClassificationDependenciesResult(_args);
    }
}
export interface IAddSecurityClassificationDependenciesResultArgs {
    success?: boolean;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class AddSecurityClassificationDependenciesResult {
    public success?: boolean;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IAddSecurityClassificationDependenciesResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("AddSecurityClassificationDependenciesResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): AddSecurityClassificationDependenciesResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_132: boolean = input.readBool();
                        _args.success = value_132;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_133: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_133;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_134: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_134;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new AddSecurityClassificationDependenciesResult(_args);
    }
}
export interface IRemoveSecurityClassificationDependenciesResultArgs {
    success?: boolean;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class RemoveSecurityClassificationDependenciesResult {
    public success?: boolean;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IRemoveSecurityClassificationDependenciesResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RemoveSecurityClassificationDependenciesResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RemoveSecurityClassificationDependenciesResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_135: boolean = input.readBool();
                        _args.success = value_135;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_136: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_136;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_137: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_137;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new RemoveSecurityClassificationDependenciesResult(_args);
    }
}
export class Client {
    public _seqid: number;
    public _reqs: {
        [name: number]: (err: Error | object | undefined, val?: any) => void;
    };
    public output: thrift.TTransport;
    public protocol: new (trans: thrift.TTransport) => thrift.TProtocol;
    constructor(output: thrift.TTransport, protocol: new (trans: thrift.TTransport) => thrift.TProtocol) {
        this._seqid = 0;
        this._reqs = {};
        this.output = output;
        this.protocol = protocol;
    }
    public incrementSeqId(): number {
        return this._seqid += 1;
    }
    public getAllSecurityClassification(token: string, filter: __ROOT_NAMESPACE__.KazFilter): Promise<Array<__ROOT_NAMESPACE__.SecurityClassification>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<__ROOT_NAMESPACE__.SecurityClassification>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAllSecurityClassification(token, filter, requestId);
        });
    }
    public getCountAllSecurityClassification(token: string, filter: __ROOT_NAMESPACE__.KazFilter): Promise<number> {
        const requestId: number = this.incrementSeqId();
        return new Promise<number>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getCountAllSecurityClassification(token, filter, requestId);
        });
    }
    public createOrUpdateSecurityClassification(token: string, securityClassification: __ROOT_NAMESPACE__.SecurityClassification): Promise<__ROOT_NAMESPACE__.SecurityClassification> {
        const requestId: number = this.incrementSeqId();
        return new Promise<__ROOT_NAMESPACE__.SecurityClassification>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_createOrUpdateSecurityClassification(token, securityClassification, requestId);
        });
    }
    public removeSecurityClassification(token: string, securityClassificationId: string): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_removeSecurityClassification(token, securityClassificationId, requestId);
        });
    }
    public addSecurityClassificationsToUserGroups(token: string, securityClassificationIds: Array<string>, userOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_addSecurityClassificationsToUserGroups(token, securityClassificationIds, userOrGroups, requestId);
        });
    }
    public removeSecurityClassificationsFromUserGroups(token: string, securityClassificationIds: Array<string>, userOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_removeSecurityClassificationsFromUserGroups(token, securityClassificationIds, userOrGroups, requestId);
        });
    }
    public getAllSecurityClassificationsByUserOrGroup(token: string, type: __ROOT_NAMESPACE__.UserOrGroupType, userOrGroupId: string, filter: __ROOT_NAMESPACE__.KazFilter): Promise<Array<__ROOT_NAMESPACE__.SecurityClassification>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<__ROOT_NAMESPACE__.SecurityClassification>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAllSecurityClassificationsByUserOrGroup(token, type, userOrGroupId, filter, requestId);
        });
    }
    public getAllSecurityClassificationByPatternId(token: string, patternId: string, filter: __ROOT_NAMESPACE__.KazFilter): Promise<Array<__ROOT_NAMESPACE__.SecurityClassification>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<__ROOT_NAMESPACE__.SecurityClassification>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAllSecurityClassificationByPatternId(token, patternId, filter, requestId);
        });
    }
    public getAllSecurityClassificationByDocumentId(token: string, documentId: string, filter: __ROOT_NAMESPACE__.KazFilter): Promise<Array<__ROOT_NAMESPACE__.SecurityClassification>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<__ROOT_NAMESPACE__.SecurityClassification>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAllSecurityClassificationByDocumentId(token, documentId, filter, requestId);
        });
    }
    public addSecurityClassificationsToDocPattern(token: string, securityClassificationsId: Array<string>, docPatternId: string): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_addSecurityClassificationsToDocPattern(token, securityClassificationsId, docPatternId, requestId);
        });
    }
    public removeSecurityClassificationsFromDocPattern(token: string, securityClassificationsId: Array<string>, docPatternId: string): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_removeSecurityClassificationsFromDocPattern(token, securityClassificationsId, docPatternId, requestId);
        });
    }
    public addSecurityClassificationsToDocument(token: string, securityClassificationsId: Array<string>, documentId: string, accessPolicy: __ROOT_NAMESPACE__.DocumentAccessPolicy): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_addSecurityClassificationsToDocument(token, securityClassificationsId, documentId, accessPolicy, requestId);
        });
    }
    public changeSecurityClassificationsForDocument(token: string, addedSecurityClassificationsId: Array<string>, removedSecurityClassificationsId: Array<string>, documentId: string, accessPolicy: __ROOT_NAMESPACE__.DocumentAccessPolicy): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_changeSecurityClassificationsForDocument(token, addedSecurityClassificationsId, removedSecurityClassificationsId, documentId, accessPolicy, requestId);
        });
    }
    public removeSecurityClassificationsFromDocument(token: string, securityClassificationsId: Array<string>, documentId: string, accessPolicy: __ROOT_NAMESPACE__.DocumentAccessPolicy): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_removeSecurityClassificationsFromDocument(token, securityClassificationsId, documentId, accessPolicy, requestId);
        });
    }
    public getAllSecurityClassificationDependencies(token: string, securityClassificationId: string, filter: __ROOT_NAMESPACE__.KazFilter): Promise<Array<__ROOT_NAMESPACE__.SecurityClassification>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<__ROOT_NAMESPACE__.SecurityClassification>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAllSecurityClassificationDependencies(token, securityClassificationId, filter, requestId);
        });
    }
    public addSecurityClassificationDependencies(token: string, securityClassificationId: string, securityClassificationsId: Array<string>): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_addSecurityClassificationDependencies(token, securityClassificationId, securityClassificationsId, requestId);
        });
    }
    public removeSecurityClassificationDependencies(token: string, securityClassificationId: string, securityClassificationsId: Array<string>): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_removeSecurityClassificationDependencies(token, securityClassificationId, securityClassificationsId, requestId);
        });
    }
    public send_getAllSecurityClassification(token: string, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAllSecurityClassification", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAllSecurityClassificationArgs = new GetAllSecurityClassificationArgs({ token, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getCountAllSecurityClassification(token: string, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getCountAllSecurityClassification", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetCountAllSecurityClassificationArgs = new GetCountAllSecurityClassificationArgs({ token, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_createOrUpdateSecurityClassification(token: string, securityClassification: __ROOT_NAMESPACE__.SecurityClassification, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("createOrUpdateSecurityClassification", thrift.Thrift.MessageType.CALL, requestId);
        const args: CreateOrUpdateSecurityClassificationArgs = new CreateOrUpdateSecurityClassificationArgs({ token, securityClassification });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_removeSecurityClassification(token: string, securityClassificationId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("removeSecurityClassification", thrift.Thrift.MessageType.CALL, requestId);
        const args: RemoveSecurityClassificationArgs = new RemoveSecurityClassificationArgs({ token, securityClassificationId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_addSecurityClassificationsToUserGroups(token: string, securityClassificationIds: Array<string>, userOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("addSecurityClassificationsToUserGroups", thrift.Thrift.MessageType.CALL, requestId);
        const args: AddSecurityClassificationsToUserGroupsArgs = new AddSecurityClassificationsToUserGroupsArgs({ token, securityClassificationIds, userOrGroups });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_removeSecurityClassificationsFromUserGroups(token: string, securityClassificationIds: Array<string>, userOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("removeSecurityClassificationsFromUserGroups", thrift.Thrift.MessageType.CALL, requestId);
        const args: RemoveSecurityClassificationsFromUserGroupsArgs = new RemoveSecurityClassificationsFromUserGroupsArgs({ token, securityClassificationIds, userOrGroups });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getAllSecurityClassificationsByUserOrGroup(token: string, type: __ROOT_NAMESPACE__.UserOrGroupType, userOrGroupId: string, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAllSecurityClassificationsByUserOrGroup", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAllSecurityClassificationsByUserOrGroupArgs = new GetAllSecurityClassificationsByUserOrGroupArgs({ token, type, userOrGroupId, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getAllSecurityClassificationByPatternId(token: string, patternId: string, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAllSecurityClassificationByPatternId", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAllSecurityClassificationByPatternIdArgs = new GetAllSecurityClassificationByPatternIdArgs({ token, patternId, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getAllSecurityClassificationByDocumentId(token: string, documentId: string, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAllSecurityClassificationByDocumentId", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAllSecurityClassificationByDocumentIdArgs = new GetAllSecurityClassificationByDocumentIdArgs({ token, documentId, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_addSecurityClassificationsToDocPattern(token: string, securityClassificationsId: Array<string>, docPatternId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("addSecurityClassificationsToDocPattern", thrift.Thrift.MessageType.CALL, requestId);
        const args: AddSecurityClassificationsToDocPatternArgs = new AddSecurityClassificationsToDocPatternArgs({ token, securityClassificationsId, docPatternId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_removeSecurityClassificationsFromDocPattern(token: string, securityClassificationsId: Array<string>, docPatternId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("removeSecurityClassificationsFromDocPattern", thrift.Thrift.MessageType.CALL, requestId);
        const args: RemoveSecurityClassificationsFromDocPatternArgs = new RemoveSecurityClassificationsFromDocPatternArgs({ token, securityClassificationsId, docPatternId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_addSecurityClassificationsToDocument(token: string, securityClassificationsId: Array<string>, documentId: string, accessPolicy: __ROOT_NAMESPACE__.DocumentAccessPolicy, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("addSecurityClassificationsToDocument", thrift.Thrift.MessageType.CALL, requestId);
        const args: AddSecurityClassificationsToDocumentArgs = new AddSecurityClassificationsToDocumentArgs({ token, securityClassificationsId, documentId, accessPolicy });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_changeSecurityClassificationsForDocument(token: string, addedSecurityClassificationsId: Array<string>, removedSecurityClassificationsId: Array<string>, documentId: string, accessPolicy: __ROOT_NAMESPACE__.DocumentAccessPolicy, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("changeSecurityClassificationsForDocument", thrift.Thrift.MessageType.CALL, requestId);
        const args: ChangeSecurityClassificationsForDocumentArgs = new ChangeSecurityClassificationsForDocumentArgs({ token, addedSecurityClassificationsId, removedSecurityClassificationsId, documentId, accessPolicy });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_removeSecurityClassificationsFromDocument(token: string, securityClassificationsId: Array<string>, documentId: string, accessPolicy: __ROOT_NAMESPACE__.DocumentAccessPolicy, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("removeSecurityClassificationsFromDocument", thrift.Thrift.MessageType.CALL, requestId);
        const args: RemoveSecurityClassificationsFromDocumentArgs = new RemoveSecurityClassificationsFromDocumentArgs({ token, securityClassificationsId, documentId, accessPolicy });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getAllSecurityClassificationDependencies(token: string, securityClassificationId: string, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAllSecurityClassificationDependencies", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAllSecurityClassificationDependenciesArgs = new GetAllSecurityClassificationDependenciesArgs({ token, securityClassificationId, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_addSecurityClassificationDependencies(token: string, securityClassificationId: string, securityClassificationsId: Array<string>, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("addSecurityClassificationDependencies", thrift.Thrift.MessageType.CALL, requestId);
        const args: AddSecurityClassificationDependenciesArgs = new AddSecurityClassificationDependenciesArgs({ token, securityClassificationId, securityClassificationsId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_removeSecurityClassificationDependencies(token: string, securityClassificationId: string, securityClassificationsId: Array<string>, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("removeSecurityClassificationDependencies", thrift.Thrift.MessageType.CALL, requestId);
        const args: RemoveSecurityClassificationDependenciesArgs = new RemoveSecurityClassificationDependenciesArgs({ token, securityClassificationId, securityClassificationsId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public recv_getAllSecurityClassification(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAllSecurityClassificationResult = GetAllSecurityClassificationResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAllSecurityClassification failed: unknown result"));
                }
            }
        }
    }
    public recv_getCountAllSecurityClassification(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetCountAllSecurityClassificationResult = GetCountAllSecurityClassificationResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getCountAllSecurityClassification failed: unknown result"));
                }
            }
        }
    }
    public recv_createOrUpdateSecurityClassification(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: CreateOrUpdateSecurityClassificationResult = CreateOrUpdateSecurityClassificationResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "createOrUpdateSecurityClassification failed: unknown result"));
                }
            }
        }
    }
    public recv_removeSecurityClassification(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: RemoveSecurityClassificationResult = RemoveSecurityClassificationResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "removeSecurityClassification failed: unknown result"));
                }
            }
        }
    }
    public recv_addSecurityClassificationsToUserGroups(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: AddSecurityClassificationsToUserGroupsResult = AddSecurityClassificationsToUserGroupsResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "addSecurityClassificationsToUserGroups failed: unknown result"));
                }
            }
        }
    }
    public recv_removeSecurityClassificationsFromUserGroups(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: RemoveSecurityClassificationsFromUserGroupsResult = RemoveSecurityClassificationsFromUserGroupsResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "removeSecurityClassificationsFromUserGroups failed: unknown result"));
                }
            }
        }
    }
    public recv_getAllSecurityClassificationsByUserOrGroup(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAllSecurityClassificationsByUserOrGroupResult = GetAllSecurityClassificationsByUserOrGroupResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAllSecurityClassificationsByUserOrGroup failed: unknown result"));
                }
            }
        }
    }
    public recv_getAllSecurityClassificationByPatternId(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAllSecurityClassificationByPatternIdResult = GetAllSecurityClassificationByPatternIdResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAllSecurityClassificationByPatternId failed: unknown result"));
                }
            }
        }
    }
    public recv_getAllSecurityClassificationByDocumentId(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAllSecurityClassificationByDocumentIdResult = GetAllSecurityClassificationByDocumentIdResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAllSecurityClassificationByDocumentId failed: unknown result"));
                }
            }
        }
    }
    public recv_addSecurityClassificationsToDocPattern(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: AddSecurityClassificationsToDocPatternResult = AddSecurityClassificationsToDocPatternResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "addSecurityClassificationsToDocPattern failed: unknown result"));
                }
            }
        }
    }
    public recv_removeSecurityClassificationsFromDocPattern(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: RemoveSecurityClassificationsFromDocPatternResult = RemoveSecurityClassificationsFromDocPatternResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "removeSecurityClassificationsFromDocPattern failed: unknown result"));
                }
            }
        }
    }
    public recv_addSecurityClassificationsToDocument(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: AddSecurityClassificationsToDocumentResult = AddSecurityClassificationsToDocumentResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "addSecurityClassificationsToDocument failed: unknown result"));
                }
            }
        }
    }
    public recv_changeSecurityClassificationsForDocument(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: ChangeSecurityClassificationsForDocumentResult = ChangeSecurityClassificationsForDocumentResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "changeSecurityClassificationsForDocument failed: unknown result"));
                }
            }
        }
    }
    public recv_removeSecurityClassificationsFromDocument(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: RemoveSecurityClassificationsFromDocumentResult = RemoveSecurityClassificationsFromDocumentResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "removeSecurityClassificationsFromDocument failed: unknown result"));
                }
            }
        }
    }
    public recv_getAllSecurityClassificationDependencies(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAllSecurityClassificationDependenciesResult = GetAllSecurityClassificationDependenciesResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAllSecurityClassificationDependencies failed: unknown result"));
                }
            }
        }
    }
    public recv_addSecurityClassificationDependencies(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: AddSecurityClassificationDependenciesResult = AddSecurityClassificationDependenciesResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "addSecurityClassificationDependencies failed: unknown result"));
                }
            }
        }
    }
    public recv_removeSecurityClassificationDependencies(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: RemoveSecurityClassificationDependenciesResult = RemoveSecurityClassificationDependenciesResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "removeSecurityClassificationDependencies failed: unknown result"));
                }
            }
        }
    }
}
export interface IHandler {
    getAllSecurityClassification(token: string, filter: __ROOT_NAMESPACE__.KazFilter): Array<__ROOT_NAMESPACE__.SecurityClassification> | Promise<Array<__ROOT_NAMESPACE__.SecurityClassification>>;
    getCountAllSecurityClassification(token: string, filter: __ROOT_NAMESPACE__.KazFilter): number | Promise<number>;
    createOrUpdateSecurityClassification(token: string, securityClassification: __ROOT_NAMESPACE__.SecurityClassification): __ROOT_NAMESPACE__.SecurityClassification | Promise<__ROOT_NAMESPACE__.SecurityClassification>;
    removeSecurityClassification(token: string, securityClassificationId: string): boolean | Promise<boolean>;
    addSecurityClassificationsToUserGroups(token: string, securityClassificationIds: Array<string>, userOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>): boolean | Promise<boolean>;
    removeSecurityClassificationsFromUserGroups(token: string, securityClassificationIds: Array<string>, userOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>): boolean | Promise<boolean>;
    getAllSecurityClassificationsByUserOrGroup(token: string, type: __ROOT_NAMESPACE__.UserOrGroupType, userOrGroupId: string, filter: __ROOT_NAMESPACE__.KazFilter): Array<__ROOT_NAMESPACE__.SecurityClassification> | Promise<Array<__ROOT_NAMESPACE__.SecurityClassification>>;
    getAllSecurityClassificationByPatternId(token: string, patternId: string, filter: __ROOT_NAMESPACE__.KazFilter): Array<__ROOT_NAMESPACE__.SecurityClassification> | Promise<Array<__ROOT_NAMESPACE__.SecurityClassification>>;
    getAllSecurityClassificationByDocumentId(token: string, documentId: string, filter: __ROOT_NAMESPACE__.KazFilter): Array<__ROOT_NAMESPACE__.SecurityClassification> | Promise<Array<__ROOT_NAMESPACE__.SecurityClassification>>;
    addSecurityClassificationsToDocPattern(token: string, securityClassificationsId: Array<string>, docPatternId: string): boolean | Promise<boolean>;
    removeSecurityClassificationsFromDocPattern(token: string, securityClassificationsId: Array<string>, docPatternId: string): boolean | Promise<boolean>;
    addSecurityClassificationsToDocument(token: string, securityClassificationsId: Array<string>, documentId: string, accessPolicy: __ROOT_NAMESPACE__.DocumentAccessPolicy): boolean | Promise<boolean>;
    changeSecurityClassificationsForDocument(token: string, addedSecurityClassificationsId: Array<string>, removedSecurityClassificationsId: Array<string>, documentId: string, accessPolicy: __ROOT_NAMESPACE__.DocumentAccessPolicy): boolean | Promise<boolean>;
    removeSecurityClassificationsFromDocument(token: string, securityClassificationsId: Array<string>, documentId: string, accessPolicy: __ROOT_NAMESPACE__.DocumentAccessPolicy): boolean | Promise<boolean>;
    getAllSecurityClassificationDependencies(token: string, securityClassificationId: string, filter: __ROOT_NAMESPACE__.KazFilter): Array<__ROOT_NAMESPACE__.SecurityClassification> | Promise<Array<__ROOT_NAMESPACE__.SecurityClassification>>;
    addSecurityClassificationDependencies(token: string, securityClassificationId: string, securityClassificationsId: Array<string>): boolean | Promise<boolean>;
    removeSecurityClassificationDependencies(token: string, securityClassificationId: string, securityClassificationsId: Array<string>): boolean | Promise<boolean>;
}
export class Processor {
    public _handler: IHandler;
    constructor(handler: IHandler) {
        this._handler = handler;
    }
    public process(input: thrift.TProtocol, output: thrift.TProtocol): void {
        const metadata: thrift.TMessage = input.readMessageBegin();
        const fname: string = metadata.fname;
        const requestId: number = metadata.rseqid;
        const methodName: string = "process_" + fname;
        switch (methodName) {
            case "process_getAllSecurityClassification": {
                this.process_getAllSecurityClassification(requestId, input, output);
                return;
            }
            case "process_getCountAllSecurityClassification": {
                this.process_getCountAllSecurityClassification(requestId, input, output);
                return;
            }
            case "process_createOrUpdateSecurityClassification": {
                this.process_createOrUpdateSecurityClassification(requestId, input, output);
                return;
            }
            case "process_removeSecurityClassification": {
                this.process_removeSecurityClassification(requestId, input, output);
                return;
            }
            case "process_addSecurityClassificationsToUserGroups": {
                this.process_addSecurityClassificationsToUserGroups(requestId, input, output);
                return;
            }
            case "process_removeSecurityClassificationsFromUserGroups": {
                this.process_removeSecurityClassificationsFromUserGroups(requestId, input, output);
                return;
            }
            case "process_getAllSecurityClassificationsByUserOrGroup": {
                this.process_getAllSecurityClassificationsByUserOrGroup(requestId, input, output);
                return;
            }
            case "process_getAllSecurityClassificationByPatternId": {
                this.process_getAllSecurityClassificationByPatternId(requestId, input, output);
                return;
            }
            case "process_getAllSecurityClassificationByDocumentId": {
                this.process_getAllSecurityClassificationByDocumentId(requestId, input, output);
                return;
            }
            case "process_addSecurityClassificationsToDocPattern": {
                this.process_addSecurityClassificationsToDocPattern(requestId, input, output);
                return;
            }
            case "process_removeSecurityClassificationsFromDocPattern": {
                this.process_removeSecurityClassificationsFromDocPattern(requestId, input, output);
                return;
            }
            case "process_addSecurityClassificationsToDocument": {
                this.process_addSecurityClassificationsToDocument(requestId, input, output);
                return;
            }
            case "process_changeSecurityClassificationsForDocument": {
                this.process_changeSecurityClassificationsForDocument(requestId, input, output);
                return;
            }
            case "process_removeSecurityClassificationsFromDocument": {
                this.process_removeSecurityClassificationsFromDocument(requestId, input, output);
                return;
            }
            case "process_getAllSecurityClassificationDependencies": {
                this.process_getAllSecurityClassificationDependencies(requestId, input, output);
                return;
            }
            case "process_addSecurityClassificationDependencies": {
                this.process_addSecurityClassificationDependencies(requestId, input, output);
                return;
            }
            case "process_removeSecurityClassificationDependencies": {
                this.process_removeSecurityClassificationDependencies(requestId, input, output);
                return;
            }
            default: {
                input.skip(thrift.Thrift.Type.STRUCT);
                input.readMessageEnd();
                const errMessage = "Unknown function " + fname;
                const err = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN_METHOD, errMessage);
                output.writeMessageBegin(fname, thrift.Thrift.MessageType.EXCEPTION, requestId);
                err.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        }
    }
    public process_getAllSecurityClassification(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<__ROOT_NAMESPACE__.SecurityClassification>>((resolve, reject): void => {
            try {
                const args: GetAllSecurityClassificationArgs = GetAllSecurityClassificationArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAllSecurityClassification(args.token, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<__ROOT_NAMESPACE__.SecurityClassification>): void => {
            const result: GetAllSecurityClassificationResult = new GetAllSecurityClassificationResult({ success: data });
            output.writeMessageBegin("getAllSecurityClassification", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetAllSecurityClassificationResult = new GetAllSecurityClassificationResult({ validError: err });
                output.writeMessageBegin("getAllSecurityClassification", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetAllSecurityClassificationResult = new GetAllSecurityClassificationResult({ error: err });
                output.writeMessageBegin("getAllSecurityClassification", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAllSecurityClassification", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getCountAllSecurityClassification(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<number>((resolve, reject): void => {
            try {
                const args: GetCountAllSecurityClassificationArgs = GetCountAllSecurityClassificationArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getCountAllSecurityClassification(args.token, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: number): void => {
            const result: GetCountAllSecurityClassificationResult = new GetCountAllSecurityClassificationResult({ success: data });
            output.writeMessageBegin("getCountAllSecurityClassification", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetCountAllSecurityClassificationResult = new GetCountAllSecurityClassificationResult({ validError: err });
                output.writeMessageBegin("getCountAllSecurityClassification", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetCountAllSecurityClassificationResult = new GetCountAllSecurityClassificationResult({ error: err });
                output.writeMessageBegin("getCountAllSecurityClassification", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getCountAllSecurityClassification", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_createOrUpdateSecurityClassification(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<__ROOT_NAMESPACE__.SecurityClassification>((resolve, reject): void => {
            try {
                const args: CreateOrUpdateSecurityClassificationArgs = CreateOrUpdateSecurityClassificationArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.createOrUpdateSecurityClassification(args.token, args.securityClassification));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: __ROOT_NAMESPACE__.SecurityClassification): void => {
            const result: CreateOrUpdateSecurityClassificationResult = new CreateOrUpdateSecurityClassificationResult({ success: data });
            output.writeMessageBegin("createOrUpdateSecurityClassification", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: CreateOrUpdateSecurityClassificationResult = new CreateOrUpdateSecurityClassificationResult({ validError: err });
                output.writeMessageBegin("createOrUpdateSecurityClassification", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: CreateOrUpdateSecurityClassificationResult = new CreateOrUpdateSecurityClassificationResult({ error: err });
                output.writeMessageBegin("createOrUpdateSecurityClassification", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("createOrUpdateSecurityClassification", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_removeSecurityClassification(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: RemoveSecurityClassificationArgs = RemoveSecurityClassificationArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.removeSecurityClassification(args.token, args.securityClassificationId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: RemoveSecurityClassificationResult = new RemoveSecurityClassificationResult({ success: data });
            output.writeMessageBegin("removeSecurityClassification", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: RemoveSecurityClassificationResult = new RemoveSecurityClassificationResult({ validError: err });
                output.writeMessageBegin("removeSecurityClassification", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: RemoveSecurityClassificationResult = new RemoveSecurityClassificationResult({ error: err });
                output.writeMessageBegin("removeSecurityClassification", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("removeSecurityClassification", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_addSecurityClassificationsToUserGroups(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: AddSecurityClassificationsToUserGroupsArgs = AddSecurityClassificationsToUserGroupsArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.addSecurityClassificationsToUserGroups(args.token, args.securityClassificationIds, args.userOrGroups));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: AddSecurityClassificationsToUserGroupsResult = new AddSecurityClassificationsToUserGroupsResult({ success: data });
            output.writeMessageBegin("addSecurityClassificationsToUserGroups", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: AddSecurityClassificationsToUserGroupsResult = new AddSecurityClassificationsToUserGroupsResult({ validError: err });
                output.writeMessageBegin("addSecurityClassificationsToUserGroups", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: AddSecurityClassificationsToUserGroupsResult = new AddSecurityClassificationsToUserGroupsResult({ error: err });
                output.writeMessageBegin("addSecurityClassificationsToUserGroups", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("addSecurityClassificationsToUserGroups", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_removeSecurityClassificationsFromUserGroups(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: RemoveSecurityClassificationsFromUserGroupsArgs = RemoveSecurityClassificationsFromUserGroupsArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.removeSecurityClassificationsFromUserGroups(args.token, args.securityClassificationIds, args.userOrGroups));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: RemoveSecurityClassificationsFromUserGroupsResult = new RemoveSecurityClassificationsFromUserGroupsResult({ success: data });
            output.writeMessageBegin("removeSecurityClassificationsFromUserGroups", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: RemoveSecurityClassificationsFromUserGroupsResult = new RemoveSecurityClassificationsFromUserGroupsResult({ validError: err });
                output.writeMessageBegin("removeSecurityClassificationsFromUserGroups", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: RemoveSecurityClassificationsFromUserGroupsResult = new RemoveSecurityClassificationsFromUserGroupsResult({ error: err });
                output.writeMessageBegin("removeSecurityClassificationsFromUserGroups", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("removeSecurityClassificationsFromUserGroups", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getAllSecurityClassificationsByUserOrGroup(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<__ROOT_NAMESPACE__.SecurityClassification>>((resolve, reject): void => {
            try {
                const args: GetAllSecurityClassificationsByUserOrGroupArgs = GetAllSecurityClassificationsByUserOrGroupArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAllSecurityClassificationsByUserOrGroup(args.token, args.type, args.userOrGroupId, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<__ROOT_NAMESPACE__.SecurityClassification>): void => {
            const result: GetAllSecurityClassificationsByUserOrGroupResult = new GetAllSecurityClassificationsByUserOrGroupResult({ success: data });
            output.writeMessageBegin("getAllSecurityClassificationsByUserOrGroup", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetAllSecurityClassificationsByUserOrGroupResult = new GetAllSecurityClassificationsByUserOrGroupResult({ validError: err });
                output.writeMessageBegin("getAllSecurityClassificationsByUserOrGroup", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetAllSecurityClassificationsByUserOrGroupResult = new GetAllSecurityClassificationsByUserOrGroupResult({ error: err });
                output.writeMessageBegin("getAllSecurityClassificationsByUserOrGroup", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAllSecurityClassificationsByUserOrGroup", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getAllSecurityClassificationByPatternId(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<__ROOT_NAMESPACE__.SecurityClassification>>((resolve, reject): void => {
            try {
                const args: GetAllSecurityClassificationByPatternIdArgs = GetAllSecurityClassificationByPatternIdArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAllSecurityClassificationByPatternId(args.token, args.patternId, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<__ROOT_NAMESPACE__.SecurityClassification>): void => {
            const result: GetAllSecurityClassificationByPatternIdResult = new GetAllSecurityClassificationByPatternIdResult({ success: data });
            output.writeMessageBegin("getAllSecurityClassificationByPatternId", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetAllSecurityClassificationByPatternIdResult = new GetAllSecurityClassificationByPatternIdResult({ validError: err });
                output.writeMessageBegin("getAllSecurityClassificationByPatternId", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetAllSecurityClassificationByPatternIdResult = new GetAllSecurityClassificationByPatternIdResult({ error: err });
                output.writeMessageBegin("getAllSecurityClassificationByPatternId", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAllSecurityClassificationByPatternId", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getAllSecurityClassificationByDocumentId(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<__ROOT_NAMESPACE__.SecurityClassification>>((resolve, reject): void => {
            try {
                const args: GetAllSecurityClassificationByDocumentIdArgs = GetAllSecurityClassificationByDocumentIdArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAllSecurityClassificationByDocumentId(args.token, args.documentId, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<__ROOT_NAMESPACE__.SecurityClassification>): void => {
            const result: GetAllSecurityClassificationByDocumentIdResult = new GetAllSecurityClassificationByDocumentIdResult({ success: data });
            output.writeMessageBegin("getAllSecurityClassificationByDocumentId", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetAllSecurityClassificationByDocumentIdResult = new GetAllSecurityClassificationByDocumentIdResult({ validError: err });
                output.writeMessageBegin("getAllSecurityClassificationByDocumentId", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetAllSecurityClassificationByDocumentIdResult = new GetAllSecurityClassificationByDocumentIdResult({ error: err });
                output.writeMessageBegin("getAllSecurityClassificationByDocumentId", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAllSecurityClassificationByDocumentId", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_addSecurityClassificationsToDocPattern(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: AddSecurityClassificationsToDocPatternArgs = AddSecurityClassificationsToDocPatternArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.addSecurityClassificationsToDocPattern(args.token, args.securityClassificationsId, args.docPatternId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: AddSecurityClassificationsToDocPatternResult = new AddSecurityClassificationsToDocPatternResult({ success: data });
            output.writeMessageBegin("addSecurityClassificationsToDocPattern", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: AddSecurityClassificationsToDocPatternResult = new AddSecurityClassificationsToDocPatternResult({ validError: err });
                output.writeMessageBegin("addSecurityClassificationsToDocPattern", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: AddSecurityClassificationsToDocPatternResult = new AddSecurityClassificationsToDocPatternResult({ error: err });
                output.writeMessageBegin("addSecurityClassificationsToDocPattern", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("addSecurityClassificationsToDocPattern", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_removeSecurityClassificationsFromDocPattern(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: RemoveSecurityClassificationsFromDocPatternArgs = RemoveSecurityClassificationsFromDocPatternArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.removeSecurityClassificationsFromDocPattern(args.token, args.securityClassificationsId, args.docPatternId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: RemoveSecurityClassificationsFromDocPatternResult = new RemoveSecurityClassificationsFromDocPatternResult({ success: data });
            output.writeMessageBegin("removeSecurityClassificationsFromDocPattern", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: RemoveSecurityClassificationsFromDocPatternResult = new RemoveSecurityClassificationsFromDocPatternResult({ validError: err });
                output.writeMessageBegin("removeSecurityClassificationsFromDocPattern", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: RemoveSecurityClassificationsFromDocPatternResult = new RemoveSecurityClassificationsFromDocPatternResult({ error: err });
                output.writeMessageBegin("removeSecurityClassificationsFromDocPattern", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("removeSecurityClassificationsFromDocPattern", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_addSecurityClassificationsToDocument(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: AddSecurityClassificationsToDocumentArgs = AddSecurityClassificationsToDocumentArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.addSecurityClassificationsToDocument(args.token, args.securityClassificationsId, args.documentId, args.accessPolicy));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: AddSecurityClassificationsToDocumentResult = new AddSecurityClassificationsToDocumentResult({ success: data });
            output.writeMessageBegin("addSecurityClassificationsToDocument", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: AddSecurityClassificationsToDocumentResult = new AddSecurityClassificationsToDocumentResult({ validError: err });
                output.writeMessageBegin("addSecurityClassificationsToDocument", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: AddSecurityClassificationsToDocumentResult = new AddSecurityClassificationsToDocumentResult({ error: err });
                output.writeMessageBegin("addSecurityClassificationsToDocument", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("addSecurityClassificationsToDocument", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_changeSecurityClassificationsForDocument(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: ChangeSecurityClassificationsForDocumentArgs = ChangeSecurityClassificationsForDocumentArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.changeSecurityClassificationsForDocument(args.token, args.addedSecurityClassificationsId, args.removedSecurityClassificationsId, args.documentId, args.accessPolicy));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: ChangeSecurityClassificationsForDocumentResult = new ChangeSecurityClassificationsForDocumentResult({ success: data });
            output.writeMessageBegin("changeSecurityClassificationsForDocument", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: ChangeSecurityClassificationsForDocumentResult = new ChangeSecurityClassificationsForDocumentResult({ validError: err });
                output.writeMessageBegin("changeSecurityClassificationsForDocument", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: ChangeSecurityClassificationsForDocumentResult = new ChangeSecurityClassificationsForDocumentResult({ error: err });
                output.writeMessageBegin("changeSecurityClassificationsForDocument", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("changeSecurityClassificationsForDocument", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_removeSecurityClassificationsFromDocument(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: RemoveSecurityClassificationsFromDocumentArgs = RemoveSecurityClassificationsFromDocumentArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.removeSecurityClassificationsFromDocument(args.token, args.securityClassificationsId, args.documentId, args.accessPolicy));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: RemoveSecurityClassificationsFromDocumentResult = new RemoveSecurityClassificationsFromDocumentResult({ success: data });
            output.writeMessageBegin("removeSecurityClassificationsFromDocument", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: RemoveSecurityClassificationsFromDocumentResult = new RemoveSecurityClassificationsFromDocumentResult({ validError: err });
                output.writeMessageBegin("removeSecurityClassificationsFromDocument", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: RemoveSecurityClassificationsFromDocumentResult = new RemoveSecurityClassificationsFromDocumentResult({ error: err });
                output.writeMessageBegin("removeSecurityClassificationsFromDocument", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("removeSecurityClassificationsFromDocument", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getAllSecurityClassificationDependencies(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<__ROOT_NAMESPACE__.SecurityClassification>>((resolve, reject): void => {
            try {
                const args: GetAllSecurityClassificationDependenciesArgs = GetAllSecurityClassificationDependenciesArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAllSecurityClassificationDependencies(args.token, args.securityClassificationId, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<__ROOT_NAMESPACE__.SecurityClassification>): void => {
            const result: GetAllSecurityClassificationDependenciesResult = new GetAllSecurityClassificationDependenciesResult({ success: data });
            output.writeMessageBegin("getAllSecurityClassificationDependencies", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetAllSecurityClassificationDependenciesResult = new GetAllSecurityClassificationDependenciesResult({ validError: err });
                output.writeMessageBegin("getAllSecurityClassificationDependencies", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetAllSecurityClassificationDependenciesResult = new GetAllSecurityClassificationDependenciesResult({ error: err });
                output.writeMessageBegin("getAllSecurityClassificationDependencies", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAllSecurityClassificationDependencies", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_addSecurityClassificationDependencies(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: AddSecurityClassificationDependenciesArgs = AddSecurityClassificationDependenciesArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.addSecurityClassificationDependencies(args.token, args.securityClassificationId, args.securityClassificationsId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: AddSecurityClassificationDependenciesResult = new AddSecurityClassificationDependenciesResult({ success: data });
            output.writeMessageBegin("addSecurityClassificationDependencies", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: AddSecurityClassificationDependenciesResult = new AddSecurityClassificationDependenciesResult({ validError: err });
                output.writeMessageBegin("addSecurityClassificationDependencies", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: AddSecurityClassificationDependenciesResult = new AddSecurityClassificationDependenciesResult({ error: err });
                output.writeMessageBegin("addSecurityClassificationDependencies", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("addSecurityClassificationDependencies", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_removeSecurityClassificationDependencies(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: RemoveSecurityClassificationDependenciesArgs = RemoveSecurityClassificationDependenciesArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.removeSecurityClassificationDependencies(args.token, args.securityClassificationId, args.securityClassificationsId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: RemoveSecurityClassificationDependenciesResult = new RemoveSecurityClassificationDependenciesResult({ success: data });
            output.writeMessageBegin("removeSecurityClassificationDependencies", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: RemoveSecurityClassificationDependenciesResult = new RemoveSecurityClassificationDependenciesResult({ validError: err });
                output.writeMessageBegin("removeSecurityClassificationDependencies", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: RemoveSecurityClassificationDependenciesResult = new RemoveSecurityClassificationDependenciesResult({ error: err });
                output.writeMessageBegin("removeSecurityClassificationDependencies", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("removeSecurityClassificationDependencies", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
}

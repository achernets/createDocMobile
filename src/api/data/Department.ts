/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import { Int64 } from "thrift";
import * as thrift from "thrift";
export interface IDepartmentArgs {
    id?: string;
    parentId?: string;
    name?: string;
    orgStructureCode?: string;
    orgStructureId?: string;
    userCount?: number | Int64;
    path?: string;
    main?: boolean;
    order?: number;
    rank?: number;
    shortName?: string;
}
export class Department {
    public id?: string;
    public parentId?: string;
    public name?: string;
    public orgStructureCode?: string;
    public orgStructureId?: string;
    public userCount?: Int64;
    public path?: string;
    public main?: boolean;
    public order?: number;
    public rank?: number;
    public shortName?: string;
    constructor(args?: IDepartmentArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.parentId != null) {
            this.parentId = args.parentId;
        }
        if (args != null && args.name != null) {
            this.name = args.name;
        }
        if (args != null && args.orgStructureCode != null) {
            this.orgStructureCode = args.orgStructureCode;
        }
        if (args != null && args.orgStructureId != null) {
            this.orgStructureId = args.orgStructureId;
        }
        if (args != null && args.userCount != null) {
            if (typeof args.userCount === "number") {
                this.userCount = new Int64(args.userCount);
            }
            else {
                this.userCount = args.userCount;
            }
        }
        if (args != null && args.path != null) {
            this.path = args.path;
        }
        if (args != null && args.main != null) {
            this.main = args.main;
        }
        if (args != null && args.order != null) {
            this.order = args.order;
        }
        if (args != null && args.rank != null) {
            this.rank = args.rank;
        }
        if (args != null && args.shortName != null) {
            this.shortName = args.shortName;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("Department");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.parentId != null) {
            output.writeFieldBegin("parentId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.parentId);
            output.writeFieldEnd();
        }
        if (this.name != null) {
            output.writeFieldBegin("name", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.name);
            output.writeFieldEnd();
        }
        if (this.orgStructureCode != null) {
            output.writeFieldBegin("orgStructureCode", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.orgStructureCode);
            output.writeFieldEnd();
        }
        if (this.orgStructureId != null) {
            output.writeFieldBegin("orgStructureId", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.orgStructureId);
            output.writeFieldEnd();
        }
        if (this.userCount != null) {
            output.writeFieldBegin("userCount", thrift.Thrift.Type.I64, 6);
            output.writeI64(this.userCount);
            output.writeFieldEnd();
        }
        if (this.path != null) {
            output.writeFieldBegin("path", thrift.Thrift.Type.STRING, 7);
            output.writeString(this.path);
            output.writeFieldEnd();
        }
        if (this.main != null) {
            output.writeFieldBegin("main", thrift.Thrift.Type.BOOL, 8);
            output.writeBool(this.main);
            output.writeFieldEnd();
        }
        if (this.order != null) {
            output.writeFieldBegin("order", thrift.Thrift.Type.I32, 9);
            output.writeI32(this.order);
            output.writeFieldEnd();
        }
        if (this.rank != null) {
            output.writeFieldBegin("rank", thrift.Thrift.Type.I32, 10);
            output.writeI32(this.rank);
            output.writeFieldEnd();
        }
        if (this.shortName != null) {
            output.writeFieldBegin("shortName", thrift.Thrift.Type.STRING, 11);
            output.writeString(this.shortName);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): Department {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.id = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.parentId = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.name = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.orgStructureCode = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.orgStructureId = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_6: Int64 = input.readI64();
                        _args.userCount = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_7: string = input.readString();
                        _args.path = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_8: boolean = input.readBool();
                        _args.main = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_9: number = input.readI32();
                        _args.order = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_10: number = input.readI32();
                        _args.rank = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_11: string = input.readString();
                        _args.shortName = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new Department(_args);
    }
}

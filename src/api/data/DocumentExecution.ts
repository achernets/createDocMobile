/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import { Int64 } from "thrift";
import * as thrift from "thrift";
import * as __ROOT_NAMESPACE__ from "./";
import * as ExecutionReassignType from "./ExecutionReassignType";
import * as DocPatternStageActionType from "./DocPatternStageActionType";
import * as DocumentExecutionOwnerType from "./DocumentExecutionOwnerType";
import * as DocumentComment from "./DocumentComment";
import * as DocumentExecutionDelegateInfo from "./DocumentExecutionDelegateInfo";
import * as DocumentExecutionStatus from "./DocumentExecutionStatus";
import * as ExecutionPermissions from "./ExecutionPermissions";
export interface IDocumentExecutionArgs {
    id?: string;
    createDate?: number | Int64;
    deleteDate?: number | Int64;
    parentId?: string;
    path?: string;
    documentId?: string;
    stageId?: string;
    iteration?: number;
    userOGroup?: __ROOT_NAMESPACE__.UserOrGroup;
    reassignType?: ExecutionReassignType.ExecutionReassignType;
    deadlineDateTime?: number | Int64;
    executionDateTime?: number | Int64;
    reassignedDateTime?: number | Int64;
    actionType?: DocPatternStageActionType.DocPatternStageActionType;
    informedAboutDeadline?: boolean;
    ownerType?: DocumentExecutionOwnerType.DocumentExecutionOwnerType;
    decision?: string;
    countAttachment?: number;
    digitalSignId?: string;
    closedBy?: string;
    taskComment?: string;
    originalUser?: __ROOT_NAMESPACE__.UserOrGroup;
    comments?: Array<DocumentComment.DocumentComment>;
    internalCreateIteration?: number;
    internalActionIteration?: number;
    periodical?: boolean;
    startPeriod?: number | Int64;
    nextStartPeriod?: string;
    periodicJiraEndDate?: string;
    periodicEndDate?: number | Int64;
    delegateInfo?: Array<DocumentExecutionDelegateInfo.DocumentExecutionDelegateInfo>;
    status?: DocumentExecutionStatus.DocumentExecutionStatus;
    handoverUser?: __ROOT_NAMESPACE__.UserOrGroup;
    taskCommentUpdateDate?: number | Int64;
    taskCommentUpdateBy?: string;
    reassignDigitalSignId?: string;
    requireMyParticipation?: boolean;
    executionPermissions?: ExecutionPermissions.ExecutionPermissions;
    inWork?: boolean;
    wasInWork?: boolean;
}
export class DocumentExecution {
    public id?: string;
    public createDate?: Int64;
    public deleteDate?: Int64;
    public parentId?: string;
    public path?: string;
    public documentId?: string;
    public stageId?: string;
    public iteration?: number;
    public userOGroup?: __ROOT_NAMESPACE__.UserOrGroup;
    public reassignType?: ExecutionReassignType.ExecutionReassignType;
    public deadlineDateTime?: Int64;
    public executionDateTime?: Int64;
    public reassignedDateTime?: Int64;
    public actionType?: DocPatternStageActionType.DocPatternStageActionType;
    public informedAboutDeadline?: boolean;
    public ownerType?: DocumentExecutionOwnerType.DocumentExecutionOwnerType;
    public decision?: string;
    public countAttachment?: number;
    public digitalSignId?: string;
    public closedBy?: string;
    public taskComment?: string;
    public originalUser?: __ROOT_NAMESPACE__.UserOrGroup;
    public comments?: Array<DocumentComment.DocumentComment>;
    public internalCreateIteration?: number;
    public internalActionIteration?: number;
    public periodical?: boolean;
    public startPeriod?: Int64;
    public nextStartPeriod?: string;
    public periodicJiraEndDate?: string;
    public periodicEndDate?: Int64;
    public delegateInfo?: Array<DocumentExecutionDelegateInfo.DocumentExecutionDelegateInfo>;
    public status?: DocumentExecutionStatus.DocumentExecutionStatus;
    public handoverUser?: __ROOT_NAMESPACE__.UserOrGroup;
    public taskCommentUpdateDate?: Int64;
    public taskCommentUpdateBy?: string;
    public reassignDigitalSignId?: string;
    public requireMyParticipation?: boolean;
    public executionPermissions?: ExecutionPermissions.ExecutionPermissions;
    public inWork?: boolean;
    public wasInWork?: boolean;
    constructor(args?: IDocumentExecutionArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.createDate != null) {
            if (typeof args.createDate === "number") {
                this.createDate = new Int64(args.createDate);
            }
            else {
                this.createDate = args.createDate;
            }
        }
        if (args != null && args.deleteDate != null) {
            if (typeof args.deleteDate === "number") {
                this.deleteDate = new Int64(args.deleteDate);
            }
            else {
                this.deleteDate = args.deleteDate;
            }
        }
        if (args != null && args.parentId != null) {
            this.parentId = args.parentId;
        }
        if (args != null && args.path != null) {
            this.path = args.path;
        }
        if (args != null && args.documentId != null) {
            this.documentId = args.documentId;
        }
        if (args != null && args.stageId != null) {
            this.stageId = args.stageId;
        }
        if (args != null && args.iteration != null) {
            this.iteration = args.iteration;
        }
        if (args != null && args.userOGroup != null) {
            this.userOGroup = args.userOGroup;
        }
        if (args != null && args.reassignType != null) {
            this.reassignType = args.reassignType;
        }
        if (args != null && args.deadlineDateTime != null) {
            if (typeof args.deadlineDateTime === "number") {
                this.deadlineDateTime = new Int64(args.deadlineDateTime);
            }
            else {
                this.deadlineDateTime = args.deadlineDateTime;
            }
        }
        if (args != null && args.executionDateTime != null) {
            if (typeof args.executionDateTime === "number") {
                this.executionDateTime = new Int64(args.executionDateTime);
            }
            else {
                this.executionDateTime = args.executionDateTime;
            }
        }
        if (args != null && args.reassignedDateTime != null) {
            if (typeof args.reassignedDateTime === "number") {
                this.reassignedDateTime = new Int64(args.reassignedDateTime);
            }
            else {
                this.reassignedDateTime = args.reassignedDateTime;
            }
        }
        if (args != null && args.actionType != null) {
            this.actionType = args.actionType;
        }
        if (args != null && args.informedAboutDeadline != null) {
            this.informedAboutDeadline = args.informedAboutDeadline;
        }
        if (args != null && args.ownerType != null) {
            this.ownerType = args.ownerType;
        }
        if (args != null && args.decision != null) {
            this.decision = args.decision;
        }
        if (args != null && args.countAttachment != null) {
            this.countAttachment = args.countAttachment;
        }
        if (args != null && args.digitalSignId != null) {
            this.digitalSignId = args.digitalSignId;
        }
        if (args != null && args.closedBy != null) {
            this.closedBy = args.closedBy;
        }
        if (args != null && args.taskComment != null) {
            this.taskComment = args.taskComment;
        }
        if (args != null && args.originalUser != null) {
            this.originalUser = args.originalUser;
        }
        if (args != null && args.comments != null) {
            this.comments = args.comments;
        }
        if (args != null && args.internalCreateIteration != null) {
            this.internalCreateIteration = args.internalCreateIteration;
        }
        if (args != null && args.internalActionIteration != null) {
            this.internalActionIteration = args.internalActionIteration;
        }
        if (args != null && args.periodical != null) {
            this.periodical = args.periodical;
        }
        if (args != null && args.startPeriod != null) {
            if (typeof args.startPeriod === "number") {
                this.startPeriod = new Int64(args.startPeriod);
            }
            else {
                this.startPeriod = args.startPeriod;
            }
        }
        if (args != null && args.nextStartPeriod != null) {
            this.nextStartPeriod = args.nextStartPeriod;
        }
        if (args != null && args.periodicJiraEndDate != null) {
            this.periodicJiraEndDate = args.periodicJiraEndDate;
        }
        if (args != null && args.periodicEndDate != null) {
            if (typeof args.periodicEndDate === "number") {
                this.periodicEndDate = new Int64(args.periodicEndDate);
            }
            else {
                this.periodicEndDate = args.periodicEndDate;
            }
        }
        if (args != null && args.delegateInfo != null) {
            this.delegateInfo = args.delegateInfo;
        }
        if (args != null && args.status != null) {
            this.status = args.status;
        }
        if (args != null && args.handoverUser != null) {
            this.handoverUser = args.handoverUser;
        }
        if (args != null && args.taskCommentUpdateDate != null) {
            if (typeof args.taskCommentUpdateDate === "number") {
                this.taskCommentUpdateDate = new Int64(args.taskCommentUpdateDate);
            }
            else {
                this.taskCommentUpdateDate = args.taskCommentUpdateDate;
            }
        }
        if (args != null && args.taskCommentUpdateBy != null) {
            this.taskCommentUpdateBy = args.taskCommentUpdateBy;
        }
        if (args != null && args.reassignDigitalSignId != null) {
            this.reassignDigitalSignId = args.reassignDigitalSignId;
        }
        if (args != null && args.requireMyParticipation != null) {
            this.requireMyParticipation = args.requireMyParticipation;
        }
        if (args != null && args.executionPermissions != null) {
            this.executionPermissions = args.executionPermissions;
        }
        if (args != null && args.inWork != null) {
            this.inWork = args.inWork;
        }
        if (args != null && args.wasInWork != null) {
            this.wasInWork = args.wasInWork;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("DocumentExecution");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.createDate != null) {
            output.writeFieldBegin("createDate", thrift.Thrift.Type.I64, 2);
            output.writeI64(this.createDate);
            output.writeFieldEnd();
        }
        if (this.deleteDate != null) {
            output.writeFieldBegin("deleteDate", thrift.Thrift.Type.I64, 3);
            output.writeI64(this.deleteDate);
            output.writeFieldEnd();
        }
        if (this.parentId != null) {
            output.writeFieldBegin("parentId", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.parentId);
            output.writeFieldEnd();
        }
        if (this.path != null) {
            output.writeFieldBegin("path", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.path);
            output.writeFieldEnd();
        }
        if (this.documentId != null) {
            output.writeFieldBegin("documentId", thrift.Thrift.Type.STRING, 6);
            output.writeString(this.documentId);
            output.writeFieldEnd();
        }
        if (this.stageId != null) {
            output.writeFieldBegin("stageId", thrift.Thrift.Type.STRING, 7);
            output.writeString(this.stageId);
            output.writeFieldEnd();
        }
        if (this.iteration != null) {
            output.writeFieldBegin("iteration", thrift.Thrift.Type.I32, 8);
            output.writeI32(this.iteration);
            output.writeFieldEnd();
        }
        if (this.userOGroup != null) {
            output.writeFieldBegin("userOGroup", thrift.Thrift.Type.STRUCT, 9);
            this.userOGroup.write(output);
            output.writeFieldEnd();
        }
        if (this.reassignType != null) {
            output.writeFieldBegin("reassignType", thrift.Thrift.Type.I32, 10);
            output.writeI32(this.reassignType);
            output.writeFieldEnd();
        }
        if (this.deadlineDateTime != null) {
            output.writeFieldBegin("deadlineDateTime", thrift.Thrift.Type.I64, 11);
            output.writeI64(this.deadlineDateTime);
            output.writeFieldEnd();
        }
        if (this.executionDateTime != null) {
            output.writeFieldBegin("executionDateTime", thrift.Thrift.Type.I64, 12);
            output.writeI64(this.executionDateTime);
            output.writeFieldEnd();
        }
        if (this.reassignedDateTime != null) {
            output.writeFieldBegin("reassignedDateTime", thrift.Thrift.Type.I64, 13);
            output.writeI64(this.reassignedDateTime);
            output.writeFieldEnd();
        }
        if (this.actionType != null) {
            output.writeFieldBegin("actionType", thrift.Thrift.Type.I32, 14);
            output.writeI32(this.actionType);
            output.writeFieldEnd();
        }
        if (this.informedAboutDeadline != null) {
            output.writeFieldBegin("informedAboutDeadline", thrift.Thrift.Type.BOOL, 15);
            output.writeBool(this.informedAboutDeadline);
            output.writeFieldEnd();
        }
        if (this.ownerType != null) {
            output.writeFieldBegin("ownerType", thrift.Thrift.Type.I32, 16);
            output.writeI32(this.ownerType);
            output.writeFieldEnd();
        }
        if (this.decision != null) {
            output.writeFieldBegin("decision", thrift.Thrift.Type.STRING, 17);
            output.writeString(this.decision);
            output.writeFieldEnd();
        }
        if (this.countAttachment != null) {
            output.writeFieldBegin("countAttachment", thrift.Thrift.Type.I32, 18);
            output.writeI32(this.countAttachment);
            output.writeFieldEnd();
        }
        if (this.digitalSignId != null) {
            output.writeFieldBegin("digitalSignId", thrift.Thrift.Type.STRING, 19);
            output.writeString(this.digitalSignId);
            output.writeFieldEnd();
        }
        if (this.closedBy != null) {
            output.writeFieldBegin("closedBy", thrift.Thrift.Type.STRING, 20);
            output.writeString(this.closedBy);
            output.writeFieldEnd();
        }
        if (this.taskComment != null) {
            output.writeFieldBegin("taskComment", thrift.Thrift.Type.STRING, 21);
            output.writeString(this.taskComment);
            output.writeFieldEnd();
        }
        if (this.originalUser != null) {
            output.writeFieldBegin("originalUser", thrift.Thrift.Type.STRUCT, 22);
            this.originalUser.write(output);
            output.writeFieldEnd();
        }
        if (this.comments != null) {
            output.writeFieldBegin("comments", thrift.Thrift.Type.LIST, 23);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.comments.length);
            this.comments.forEach((value_1: DocumentComment.DocumentComment): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.internalCreateIteration != null) {
            output.writeFieldBegin("internalCreateIteration", thrift.Thrift.Type.I32, 24);
            output.writeI32(this.internalCreateIteration);
            output.writeFieldEnd();
        }
        if (this.internalActionIteration != null) {
            output.writeFieldBegin("internalActionIteration", thrift.Thrift.Type.I32, 25);
            output.writeI32(this.internalActionIteration);
            output.writeFieldEnd();
        }
        if (this.periodical != null) {
            output.writeFieldBegin("periodical", thrift.Thrift.Type.BOOL, 26);
            output.writeBool(this.periodical);
            output.writeFieldEnd();
        }
        if (this.startPeriod != null) {
            output.writeFieldBegin("startPeriod", thrift.Thrift.Type.I64, 27);
            output.writeI64(this.startPeriod);
            output.writeFieldEnd();
        }
        if (this.nextStartPeriod != null) {
            output.writeFieldBegin("nextStartPeriod", thrift.Thrift.Type.STRING, 28);
            output.writeString(this.nextStartPeriod);
            output.writeFieldEnd();
        }
        if (this.periodicJiraEndDate != null) {
            output.writeFieldBegin("periodicJiraEndDate", thrift.Thrift.Type.STRING, 29);
            output.writeString(this.periodicJiraEndDate);
            output.writeFieldEnd();
        }
        if (this.periodicEndDate != null) {
            output.writeFieldBegin("periodicEndDate", thrift.Thrift.Type.I64, 30);
            output.writeI64(this.periodicEndDate);
            output.writeFieldEnd();
        }
        if (this.delegateInfo != null) {
            output.writeFieldBegin("delegateInfo", thrift.Thrift.Type.LIST, 31);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.delegateInfo.length);
            this.delegateInfo.forEach((value_2: DocumentExecutionDelegateInfo.DocumentExecutionDelegateInfo): void => {
                value_2.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.status != null) {
            output.writeFieldBegin("status", thrift.Thrift.Type.I32, 32);
            output.writeI32(this.status);
            output.writeFieldEnd();
        }
        if (this.handoverUser != null) {
            output.writeFieldBegin("handoverUser", thrift.Thrift.Type.STRUCT, 33);
            this.handoverUser.write(output);
            output.writeFieldEnd();
        }
        if (this.taskCommentUpdateDate != null) {
            output.writeFieldBegin("taskCommentUpdateDate", thrift.Thrift.Type.I64, 34);
            output.writeI64(this.taskCommentUpdateDate);
            output.writeFieldEnd();
        }
        if (this.taskCommentUpdateBy != null) {
            output.writeFieldBegin("taskCommentUpdateBy", thrift.Thrift.Type.STRING, 35);
            output.writeString(this.taskCommentUpdateBy);
            output.writeFieldEnd();
        }
        if (this.reassignDigitalSignId != null) {
            output.writeFieldBegin("reassignDigitalSignId", thrift.Thrift.Type.STRING, 36);
            output.writeString(this.reassignDigitalSignId);
            output.writeFieldEnd();
        }
        if (this.requireMyParticipation != null) {
            output.writeFieldBegin("requireMyParticipation", thrift.Thrift.Type.BOOL, 37);
            output.writeBool(this.requireMyParticipation);
            output.writeFieldEnd();
        }
        if (this.executionPermissions != null) {
            output.writeFieldBegin("executionPermissions", thrift.Thrift.Type.STRUCT, 38);
            this.executionPermissions.write(output);
            output.writeFieldEnd();
        }
        if (this.inWork != null) {
            output.writeFieldBegin("inWork", thrift.Thrift.Type.BOOL, 39);
            output.writeBool(this.inWork);
            output.writeFieldEnd();
        }
        if (this.wasInWork != null) {
            output.writeFieldBegin("wasInWork", thrift.Thrift.Type.BOOL, 40);
            output.writeBool(this.wasInWork);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): DocumentExecution {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.id = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_4: Int64 = input.readI64();
                        _args.createDate = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_5: Int64 = input.readI64();
                        _args.deleteDate = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.parentId = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_7: string = input.readString();
                        _args.path = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_8: string = input.readString();
                        _args.documentId = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_9: string = input.readString();
                        _args.stageId = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_10: number = input.readI32();
                        _args.iteration = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_11: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                        _args.userOGroup = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_12: ExecutionReassignType.ExecutionReassignType = input.readI32();
                        _args.reassignType = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_13: Int64 = input.readI64();
                        _args.deadlineDateTime = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_14: Int64 = input.readI64();
                        _args.executionDateTime = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_15: Int64 = input.readI64();
                        _args.reassignedDateTime = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_16: DocPatternStageActionType.DocPatternStageActionType = input.readI32();
                        _args.actionType = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_17: boolean = input.readBool();
                        _args.informedAboutDeadline = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_18: DocumentExecutionOwnerType.DocumentExecutionOwnerType = input.readI32();
                        _args.ownerType = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 17:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_19: string = input.readString();
                        _args.decision = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 18:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_20: number = input.readI32();
                        _args.countAttachment = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 19:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_21: string = input.readString();
                        _args.digitalSignId = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 20:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_22: string = input.readString();
                        _args.closedBy = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 21:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_23: string = input.readString();
                        _args.taskComment = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 22:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_24: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                        _args.originalUser = value_24;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 23:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_25: Array<DocumentComment.DocumentComment> = new Array<DocumentComment.DocumentComment>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_26: DocumentComment.DocumentComment = DocumentComment.DocumentComment.read(input);
                            value_25.push(value_26);
                        }
                        input.readListEnd();
                        _args.comments = value_25;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 24:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_27: number = input.readI32();
                        _args.internalCreateIteration = value_27;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 25:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_28: number = input.readI32();
                        _args.internalActionIteration = value_28;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 26:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_29: boolean = input.readBool();
                        _args.periodical = value_29;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 27:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_30: Int64 = input.readI64();
                        _args.startPeriod = value_30;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 28:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_31: string = input.readString();
                        _args.nextStartPeriod = value_31;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 29:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_32: string = input.readString();
                        _args.periodicJiraEndDate = value_32;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 30:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_33: Int64 = input.readI64();
                        _args.periodicEndDate = value_33;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 31:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_34: Array<DocumentExecutionDelegateInfo.DocumentExecutionDelegateInfo> = new Array<DocumentExecutionDelegateInfo.DocumentExecutionDelegateInfo>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_35: DocumentExecutionDelegateInfo.DocumentExecutionDelegateInfo = DocumentExecutionDelegateInfo.DocumentExecutionDelegateInfo.read(input);
                            value_34.push(value_35);
                        }
                        input.readListEnd();
                        _args.delegateInfo = value_34;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 32:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_36: DocumentExecutionStatus.DocumentExecutionStatus = input.readI32();
                        _args.status = value_36;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 33:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_37: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                        _args.handoverUser = value_37;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 34:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_38: Int64 = input.readI64();
                        _args.taskCommentUpdateDate = value_38;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 35:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_39: string = input.readString();
                        _args.taskCommentUpdateBy = value_39;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 36:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_40: string = input.readString();
                        _args.reassignDigitalSignId = value_40;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 37:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_41: boolean = input.readBool();
                        _args.requireMyParticipation = value_41;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 38:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_42: ExecutionPermissions.ExecutionPermissions = ExecutionPermissions.ExecutionPermissions.read(input);
                        _args.executionPermissions = value_42;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 39:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_43: boolean = input.readBool();
                        _args.inWork = value_43;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 40:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_44: boolean = input.readBool();
                        _args.wasInWork = value_44;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new DocumentExecution(_args);
    }
}

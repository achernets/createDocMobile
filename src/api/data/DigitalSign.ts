/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as DigitalSignDetails from "./DigitalSignDetails";
import * as __ROOT_NAMESPACE__ from "./";
export interface IDigitalSignArgs {
    id?: string;
    documentId?: string;
    attachmentId?: string;
    methodName?: string;
    stageId?: string;
    iteration?: number;
    signDetails?: Array<DigitalSignDetails.DigitalSignDetails>;
    signProviderType?: __ROOT_NAMESPACE__.SignProviderType;
}
export class DigitalSign {
    public id?: string;
    public documentId?: string;
    public attachmentId?: string;
    public methodName?: string;
    public stageId?: string;
    public iteration?: number;
    public signDetails?: Array<DigitalSignDetails.DigitalSignDetails>;
    public signProviderType?: __ROOT_NAMESPACE__.SignProviderType;
    constructor(args?: IDigitalSignArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.documentId != null) {
            this.documentId = args.documentId;
        }
        if (args != null && args.attachmentId != null) {
            this.attachmentId = args.attachmentId;
        }
        if (args != null && args.methodName != null) {
            this.methodName = args.methodName;
        }
        if (args != null && args.stageId != null) {
            this.stageId = args.stageId;
        }
        if (args != null && args.iteration != null) {
            this.iteration = args.iteration;
        }
        if (args != null && args.signDetails != null) {
            this.signDetails = args.signDetails;
        }
        if (args != null && args.signProviderType != null) {
            this.signProviderType = args.signProviderType;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("DigitalSign");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.documentId != null) {
            output.writeFieldBegin("documentId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.documentId);
            output.writeFieldEnd();
        }
        if (this.attachmentId != null) {
            output.writeFieldBegin("attachmentId", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.attachmentId);
            output.writeFieldEnd();
        }
        if (this.methodName != null) {
            output.writeFieldBegin("methodName", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.methodName);
            output.writeFieldEnd();
        }
        if (this.stageId != null) {
            output.writeFieldBegin("stageId", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.stageId);
            output.writeFieldEnd();
        }
        if (this.iteration != null) {
            output.writeFieldBegin("iteration", thrift.Thrift.Type.I32, 6);
            output.writeI32(this.iteration);
            output.writeFieldEnd();
        }
        if (this.signDetails != null) {
            output.writeFieldBegin("signDetails", thrift.Thrift.Type.LIST, 7);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.signDetails.length);
            this.signDetails.forEach((value_1: DigitalSignDetails.DigitalSignDetails): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.signProviderType != null) {
            output.writeFieldBegin("signProviderType", thrift.Thrift.Type.I32, 8);
            output.writeI32(this.signProviderType);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): DigitalSign {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.id = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.documentId = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.attachmentId = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.methodName = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.stageId = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_7: number = input.readI32();
                        _args.iteration = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_8: Array<DigitalSignDetails.DigitalSignDetails> = new Array<DigitalSignDetails.DigitalSignDetails>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_9: DigitalSignDetails.DigitalSignDetails = DigitalSignDetails.DigitalSignDetails.read(input);
                            value_8.push(value_9);
                        }
                        input.readListEnd();
                        _args.signDetails = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_10: __ROOT_NAMESPACE__.SignProviderType = input.readI32();
                        _args.signProviderType = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new DigitalSign(_args);
    }
}

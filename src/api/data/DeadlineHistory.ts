/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import { Int64 } from "thrift";
import * as thrift from "thrift";
import * as __ROOT_NAMESPACE__ from "./";
import * as Document from "./Document";
import * as DocumentExecution from "./DocumentExecution";
export interface IDeadlineHistoryArgs {
    id?: string;
    createDate?: number | Int64;
    creator?: __ROOT_NAMESPACE__.UserOrGroup;
    document?: Document.Document;
    documentExecution?: DocumentExecution.DocumentExecution;
    oldDeadlineDate?: number | Int64;
    theNewDeadlineDate?: number | Int64;
}
export class DeadlineHistory {
    public id?: string;
    public createDate?: Int64;
    public creator?: __ROOT_NAMESPACE__.UserOrGroup;
    public document?: Document.Document;
    public documentExecution?: DocumentExecution.DocumentExecution;
    public oldDeadlineDate?: Int64;
    public theNewDeadlineDate?: Int64;
    constructor(args?: IDeadlineHistoryArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.createDate != null) {
            if (typeof args.createDate === "number") {
                this.createDate = new Int64(args.createDate);
            }
            else {
                this.createDate = args.createDate;
            }
        }
        if (args != null && args.creator != null) {
            this.creator = args.creator;
        }
        if (args != null && args.document != null) {
            this.document = args.document;
        }
        if (args != null && args.documentExecution != null) {
            this.documentExecution = args.documentExecution;
        }
        if (args != null && args.oldDeadlineDate != null) {
            if (typeof args.oldDeadlineDate === "number") {
                this.oldDeadlineDate = new Int64(args.oldDeadlineDate);
            }
            else {
                this.oldDeadlineDate = args.oldDeadlineDate;
            }
        }
        if (args != null && args.theNewDeadlineDate != null) {
            if (typeof args.theNewDeadlineDate === "number") {
                this.theNewDeadlineDate = new Int64(args.theNewDeadlineDate);
            }
            else {
                this.theNewDeadlineDate = args.theNewDeadlineDate;
            }
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("DeadlineHistory");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.createDate != null) {
            output.writeFieldBegin("createDate", thrift.Thrift.Type.I64, 2);
            output.writeI64(this.createDate);
            output.writeFieldEnd();
        }
        if (this.creator != null) {
            output.writeFieldBegin("creator", thrift.Thrift.Type.STRUCT, 3);
            this.creator.write(output);
            output.writeFieldEnd();
        }
        if (this.document != null) {
            output.writeFieldBegin("document", thrift.Thrift.Type.STRUCT, 4);
            this.document.write(output);
            output.writeFieldEnd();
        }
        if (this.documentExecution != null) {
            output.writeFieldBegin("documentExecution", thrift.Thrift.Type.STRUCT, 5);
            this.documentExecution.write(output);
            output.writeFieldEnd();
        }
        if (this.oldDeadlineDate != null) {
            output.writeFieldBegin("oldDeadlineDate", thrift.Thrift.Type.I64, 6);
            output.writeI64(this.oldDeadlineDate);
            output.writeFieldEnd();
        }
        if (this.theNewDeadlineDate != null) {
            output.writeFieldBegin("theNewDeadlineDate", thrift.Thrift.Type.I64, 7);
            output.writeI64(this.theNewDeadlineDate);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): DeadlineHistory {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.id = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_2: Int64 = input.readI64();
                        _args.createDate = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_3: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                        _args.creator = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_4: Document.Document = Document.Document.read(input);
                        _args.document = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_5: DocumentExecution.DocumentExecution = DocumentExecution.DocumentExecution.read(input);
                        _args.documentExecution = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_6: Int64 = input.readI64();
                        _args.oldDeadlineDate = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_7: Int64 = input.readI64();
                        _args.theNewDeadlineDate = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new DeadlineHistory(_args);
    }
}

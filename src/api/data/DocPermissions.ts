/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as StageLinkAction from "./StageLinkAction";
import * as __ROOT_NAMESPACE__ from "./";
import * as AskQuestionAction from "./AskQuestionAction";
export interface IDocPermissionsArgs {
    actions?: Array<StageLinkAction.StageLinkAction>;
    onlineEdit?: boolean;
    onlineComment?: boolean;
    editDoc?: boolean;
    attachmentAdd?: boolean;
    attachmentDelete?: boolean;
    changeContent?: boolean;
    addExecutors?: boolean;
    allowAdditionalConf?: boolean;
    allowReassign?: boolean;
    generateNumber?: boolean;
    shareDocument?: boolean;
    shareDocumentRevoke?: boolean;
    updateResponsible?: boolean;
    updateSC?: boolean;
    allowRepeatReassign?: boolean;
    exList?: Array<__ROOT_NAMESPACE__.PreconditionException>;
    attachmentSign?: boolean;
    allowAdditionalAdminConf?: boolean;
    allowAskQuestion?: boolean;
    changeDocSubStatus?: boolean;
    actionAskQuestions?: Array<AskQuestionAction.AskQuestionAction>;
}
export class DocPermissions {
    public actions?: Array<StageLinkAction.StageLinkAction>;
    public onlineEdit?: boolean;
    public onlineComment?: boolean;
    public editDoc?: boolean;
    public attachmentAdd?: boolean;
    public attachmentDelete?: boolean;
    public changeContent?: boolean;
    public addExecutors?: boolean;
    public allowAdditionalConf?: boolean;
    public allowReassign?: boolean;
    public generateNumber?: boolean;
    public shareDocument?: boolean;
    public shareDocumentRevoke?: boolean;
    public updateResponsible?: boolean;
    public updateSC?: boolean;
    public allowRepeatReassign?: boolean;
    public exList?: Array<__ROOT_NAMESPACE__.PreconditionException>;
    public attachmentSign?: boolean;
    public allowAdditionalAdminConf?: boolean;
    public allowAskQuestion?: boolean;
    public changeDocSubStatus?: boolean;
    public actionAskQuestions?: Array<AskQuestionAction.AskQuestionAction>;
    constructor(args?: IDocPermissionsArgs) {
        if (args != null && args.actions != null) {
            this.actions = args.actions;
        }
        if (args != null && args.onlineEdit != null) {
            this.onlineEdit = args.onlineEdit;
        }
        if (args != null && args.onlineComment != null) {
            this.onlineComment = args.onlineComment;
        }
        if (args != null && args.editDoc != null) {
            this.editDoc = args.editDoc;
        }
        if (args != null && args.attachmentAdd != null) {
            this.attachmentAdd = args.attachmentAdd;
        }
        if (args != null && args.attachmentDelete != null) {
            this.attachmentDelete = args.attachmentDelete;
        }
        if (args != null && args.changeContent != null) {
            this.changeContent = args.changeContent;
        }
        if (args != null && args.addExecutors != null) {
            this.addExecutors = args.addExecutors;
        }
        if (args != null && args.allowAdditionalConf != null) {
            this.allowAdditionalConf = args.allowAdditionalConf;
        }
        if (args != null && args.allowReassign != null) {
            this.allowReassign = args.allowReassign;
        }
        if (args != null && args.generateNumber != null) {
            this.generateNumber = args.generateNumber;
        }
        if (args != null && args.shareDocument != null) {
            this.shareDocument = args.shareDocument;
        }
        if (args != null && args.shareDocumentRevoke != null) {
            this.shareDocumentRevoke = args.shareDocumentRevoke;
        }
        if (args != null && args.updateResponsible != null) {
            this.updateResponsible = args.updateResponsible;
        }
        if (args != null && args.updateSC != null) {
            this.updateSC = args.updateSC;
        }
        if (args != null && args.allowRepeatReassign != null) {
            this.allowRepeatReassign = args.allowRepeatReassign;
        }
        if (args != null && args.exList != null) {
            this.exList = args.exList;
        }
        if (args != null && args.attachmentSign != null) {
            this.attachmentSign = args.attachmentSign;
        }
        if (args != null && args.allowAdditionalAdminConf != null) {
            this.allowAdditionalAdminConf = args.allowAdditionalAdminConf;
        }
        if (args != null && args.allowAskQuestion != null) {
            this.allowAskQuestion = args.allowAskQuestion;
        }
        if (args != null && args.changeDocSubStatus != null) {
            this.changeDocSubStatus = args.changeDocSubStatus;
        }
        if (args != null && args.actionAskQuestions != null) {
            this.actionAskQuestions = args.actionAskQuestions;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("DocPermissions");
        if (this.actions != null) {
            output.writeFieldBegin("actions", thrift.Thrift.Type.LIST, 1);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.actions.length);
            this.actions.forEach((value_1: StageLinkAction.StageLinkAction): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.onlineEdit != null) {
            output.writeFieldBegin("onlineEdit", thrift.Thrift.Type.BOOL, 2);
            output.writeBool(this.onlineEdit);
            output.writeFieldEnd();
        }
        if (this.onlineComment != null) {
            output.writeFieldBegin("onlineComment", thrift.Thrift.Type.BOOL, 3);
            output.writeBool(this.onlineComment);
            output.writeFieldEnd();
        }
        if (this.editDoc != null) {
            output.writeFieldBegin("editDoc", thrift.Thrift.Type.BOOL, 4);
            output.writeBool(this.editDoc);
            output.writeFieldEnd();
        }
        if (this.attachmentAdd != null) {
            output.writeFieldBegin("attachmentAdd", thrift.Thrift.Type.BOOL, 5);
            output.writeBool(this.attachmentAdd);
            output.writeFieldEnd();
        }
        if (this.attachmentDelete != null) {
            output.writeFieldBegin("attachmentDelete", thrift.Thrift.Type.BOOL, 6);
            output.writeBool(this.attachmentDelete);
            output.writeFieldEnd();
        }
        if (this.changeContent != null) {
            output.writeFieldBegin("changeContent", thrift.Thrift.Type.BOOL, 7);
            output.writeBool(this.changeContent);
            output.writeFieldEnd();
        }
        if (this.addExecutors != null) {
            output.writeFieldBegin("addExecutors", thrift.Thrift.Type.BOOL, 8);
            output.writeBool(this.addExecutors);
            output.writeFieldEnd();
        }
        if (this.allowAdditionalConf != null) {
            output.writeFieldBegin("allowAdditionalConf", thrift.Thrift.Type.BOOL, 9);
            output.writeBool(this.allowAdditionalConf);
            output.writeFieldEnd();
        }
        if (this.allowReassign != null) {
            output.writeFieldBegin("allowReassign", thrift.Thrift.Type.BOOL, 10);
            output.writeBool(this.allowReassign);
            output.writeFieldEnd();
        }
        if (this.generateNumber != null) {
            output.writeFieldBegin("generateNumber", thrift.Thrift.Type.BOOL, 11);
            output.writeBool(this.generateNumber);
            output.writeFieldEnd();
        }
        if (this.shareDocument != null) {
            output.writeFieldBegin("shareDocument", thrift.Thrift.Type.BOOL, 12);
            output.writeBool(this.shareDocument);
            output.writeFieldEnd();
        }
        if (this.shareDocumentRevoke != null) {
            output.writeFieldBegin("shareDocumentRevoke", thrift.Thrift.Type.BOOL, 13);
            output.writeBool(this.shareDocumentRevoke);
            output.writeFieldEnd();
        }
        if (this.updateResponsible != null) {
            output.writeFieldBegin("updateResponsible", thrift.Thrift.Type.BOOL, 14);
            output.writeBool(this.updateResponsible);
            output.writeFieldEnd();
        }
        if (this.updateSC != null) {
            output.writeFieldBegin("updateSC", thrift.Thrift.Type.BOOL, 15);
            output.writeBool(this.updateSC);
            output.writeFieldEnd();
        }
        if (this.allowRepeatReassign != null) {
            output.writeFieldBegin("allowRepeatReassign", thrift.Thrift.Type.BOOL, 16);
            output.writeBool(this.allowRepeatReassign);
            output.writeFieldEnd();
        }
        if (this.exList != null) {
            output.writeFieldBegin("exList", thrift.Thrift.Type.LIST, 17);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.exList.length);
            this.exList.forEach((value_2: __ROOT_NAMESPACE__.PreconditionException): void => {
                value_2.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.attachmentSign != null) {
            output.writeFieldBegin("attachmentSign", thrift.Thrift.Type.BOOL, 18);
            output.writeBool(this.attachmentSign);
            output.writeFieldEnd();
        }
        if (this.allowAdditionalAdminConf != null) {
            output.writeFieldBegin("allowAdditionalAdminConf", thrift.Thrift.Type.BOOL, 19);
            output.writeBool(this.allowAdditionalAdminConf);
            output.writeFieldEnd();
        }
        if (this.allowAskQuestion != null) {
            output.writeFieldBegin("allowAskQuestion", thrift.Thrift.Type.BOOL, 20);
            output.writeBool(this.allowAskQuestion);
            output.writeFieldEnd();
        }
        if (this.changeDocSubStatus != null) {
            output.writeFieldBegin("changeDocSubStatus", thrift.Thrift.Type.BOOL, 21);
            output.writeBool(this.changeDocSubStatus);
            output.writeFieldEnd();
        }
        if (this.actionAskQuestions != null) {
            output.writeFieldBegin("actionAskQuestions", thrift.Thrift.Type.LIST, 22);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.actionAskQuestions.length);
            this.actionAskQuestions.forEach((value_3: AskQuestionAction.AskQuestionAction): void => {
                value_3.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): DocPermissions {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_4: Array<StageLinkAction.StageLinkAction> = new Array<StageLinkAction.StageLinkAction>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_5: StageLinkAction.StageLinkAction = StageLinkAction.StageLinkAction.read(input);
                            value_4.push(value_5);
                        }
                        input.readListEnd();
                        _args.actions = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_6: boolean = input.readBool();
                        _args.onlineEdit = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_7: boolean = input.readBool();
                        _args.onlineComment = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_8: boolean = input.readBool();
                        _args.editDoc = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_9: boolean = input.readBool();
                        _args.attachmentAdd = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_10: boolean = input.readBool();
                        _args.attachmentDelete = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_11: boolean = input.readBool();
                        _args.changeContent = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_12: boolean = input.readBool();
                        _args.addExecutors = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_13: boolean = input.readBool();
                        _args.allowAdditionalConf = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_14: boolean = input.readBool();
                        _args.allowReassign = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_15: boolean = input.readBool();
                        _args.generateNumber = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_16: boolean = input.readBool();
                        _args.shareDocument = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_17: boolean = input.readBool();
                        _args.shareDocumentRevoke = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_18: boolean = input.readBool();
                        _args.updateResponsible = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_19: boolean = input.readBool();
                        _args.updateSC = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_20: boolean = input.readBool();
                        _args.allowRepeatReassign = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 17:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_21: Array<__ROOT_NAMESPACE__.PreconditionException> = new Array<__ROOT_NAMESPACE__.PreconditionException>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_22: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                            value_21.push(value_22);
                        }
                        input.readListEnd();
                        _args.exList = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 18:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_23: boolean = input.readBool();
                        _args.attachmentSign = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 19:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_24: boolean = input.readBool();
                        _args.allowAdditionalAdminConf = value_24;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 20:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_25: boolean = input.readBool();
                        _args.allowAskQuestion = value_25;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 21:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_26: boolean = input.readBool();
                        _args.changeDocSubStatus = value_26;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 22:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_27: Array<AskQuestionAction.AskQuestionAction> = new Array<AskQuestionAction.AskQuestionAction>();
                        const metadata_3: thrift.TList = input.readListBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_28: AskQuestionAction.AskQuestionAction = AskQuestionAction.AskQuestionAction.read(input);
                            value_27.push(value_28);
                        }
                        input.readListEnd();
                        _args.actionAskQuestions = value_27;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new DocPermissions(_args);
    }
}

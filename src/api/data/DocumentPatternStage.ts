/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import { Int64 } from "thrift";
import * as thrift from "thrift";
import * as DocPatternStageStatus from "./DocPatternStageStatus";
import * as DocPatternStageSubStatus from "./DocPatternStageSubStatus";
import * as DocPatternStageActionType from "./DocPatternStageActionType";
import * as DocPatternStageExecPriority from "./DocPatternStageExecPriority";
import * as DispatchState from "./DispatchState";
import * as __ROOT_NAMESPACE__ from "./";
import * as AccessRule from "./AccessRule";
import * as StageParam from "./StageParam";
import * as VisibilityOfBookmarks from "./VisibilityOfBookmarks";
import * as ContentHolderShowPlace from "./ContentHolderShowPlace";
export interface IDocumentPatternStageArgs {
    id?: string;
    documentPatternId?: string;
    nameDocPatStage?: string;
    descriptionDocPatStage?: string;
    status?: DocPatternStageStatus.DocPatternStageStatus;
    subStatus?: DocPatternStageSubStatus.DocPatternStageSubStatus;
    actionType?: DocPatternStageActionType.DocPatternStageActionType;
    stageReq?: boolean;
    deadLine?: string;
    graphicalParams?: string;
    availablePatternStageId?: string;
    movedByDecision?: string;
    registerDocument?: boolean;
    execPriority?: DocPatternStageExecPriority.DocPatternStageExecPriority;
    dispatchState?: DispatchState.DispatchState;
    hide?: boolean;
    userOrGroups?: Array<__ROOT_NAMESPACE__.UserOrGroup>;
    allowAdditionalConf?: boolean;
    runPerriodicall?: boolean;
    startPeriod?: number | Int64;
    nextStartPeriod?: string;
    periodicJiraEndDate?: string;
    periodicEndDate?: number | Int64;
    onlineEditRule?: AccessRule.AccessRule;
    onlineCommentRule?: AccessRule.AccessRule;
    changeOnDraft?: boolean;
    changeOnEdit?: AccessRule.AccessRule;
    changeOnSetDecision?: AccessRule.AccessRule;
    editDocRule?: AccessRule.AccessRule;
    attachmentAddRule?: AccessRule.AccessRule;
    attachmentDeleteRule?: AccessRule.AccessRule;
    changeContentRule?: AccessRule.AccessRule;
    canEdit?: boolean;
    maxSigner?: number;
    stageParams?: Array<StageParam.StageParam>;
    availableDecisions?: Set<string>;
    fmEditKey?: string;
    fmEditPersonal?: boolean;
    fmEditClose?: boolean;
    fmViewKey?: string;
    fmViewPersonal?: boolean;
    fmViewClose?: boolean;
    preFunctionId?: __ROOT_NAMESPACE__.CompositeId;
    postFunctionId?: __ROOT_NAMESPACE__.CompositeId;
    showDocDetails?: VisibilityOfBookmarks.VisibilityOfBookmarks;
    showChat?: VisibilityOfBookmarks.VisibilityOfBookmarks;
    showHistory?: VisibilityOfBookmarks.VisibilityOfBookmarks;
    showAttachments?: VisibilityOfBookmarks.VisibilityOfBookmarks;
    notifMoveOnEnabled?: boolean;
    notifMoveOnChanel?: string;
    notifPeriodicalEnabled?: boolean;
    notifPeriodicalJira?: string;
    notifPeriodicalChanel?: string;
    notifCheckDeadlineEnabled?: boolean;
    notifCheckDeadlineJira?: string;
    notifCheckDeadlineChanel?: string;
    notifCardExpiredEnabled?: boolean;
    notifCardExpiredChanel?: string;
    orderNum?: number;
    cardActivityPeriod?: string;
    stageContentHolders?: Array<ContentHolderShowPlace.ContentHolderShowPlace>;
    signAttachmentRule?: AccessRule.AccessRule;
    downloadOriginalAttachmentRule?: AccessRule.AccessRule;
    downloadOriginalAttachmentExtension?: string;
    nameDocPatStageLoc?: Map<string, string>;
    descriptionDocPatStageLoc?: Map<string, string>;
    showInExecutionTreeRule?: AccessRule.AccessRule;
    allowShowInExecutionTreeRule?: boolean;
    allowAskQuestion?: boolean;
    shareDocRule?: AccessRule.AccessRule;
    preUrl?: string;
    postUrl?: string;
    additionalSubStatus?: Set<DocPatternStageSubStatus.DocPatternStageSubStatus>;
    setDecisionFunctionId?: __ROOT_NAMESPACE__.CompositeId;
}
export class DocumentPatternStage {
    public id?: string;
    public documentPatternId?: string;
    public nameDocPatStage?: string;
    public descriptionDocPatStage?: string;
    public status?: DocPatternStageStatus.DocPatternStageStatus;
    public subStatus?: DocPatternStageSubStatus.DocPatternStageSubStatus;
    public actionType?: DocPatternStageActionType.DocPatternStageActionType;
    public stageReq?: boolean;
    public deadLine?: string;
    public graphicalParams?: string;
    public availablePatternStageId?: string;
    public movedByDecision?: string;
    public registerDocument?: boolean;
    public execPriority?: DocPatternStageExecPriority.DocPatternStageExecPriority;
    public dispatchState?: DispatchState.DispatchState;
    public hide?: boolean;
    public userOrGroups?: Array<__ROOT_NAMESPACE__.UserOrGroup>;
    public allowAdditionalConf?: boolean;
    public runPerriodicall?: boolean;
    public startPeriod?: Int64;
    public nextStartPeriod?: string;
    public periodicJiraEndDate?: string;
    public periodicEndDate?: Int64;
    public onlineEditRule?: AccessRule.AccessRule;
    public onlineCommentRule?: AccessRule.AccessRule;
    public changeOnDraft?: boolean;
    public changeOnEdit?: AccessRule.AccessRule;
    public changeOnSetDecision?: AccessRule.AccessRule;
    public editDocRule?: AccessRule.AccessRule;
    public attachmentAddRule?: AccessRule.AccessRule;
    public attachmentDeleteRule?: AccessRule.AccessRule;
    public changeContentRule?: AccessRule.AccessRule;
    public canEdit?: boolean;
    public maxSigner?: number;
    public stageParams?: Array<StageParam.StageParam>;
    public availableDecisions?: Set<string>;
    public fmEditKey?: string;
    public fmEditPersonal?: boolean;
    public fmEditClose?: boolean;
    public fmViewKey?: string;
    public fmViewPersonal?: boolean;
    public fmViewClose?: boolean;
    public preFunctionId?: __ROOT_NAMESPACE__.CompositeId;
    public postFunctionId?: __ROOT_NAMESPACE__.CompositeId;
    public showDocDetails?: VisibilityOfBookmarks.VisibilityOfBookmarks;
    public showChat?: VisibilityOfBookmarks.VisibilityOfBookmarks;
    public showHistory?: VisibilityOfBookmarks.VisibilityOfBookmarks;
    public showAttachments?: VisibilityOfBookmarks.VisibilityOfBookmarks;
    public notifMoveOnEnabled?: boolean;
    public notifMoveOnChanel?: string;
    public notifPeriodicalEnabled?: boolean;
    public notifPeriodicalJira?: string;
    public notifPeriodicalChanel?: string;
    public notifCheckDeadlineEnabled?: boolean;
    public notifCheckDeadlineJira?: string;
    public notifCheckDeadlineChanel?: string;
    public notifCardExpiredEnabled?: boolean;
    public notifCardExpiredChanel?: string;
    public orderNum?: number;
    public cardActivityPeriod?: string;
    public stageContentHolders?: Array<ContentHolderShowPlace.ContentHolderShowPlace>;
    public signAttachmentRule?: AccessRule.AccessRule;
    public downloadOriginalAttachmentRule?: AccessRule.AccessRule;
    public downloadOriginalAttachmentExtension?: string;
    public nameDocPatStageLoc?: Map<string, string>;
    public descriptionDocPatStageLoc?: Map<string, string>;
    public showInExecutionTreeRule?: AccessRule.AccessRule;
    public allowShowInExecutionTreeRule?: boolean;
    public allowAskQuestion?: boolean;
    public shareDocRule?: AccessRule.AccessRule;
    public preUrl?: string;
    public postUrl?: string;
    public additionalSubStatus?: Set<DocPatternStageSubStatus.DocPatternStageSubStatus>;
    public setDecisionFunctionId?: __ROOT_NAMESPACE__.CompositeId;
    constructor(args?: IDocumentPatternStageArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.documentPatternId != null) {
            this.documentPatternId = args.documentPatternId;
        }
        if (args != null && args.nameDocPatStage != null) {
            this.nameDocPatStage = args.nameDocPatStage;
        }
        if (args != null && args.descriptionDocPatStage != null) {
            this.descriptionDocPatStage = args.descriptionDocPatStage;
        }
        if (args != null && args.status != null) {
            this.status = args.status;
        }
        if (args != null && args.subStatus != null) {
            this.subStatus = args.subStatus;
        }
        if (args != null && args.actionType != null) {
            this.actionType = args.actionType;
        }
        if (args != null && args.stageReq != null) {
            this.stageReq = args.stageReq;
        }
        if (args != null && args.deadLine != null) {
            this.deadLine = args.deadLine;
        }
        if (args != null && args.graphicalParams != null) {
            this.graphicalParams = args.graphicalParams;
        }
        if (args != null && args.availablePatternStageId != null) {
            this.availablePatternStageId = args.availablePatternStageId;
        }
        if (args != null && args.movedByDecision != null) {
            this.movedByDecision = args.movedByDecision;
        }
        if (args != null && args.registerDocument != null) {
            this.registerDocument = args.registerDocument;
        }
        if (args != null && args.execPriority != null) {
            this.execPriority = args.execPriority;
        }
        if (args != null && args.dispatchState != null) {
            this.dispatchState = args.dispatchState;
        }
        if (args != null && args.hide != null) {
            this.hide = args.hide;
        }
        if (args != null && args.userOrGroups != null) {
            this.userOrGroups = args.userOrGroups;
        }
        if (args != null && args.allowAdditionalConf != null) {
            this.allowAdditionalConf = args.allowAdditionalConf;
        }
        if (args != null && args.runPerriodicall != null) {
            this.runPerriodicall = args.runPerriodicall;
        }
        if (args != null && args.startPeriod != null) {
            if (typeof args.startPeriod === "number") {
                this.startPeriod = new Int64(args.startPeriod);
            }
            else {
                this.startPeriod = args.startPeriod;
            }
        }
        if (args != null && args.nextStartPeriod != null) {
            this.nextStartPeriod = args.nextStartPeriod;
        }
        if (args != null && args.periodicJiraEndDate != null) {
            this.periodicJiraEndDate = args.periodicJiraEndDate;
        }
        if (args != null && args.periodicEndDate != null) {
            if (typeof args.periodicEndDate === "number") {
                this.periodicEndDate = new Int64(args.periodicEndDate);
            }
            else {
                this.periodicEndDate = args.periodicEndDate;
            }
        }
        if (args != null && args.onlineEditRule != null) {
            this.onlineEditRule = args.onlineEditRule;
        }
        if (args != null && args.onlineCommentRule != null) {
            this.onlineCommentRule = args.onlineCommentRule;
        }
        if (args != null && args.changeOnDraft != null) {
            this.changeOnDraft = args.changeOnDraft;
        }
        if (args != null && args.changeOnEdit != null) {
            this.changeOnEdit = args.changeOnEdit;
        }
        if (args != null && args.changeOnSetDecision != null) {
            this.changeOnSetDecision = args.changeOnSetDecision;
        }
        if (args != null && args.editDocRule != null) {
            this.editDocRule = args.editDocRule;
        }
        if (args != null && args.attachmentAddRule != null) {
            this.attachmentAddRule = args.attachmentAddRule;
        }
        if (args != null && args.attachmentDeleteRule != null) {
            this.attachmentDeleteRule = args.attachmentDeleteRule;
        }
        if (args != null && args.changeContentRule != null) {
            this.changeContentRule = args.changeContentRule;
        }
        if (args != null && args.canEdit != null) {
            this.canEdit = args.canEdit;
        }
        if (args != null && args.maxSigner != null) {
            this.maxSigner = args.maxSigner;
        }
        if (args != null && args.stageParams != null) {
            this.stageParams = args.stageParams;
        }
        if (args != null && args.availableDecisions != null) {
            this.availableDecisions = args.availableDecisions;
        }
        if (args != null && args.fmEditKey != null) {
            this.fmEditKey = args.fmEditKey;
        }
        if (args != null && args.fmEditPersonal != null) {
            this.fmEditPersonal = args.fmEditPersonal;
        }
        if (args != null && args.fmEditClose != null) {
            this.fmEditClose = args.fmEditClose;
        }
        if (args != null && args.fmViewKey != null) {
            this.fmViewKey = args.fmViewKey;
        }
        if (args != null && args.fmViewPersonal != null) {
            this.fmViewPersonal = args.fmViewPersonal;
        }
        if (args != null && args.fmViewClose != null) {
            this.fmViewClose = args.fmViewClose;
        }
        if (args != null && args.preFunctionId != null) {
            this.preFunctionId = args.preFunctionId;
        }
        if (args != null && args.postFunctionId != null) {
            this.postFunctionId = args.postFunctionId;
        }
        if (args != null && args.showDocDetails != null) {
            this.showDocDetails = args.showDocDetails;
        }
        if (args != null && args.showChat != null) {
            this.showChat = args.showChat;
        }
        if (args != null && args.showHistory != null) {
            this.showHistory = args.showHistory;
        }
        if (args != null && args.showAttachments != null) {
            this.showAttachments = args.showAttachments;
        }
        if (args != null && args.notifMoveOnEnabled != null) {
            this.notifMoveOnEnabled = args.notifMoveOnEnabled;
        }
        if (args != null && args.notifMoveOnChanel != null) {
            this.notifMoveOnChanel = args.notifMoveOnChanel;
        }
        if (args != null && args.notifPeriodicalEnabled != null) {
            this.notifPeriodicalEnabled = args.notifPeriodicalEnabled;
        }
        if (args != null && args.notifPeriodicalJira != null) {
            this.notifPeriodicalJira = args.notifPeriodicalJira;
        }
        if (args != null && args.notifPeriodicalChanel != null) {
            this.notifPeriodicalChanel = args.notifPeriodicalChanel;
        }
        if (args != null && args.notifCheckDeadlineEnabled != null) {
            this.notifCheckDeadlineEnabled = args.notifCheckDeadlineEnabled;
        }
        if (args != null && args.notifCheckDeadlineJira != null) {
            this.notifCheckDeadlineJira = args.notifCheckDeadlineJira;
        }
        if (args != null && args.notifCheckDeadlineChanel != null) {
            this.notifCheckDeadlineChanel = args.notifCheckDeadlineChanel;
        }
        if (args != null && args.notifCardExpiredEnabled != null) {
            this.notifCardExpiredEnabled = args.notifCardExpiredEnabled;
        }
        if (args != null && args.notifCardExpiredChanel != null) {
            this.notifCardExpiredChanel = args.notifCardExpiredChanel;
        }
        if (args != null && args.orderNum != null) {
            this.orderNum = args.orderNum;
        }
        if (args != null && args.cardActivityPeriod != null) {
            this.cardActivityPeriod = args.cardActivityPeriod;
        }
        if (args != null && args.stageContentHolders != null) {
            this.stageContentHolders = args.stageContentHolders;
        }
        if (args != null && args.signAttachmentRule != null) {
            this.signAttachmentRule = args.signAttachmentRule;
        }
        if (args != null && args.downloadOriginalAttachmentRule != null) {
            this.downloadOriginalAttachmentRule = args.downloadOriginalAttachmentRule;
        }
        if (args != null && args.downloadOriginalAttachmentExtension != null) {
            this.downloadOriginalAttachmentExtension = args.downloadOriginalAttachmentExtension;
        }
        if (args != null && args.nameDocPatStageLoc != null) {
            this.nameDocPatStageLoc = args.nameDocPatStageLoc;
        }
        if (args != null && args.descriptionDocPatStageLoc != null) {
            this.descriptionDocPatStageLoc = args.descriptionDocPatStageLoc;
        }
        if (args != null && args.showInExecutionTreeRule != null) {
            this.showInExecutionTreeRule = args.showInExecutionTreeRule;
        }
        if (args != null && args.allowShowInExecutionTreeRule != null) {
            this.allowShowInExecutionTreeRule = args.allowShowInExecutionTreeRule;
        }
        if (args != null && args.allowAskQuestion != null) {
            this.allowAskQuestion = args.allowAskQuestion;
        }
        if (args != null && args.shareDocRule != null) {
            this.shareDocRule = args.shareDocRule;
        }
        if (args != null && args.preUrl != null) {
            this.preUrl = args.preUrl;
        }
        if (args != null && args.postUrl != null) {
            this.postUrl = args.postUrl;
        }
        if (args != null && args.additionalSubStatus != null) {
            this.additionalSubStatus = args.additionalSubStatus;
        }
        if (args != null && args.setDecisionFunctionId != null) {
            this.setDecisionFunctionId = args.setDecisionFunctionId;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("DocumentPatternStage");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.documentPatternId != null) {
            output.writeFieldBegin("documentPatternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.documentPatternId);
            output.writeFieldEnd();
        }
        if (this.nameDocPatStage != null) {
            output.writeFieldBegin("nameDocPatStage", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.nameDocPatStage);
            output.writeFieldEnd();
        }
        if (this.descriptionDocPatStage != null) {
            output.writeFieldBegin("descriptionDocPatStage", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.descriptionDocPatStage);
            output.writeFieldEnd();
        }
        if (this.status != null) {
            output.writeFieldBegin("status", thrift.Thrift.Type.I32, 5);
            output.writeI32(this.status);
            output.writeFieldEnd();
        }
        if (this.subStatus != null) {
            output.writeFieldBegin("subStatus", thrift.Thrift.Type.I32, 6);
            output.writeI32(this.subStatus);
            output.writeFieldEnd();
        }
        if (this.actionType != null) {
            output.writeFieldBegin("actionType", thrift.Thrift.Type.I32, 7);
            output.writeI32(this.actionType);
            output.writeFieldEnd();
        }
        if (this.stageReq != null) {
            output.writeFieldBegin("stageReq", thrift.Thrift.Type.BOOL, 8);
            output.writeBool(this.stageReq);
            output.writeFieldEnd();
        }
        if (this.deadLine != null) {
            output.writeFieldBegin("deadLine", thrift.Thrift.Type.STRING, 9);
            output.writeString(this.deadLine);
            output.writeFieldEnd();
        }
        if (this.graphicalParams != null) {
            output.writeFieldBegin("graphicalParams", thrift.Thrift.Type.STRING, 10);
            output.writeString(this.graphicalParams);
            output.writeFieldEnd();
        }
        if (this.availablePatternStageId != null) {
            output.writeFieldBegin("availablePatternStageId", thrift.Thrift.Type.STRING, 11);
            output.writeString(this.availablePatternStageId);
            output.writeFieldEnd();
        }
        if (this.movedByDecision != null) {
            output.writeFieldBegin("movedByDecision", thrift.Thrift.Type.STRING, 12);
            output.writeString(this.movedByDecision);
            output.writeFieldEnd();
        }
        if (this.registerDocument != null) {
            output.writeFieldBegin("registerDocument", thrift.Thrift.Type.BOOL, 13);
            output.writeBool(this.registerDocument);
            output.writeFieldEnd();
        }
        if (this.execPriority != null) {
            output.writeFieldBegin("execPriority", thrift.Thrift.Type.I32, 14);
            output.writeI32(this.execPriority);
            output.writeFieldEnd();
        }
        if (this.dispatchState != null) {
            output.writeFieldBegin("dispatchState", thrift.Thrift.Type.I32, 15);
            output.writeI32(this.dispatchState);
            output.writeFieldEnd();
        }
        if (this.hide != null) {
            output.writeFieldBegin("hide", thrift.Thrift.Type.BOOL, 16);
            output.writeBool(this.hide);
            output.writeFieldEnd();
        }
        if (this.userOrGroups != null) {
            output.writeFieldBegin("userOrGroups", thrift.Thrift.Type.LIST, 17);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.userOrGroups.length);
            this.userOrGroups.forEach((value_1: __ROOT_NAMESPACE__.UserOrGroup): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.allowAdditionalConf != null) {
            output.writeFieldBegin("allowAdditionalConf", thrift.Thrift.Type.BOOL, 18);
            output.writeBool(this.allowAdditionalConf);
            output.writeFieldEnd();
        }
        if (this.runPerriodicall != null) {
            output.writeFieldBegin("runPerriodicall", thrift.Thrift.Type.BOOL, 19);
            output.writeBool(this.runPerriodicall);
            output.writeFieldEnd();
        }
        if (this.startPeriod != null) {
            output.writeFieldBegin("startPeriod", thrift.Thrift.Type.I64, 20);
            output.writeI64(this.startPeriod);
            output.writeFieldEnd();
        }
        if (this.nextStartPeriod != null) {
            output.writeFieldBegin("nextStartPeriod", thrift.Thrift.Type.STRING, 21);
            output.writeString(this.nextStartPeriod);
            output.writeFieldEnd();
        }
        if (this.periodicJiraEndDate != null) {
            output.writeFieldBegin("periodicJiraEndDate", thrift.Thrift.Type.STRING, 22);
            output.writeString(this.periodicJiraEndDate);
            output.writeFieldEnd();
        }
        if (this.periodicEndDate != null) {
            output.writeFieldBegin("periodicEndDate", thrift.Thrift.Type.I64, 23);
            output.writeI64(this.periodicEndDate);
            output.writeFieldEnd();
        }
        if (this.onlineEditRule != null) {
            output.writeFieldBegin("onlineEditRule", thrift.Thrift.Type.STRUCT, 24);
            this.onlineEditRule.write(output);
            output.writeFieldEnd();
        }
        if (this.onlineCommentRule != null) {
            output.writeFieldBegin("onlineCommentRule", thrift.Thrift.Type.STRUCT, 25);
            this.onlineCommentRule.write(output);
            output.writeFieldEnd();
        }
        if (this.changeOnDraft != null) {
            output.writeFieldBegin("changeOnDraft", thrift.Thrift.Type.BOOL, 26);
            output.writeBool(this.changeOnDraft);
            output.writeFieldEnd();
        }
        if (this.changeOnEdit != null) {
            output.writeFieldBegin("changeOnEdit", thrift.Thrift.Type.STRUCT, 27);
            this.changeOnEdit.write(output);
            output.writeFieldEnd();
        }
        if (this.changeOnSetDecision != null) {
            output.writeFieldBegin("changeOnSetDecision", thrift.Thrift.Type.STRUCT, 28);
            this.changeOnSetDecision.write(output);
            output.writeFieldEnd();
        }
        if (this.editDocRule != null) {
            output.writeFieldBegin("editDocRule", thrift.Thrift.Type.STRUCT, 29);
            this.editDocRule.write(output);
            output.writeFieldEnd();
        }
        if (this.attachmentAddRule != null) {
            output.writeFieldBegin("attachmentAddRule", thrift.Thrift.Type.STRUCT, 30);
            this.attachmentAddRule.write(output);
            output.writeFieldEnd();
        }
        if (this.attachmentDeleteRule != null) {
            output.writeFieldBegin("attachmentDeleteRule", thrift.Thrift.Type.STRUCT, 31);
            this.attachmentDeleteRule.write(output);
            output.writeFieldEnd();
        }
        if (this.changeContentRule != null) {
            output.writeFieldBegin("changeContentRule", thrift.Thrift.Type.STRUCT, 32);
            this.changeContentRule.write(output);
            output.writeFieldEnd();
        }
        if (this.canEdit != null) {
            output.writeFieldBegin("canEdit", thrift.Thrift.Type.BOOL, 33);
            output.writeBool(this.canEdit);
            output.writeFieldEnd();
        }
        if (this.maxSigner != null) {
            output.writeFieldBegin("maxSigner", thrift.Thrift.Type.I32, 34);
            output.writeI32(this.maxSigner);
            output.writeFieldEnd();
        }
        if (this.stageParams != null) {
            output.writeFieldBegin("stageParams", thrift.Thrift.Type.LIST, 35);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.stageParams.length);
            this.stageParams.forEach((value_2: StageParam.StageParam): void => {
                value_2.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.availableDecisions != null) {
            output.writeFieldBegin("availableDecisions", thrift.Thrift.Type.SET, 36);
            output.writeSetBegin(thrift.Thrift.Type.STRING, this.availableDecisions.size);
            this.availableDecisions.forEach((value_3: string): void => {
                output.writeString(value_3);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        if (this.fmEditKey != null) {
            output.writeFieldBegin("fmEditKey", thrift.Thrift.Type.STRING, 37);
            output.writeString(this.fmEditKey);
            output.writeFieldEnd();
        }
        if (this.fmEditPersonal != null) {
            output.writeFieldBegin("fmEditPersonal", thrift.Thrift.Type.BOOL, 38);
            output.writeBool(this.fmEditPersonal);
            output.writeFieldEnd();
        }
        if (this.fmEditClose != null) {
            output.writeFieldBegin("fmEditClose", thrift.Thrift.Type.BOOL, 39);
            output.writeBool(this.fmEditClose);
            output.writeFieldEnd();
        }
        if (this.fmViewKey != null) {
            output.writeFieldBegin("fmViewKey", thrift.Thrift.Type.STRING, 40);
            output.writeString(this.fmViewKey);
            output.writeFieldEnd();
        }
        if (this.fmViewPersonal != null) {
            output.writeFieldBegin("fmViewPersonal", thrift.Thrift.Type.BOOL, 41);
            output.writeBool(this.fmViewPersonal);
            output.writeFieldEnd();
        }
        if (this.fmViewClose != null) {
            output.writeFieldBegin("fmViewClose", thrift.Thrift.Type.BOOL, 42);
            output.writeBool(this.fmViewClose);
            output.writeFieldEnd();
        }
        if (this.preFunctionId != null) {
            output.writeFieldBegin("preFunctionId", thrift.Thrift.Type.STRUCT, 43);
            this.preFunctionId.write(output);
            output.writeFieldEnd();
        }
        if (this.postFunctionId != null) {
            output.writeFieldBegin("postFunctionId", thrift.Thrift.Type.STRUCT, 44);
            this.postFunctionId.write(output);
            output.writeFieldEnd();
        }
        if (this.showDocDetails != null) {
            output.writeFieldBegin("showDocDetails", thrift.Thrift.Type.I32, 45);
            output.writeI32(this.showDocDetails);
            output.writeFieldEnd();
        }
        if (this.showChat != null) {
            output.writeFieldBegin("showChat", thrift.Thrift.Type.I32, 46);
            output.writeI32(this.showChat);
            output.writeFieldEnd();
        }
        if (this.showHistory != null) {
            output.writeFieldBegin("showHistory", thrift.Thrift.Type.I32, 47);
            output.writeI32(this.showHistory);
            output.writeFieldEnd();
        }
        if (this.showAttachments != null) {
            output.writeFieldBegin("showAttachments", thrift.Thrift.Type.I32, 48);
            output.writeI32(this.showAttachments);
            output.writeFieldEnd();
        }
        if (this.notifMoveOnEnabled != null) {
            output.writeFieldBegin("notifMoveOnEnabled", thrift.Thrift.Type.BOOL, 49);
            output.writeBool(this.notifMoveOnEnabled);
            output.writeFieldEnd();
        }
        if (this.notifMoveOnChanel != null) {
            output.writeFieldBegin("notifMoveOnChanel", thrift.Thrift.Type.STRING, 50);
            output.writeString(this.notifMoveOnChanel);
            output.writeFieldEnd();
        }
        if (this.notifPeriodicalEnabled != null) {
            output.writeFieldBegin("notifPeriodicalEnabled", thrift.Thrift.Type.BOOL, 51);
            output.writeBool(this.notifPeriodicalEnabled);
            output.writeFieldEnd();
        }
        if (this.notifPeriodicalJira != null) {
            output.writeFieldBegin("notifPeriodicalJira", thrift.Thrift.Type.STRING, 52);
            output.writeString(this.notifPeriodicalJira);
            output.writeFieldEnd();
        }
        if (this.notifPeriodicalChanel != null) {
            output.writeFieldBegin("notifPeriodicalChanel", thrift.Thrift.Type.STRING, 53);
            output.writeString(this.notifPeriodicalChanel);
            output.writeFieldEnd();
        }
        if (this.notifCheckDeadlineEnabled != null) {
            output.writeFieldBegin("notifCheckDeadlineEnabled", thrift.Thrift.Type.BOOL, 54);
            output.writeBool(this.notifCheckDeadlineEnabled);
            output.writeFieldEnd();
        }
        if (this.notifCheckDeadlineJira != null) {
            output.writeFieldBegin("notifCheckDeadlineJira", thrift.Thrift.Type.STRING, 55);
            output.writeString(this.notifCheckDeadlineJira);
            output.writeFieldEnd();
        }
        if (this.notifCheckDeadlineChanel != null) {
            output.writeFieldBegin("notifCheckDeadlineChanel", thrift.Thrift.Type.STRING, 56);
            output.writeString(this.notifCheckDeadlineChanel);
            output.writeFieldEnd();
        }
        if (this.notifCardExpiredEnabled != null) {
            output.writeFieldBegin("notifCardExpiredEnabled", thrift.Thrift.Type.BOOL, 57);
            output.writeBool(this.notifCardExpiredEnabled);
            output.writeFieldEnd();
        }
        if (this.notifCardExpiredChanel != null) {
            output.writeFieldBegin("notifCardExpiredChanel", thrift.Thrift.Type.STRING, 58);
            output.writeString(this.notifCardExpiredChanel);
            output.writeFieldEnd();
        }
        if (this.orderNum != null) {
            output.writeFieldBegin("orderNum", thrift.Thrift.Type.I32, 59);
            output.writeI32(this.orderNum);
            output.writeFieldEnd();
        }
        if (this.cardActivityPeriod != null) {
            output.writeFieldBegin("cardActivityPeriod", thrift.Thrift.Type.STRING, 60);
            output.writeString(this.cardActivityPeriod);
            output.writeFieldEnd();
        }
        if (this.stageContentHolders != null) {
            output.writeFieldBegin("stageContentHolders", thrift.Thrift.Type.LIST, 61);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.stageContentHolders.length);
            this.stageContentHolders.forEach((value_4: ContentHolderShowPlace.ContentHolderShowPlace): void => {
                value_4.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.signAttachmentRule != null) {
            output.writeFieldBegin("signAttachmentRule", thrift.Thrift.Type.STRUCT, 62);
            this.signAttachmentRule.write(output);
            output.writeFieldEnd();
        }
        if (this.downloadOriginalAttachmentRule != null) {
            output.writeFieldBegin("downloadOriginalAttachmentRule", thrift.Thrift.Type.STRUCT, 63);
            this.downloadOriginalAttachmentRule.write(output);
            output.writeFieldEnd();
        }
        if (this.downloadOriginalAttachmentExtension != null) {
            output.writeFieldBegin("downloadOriginalAttachmentExtension", thrift.Thrift.Type.STRING, 64);
            output.writeString(this.downloadOriginalAttachmentExtension);
            output.writeFieldEnd();
        }
        if (this.nameDocPatStageLoc != null) {
            output.writeFieldBegin("nameDocPatStageLoc", thrift.Thrift.Type.MAP, 65);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.nameDocPatStageLoc.size);
            this.nameDocPatStageLoc.forEach((value_5: string, key_1: string): void => {
                output.writeString(key_1);
                output.writeString(value_5);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.descriptionDocPatStageLoc != null) {
            output.writeFieldBegin("descriptionDocPatStageLoc", thrift.Thrift.Type.MAP, 66);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.descriptionDocPatStageLoc.size);
            this.descriptionDocPatStageLoc.forEach((value_6: string, key_2: string): void => {
                output.writeString(key_2);
                output.writeString(value_6);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.showInExecutionTreeRule != null) {
            output.writeFieldBegin("showInExecutionTreeRule", thrift.Thrift.Type.STRUCT, 67);
            this.showInExecutionTreeRule.write(output);
            output.writeFieldEnd();
        }
        if (this.allowShowInExecutionTreeRule != null) {
            output.writeFieldBegin("allowShowInExecutionTreeRule", thrift.Thrift.Type.BOOL, 68);
            output.writeBool(this.allowShowInExecutionTreeRule);
            output.writeFieldEnd();
        }
        if (this.allowAskQuestion != null) {
            output.writeFieldBegin("allowAskQuestion", thrift.Thrift.Type.BOOL, 69);
            output.writeBool(this.allowAskQuestion);
            output.writeFieldEnd();
        }
        if (this.shareDocRule != null) {
            output.writeFieldBegin("shareDocRule", thrift.Thrift.Type.STRUCT, 70);
            this.shareDocRule.write(output);
            output.writeFieldEnd();
        }
        if (this.preUrl != null) {
            output.writeFieldBegin("preUrl", thrift.Thrift.Type.STRING, 71);
            output.writeString(this.preUrl);
            output.writeFieldEnd();
        }
        if (this.postUrl != null) {
            output.writeFieldBegin("postUrl", thrift.Thrift.Type.STRING, 72);
            output.writeString(this.postUrl);
            output.writeFieldEnd();
        }
        if (this.additionalSubStatus != null) {
            output.writeFieldBegin("additionalSubStatus", thrift.Thrift.Type.SET, 73);
            output.writeSetBegin(thrift.Thrift.Type.I32, this.additionalSubStatus.size);
            this.additionalSubStatus.forEach((value_7: DocPatternStageSubStatus.DocPatternStageSubStatus): void => {
                output.writeI32(value_7);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        if (this.setDecisionFunctionId != null) {
            output.writeFieldBegin("setDecisionFunctionId", thrift.Thrift.Type.STRUCT, 75);
            this.setDecisionFunctionId.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): DocumentPatternStage {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_8: string = input.readString();
                        _args.id = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_9: string = input.readString();
                        _args.documentPatternId = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_10: string = input.readString();
                        _args.nameDocPatStage = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_11: string = input.readString();
                        _args.descriptionDocPatStage = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_12: DocPatternStageStatus.DocPatternStageStatus = input.readI32();
                        _args.status = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_13: DocPatternStageSubStatus.DocPatternStageSubStatus = input.readI32();
                        _args.subStatus = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_14: DocPatternStageActionType.DocPatternStageActionType = input.readI32();
                        _args.actionType = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_15: boolean = input.readBool();
                        _args.stageReq = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_16: string = input.readString();
                        _args.deadLine = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_17: string = input.readString();
                        _args.graphicalParams = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_18: string = input.readString();
                        _args.availablePatternStageId = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_19: string = input.readString();
                        _args.movedByDecision = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_20: boolean = input.readBool();
                        _args.registerDocument = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_21: DocPatternStageExecPriority.DocPatternStageExecPriority = input.readI32();
                        _args.execPriority = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_22: DispatchState.DispatchState = input.readI32();
                        _args.dispatchState = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_23: boolean = input.readBool();
                        _args.hide = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 17:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_24: Array<__ROOT_NAMESPACE__.UserOrGroup> = new Array<__ROOT_NAMESPACE__.UserOrGroup>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_25: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                            value_24.push(value_25);
                        }
                        input.readListEnd();
                        _args.userOrGroups = value_24;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 18:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_26: boolean = input.readBool();
                        _args.allowAdditionalConf = value_26;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 19:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_27: boolean = input.readBool();
                        _args.runPerriodicall = value_27;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 20:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_28: Int64 = input.readI64();
                        _args.startPeriod = value_28;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 21:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_29: string = input.readString();
                        _args.nextStartPeriod = value_29;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 22:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_30: string = input.readString();
                        _args.periodicJiraEndDate = value_30;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 23:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_31: Int64 = input.readI64();
                        _args.periodicEndDate = value_31;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 24:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_32: AccessRule.AccessRule = AccessRule.AccessRule.read(input);
                        _args.onlineEditRule = value_32;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 25:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_33: AccessRule.AccessRule = AccessRule.AccessRule.read(input);
                        _args.onlineCommentRule = value_33;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 26:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_34: boolean = input.readBool();
                        _args.changeOnDraft = value_34;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 27:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_35: AccessRule.AccessRule = AccessRule.AccessRule.read(input);
                        _args.changeOnEdit = value_35;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 28:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_36: AccessRule.AccessRule = AccessRule.AccessRule.read(input);
                        _args.changeOnSetDecision = value_36;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 29:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_37: AccessRule.AccessRule = AccessRule.AccessRule.read(input);
                        _args.editDocRule = value_37;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 30:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_38: AccessRule.AccessRule = AccessRule.AccessRule.read(input);
                        _args.attachmentAddRule = value_38;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 31:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_39: AccessRule.AccessRule = AccessRule.AccessRule.read(input);
                        _args.attachmentDeleteRule = value_39;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 32:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_40: AccessRule.AccessRule = AccessRule.AccessRule.read(input);
                        _args.changeContentRule = value_40;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 33:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_41: boolean = input.readBool();
                        _args.canEdit = value_41;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 34:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_42: number = input.readI32();
                        _args.maxSigner = value_42;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 35:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_43: Array<StageParam.StageParam> = new Array<StageParam.StageParam>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_44: StageParam.StageParam = StageParam.StageParam.read(input);
                            value_43.push(value_44);
                        }
                        input.readListEnd();
                        _args.stageParams = value_43;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 36:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_45: Set<string> = new Set<string>();
                        const metadata_3: thrift.TSet = input.readSetBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_46: string = input.readString();
                            value_45.add(value_46);
                        }
                        input.readSetEnd();
                        _args.availableDecisions = value_45;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 37:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_47: string = input.readString();
                        _args.fmEditKey = value_47;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 38:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_48: boolean = input.readBool();
                        _args.fmEditPersonal = value_48;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 39:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_49: boolean = input.readBool();
                        _args.fmEditClose = value_49;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 40:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_50: string = input.readString();
                        _args.fmViewKey = value_50;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 41:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_51: boolean = input.readBool();
                        _args.fmViewPersonal = value_51;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 42:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_52: boolean = input.readBool();
                        _args.fmViewClose = value_52;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 43:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_53: __ROOT_NAMESPACE__.CompositeId = __ROOT_NAMESPACE__.CompositeId.read(input);
                        _args.preFunctionId = value_53;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 44:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_54: __ROOT_NAMESPACE__.CompositeId = __ROOT_NAMESPACE__.CompositeId.read(input);
                        _args.postFunctionId = value_54;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 45:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_55: VisibilityOfBookmarks.VisibilityOfBookmarks = input.readI32();
                        _args.showDocDetails = value_55;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 46:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_56: VisibilityOfBookmarks.VisibilityOfBookmarks = input.readI32();
                        _args.showChat = value_56;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 47:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_57: VisibilityOfBookmarks.VisibilityOfBookmarks = input.readI32();
                        _args.showHistory = value_57;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 48:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_58: VisibilityOfBookmarks.VisibilityOfBookmarks = input.readI32();
                        _args.showAttachments = value_58;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 49:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_59: boolean = input.readBool();
                        _args.notifMoveOnEnabled = value_59;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 50:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_60: string = input.readString();
                        _args.notifMoveOnChanel = value_60;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 51:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_61: boolean = input.readBool();
                        _args.notifPeriodicalEnabled = value_61;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 52:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_62: string = input.readString();
                        _args.notifPeriodicalJira = value_62;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 53:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_63: string = input.readString();
                        _args.notifPeriodicalChanel = value_63;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 54:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_64: boolean = input.readBool();
                        _args.notifCheckDeadlineEnabled = value_64;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 55:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_65: string = input.readString();
                        _args.notifCheckDeadlineJira = value_65;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 56:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_66: string = input.readString();
                        _args.notifCheckDeadlineChanel = value_66;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 57:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_67: boolean = input.readBool();
                        _args.notifCardExpiredEnabled = value_67;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 58:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_68: string = input.readString();
                        _args.notifCardExpiredChanel = value_68;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 59:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_69: number = input.readI32();
                        _args.orderNum = value_69;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 60:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_70: string = input.readString();
                        _args.cardActivityPeriod = value_70;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 61:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_71: Array<ContentHolderShowPlace.ContentHolderShowPlace> = new Array<ContentHolderShowPlace.ContentHolderShowPlace>();
                        const metadata_4: thrift.TList = input.readListBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const value_72: ContentHolderShowPlace.ContentHolderShowPlace = ContentHolderShowPlace.ContentHolderShowPlace.read(input);
                            value_71.push(value_72);
                        }
                        input.readListEnd();
                        _args.stageContentHolders = value_71;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 62:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_73: AccessRule.AccessRule = AccessRule.AccessRule.read(input);
                        _args.signAttachmentRule = value_73;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 63:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_74: AccessRule.AccessRule = AccessRule.AccessRule.read(input);
                        _args.downloadOriginalAttachmentRule = value_74;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 64:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_75: string = input.readString();
                        _args.downloadOriginalAttachmentExtension = value_75;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 65:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_76: Map<string, string> = new Map<string, string>();
                        const metadata_5: thrift.TMap = input.readMapBegin();
                        const size_5: number = metadata_5.size;
                        for (let i_5: number = 0; i_5 < size_5; i_5++) {
                            const key_3: string = input.readString();
                            const value_77: string = input.readString();
                            value_76.set(key_3, value_77);
                        }
                        input.readMapEnd();
                        _args.nameDocPatStageLoc = value_76;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 66:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_78: Map<string, string> = new Map<string, string>();
                        const metadata_6: thrift.TMap = input.readMapBegin();
                        const size_6: number = metadata_6.size;
                        for (let i_6: number = 0; i_6 < size_6; i_6++) {
                            const key_4: string = input.readString();
                            const value_79: string = input.readString();
                            value_78.set(key_4, value_79);
                        }
                        input.readMapEnd();
                        _args.descriptionDocPatStageLoc = value_78;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 67:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_80: AccessRule.AccessRule = AccessRule.AccessRule.read(input);
                        _args.showInExecutionTreeRule = value_80;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 68:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_81: boolean = input.readBool();
                        _args.allowShowInExecutionTreeRule = value_81;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 69:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_82: boolean = input.readBool();
                        _args.allowAskQuestion = value_82;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 70:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_83: AccessRule.AccessRule = AccessRule.AccessRule.read(input);
                        _args.shareDocRule = value_83;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 71:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_84: string = input.readString();
                        _args.preUrl = value_84;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 72:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_85: string = input.readString();
                        _args.postUrl = value_85;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 73:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_86: Set<DocPatternStageSubStatus.DocPatternStageSubStatus> = new Set<DocPatternStageSubStatus.DocPatternStageSubStatus>();
                        const metadata_7: thrift.TSet = input.readSetBegin();
                        const size_7: number = metadata_7.size;
                        for (let i_7: number = 0; i_7 < size_7; i_7++) {
                            const value_87: DocPatternStageSubStatus.DocPatternStageSubStatus = input.readI32();
                            value_86.add(value_87);
                        }
                        input.readSetEnd();
                        _args.additionalSubStatus = value_86;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 75:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_88: __ROOT_NAMESPACE__.CompositeId = __ROOT_NAMESPACE__.CompositeId.read(input);
                        _args.setDecisionFunctionId = value_88;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new DocumentPatternStage(_args);
    }
}

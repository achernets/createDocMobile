/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import { Int64 } from "thrift";
import * as thrift from "thrift";
import * as __ROOT_NAMESPACE__ from "./";
import * as ObserverCardStatus from "./ObserverCardStatus";
import * as ObserverCardComment from "./ObserverCardComment";
import * as ObserverDocument from "./ObserverDocument";
import * as DeadLineExtention from "./DeadLineExtention";
import * as CardsByStatus from "./CardsByStatus";
import * as DeadlineStatus from "./DeadlineStatus";
export interface IObserverCardArgs {
    id?: string;
    cardType?: __ROOT_NAMESPACE__.DocumentExecutionOwnerType;
    cardReassignType?: __ROOT_NAMESPACE__.ExecutionReassignType;
    cardTaskComment?: string;
    cardUser?: __ROOT_NAMESPACE__.UserOrGroup;
    deadLineDate?: number | Int64;
    cardStatus?: ObserverCardStatus.ObserverCardStatus;
    cardComments?: Array<ObserverCardComment.ObserverCardComment>;
    document?: ObserverDocument.ObserverDocument;
    originalCardStatus?: ObserverCardStatus.ObserverCardStatus;
    deadLines?: Array<DeadLineExtention.DeadLineExtention>;
    dashboardStatus?: CardsByStatus.CardsByStatus;
    deadlineStatus?: DeadlineStatus.DeadlineStatus;
}
export class ObserverCard {
    public id?: string;
    public cardType?: __ROOT_NAMESPACE__.DocumentExecutionOwnerType;
    public cardReassignType?: __ROOT_NAMESPACE__.ExecutionReassignType;
    public cardTaskComment?: string;
    public cardUser?: __ROOT_NAMESPACE__.UserOrGroup;
    public deadLineDate?: Int64;
    public cardStatus?: ObserverCardStatus.ObserverCardStatus;
    public cardComments?: Array<ObserverCardComment.ObserverCardComment>;
    public document?: ObserverDocument.ObserverDocument;
    public originalCardStatus?: ObserverCardStatus.ObserverCardStatus;
    public deadLines?: Array<DeadLineExtention.DeadLineExtention>;
    public dashboardStatus?: CardsByStatus.CardsByStatus;
    public deadlineStatus?: DeadlineStatus.DeadlineStatus;
    constructor(args?: IObserverCardArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.cardType != null) {
            this.cardType = args.cardType;
        }
        if (args != null && args.cardReassignType != null) {
            this.cardReassignType = args.cardReassignType;
        }
        if (args != null && args.cardTaskComment != null) {
            this.cardTaskComment = args.cardTaskComment;
        }
        if (args != null && args.cardUser != null) {
            this.cardUser = args.cardUser;
        }
        if (args != null && args.deadLineDate != null) {
            if (typeof args.deadLineDate === "number") {
                this.deadLineDate = new Int64(args.deadLineDate);
            }
            else {
                this.deadLineDate = args.deadLineDate;
            }
        }
        if (args != null && args.cardStatus != null) {
            this.cardStatus = args.cardStatus;
        }
        if (args != null && args.cardComments != null) {
            this.cardComments = args.cardComments;
        }
        if (args != null && args.document != null) {
            this.document = args.document;
        }
        if (args != null && args.originalCardStatus != null) {
            this.originalCardStatus = args.originalCardStatus;
        }
        if (args != null && args.deadLines != null) {
            this.deadLines = args.deadLines;
        }
        if (args != null && args.dashboardStatus != null) {
            this.dashboardStatus = args.dashboardStatus;
        }
        if (args != null && args.deadlineStatus != null) {
            this.deadlineStatus = args.deadlineStatus;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ObserverCard");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.cardType != null) {
            output.writeFieldBegin("cardType", thrift.Thrift.Type.I32, 2);
            output.writeI32(this.cardType);
            output.writeFieldEnd();
        }
        if (this.cardReassignType != null) {
            output.writeFieldBegin("cardReassignType", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.cardReassignType);
            output.writeFieldEnd();
        }
        if (this.cardTaskComment != null) {
            output.writeFieldBegin("cardTaskComment", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.cardTaskComment);
            output.writeFieldEnd();
        }
        if (this.cardUser != null) {
            output.writeFieldBegin("cardUser", thrift.Thrift.Type.STRUCT, 5);
            this.cardUser.write(output);
            output.writeFieldEnd();
        }
        if (this.deadLineDate != null) {
            output.writeFieldBegin("deadLineDate", thrift.Thrift.Type.I64, 6);
            output.writeI64(this.deadLineDate);
            output.writeFieldEnd();
        }
        if (this.cardStatus != null) {
            output.writeFieldBegin("cardStatus", thrift.Thrift.Type.I32, 7);
            output.writeI32(this.cardStatus);
            output.writeFieldEnd();
        }
        if (this.cardComments != null) {
            output.writeFieldBegin("cardComments", thrift.Thrift.Type.LIST, 8);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.cardComments.length);
            this.cardComments.forEach((value_1: ObserverCardComment.ObserverCardComment): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.document != null) {
            output.writeFieldBegin("document", thrift.Thrift.Type.STRUCT, 9);
            this.document.write(output);
            output.writeFieldEnd();
        }
        if (this.originalCardStatus != null) {
            output.writeFieldBegin("originalCardStatus", thrift.Thrift.Type.I32, 10);
            output.writeI32(this.originalCardStatus);
            output.writeFieldEnd();
        }
        if (this.deadLines != null) {
            output.writeFieldBegin("deadLines", thrift.Thrift.Type.LIST, 11);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.deadLines.length);
            this.deadLines.forEach((value_2: DeadLineExtention.DeadLineExtention): void => {
                value_2.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.dashboardStatus != null) {
            output.writeFieldBegin("dashboardStatus", thrift.Thrift.Type.I32, 12);
            output.writeI32(this.dashboardStatus);
            output.writeFieldEnd();
        }
        if (this.deadlineStatus != null) {
            output.writeFieldBegin("deadlineStatus", thrift.Thrift.Type.I32, 13);
            output.writeI32(this.deadlineStatus);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ObserverCard {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.id = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_4: __ROOT_NAMESPACE__.DocumentExecutionOwnerType = input.readI32();
                        _args.cardType = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_5: __ROOT_NAMESPACE__.ExecutionReassignType = input.readI32();
                        _args.cardReassignType = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.cardTaskComment = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_7: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                        _args.cardUser = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_8: Int64 = input.readI64();
                        _args.deadLineDate = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_9: ObserverCardStatus.ObserverCardStatus = input.readI32();
                        _args.cardStatus = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_10: Array<ObserverCardComment.ObserverCardComment> = new Array<ObserverCardComment.ObserverCardComment>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_11: ObserverCardComment.ObserverCardComment = ObserverCardComment.ObserverCardComment.read(input);
                            value_10.push(value_11);
                        }
                        input.readListEnd();
                        _args.cardComments = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_12: ObserverDocument.ObserverDocument = ObserverDocument.ObserverDocument.read(input);
                        _args.document = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_13: ObserverCardStatus.ObserverCardStatus = input.readI32();
                        _args.originalCardStatus = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_14: Array<DeadLineExtention.DeadLineExtention> = new Array<DeadLineExtention.DeadLineExtention>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_15: DeadLineExtention.DeadLineExtention = DeadLineExtention.DeadLineExtention.read(input);
                            value_14.push(value_15);
                        }
                        input.readListEnd();
                        _args.deadLines = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_16: CardsByStatus.CardsByStatus = input.readI32();
                        _args.dashboardStatus = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_17: DeadlineStatus.DeadlineStatus = input.readI32();
                        _args.deadlineStatus = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ObserverCard(_args);
    }
}

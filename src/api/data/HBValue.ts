/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import { Int64 } from "thrift";
import * as thrift from "thrift";
import * as __ROOT_NAMESPACE__ from "./";
import * as HBColumnType from "./HBColumnType";
export interface IHBValueArgs {
    id?: string;
    value?: Map<string, string>;
    user?: __ROOT_NAMESPACE__.UserOrGroup;
    type?: HBColumnType.HBColumnType;
    depRowId?: string;
    valueDate?: number | Int64;
}
export class HBValue {
    public id?: string;
    public value?: Map<string, string>;
    public user?: __ROOT_NAMESPACE__.UserOrGroup;
    public type?: HBColumnType.HBColumnType;
    public depRowId?: string;
    public valueDate?: Int64;
    constructor(args?: IHBValueArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.value != null) {
            this.value = args.value;
        }
        if (args != null && args.user != null) {
            this.user = args.user;
        }
        if (args != null && args.type != null) {
            this.type = args.type;
        }
        if (args != null && args.depRowId != null) {
            this.depRowId = args.depRowId;
        }
        if (args != null && args.valueDate != null) {
            if (typeof args.valueDate === "number") {
                this.valueDate = new Int64(args.valueDate);
            }
            else {
                this.valueDate = args.valueDate;
            }
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("HBValue");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.value != null) {
            output.writeFieldBegin("value", thrift.Thrift.Type.MAP, 2);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.value.size);
            this.value.forEach((value_1: string, key_1: string): void => {
                output.writeString(key_1);
                output.writeString(value_1);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.user != null) {
            output.writeFieldBegin("user", thrift.Thrift.Type.STRUCT, 3);
            this.user.write(output);
            output.writeFieldEnd();
        }
        if (this.type != null) {
            output.writeFieldBegin("type", thrift.Thrift.Type.I32, 4);
            output.writeI32(this.type);
            output.writeFieldEnd();
        }
        if (this.depRowId != null) {
            output.writeFieldBegin("depRowId", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.depRowId);
            output.writeFieldEnd();
        }
        if (this.valueDate != null) {
            output.writeFieldBegin("valueDate", thrift.Thrift.Type.I64, 6);
            output.writeI64(this.valueDate);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): HBValue {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.id = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_3: Map<string, string> = new Map<string, string>();
                        const metadata_1: thrift.TMap = input.readMapBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const key_2: string = input.readString();
                            const value_4: string = input.readString();
                            value_3.set(key_2, value_4);
                        }
                        input.readMapEnd();
                        _args.value = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_5: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                        _args.user = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_6: HBColumnType.HBColumnType = input.readI32();
                        _args.type = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_7: string = input.readString();
                        _args.depRowId = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_8: Int64 = input.readI64();
                        _args.valueDate = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new HBValue(_args);
    }
}

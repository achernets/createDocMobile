/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface IUserPreferencesArgs {
    userId?: string;
    attachDocs?: boolean;
    attachRegistry?: boolean;
    knlgBaseBarView?: boolean;
}
export class UserPreferences {
    public userId?: string;
    public attachDocs?: boolean;
    public attachRegistry?: boolean;
    public knlgBaseBarView?: boolean;
    constructor(args?: IUserPreferencesArgs) {
        if (args != null && args.userId != null) {
            this.userId = args.userId;
        }
        if (args != null && args.attachDocs != null) {
            this.attachDocs = args.attachDocs;
        }
        if (args != null && args.attachRegistry != null) {
            this.attachRegistry = args.attachRegistry;
        }
        if (args != null && args.knlgBaseBarView != null) {
            this.knlgBaseBarView = args.knlgBaseBarView;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("UserPreferences");
        if (this.userId != null) {
            output.writeFieldBegin("userId", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.userId);
            output.writeFieldEnd();
        }
        if (this.attachDocs != null) {
            output.writeFieldBegin("attachDocs", thrift.Thrift.Type.BOOL, 2);
            output.writeBool(this.attachDocs);
            output.writeFieldEnd();
        }
        if (this.attachRegistry != null) {
            output.writeFieldBegin("attachRegistry", thrift.Thrift.Type.BOOL, 3);
            output.writeBool(this.attachRegistry);
            output.writeFieldEnd();
        }
        if (this.knlgBaseBarView != null) {
            output.writeFieldBegin("knlgBaseBarView", thrift.Thrift.Type.BOOL, 4);
            output.writeBool(this.knlgBaseBarView);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): UserPreferences {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.userId = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_2: boolean = input.readBool();
                        _args.attachDocs = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_3: boolean = input.readBool();
                        _args.attachRegistry = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_4: boolean = input.readBool();
                        _args.knlgBaseBarView = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new UserPreferences(_args);
    }
}

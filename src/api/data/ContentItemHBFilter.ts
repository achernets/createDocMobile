/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as __ROOT_NAMESPACE__ from "./";
export interface IContentItemHBFilterArgs {
    searchKey?: string;
    condition?: __ROOT_NAMESPACE__.FilterCondition;
    defValue?: string;
    contentFilterKey?: string;
    contentFilterColumn?: __ROOT_NAMESPACE__.HBColumn;
    reverseHB?: __ROOT_NAMESPACE__.HandBook;
    reverseLeftColumn?: __ROOT_NAMESPACE__.HBColumn;
    reverseRightColumn?: __ROOT_NAMESPACE__.HBColumn;
}
export class ContentItemHBFilter {
    public searchKey?: string;
    public condition?: __ROOT_NAMESPACE__.FilterCondition;
    public defValue?: string;
    public contentFilterKey?: string;
    public contentFilterColumn?: __ROOT_NAMESPACE__.HBColumn;
    public reverseHB?: __ROOT_NAMESPACE__.HandBook;
    public reverseLeftColumn?: __ROOT_NAMESPACE__.HBColumn;
    public reverseRightColumn?: __ROOT_NAMESPACE__.HBColumn;
    constructor(args?: IContentItemHBFilterArgs) {
        if (args != null && args.searchKey != null) {
            this.searchKey = args.searchKey;
        }
        if (args != null && args.condition != null) {
            this.condition = args.condition;
        }
        if (args != null && args.defValue != null) {
            this.defValue = args.defValue;
        }
        if (args != null && args.contentFilterKey != null) {
            this.contentFilterKey = args.contentFilterKey;
        }
        if (args != null && args.contentFilterColumn != null) {
            this.contentFilterColumn = args.contentFilterColumn;
        }
        if (args != null && args.reverseHB != null) {
            this.reverseHB = args.reverseHB;
        }
        if (args != null && args.reverseLeftColumn != null) {
            this.reverseLeftColumn = args.reverseLeftColumn;
        }
        if (args != null && args.reverseRightColumn != null) {
            this.reverseRightColumn = args.reverseRightColumn;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ContentItemHBFilter");
        if (this.searchKey != null) {
            output.writeFieldBegin("searchKey", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.searchKey);
            output.writeFieldEnd();
        }
        if (this.condition != null) {
            output.writeFieldBegin("condition", thrift.Thrift.Type.I32, 2);
            output.writeI32(this.condition);
            output.writeFieldEnd();
        }
        if (this.defValue != null) {
            output.writeFieldBegin("defValue", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.defValue);
            output.writeFieldEnd();
        }
        if (this.contentFilterKey != null) {
            output.writeFieldBegin("contentFilterKey", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.contentFilterKey);
            output.writeFieldEnd();
        }
        if (this.contentFilterColumn != null) {
            output.writeFieldBegin("contentFilterColumn", thrift.Thrift.Type.STRUCT, 5);
            this.contentFilterColumn.write(output);
            output.writeFieldEnd();
        }
        if (this.reverseHB != null) {
            output.writeFieldBegin("reverseHB", thrift.Thrift.Type.STRUCT, 6);
            this.reverseHB.write(output);
            output.writeFieldEnd();
        }
        if (this.reverseLeftColumn != null) {
            output.writeFieldBegin("reverseLeftColumn", thrift.Thrift.Type.STRUCT, 7);
            this.reverseLeftColumn.write(output);
            output.writeFieldEnd();
        }
        if (this.reverseRightColumn != null) {
            output.writeFieldBegin("reverseRightColumn", thrift.Thrift.Type.STRUCT, 8);
            this.reverseRightColumn.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ContentItemHBFilter {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.searchKey = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_2: __ROOT_NAMESPACE__.FilterCondition = input.readI32();
                        _args.condition = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.defValue = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.contentFilterKey = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_5: __ROOT_NAMESPACE__.HBColumn = __ROOT_NAMESPACE__.HBColumn.read(input);
                        _args.contentFilterColumn = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_6: __ROOT_NAMESPACE__.HandBook = __ROOT_NAMESPACE__.HandBook.read(input);
                        _args.reverseHB = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_7: __ROOT_NAMESPACE__.HBColumn = __ROOT_NAMESPACE__.HBColumn.read(input);
                        _args.reverseLeftColumn = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_8: __ROOT_NAMESPACE__.HBColumn = __ROOT_NAMESPACE__.HBColumn.read(input);
                        _args.reverseRightColumn = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ContentItemHBFilter(_args);
    }
}

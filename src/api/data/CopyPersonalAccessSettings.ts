/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import { Int64 } from "thrift";
import * as thrift from "thrift";
import * as CopyDocumentAccessSettings from "./CopyDocumentAccessSettings";
export interface ICopyPersonalAccessSettingsArgs {
    accounts?: boolean;
    roles?: boolean;
    groups?: boolean;
    securityClassifications?: boolean;
    documentPeriod?: CopyDocumentAccessSettings.CopyDocumentAccessSettings;
    bpm?: boolean;
    blockUser?: boolean;
    deleteUser?: boolean;
    detachLicense?: boolean;
    reasonForRemoval?: string;
    userIdTo?: string;
    userIdFrom?: string;
    changeInUserChooser?: boolean;
    saveAccessToDocuments?: boolean;
    accessDateTo?: number | Int64;
}
export class CopyPersonalAccessSettings {
    public accounts?: boolean;
    public roles?: boolean;
    public groups?: boolean;
    public securityClassifications?: boolean;
    public documentPeriod?: CopyDocumentAccessSettings.CopyDocumentAccessSettings;
    public bpm?: boolean;
    public blockUser?: boolean;
    public deleteUser?: boolean;
    public detachLicense?: boolean;
    public reasonForRemoval?: string;
    public userIdTo?: string;
    public userIdFrom?: string;
    public changeInUserChooser?: boolean;
    public saveAccessToDocuments?: boolean;
    public accessDateTo?: Int64;
    constructor(args?: ICopyPersonalAccessSettingsArgs) {
        if (args != null && args.accounts != null) {
            this.accounts = args.accounts;
        }
        if (args != null && args.roles != null) {
            this.roles = args.roles;
        }
        if (args != null && args.groups != null) {
            this.groups = args.groups;
        }
        if (args != null && args.securityClassifications != null) {
            this.securityClassifications = args.securityClassifications;
        }
        if (args != null && args.documentPeriod != null) {
            this.documentPeriod = args.documentPeriod;
        }
        if (args != null && args.bpm != null) {
            this.bpm = args.bpm;
        }
        if (args != null && args.blockUser != null) {
            this.blockUser = args.blockUser;
        }
        if (args != null && args.deleteUser != null) {
            this.deleteUser = args.deleteUser;
        }
        if (args != null && args.detachLicense != null) {
            this.detachLicense = args.detachLicense;
        }
        if (args != null && args.reasonForRemoval != null) {
            this.reasonForRemoval = args.reasonForRemoval;
        }
        if (args != null && args.userIdTo != null) {
            this.userIdTo = args.userIdTo;
        }
        if (args != null && args.userIdFrom != null) {
            this.userIdFrom = args.userIdFrom;
        }
        if (args != null && args.changeInUserChooser != null) {
            this.changeInUserChooser = args.changeInUserChooser;
        }
        if (args != null && args.saveAccessToDocuments != null) {
            this.saveAccessToDocuments = args.saveAccessToDocuments;
        }
        if (args != null && args.accessDateTo != null) {
            if (typeof args.accessDateTo === "number") {
                this.accessDateTo = new Int64(args.accessDateTo);
            }
            else {
                this.accessDateTo = args.accessDateTo;
            }
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CopyPersonalAccessSettings");
        if (this.accounts != null) {
            output.writeFieldBegin("accounts", thrift.Thrift.Type.BOOL, 1);
            output.writeBool(this.accounts);
            output.writeFieldEnd();
        }
        if (this.roles != null) {
            output.writeFieldBegin("roles", thrift.Thrift.Type.BOOL, 2);
            output.writeBool(this.roles);
            output.writeFieldEnd();
        }
        if (this.groups != null) {
            output.writeFieldBegin("groups", thrift.Thrift.Type.BOOL, 3);
            output.writeBool(this.groups);
            output.writeFieldEnd();
        }
        if (this.securityClassifications != null) {
            output.writeFieldBegin("securityClassifications", thrift.Thrift.Type.BOOL, 4);
            output.writeBool(this.securityClassifications);
            output.writeFieldEnd();
        }
        if (this.documentPeriod != null) {
            output.writeFieldBegin("documentPeriod", thrift.Thrift.Type.STRUCT, 5);
            this.documentPeriod.write(output);
            output.writeFieldEnd();
        }
        if (this.bpm != null) {
            output.writeFieldBegin("bpm", thrift.Thrift.Type.BOOL, 7);
            output.writeBool(this.bpm);
            output.writeFieldEnd();
        }
        if (this.blockUser != null) {
            output.writeFieldBegin("blockUser", thrift.Thrift.Type.BOOL, 8);
            output.writeBool(this.blockUser);
            output.writeFieldEnd();
        }
        if (this.deleteUser != null) {
            output.writeFieldBegin("deleteUser", thrift.Thrift.Type.BOOL, 9);
            output.writeBool(this.deleteUser);
            output.writeFieldEnd();
        }
        if (this.detachLicense != null) {
            output.writeFieldBegin("detachLicense", thrift.Thrift.Type.BOOL, 10);
            output.writeBool(this.detachLicense);
            output.writeFieldEnd();
        }
        if (this.reasonForRemoval != null) {
            output.writeFieldBegin("reasonForRemoval", thrift.Thrift.Type.STRING, 11);
            output.writeString(this.reasonForRemoval);
            output.writeFieldEnd();
        }
        if (this.userIdTo != null) {
            output.writeFieldBegin("userIdTo", thrift.Thrift.Type.STRING, 12);
            output.writeString(this.userIdTo);
            output.writeFieldEnd();
        }
        if (this.userIdFrom != null) {
            output.writeFieldBegin("userIdFrom", thrift.Thrift.Type.STRING, 13);
            output.writeString(this.userIdFrom);
            output.writeFieldEnd();
        }
        if (this.changeInUserChooser != null) {
            output.writeFieldBegin("changeInUserChooser", thrift.Thrift.Type.BOOL, 14);
            output.writeBool(this.changeInUserChooser);
            output.writeFieldEnd();
        }
        if (this.saveAccessToDocuments != null) {
            output.writeFieldBegin("saveAccessToDocuments", thrift.Thrift.Type.BOOL, 15);
            output.writeBool(this.saveAccessToDocuments);
            output.writeFieldEnd();
        }
        if (this.accessDateTo != null) {
            output.writeFieldBegin("accessDateTo", thrift.Thrift.Type.I64, 16);
            output.writeI64(this.accessDateTo);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CopyPersonalAccessSettings {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_1: boolean = input.readBool();
                        _args.accounts = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_2: boolean = input.readBool();
                        _args.roles = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_3: boolean = input.readBool();
                        _args.groups = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_4: boolean = input.readBool();
                        _args.securityClassifications = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_5: CopyDocumentAccessSettings.CopyDocumentAccessSettings = CopyDocumentAccessSettings.CopyDocumentAccessSettings.read(input);
                        _args.documentPeriod = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_6: boolean = input.readBool();
                        _args.bpm = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_7: boolean = input.readBool();
                        _args.blockUser = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_8: boolean = input.readBool();
                        _args.deleteUser = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_9: boolean = input.readBool();
                        _args.detachLicense = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_10: string = input.readString();
                        _args.reasonForRemoval = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_11: string = input.readString();
                        _args.userIdTo = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_12: string = input.readString();
                        _args.userIdFrom = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_13: boolean = input.readBool();
                        _args.changeInUserChooser = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_14: boolean = input.readBool();
                        _args.saveAccessToDocuments = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_15: Int64 = input.readI64();
                        _args.accessDateTo = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new CopyPersonalAccessSettings(_args);
    }
}

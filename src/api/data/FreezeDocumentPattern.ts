/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import { Int64 } from "thrift";
import * as thrift from "thrift";
import * as DocumentPatternGroup from "./DocumentPatternGroup";
import * as __ROOT_NAMESPACE__ from "./";
import * as PatternType from "./PatternType";
import * as AccessRule from "./AccessRule";
export interface IFreezeDocumentPatternArgs {
    id?: string;
    nameDocPattern?: string;
    descriptionDocPattern?: string;
    creatorId?: string;
    modifierId?: string;
    createDate?: number | Int64;
    modifiedDate?: number | Int64;
    deleteDate?: number | Int64;
    isValidState?: boolean;
    documentPatternGroup?: DocumentPatternGroup.DocumentPatternGroup;
    scMask?: string;
    controlDate?: string;
    useSC?: boolean;
    useDocNumber?: boolean;
    needGeneratePdf?: boolean;
    startDocNumber?: number | Int64;
    currentDocNumber?: number | Int64;
    account?: __ROOT_NAMESPACE__.Account;
    originalPatternId?: string;
    docId?: string;
    hideAuto?: boolean;
    hideExt?: boolean;
    patternType?: PatternType.PatternType;
    autoGenerateDocName?: boolean;
    docNamePattern?: string;
    nameDocPatternLoc?: Map<string, string>;
    descriptionDocPatternLoc?: Map<string, string>;
    changeDocSubStatus?: AccessRule.AccessRule;
}
export class FreezeDocumentPattern {
    public id?: string;
    public nameDocPattern?: string;
    public descriptionDocPattern?: string;
    public creatorId?: string;
    public modifierId?: string;
    public createDate?: Int64;
    public modifiedDate?: Int64;
    public deleteDate?: Int64;
    public isValidState?: boolean;
    public documentPatternGroup?: DocumentPatternGroup.DocumentPatternGroup;
    public scMask?: string;
    public controlDate?: string;
    public useSC?: boolean;
    public useDocNumber?: boolean;
    public needGeneratePdf?: boolean;
    public startDocNumber?: Int64;
    public currentDocNumber?: Int64;
    public account?: __ROOT_NAMESPACE__.Account;
    public originalPatternId?: string;
    public docId?: string;
    public hideAuto?: boolean;
    public hideExt?: boolean;
    public patternType?: PatternType.PatternType;
    public autoGenerateDocName?: boolean;
    public docNamePattern?: string;
    public nameDocPatternLoc?: Map<string, string>;
    public descriptionDocPatternLoc?: Map<string, string>;
    public changeDocSubStatus?: AccessRule.AccessRule;
    constructor(args?: IFreezeDocumentPatternArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.nameDocPattern != null) {
            this.nameDocPattern = args.nameDocPattern;
        }
        if (args != null && args.descriptionDocPattern != null) {
            this.descriptionDocPattern = args.descriptionDocPattern;
        }
        if (args != null && args.creatorId != null) {
            this.creatorId = args.creatorId;
        }
        if (args != null && args.modifierId != null) {
            this.modifierId = args.modifierId;
        }
        if (args != null && args.createDate != null) {
            if (typeof args.createDate === "number") {
                this.createDate = new Int64(args.createDate);
            }
            else {
                this.createDate = args.createDate;
            }
        }
        if (args != null && args.modifiedDate != null) {
            if (typeof args.modifiedDate === "number") {
                this.modifiedDate = new Int64(args.modifiedDate);
            }
            else {
                this.modifiedDate = args.modifiedDate;
            }
        }
        if (args != null && args.deleteDate != null) {
            if (typeof args.deleteDate === "number") {
                this.deleteDate = new Int64(args.deleteDate);
            }
            else {
                this.deleteDate = args.deleteDate;
            }
        }
        if (args != null && args.isValidState != null) {
            this.isValidState = args.isValidState;
        }
        if (args != null && args.documentPatternGroup != null) {
            this.documentPatternGroup = args.documentPatternGroup;
        }
        if (args != null && args.scMask != null) {
            this.scMask = args.scMask;
        }
        if (args != null && args.controlDate != null) {
            this.controlDate = args.controlDate;
        }
        if (args != null && args.useSC != null) {
            this.useSC = args.useSC;
        }
        if (args != null && args.useDocNumber != null) {
            this.useDocNumber = args.useDocNumber;
        }
        if (args != null && args.needGeneratePdf != null) {
            this.needGeneratePdf = args.needGeneratePdf;
        }
        if (args != null && args.startDocNumber != null) {
            if (typeof args.startDocNumber === "number") {
                this.startDocNumber = new Int64(args.startDocNumber);
            }
            else {
                this.startDocNumber = args.startDocNumber;
            }
        }
        if (args != null && args.currentDocNumber != null) {
            if (typeof args.currentDocNumber === "number") {
                this.currentDocNumber = new Int64(args.currentDocNumber);
            }
            else {
                this.currentDocNumber = args.currentDocNumber;
            }
        }
        if (args != null && args.account != null) {
            this.account = args.account;
        }
        if (args != null && args.originalPatternId != null) {
            this.originalPatternId = args.originalPatternId;
        }
        if (args != null && args.docId != null) {
            this.docId = args.docId;
        }
        if (args != null && args.hideAuto != null) {
            this.hideAuto = args.hideAuto;
        }
        if (args != null && args.hideExt != null) {
            this.hideExt = args.hideExt;
        }
        if (args != null && args.patternType != null) {
            this.patternType = args.patternType;
        }
        if (args != null && args.autoGenerateDocName != null) {
            this.autoGenerateDocName = args.autoGenerateDocName;
        }
        if (args != null && args.docNamePattern != null) {
            this.docNamePattern = args.docNamePattern;
        }
        if (args != null && args.nameDocPatternLoc != null) {
            this.nameDocPatternLoc = args.nameDocPatternLoc;
        }
        if (args != null && args.descriptionDocPatternLoc != null) {
            this.descriptionDocPatternLoc = args.descriptionDocPatternLoc;
        }
        if (args != null && args.changeDocSubStatus != null) {
            this.changeDocSubStatus = args.changeDocSubStatus;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("FreezeDocumentPattern");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.nameDocPattern != null) {
            output.writeFieldBegin("nameDocPattern", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.nameDocPattern);
            output.writeFieldEnd();
        }
        if (this.descriptionDocPattern != null) {
            output.writeFieldBegin("descriptionDocPattern", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.descriptionDocPattern);
            output.writeFieldEnd();
        }
        if (this.creatorId != null) {
            output.writeFieldBegin("creatorId", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.creatorId);
            output.writeFieldEnd();
        }
        if (this.modifierId != null) {
            output.writeFieldBegin("modifierId", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.modifierId);
            output.writeFieldEnd();
        }
        if (this.createDate != null) {
            output.writeFieldBegin("createDate", thrift.Thrift.Type.I64, 6);
            output.writeI64(this.createDate);
            output.writeFieldEnd();
        }
        if (this.modifiedDate != null) {
            output.writeFieldBegin("modifiedDate", thrift.Thrift.Type.I64, 7);
            output.writeI64(this.modifiedDate);
            output.writeFieldEnd();
        }
        if (this.deleteDate != null) {
            output.writeFieldBegin("deleteDate", thrift.Thrift.Type.I64, 8);
            output.writeI64(this.deleteDate);
            output.writeFieldEnd();
        }
        if (this.isValidState != null) {
            output.writeFieldBegin("isValidState", thrift.Thrift.Type.BOOL, 9);
            output.writeBool(this.isValidState);
            output.writeFieldEnd();
        }
        if (this.documentPatternGroup != null) {
            output.writeFieldBegin("documentPatternGroup", thrift.Thrift.Type.STRUCT, 11);
            this.documentPatternGroup.write(output);
            output.writeFieldEnd();
        }
        if (this.scMask != null) {
            output.writeFieldBegin("scMask", thrift.Thrift.Type.STRING, 12);
            output.writeString(this.scMask);
            output.writeFieldEnd();
        }
        if (this.controlDate != null) {
            output.writeFieldBegin("controlDate", thrift.Thrift.Type.STRING, 13);
            output.writeString(this.controlDate);
            output.writeFieldEnd();
        }
        if (this.useSC != null) {
            output.writeFieldBegin("useSC", thrift.Thrift.Type.BOOL, 14);
            output.writeBool(this.useSC);
            output.writeFieldEnd();
        }
        if (this.useDocNumber != null) {
            output.writeFieldBegin("useDocNumber", thrift.Thrift.Type.BOOL, 15);
            output.writeBool(this.useDocNumber);
            output.writeFieldEnd();
        }
        if (this.needGeneratePdf != null) {
            output.writeFieldBegin("needGeneratePdf", thrift.Thrift.Type.BOOL, 16);
            output.writeBool(this.needGeneratePdf);
            output.writeFieldEnd();
        }
        if (this.startDocNumber != null) {
            output.writeFieldBegin("startDocNumber", thrift.Thrift.Type.I64, 17);
            output.writeI64(this.startDocNumber);
            output.writeFieldEnd();
        }
        if (this.currentDocNumber != null) {
            output.writeFieldBegin("currentDocNumber", thrift.Thrift.Type.I64, 18);
            output.writeI64(this.currentDocNumber);
            output.writeFieldEnd();
        }
        if (this.account != null) {
            output.writeFieldBegin("account", thrift.Thrift.Type.STRUCT, 19);
            this.account.write(output);
            output.writeFieldEnd();
        }
        if (this.originalPatternId != null) {
            output.writeFieldBegin("originalPatternId", thrift.Thrift.Type.STRING, 20);
            output.writeString(this.originalPatternId);
            output.writeFieldEnd();
        }
        if (this.docId != null) {
            output.writeFieldBegin("docId", thrift.Thrift.Type.STRING, 21);
            output.writeString(this.docId);
            output.writeFieldEnd();
        }
        if (this.hideAuto != null) {
            output.writeFieldBegin("hideAuto", thrift.Thrift.Type.BOOL, 22);
            output.writeBool(this.hideAuto);
            output.writeFieldEnd();
        }
        if (this.hideExt != null) {
            output.writeFieldBegin("hideExt", thrift.Thrift.Type.BOOL, 23);
            output.writeBool(this.hideExt);
            output.writeFieldEnd();
        }
        if (this.patternType != null) {
            output.writeFieldBegin("patternType", thrift.Thrift.Type.I32, 26);
            output.writeI32(this.patternType);
            output.writeFieldEnd();
        }
        if (this.autoGenerateDocName != null) {
            output.writeFieldBegin("autoGenerateDocName", thrift.Thrift.Type.BOOL, 32);
            output.writeBool(this.autoGenerateDocName);
            output.writeFieldEnd();
        }
        if (this.docNamePattern != null) {
            output.writeFieldBegin("docNamePattern", thrift.Thrift.Type.STRING, 33);
            output.writeString(this.docNamePattern);
            output.writeFieldEnd();
        }
        if (this.nameDocPatternLoc != null) {
            output.writeFieldBegin("nameDocPatternLoc", thrift.Thrift.Type.MAP, 34);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.nameDocPatternLoc.size);
            this.nameDocPatternLoc.forEach((value_1: string, key_1: string): void => {
                output.writeString(key_1);
                output.writeString(value_1);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.descriptionDocPatternLoc != null) {
            output.writeFieldBegin("descriptionDocPatternLoc", thrift.Thrift.Type.MAP, 35);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.descriptionDocPatternLoc.size);
            this.descriptionDocPatternLoc.forEach((value_2: string, key_2: string): void => {
                output.writeString(key_2);
                output.writeString(value_2);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.changeDocSubStatus != null) {
            output.writeFieldBegin("changeDocSubStatus", thrift.Thrift.Type.STRUCT, 36);
            this.changeDocSubStatus.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): FreezeDocumentPattern {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.id = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.nameDocPattern = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.descriptionDocPattern = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.creatorId = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_7: string = input.readString();
                        _args.modifierId = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_8: Int64 = input.readI64();
                        _args.createDate = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_9: Int64 = input.readI64();
                        _args.modifiedDate = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_10: Int64 = input.readI64();
                        _args.deleteDate = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_11: boolean = input.readBool();
                        _args.isValidState = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_12: DocumentPatternGroup.DocumentPatternGroup = DocumentPatternGroup.DocumentPatternGroup.read(input);
                        _args.documentPatternGroup = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_13: string = input.readString();
                        _args.scMask = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_14: string = input.readString();
                        _args.controlDate = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_15: boolean = input.readBool();
                        _args.useSC = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_16: boolean = input.readBool();
                        _args.useDocNumber = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_17: boolean = input.readBool();
                        _args.needGeneratePdf = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 17:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_18: Int64 = input.readI64();
                        _args.startDocNumber = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 18:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_19: Int64 = input.readI64();
                        _args.currentDocNumber = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 19:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_20: __ROOT_NAMESPACE__.Account = __ROOT_NAMESPACE__.Account.read(input);
                        _args.account = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 20:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_21: string = input.readString();
                        _args.originalPatternId = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 21:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_22: string = input.readString();
                        _args.docId = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 22:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_23: boolean = input.readBool();
                        _args.hideAuto = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 23:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_24: boolean = input.readBool();
                        _args.hideExt = value_24;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 26:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_25: PatternType.PatternType = input.readI32();
                        _args.patternType = value_25;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 32:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_26: boolean = input.readBool();
                        _args.autoGenerateDocName = value_26;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 33:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_27: string = input.readString();
                        _args.docNamePattern = value_27;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 34:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_28: Map<string, string> = new Map<string, string>();
                        const metadata_1: thrift.TMap = input.readMapBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const key_3: string = input.readString();
                            const value_29: string = input.readString();
                            value_28.set(key_3, value_29);
                        }
                        input.readMapEnd();
                        _args.nameDocPatternLoc = value_28;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 35:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_30: Map<string, string> = new Map<string, string>();
                        const metadata_2: thrift.TMap = input.readMapBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const key_4: string = input.readString();
                            const value_31: string = input.readString();
                            value_30.set(key_4, value_31);
                        }
                        input.readMapEnd();
                        _args.descriptionDocPatternLoc = value_30;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 36:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_32: AccessRule.AccessRule = AccessRule.AccessRule.read(input);
                        _args.changeDocSubStatus = value_32;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new FreezeDocumentPattern(_args);
    }
}

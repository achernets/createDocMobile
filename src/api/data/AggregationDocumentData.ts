/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as __ROOT_NAMESPACE__ from "./";
import * as MatchingUserGroup from "./MatchingUserGroup";
import * as DocSubStatus from "./DocSubStatus";
export interface IAggregationDocumentDataArgs {
    document?: __ROOT_NAMESPACE__.Document;
    comments?: Array<__ROOT_NAMESPACE__.DocumentComment>;
    relations?: Array<__ROOT_NAMESPACE__.DocumentRelation>;
    securityClassifications?: Array<__ROOT_NAMESPACE__.SecurityClassification>;
    deadlineHistories?: Array<__ROOT_NAMESPACE__.DeadlineHistory>;
    attachments?: Array<__ROOT_NAMESPACE__.Attachment>;
    reportTemplates?: Array<__ROOT_NAMESPACE__.ReportTemplate>;
    permissions?: __ROOT_NAMESPACE__.DocPermissions;
    errors?: Map<string, string>;
    matchingUserGroup?: Array<MatchingUserGroup.MatchingUserGroup>;
    contentHolders?: Array<__ROOT_NAMESPACE__.ContentHolderShowPlace>;
    policy?: __ROOT_NAMESPACE__.DocumentAccessPolicy;
    exceptionMap?: Map<__ROOT_NAMESPACE__.AggregationRequiredType, __ROOT_NAMESPACE__.PreconditionException>;
    docSubStasuses?: Array<DocSubStatus.DocSubStatus>;
}
export class AggregationDocumentData {
    public document?: __ROOT_NAMESPACE__.Document;
    public comments?: Array<__ROOT_NAMESPACE__.DocumentComment>;
    public relations?: Array<__ROOT_NAMESPACE__.DocumentRelation>;
    public securityClassifications?: Array<__ROOT_NAMESPACE__.SecurityClassification>;
    public deadlineHistories?: Array<__ROOT_NAMESPACE__.DeadlineHistory>;
    public attachments?: Array<__ROOT_NAMESPACE__.Attachment>;
    public reportTemplates?: Array<__ROOT_NAMESPACE__.ReportTemplate>;
    public permissions?: __ROOT_NAMESPACE__.DocPermissions;
    public errors?: Map<string, string>;
    public matchingUserGroup?: Array<MatchingUserGroup.MatchingUserGroup>;
    public contentHolders?: Array<__ROOT_NAMESPACE__.ContentHolderShowPlace>;
    public policy?: __ROOT_NAMESPACE__.DocumentAccessPolicy;
    public exceptionMap?: Map<__ROOT_NAMESPACE__.AggregationRequiredType, __ROOT_NAMESPACE__.PreconditionException>;
    public docSubStasuses?: Array<DocSubStatus.DocSubStatus>;
    constructor(args?: IAggregationDocumentDataArgs) {
        if (args != null && args.document != null) {
            this.document = args.document;
        }
        if (args != null && args.comments != null) {
            this.comments = args.comments;
        }
        if (args != null && args.relations != null) {
            this.relations = args.relations;
        }
        if (args != null && args.securityClassifications != null) {
            this.securityClassifications = args.securityClassifications;
        }
        if (args != null && args.deadlineHistories != null) {
            this.deadlineHistories = args.deadlineHistories;
        }
        if (args != null && args.attachments != null) {
            this.attachments = args.attachments;
        }
        if (args != null && args.reportTemplates != null) {
            this.reportTemplates = args.reportTemplates;
        }
        if (args != null && args.permissions != null) {
            this.permissions = args.permissions;
        }
        if (args != null && args.errors != null) {
            this.errors = args.errors;
        }
        if (args != null && args.matchingUserGroup != null) {
            this.matchingUserGroup = args.matchingUserGroup;
        }
        if (args != null && args.contentHolders != null) {
            this.contentHolders = args.contentHolders;
        }
        if (args != null && args.policy != null) {
            this.policy = args.policy;
        }
        if (args != null && args.exceptionMap != null) {
            this.exceptionMap = args.exceptionMap;
        }
        if (args != null && args.docSubStasuses != null) {
            this.docSubStasuses = args.docSubStasuses;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("AggregationDocumentData");
        if (this.document != null) {
            output.writeFieldBegin("document", thrift.Thrift.Type.STRUCT, 1);
            this.document.write(output);
            output.writeFieldEnd();
        }
        if (this.comments != null) {
            output.writeFieldBegin("comments", thrift.Thrift.Type.LIST, 4);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.comments.length);
            this.comments.forEach((value_1: __ROOT_NAMESPACE__.DocumentComment): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.relations != null) {
            output.writeFieldBegin("relations", thrift.Thrift.Type.LIST, 5);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.relations.length);
            this.relations.forEach((value_2: __ROOT_NAMESPACE__.DocumentRelation): void => {
                value_2.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.securityClassifications != null) {
            output.writeFieldBegin("securityClassifications", thrift.Thrift.Type.LIST, 7);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.securityClassifications.length);
            this.securityClassifications.forEach((value_3: __ROOT_NAMESPACE__.SecurityClassification): void => {
                value_3.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.deadlineHistories != null) {
            output.writeFieldBegin("deadlineHistories", thrift.Thrift.Type.LIST, 8);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.deadlineHistories.length);
            this.deadlineHistories.forEach((value_4: __ROOT_NAMESPACE__.DeadlineHistory): void => {
                value_4.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.attachments != null) {
            output.writeFieldBegin("attachments", thrift.Thrift.Type.LIST, 9);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.attachments.length);
            this.attachments.forEach((value_5: __ROOT_NAMESPACE__.Attachment): void => {
                value_5.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.reportTemplates != null) {
            output.writeFieldBegin("reportTemplates", thrift.Thrift.Type.LIST, 10);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.reportTemplates.length);
            this.reportTemplates.forEach((value_6: __ROOT_NAMESPACE__.ReportTemplate): void => {
                value_6.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.permissions != null) {
            output.writeFieldBegin("permissions", thrift.Thrift.Type.STRUCT, 11);
            this.permissions.write(output);
            output.writeFieldEnd();
        }
        if (this.errors != null) {
            output.writeFieldBegin("errors", thrift.Thrift.Type.MAP, 12);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.errors.size);
            this.errors.forEach((value_7: string, key_1: string): void => {
                output.writeString(key_1);
                output.writeString(value_7);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.matchingUserGroup != null) {
            output.writeFieldBegin("matchingUserGroup", thrift.Thrift.Type.LIST, 13);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.matchingUserGroup.length);
            this.matchingUserGroup.forEach((value_8: MatchingUserGroup.MatchingUserGroup): void => {
                value_8.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.contentHolders != null) {
            output.writeFieldBegin("contentHolders", thrift.Thrift.Type.LIST, 14);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.contentHolders.length);
            this.contentHolders.forEach((value_9: __ROOT_NAMESPACE__.ContentHolderShowPlace): void => {
                value_9.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.policy != null) {
            output.writeFieldBegin("policy", thrift.Thrift.Type.STRUCT, 15);
            this.policy.write(output);
            output.writeFieldEnd();
        }
        if (this.exceptionMap != null) {
            output.writeFieldBegin("exceptionMap", thrift.Thrift.Type.MAP, 16);
            output.writeMapBegin(thrift.Thrift.Type.I32, thrift.Thrift.Type.STRUCT, this.exceptionMap.size);
            this.exceptionMap.forEach((value_10: __ROOT_NAMESPACE__.PreconditionException, key_2: __ROOT_NAMESPACE__.AggregationRequiredType): void => {
                output.writeI32(key_2);
                value_10.write(output);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.docSubStasuses != null) {
            output.writeFieldBegin("docSubStasuses", thrift.Thrift.Type.LIST, 17);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.docSubStasuses.length);
            this.docSubStasuses.forEach((value_11: DocSubStatus.DocSubStatus): void => {
                value_11.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): AggregationDocumentData {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_12: __ROOT_NAMESPACE__.Document = __ROOT_NAMESPACE__.Document.read(input);
                        _args.document = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_13: Array<__ROOT_NAMESPACE__.DocumentComment> = new Array<__ROOT_NAMESPACE__.DocumentComment>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_14: __ROOT_NAMESPACE__.DocumentComment = __ROOT_NAMESPACE__.DocumentComment.read(input);
                            value_13.push(value_14);
                        }
                        input.readListEnd();
                        _args.comments = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_15: Array<__ROOT_NAMESPACE__.DocumentRelation> = new Array<__ROOT_NAMESPACE__.DocumentRelation>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_16: __ROOT_NAMESPACE__.DocumentRelation = __ROOT_NAMESPACE__.DocumentRelation.read(input);
                            value_15.push(value_16);
                        }
                        input.readListEnd();
                        _args.relations = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_17: Array<__ROOT_NAMESPACE__.SecurityClassification> = new Array<__ROOT_NAMESPACE__.SecurityClassification>();
                        const metadata_3: thrift.TList = input.readListBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_18: __ROOT_NAMESPACE__.SecurityClassification = __ROOT_NAMESPACE__.SecurityClassification.read(input);
                            value_17.push(value_18);
                        }
                        input.readListEnd();
                        _args.securityClassifications = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_19: Array<__ROOT_NAMESPACE__.DeadlineHistory> = new Array<__ROOT_NAMESPACE__.DeadlineHistory>();
                        const metadata_4: thrift.TList = input.readListBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const value_20: __ROOT_NAMESPACE__.DeadlineHistory = __ROOT_NAMESPACE__.DeadlineHistory.read(input);
                            value_19.push(value_20);
                        }
                        input.readListEnd();
                        _args.deadlineHistories = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_21: Array<__ROOT_NAMESPACE__.Attachment> = new Array<__ROOT_NAMESPACE__.Attachment>();
                        const metadata_5: thrift.TList = input.readListBegin();
                        const size_5: number = metadata_5.size;
                        for (let i_5: number = 0; i_5 < size_5; i_5++) {
                            const value_22: __ROOT_NAMESPACE__.Attachment = __ROOT_NAMESPACE__.Attachment.read(input);
                            value_21.push(value_22);
                        }
                        input.readListEnd();
                        _args.attachments = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_23: Array<__ROOT_NAMESPACE__.ReportTemplate> = new Array<__ROOT_NAMESPACE__.ReportTemplate>();
                        const metadata_6: thrift.TList = input.readListBegin();
                        const size_6: number = metadata_6.size;
                        for (let i_6: number = 0; i_6 < size_6; i_6++) {
                            const value_24: __ROOT_NAMESPACE__.ReportTemplate = __ROOT_NAMESPACE__.ReportTemplate.read(input);
                            value_23.push(value_24);
                        }
                        input.readListEnd();
                        _args.reportTemplates = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_25: __ROOT_NAMESPACE__.DocPermissions = __ROOT_NAMESPACE__.DocPermissions.read(input);
                        _args.permissions = value_25;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_26: Map<string, string> = new Map<string, string>();
                        const metadata_7: thrift.TMap = input.readMapBegin();
                        const size_7: number = metadata_7.size;
                        for (let i_7: number = 0; i_7 < size_7; i_7++) {
                            const key_3: string = input.readString();
                            const value_27: string = input.readString();
                            value_26.set(key_3, value_27);
                        }
                        input.readMapEnd();
                        _args.errors = value_26;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_28: Array<MatchingUserGroup.MatchingUserGroup> = new Array<MatchingUserGroup.MatchingUserGroup>();
                        const metadata_8: thrift.TList = input.readListBegin();
                        const size_8: number = metadata_8.size;
                        for (let i_8: number = 0; i_8 < size_8; i_8++) {
                            const value_29: MatchingUserGroup.MatchingUserGroup = MatchingUserGroup.MatchingUserGroup.read(input);
                            value_28.push(value_29);
                        }
                        input.readListEnd();
                        _args.matchingUserGroup = value_28;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_30: Array<__ROOT_NAMESPACE__.ContentHolderShowPlace> = new Array<__ROOT_NAMESPACE__.ContentHolderShowPlace>();
                        const metadata_9: thrift.TList = input.readListBegin();
                        const size_9: number = metadata_9.size;
                        for (let i_9: number = 0; i_9 < size_9; i_9++) {
                            const value_31: __ROOT_NAMESPACE__.ContentHolderShowPlace = __ROOT_NAMESPACE__.ContentHolderShowPlace.read(input);
                            value_30.push(value_31);
                        }
                        input.readListEnd();
                        _args.contentHolders = value_30;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_32: __ROOT_NAMESPACE__.DocumentAccessPolicy = __ROOT_NAMESPACE__.DocumentAccessPolicy.read(input);
                        _args.policy = value_32;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_33: Map<__ROOT_NAMESPACE__.AggregationRequiredType, __ROOT_NAMESPACE__.PreconditionException> = new Map<__ROOT_NAMESPACE__.AggregationRequiredType, __ROOT_NAMESPACE__.PreconditionException>();
                        const metadata_10: thrift.TMap = input.readMapBegin();
                        const size_10: number = metadata_10.size;
                        for (let i_10: number = 0; i_10 < size_10; i_10++) {
                            const key_4: __ROOT_NAMESPACE__.AggregationRequiredType = input.readI32();
                            const value_34: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                            value_33.set(key_4, value_34);
                        }
                        input.readMapEnd();
                        _args.exceptionMap = value_33;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 17:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_35: Array<DocSubStatus.DocSubStatus> = new Array<DocSubStatus.DocSubStatus>();
                        const metadata_11: thrift.TList = input.readListBegin();
                        const size_11: number = metadata_11.size;
                        for (let i_11: number = 0; i_11 < size_11; i_11++) {
                            const value_36: DocSubStatus.DocSubStatus = DocSubStatus.DocSubStatus.read(input);
                            value_35.push(value_36);
                        }
                        input.readListEnd();
                        _args.docSubStasuses = value_35;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new AggregationDocumentData(_args);
    }
}

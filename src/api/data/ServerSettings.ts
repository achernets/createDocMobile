/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as AuthMethod from "./AuthMethod";
export interface IServerSettingsArgs {
    infoMap?: Map<string, string>;
    languageMap?: Map<string, string>;
    authMethods?: Array<AuthMethod.AuthMethod>;
    mobileMap?: Map<string, string>;
}
export class ServerSettings {
    public infoMap?: Map<string, string>;
    public languageMap?: Map<string, string>;
    public authMethods?: Array<AuthMethod.AuthMethod>;
    public mobileMap?: Map<string, string>;
    constructor(args?: IServerSettingsArgs) {
        if (args != null && args.infoMap != null) {
            this.infoMap = args.infoMap;
        }
        if (args != null && args.languageMap != null) {
            this.languageMap = args.languageMap;
        }
        if (args != null && args.authMethods != null) {
            this.authMethods = args.authMethods;
        }
        if (args != null && args.mobileMap != null) {
            this.mobileMap = args.mobileMap;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ServerSettings");
        if (this.infoMap != null) {
            output.writeFieldBegin("infoMap", thrift.Thrift.Type.MAP, 1);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.infoMap.size);
            this.infoMap.forEach((value_1: string, key_1: string): void => {
                output.writeString(key_1);
                output.writeString(value_1);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.languageMap != null) {
            output.writeFieldBegin("languageMap", thrift.Thrift.Type.MAP, 2);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.languageMap.size);
            this.languageMap.forEach((value_2: string, key_2: string): void => {
                output.writeString(key_2);
                output.writeString(value_2);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.authMethods != null) {
            output.writeFieldBegin("authMethods", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.authMethods.length);
            this.authMethods.forEach((value_3: AuthMethod.AuthMethod): void => {
                value_3.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.mobileMap != null) {
            output.writeFieldBegin("mobileMap", thrift.Thrift.Type.MAP, 4);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.mobileMap.size);
            this.mobileMap.forEach((value_4: string, key_3: string): void => {
                output.writeString(key_3);
                output.writeString(value_4);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ServerSettings {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_5: Map<string, string> = new Map<string, string>();
                        const metadata_1: thrift.TMap = input.readMapBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const key_4: string = input.readString();
                            const value_6: string = input.readString();
                            value_5.set(key_4, value_6);
                        }
                        input.readMapEnd();
                        _args.infoMap = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_7: Map<string, string> = new Map<string, string>();
                        const metadata_2: thrift.TMap = input.readMapBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const key_5: string = input.readString();
                            const value_8: string = input.readString();
                            value_7.set(key_5, value_8);
                        }
                        input.readMapEnd();
                        _args.languageMap = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_9: Array<AuthMethod.AuthMethod> = new Array<AuthMethod.AuthMethod>();
                        const metadata_3: thrift.TList = input.readListBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_10: AuthMethod.AuthMethod = AuthMethod.AuthMethod.read(input);
                            value_9.push(value_10);
                        }
                        input.readListEnd();
                        _args.authMethods = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_11: Map<string, string> = new Map<string, string>();
                        const metadata_4: thrift.TMap = input.readMapBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const key_6: string = input.readString();
                            const value_12: string = input.readString();
                            value_11.set(key_6, value_12);
                        }
                        input.readMapEnd();
                        _args.mobileMap = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ServerSettings(_args);
    }
}

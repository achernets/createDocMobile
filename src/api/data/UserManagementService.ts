/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as __ROOT_NAMESPACE__ from "./";
import * as ExistingDocumentsAccessPolicy from "./ExistingDocumentsAccessPolicy";
import * as RoleScHelper from "./RoleScHelper";
import * as UserKeyData from "./UserKeyData";
import * as ClientDelegateInfo from "./ClientDelegateInfo";
import * as ClientDelegateDetails from "./ClientDelegateDetails";
import * as ChiefLevel from "./ChiefLevel";
import * as UserPreferences from "./UserPreferences";
import * as UserAdditionalInfo from "./UserAdditionalInfo";
import * as UserDelegates from "./UserDelegates";
export interface IGetUserOrGroupArgsArgs {
    token: string;
    userOrGroupId: string;
    userOrGroupType: __ROOT_NAMESPACE__.UserOrGroupType;
    userVersion: string;
}
export class GetUserOrGroupArgs {
    public token: string;
    public userOrGroupId: string;
    public userOrGroupType: __ROOT_NAMESPACE__.UserOrGroupType;
    public userVersion: string;
    constructor(args: IGetUserOrGroupArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.userOrGroupId != null) {
            this.userOrGroupId = args.userOrGroupId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[userOrGroupId] is unset!");
        }
        if (args != null && args.userOrGroupType != null) {
            this.userOrGroupType = args.userOrGroupType;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[userOrGroupType] is unset!");
        }
        if (args != null && args.userVersion != null) {
            this.userVersion = args.userVersion;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[userVersion] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetUserOrGroupArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.userOrGroupId != null) {
            output.writeFieldBegin("userOrGroupId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.userOrGroupId);
            output.writeFieldEnd();
        }
        if (this.userOrGroupType != null) {
            output.writeFieldBegin("userOrGroupType", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.userOrGroupType);
            output.writeFieldEnd();
        }
        if (this.userVersion != null) {
            output.writeFieldBegin("userVersion", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.userVersion);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetUserOrGroupArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.token = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.userOrGroupId = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_3: __ROOT_NAMESPACE__.UserOrGroupType = input.readI32();
                        _args.userOrGroupType = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.userVersion = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.userOrGroupId !== undefined && _args.userOrGroupType !== undefined && _args.userVersion !== undefined) {
            return new GetUserOrGroupArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetUserOrGroupArgs from input");
        }
    }
}
export interface IGetAllUsersAndGroupsArgsArgs {
    token: string;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetAllUsersAndGroupsArgs {
    public token: string;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetAllUsersAndGroupsArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllUsersAndGroupsArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 2);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllUsersAndGroupsArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.token = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_6: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.filter !== undefined) {
            return new GetAllUsersAndGroupsArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAllUsersAndGroupsArgs from input");
        }
    }
}
export interface IGetCountAllUsersAndGroupsArgsArgs {
    token: string;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetCountAllUsersAndGroupsArgs {
    public token: string;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetCountAllUsersAndGroupsArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetCountAllUsersAndGroupsArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 2);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetCountAllUsersAndGroupsArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_7: string = input.readString();
                        _args.token = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_8: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.filter !== undefined) {
            return new GetCountAllUsersAndGroupsArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetCountAllUsersAndGroupsArgs from input");
        }
    }
}
export interface IGetAllUsersByGroupArgsArgs {
    token: string;
    groupId: string;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetAllUsersByGroupArgs {
    public token: string;
    public groupId: string;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetAllUsersByGroupArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.groupId != null) {
            this.groupId = args.groupId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[groupId] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllUsersByGroupArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.groupId != null) {
            output.writeFieldBegin("groupId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.groupId);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 3);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllUsersByGroupArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_9: string = input.readString();
                        _args.token = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_10: string = input.readString();
                        _args.groupId = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_11: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.groupId !== undefined && _args.filter !== undefined) {
            return new GetAllUsersByGroupArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAllUsersByGroupArgs from input");
        }
    }
}
export interface IGetCountAllUsersByGroupArgsArgs {
    token: string;
    groupId: string;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetCountAllUsersByGroupArgs {
    public token: string;
    public groupId: string;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetCountAllUsersByGroupArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.groupId != null) {
            this.groupId = args.groupId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[groupId] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetCountAllUsersByGroupArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.groupId != null) {
            output.writeFieldBegin("groupId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.groupId);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 3);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetCountAllUsersByGroupArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_12: string = input.readString();
                        _args.token = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_13: string = input.readString();
                        _args.groupId = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_14: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.groupId !== undefined && _args.filter !== undefined) {
            return new GetCountAllUsersByGroupArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetCountAllUsersByGroupArgs from input");
        }
    }
}
export interface IGetAllUsersArgsArgs {
    token: string;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetAllUsersArgs {
    public token: string;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetAllUsersArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllUsersArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 2);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllUsersArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_15: string = input.readString();
                        _args.token = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_16: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.filter !== undefined) {
            return new GetAllUsersArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAllUsersArgs from input");
        }
    }
}
export interface IGetCountAllUsersArgsArgs {
    token: string;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetCountAllUsersArgs {
    public token: string;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetCountAllUsersArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetCountAllUsersArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 2);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetCountAllUsersArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_17: string = input.readString();
                        _args.token = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_18: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.filter !== undefined) {
            return new GetCountAllUsersArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetCountAllUsersArgs from input");
        }
    }
}
export interface IGetAllGroupsArgsArgs {
    token: string;
    groupId: string;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetAllGroupsArgs {
    public token: string;
    public groupId: string;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetAllGroupsArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.groupId != null) {
            this.groupId = args.groupId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[groupId] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllGroupsArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.groupId != null) {
            output.writeFieldBegin("groupId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.groupId);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 3);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllGroupsArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_19: string = input.readString();
                        _args.token = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_20: string = input.readString();
                        _args.groupId = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_21: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.groupId !== undefined && _args.filter !== undefined) {
            return new GetAllGroupsArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAllGroupsArgs from input");
        }
    }
}
export interface IGetCountAllGroupsArgsArgs {
    token: string;
    groupId: string;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetCountAllGroupsArgs {
    public token: string;
    public groupId: string;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetCountAllGroupsArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.groupId != null) {
            this.groupId = args.groupId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[groupId] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetCountAllGroupsArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.groupId != null) {
            output.writeFieldBegin("groupId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.groupId);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 3);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetCountAllGroupsArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_22: string = input.readString();
                        _args.token = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_23: string = input.readString();
                        _args.groupId = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_24: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_24;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.groupId !== undefined && _args.filter !== undefined) {
            return new GetCountAllGroupsArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetCountAllGroupsArgs from input");
        }
    }
}
export interface IGetRolesByUserOrGroupArgsArgs {
    token: string;
    type: __ROOT_NAMESPACE__.UserOrGroupType;
    userOrGroupId: string;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetRolesByUserOrGroupArgs {
    public token: string;
    public type: __ROOT_NAMESPACE__.UserOrGroupType;
    public userOrGroupId: string;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetRolesByUserOrGroupArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.type != null) {
            this.type = args.type;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[type] is unset!");
        }
        if (args != null && args.userOrGroupId != null) {
            this.userOrGroupId = args.userOrGroupId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[userOrGroupId] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetRolesByUserOrGroupArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.type != null) {
            output.writeFieldBegin("type", thrift.Thrift.Type.I32, 2);
            output.writeI32(this.type);
            output.writeFieldEnd();
        }
        if (this.userOrGroupId != null) {
            output.writeFieldBegin("userOrGroupId", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.userOrGroupId);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 4);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetRolesByUserOrGroupArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_25: string = input.readString();
                        _args.token = value_25;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_26: __ROOT_NAMESPACE__.UserOrGroupType = input.readI32();
                        _args.type = value_26;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_27: string = input.readString();
                        _args.userOrGroupId = value_27;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_28: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_28;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.type !== undefined && _args.userOrGroupId !== undefined && _args.filter !== undefined) {
            return new GetRolesByUserOrGroupArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetRolesByUserOrGroupArgs from input");
        }
    }
}
export interface IGetUserOrGroupsByRoleArgsArgs {
    token: string;
    role: string;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetUserOrGroupsByRoleArgs {
    public token: string;
    public role: string;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetUserOrGroupsByRoleArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.role != null) {
            this.role = args.role;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[role] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetUserOrGroupsByRoleArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.role != null) {
            output.writeFieldBegin("role", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.role);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 3);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetUserOrGroupsByRoleArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_29: string = input.readString();
                        _args.token = value_29;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_30: string = input.readString();
                        _args.role = value_30;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_31: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_31;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.role !== undefined && _args.filter !== undefined) {
            return new GetUserOrGroupsByRoleArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetUserOrGroupsByRoleArgs from input");
        }
    }
}
export interface ICreateOrUpdateUserGroupArgsArgs {
    token: string;
    userGroup: __ROOT_NAMESPACE__.UserOrGroup;
    accountId: string;
}
export class CreateOrUpdateUserGroupArgs {
    public token: string;
    public userGroup: __ROOT_NAMESPACE__.UserOrGroup;
    public accountId: string;
    constructor(args: ICreateOrUpdateUserGroupArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.userGroup != null) {
            this.userGroup = args.userGroup;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[userGroup] is unset!");
        }
        if (args != null && args.accountId != null) {
            this.accountId = args.accountId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[accountId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CreateOrUpdateUserGroupArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.userGroup != null) {
            output.writeFieldBegin("userGroup", thrift.Thrift.Type.STRUCT, 2);
            this.userGroup.write(output);
            output.writeFieldEnd();
        }
        if (this.accountId != null) {
            output.writeFieldBegin("accountId", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.accountId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CreateOrUpdateUserGroupArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_32: string = input.readString();
                        _args.token = value_32;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_33: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                        _args.userGroup = value_33;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_34: string = input.readString();
                        _args.accountId = value_34;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.userGroup !== undefined && _args.accountId !== undefined) {
            return new CreateOrUpdateUserGroupArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read CreateOrUpdateUserGroupArgs from input");
        }
    }
}
export interface IAddUsersToGroupsArgsArgs {
    token: string;
    groupsId: Array<string>;
    usersId: Array<string>;
    groupPolicy: ExistingDocumentsAccessPolicy.ExistingDocumentsAccessPolicy;
}
export class AddUsersToGroupsArgs {
    public token: string;
    public groupsId: Array<string>;
    public usersId: Array<string>;
    public groupPolicy: ExistingDocumentsAccessPolicy.ExistingDocumentsAccessPolicy;
    constructor(args: IAddUsersToGroupsArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.groupsId != null) {
            this.groupsId = args.groupsId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[groupsId] is unset!");
        }
        if (args != null && args.usersId != null) {
            this.usersId = args.usersId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[usersId] is unset!");
        }
        if (args != null && args.groupPolicy != null) {
            this.groupPolicy = args.groupPolicy;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[groupPolicy] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("AddUsersToGroupsArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.groupsId != null) {
            output.writeFieldBegin("groupsId", thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.groupsId.length);
            this.groupsId.forEach((value_35: string): void => {
                output.writeString(value_35);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.usersId != null) {
            output.writeFieldBegin("usersId", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.usersId.length);
            this.usersId.forEach((value_36: string): void => {
                output.writeString(value_36);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.groupPolicy != null) {
            output.writeFieldBegin("groupPolicy", thrift.Thrift.Type.STRUCT, 4);
            this.groupPolicy.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): AddUsersToGroupsArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_37: string = input.readString();
                        _args.token = value_37;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_38: Array<string> = new Array<string>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_39: string = input.readString();
                            value_38.push(value_39);
                        }
                        input.readListEnd();
                        _args.groupsId = value_38;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_40: Array<string> = new Array<string>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_41: string = input.readString();
                            value_40.push(value_41);
                        }
                        input.readListEnd();
                        _args.usersId = value_40;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_42: ExistingDocumentsAccessPolicy.ExistingDocumentsAccessPolicy = ExistingDocumentsAccessPolicy.ExistingDocumentsAccessPolicy.read(input);
                        _args.groupPolicy = value_42;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.groupsId !== undefined && _args.usersId !== undefined && _args.groupPolicy !== undefined) {
            return new AddUsersToGroupsArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read AddUsersToGroupsArgs from input");
        }
    }
}
export interface ICreateOrUpdateUserArgsArgs {
    token: string;
    user: __ROOT_NAMESPACE__.UserOrGroup;
    login: string;
    password: string;
    accountGroupId: string;
    accountId: string;
}
export class CreateOrUpdateUserArgs {
    public token: string;
    public user: __ROOT_NAMESPACE__.UserOrGroup;
    public login: string;
    public password: string;
    public accountGroupId: string;
    public accountId: string;
    constructor(args: ICreateOrUpdateUserArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.user != null) {
            this.user = args.user;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[user] is unset!");
        }
        if (args != null && args.login != null) {
            this.login = args.login;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[login] is unset!");
        }
        if (args != null && args.password != null) {
            this.password = args.password;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[password] is unset!");
        }
        if (args != null && args.accountGroupId != null) {
            this.accountGroupId = args.accountGroupId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[accountGroupId] is unset!");
        }
        if (args != null && args.accountId != null) {
            this.accountId = args.accountId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[accountId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CreateOrUpdateUserArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.user != null) {
            output.writeFieldBegin("user", thrift.Thrift.Type.STRUCT, 2);
            this.user.write(output);
            output.writeFieldEnd();
        }
        if (this.login != null) {
            output.writeFieldBegin("login", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.login);
            output.writeFieldEnd();
        }
        if (this.password != null) {
            output.writeFieldBegin("password", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.password);
            output.writeFieldEnd();
        }
        if (this.accountGroupId != null) {
            output.writeFieldBegin("accountGroupId", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.accountGroupId);
            output.writeFieldEnd();
        }
        if (this.accountId != null) {
            output.writeFieldBegin("accountId", thrift.Thrift.Type.STRING, 6);
            output.writeString(this.accountId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CreateOrUpdateUserArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_43: string = input.readString();
                        _args.token = value_43;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_44: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                        _args.user = value_44;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_45: string = input.readString();
                        _args.login = value_45;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_46: string = input.readString();
                        _args.password = value_46;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_47: string = input.readString();
                        _args.accountGroupId = value_47;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_48: string = input.readString();
                        _args.accountId = value_48;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.user !== undefined && _args.login !== undefined && _args.password !== undefined && _args.accountGroupId !== undefined && _args.accountId !== undefined) {
            return new CreateOrUpdateUserArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read CreateOrUpdateUserArgs from input");
        }
    }
}
export interface IRemoveClientArgsArgs {
    token: string;
    userId: string;
    reasonForRemoval: string;
}
export class RemoveClientArgs {
    public token: string;
    public userId: string;
    public reasonForRemoval: string;
    constructor(args: IRemoveClientArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.userId != null) {
            this.userId = args.userId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[userId] is unset!");
        }
        if (args != null && args.reasonForRemoval != null) {
            this.reasonForRemoval = args.reasonForRemoval;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[reasonForRemoval] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RemoveClientArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.userId != null) {
            output.writeFieldBegin("userId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.userId);
            output.writeFieldEnd();
        }
        if (this.reasonForRemoval != null) {
            output.writeFieldBegin("reasonForRemoval", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.reasonForRemoval);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RemoveClientArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_49: string = input.readString();
                        _args.token = value_49;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_50: string = input.readString();
                        _args.userId = value_50;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_51: string = input.readString();
                        _args.reasonForRemoval = value_51;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.userId !== undefined && _args.reasonForRemoval !== undefined) {
            return new RemoveClientArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read RemoveClientArgs from input");
        }
    }
}
export interface IRemoveUsersFromGroupsArgsArgs {
    token: string;
    groupsId: Array<string>;
    usersId: Array<string>;
}
export class RemoveUsersFromGroupsArgs {
    public token: string;
    public groupsId: Array<string>;
    public usersId: Array<string>;
    constructor(args: IRemoveUsersFromGroupsArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.groupsId != null) {
            this.groupsId = args.groupsId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[groupsId] is unset!");
        }
        if (args != null && args.usersId != null) {
            this.usersId = args.usersId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[usersId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RemoveUsersFromGroupsArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.groupsId != null) {
            output.writeFieldBegin("groupsId", thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.groupsId.length);
            this.groupsId.forEach((value_52: string): void => {
                output.writeString(value_52);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.usersId != null) {
            output.writeFieldBegin("usersId", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.usersId.length);
            this.usersId.forEach((value_53: string): void => {
                output.writeString(value_53);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RemoveUsersFromGroupsArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_54: string = input.readString();
                        _args.token = value_54;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_55: Array<string> = new Array<string>();
                        const metadata_3: thrift.TList = input.readListBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_56: string = input.readString();
                            value_55.push(value_56);
                        }
                        input.readListEnd();
                        _args.groupsId = value_55;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_57: Array<string> = new Array<string>();
                        const metadata_4: thrift.TList = input.readListBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const value_58: string = input.readString();
                            value_57.push(value_58);
                        }
                        input.readListEnd();
                        _args.usersId = value_57;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.groupsId !== undefined && _args.usersId !== undefined) {
            return new RemoveUsersFromGroupsArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read RemoveUsersFromGroupsArgs from input");
        }
    }
}
export interface IRemoveGroupArgsArgs {
    token: string;
    groupsId: Array<string>;
}
export class RemoveGroupArgs {
    public token: string;
    public groupsId: Array<string>;
    constructor(args: IRemoveGroupArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.groupsId != null) {
            this.groupsId = args.groupsId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[groupsId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RemoveGroupArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.groupsId != null) {
            output.writeFieldBegin("groupsId", thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.groupsId.length);
            this.groupsId.forEach((value_59: string): void => {
                output.writeString(value_59);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RemoveGroupArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_60: string = input.readString();
                        _args.token = value_60;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_61: Array<string> = new Array<string>();
                        const metadata_5: thrift.TList = input.readListBegin();
                        const size_5: number = metadata_5.size;
                        for (let i_5: number = 0; i_5 < size_5; i_5++) {
                            const value_62: string = input.readString();
                            value_61.push(value_62);
                        }
                        input.readListEnd();
                        _args.groupsId = value_61;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.groupsId !== undefined) {
            return new RemoveGroupArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read RemoveGroupArgs from input");
        }
    }
}
export interface IBlockUsersArgsArgs {
    token: string;
    userIds: Array<string>;
}
export class BlockUsersArgs {
    public token: string;
    public userIds: Array<string>;
    constructor(args: IBlockUsersArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.userIds != null) {
            this.userIds = args.userIds;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[userIds] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("BlockUsersArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.userIds != null) {
            output.writeFieldBegin("userIds", thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.userIds.length);
            this.userIds.forEach((value_63: string): void => {
                output.writeString(value_63);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): BlockUsersArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_64: string = input.readString();
                        _args.token = value_64;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_65: Array<string> = new Array<string>();
                        const metadata_6: thrift.TList = input.readListBegin();
                        const size_6: number = metadata_6.size;
                        for (let i_6: number = 0; i_6 < size_6; i_6++) {
                            const value_66: string = input.readString();
                            value_65.push(value_66);
                        }
                        input.readListEnd();
                        _args.userIds = value_65;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.userIds !== undefined) {
            return new BlockUsersArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read BlockUsersArgs from input");
        }
    }
}
export interface IUnBlockUsersArgsArgs {
    token: string;
    userIds: Array<string>;
}
export class UnBlockUsersArgs {
    public token: string;
    public userIds: Array<string>;
    constructor(args: IUnBlockUsersArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.userIds != null) {
            this.userIds = args.userIds;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[userIds] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("UnBlockUsersArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.userIds != null) {
            output.writeFieldBegin("userIds", thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.userIds.length);
            this.userIds.forEach((value_67: string): void => {
                output.writeString(value_67);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): UnBlockUsersArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_68: string = input.readString();
                        _args.token = value_68;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_69: Array<string> = new Array<string>();
                        const metadata_7: thrift.TList = input.readListBegin();
                        const size_7: number = metadata_7.size;
                        for (let i_7: number = 0; i_7 < size_7; i_7++) {
                            const value_70: string = input.readString();
                            value_69.push(value_70);
                        }
                        input.readListEnd();
                        _args.userIds = value_69;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.userIds !== undefined) {
            return new UnBlockUsersArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read UnBlockUsersArgs from input");
        }
    }
}
export interface IGetAllExistingRolesArgsArgs {
    token: string;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetAllExistingRolesArgs {
    public token: string;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetAllExistingRolesArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllExistingRolesArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 2);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllExistingRolesArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_71: string = input.readString();
                        _args.token = value_71;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_72: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_72;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.filter !== undefined) {
            return new GetAllExistingRolesArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAllExistingRolesArgs from input");
        }
    }
}
export interface IAddRolesToUsersOrGroupsArgsArgs {
    token: string;
    usersOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>;
    roles: Array<string>;
}
export class AddRolesToUsersOrGroupsArgs {
    public token: string;
    public usersOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>;
    public roles: Array<string>;
    constructor(args: IAddRolesToUsersOrGroupsArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.usersOrGroups != null) {
            this.usersOrGroups = args.usersOrGroups;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[usersOrGroups] is unset!");
        }
        if (args != null && args.roles != null) {
            this.roles = args.roles;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[roles] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("AddRolesToUsersOrGroupsArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.usersOrGroups != null) {
            output.writeFieldBegin("usersOrGroups", thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.usersOrGroups.length);
            this.usersOrGroups.forEach((value_73: __ROOT_NAMESPACE__.UserOrGroup): void => {
                value_73.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.roles != null) {
            output.writeFieldBegin("roles", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.roles.length);
            this.roles.forEach((value_74: string): void => {
                output.writeString(value_74);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): AddRolesToUsersOrGroupsArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_75: string = input.readString();
                        _args.token = value_75;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_76: Array<__ROOT_NAMESPACE__.UserOrGroup> = new Array<__ROOT_NAMESPACE__.UserOrGroup>();
                        const metadata_8: thrift.TList = input.readListBegin();
                        const size_8: number = metadata_8.size;
                        for (let i_8: number = 0; i_8 < size_8; i_8++) {
                            const value_77: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                            value_76.push(value_77);
                        }
                        input.readListEnd();
                        _args.usersOrGroups = value_76;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_78: Array<string> = new Array<string>();
                        const metadata_9: thrift.TList = input.readListBegin();
                        const size_9: number = metadata_9.size;
                        for (let i_9: number = 0; i_9 < size_9; i_9++) {
                            const value_79: string = input.readString();
                            value_78.push(value_79);
                        }
                        input.readListEnd();
                        _args.roles = value_78;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.usersOrGroups !== undefined && _args.roles !== undefined) {
            return new AddRolesToUsersOrGroupsArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read AddRolesToUsersOrGroupsArgs from input");
        }
    }
}
export interface IRevokeRolesFromUsersOrGroupsArgsArgs {
    token: string;
    usersOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>;
    roles: Array<string>;
}
export class RevokeRolesFromUsersOrGroupsArgs {
    public token: string;
    public usersOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>;
    public roles: Array<string>;
    constructor(args: IRevokeRolesFromUsersOrGroupsArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.usersOrGroups != null) {
            this.usersOrGroups = args.usersOrGroups;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[usersOrGroups] is unset!");
        }
        if (args != null && args.roles != null) {
            this.roles = args.roles;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[roles] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RevokeRolesFromUsersOrGroupsArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.usersOrGroups != null) {
            output.writeFieldBegin("usersOrGroups", thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.usersOrGroups.length);
            this.usersOrGroups.forEach((value_80: __ROOT_NAMESPACE__.UserOrGroup): void => {
                value_80.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.roles != null) {
            output.writeFieldBegin("roles", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.roles.length);
            this.roles.forEach((value_81: string): void => {
                output.writeString(value_81);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RevokeRolesFromUsersOrGroupsArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_82: string = input.readString();
                        _args.token = value_82;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_83: Array<__ROOT_NAMESPACE__.UserOrGroup> = new Array<__ROOT_NAMESPACE__.UserOrGroup>();
                        const metadata_10: thrift.TList = input.readListBegin();
                        const size_10: number = metadata_10.size;
                        for (let i_10: number = 0; i_10 < size_10; i_10++) {
                            const value_84: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                            value_83.push(value_84);
                        }
                        input.readListEnd();
                        _args.usersOrGroups = value_83;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_85: Array<string> = new Array<string>();
                        const metadata_11: thrift.TList = input.readListBegin();
                        const size_11: number = metadata_11.size;
                        for (let i_11: number = 0; i_11 < size_11; i_11++) {
                            const value_86: string = input.readString();
                            value_85.push(value_86);
                        }
                        input.readListEnd();
                        _args.roles = value_85;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.usersOrGroups !== undefined && _args.roles !== undefined) {
            return new RevokeRolesFromUsersOrGroupsArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read RevokeRolesFromUsersOrGroupsArgs from input");
        }
    }
}
export interface IGetRolesByUserArgsArgs {
    token: string;
    userId: string;
}
export class GetRolesByUserArgs {
    public token: string;
    public userId: string;
    constructor(args: IGetRolesByUserArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.userId != null) {
            this.userId = args.userId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[userId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetRolesByUserArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.userId != null) {
            output.writeFieldBegin("userId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.userId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetRolesByUserArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_87: string = input.readString();
                        _args.token = value_87;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_88: string = input.readString();
                        _args.userId = value_88;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.userId !== undefined) {
            return new GetRolesByUserArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetRolesByUserArgs from input");
        }
    }
}
export interface ILoadUserPublicKeyArgsArgs {
    token: string;
    publicKey: string;
    signature: string;
}
export class LoadUserPublicKeyArgs {
    public token: string;
    public publicKey: string;
    public signature: string;
    constructor(args: ILoadUserPublicKeyArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.publicKey != null) {
            this.publicKey = args.publicKey;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[publicKey] is unset!");
        }
        if (args != null && args.signature != null) {
            this.signature = args.signature;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[signature] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("LoadUserPublicKeyArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.publicKey != null) {
            output.writeFieldBegin("publicKey", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.publicKey);
            output.writeFieldEnd();
        }
        if (this.signature != null) {
            output.writeFieldBegin("signature", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.signature);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): LoadUserPublicKeyArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_89: string = input.readString();
                        _args.token = value_89;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_90: string = input.readString();
                        _args.publicKey = value_90;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_91: string = input.readString();
                        _args.signature = value_91;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.publicKey !== undefined && _args.signature !== undefined) {
            return new LoadUserPublicKeyArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read LoadUserPublicKeyArgs from input");
        }
    }
}
export interface IGetAllUserPublicKeyInfoArgsArgs {
    token: string;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetAllUserPublicKeyInfoArgs {
    public token: string;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetAllUserPublicKeyInfoArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllUserPublicKeyInfoArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 2);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllUserPublicKeyInfoArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_92: string = input.readString();
                        _args.token = value_92;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_93: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_93;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.filter !== undefined) {
            return new GetAllUserPublicKeyInfoArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAllUserPublicKeyInfoArgs from input");
        }
    }
}
export interface IGetCountAllUserPublicKeyInfoArgsArgs {
    token: string;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetCountAllUserPublicKeyInfoArgs {
    public token: string;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetCountAllUserPublicKeyInfoArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetCountAllUserPublicKeyInfoArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 2);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetCountAllUserPublicKeyInfoArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_94: string = input.readString();
                        _args.token = value_94;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_95: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_95;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.filter !== undefined) {
            return new GetCountAllUserPublicKeyInfoArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetCountAllUserPublicKeyInfoArgs from input");
        }
    }
}
export interface IChangeClientDelegateDetailsInfoArgsArgs {
    token: string;
    clientDelegateInfo: ClientDelegateInfo.ClientDelegateInfo;
    listDetailsToAdd: Array<ClientDelegateDetails.ClientDelegateDetails>;
    listDetailIdsToRemove: Array<string>;
    closeDelegateSession: boolean;
}
export class ChangeClientDelegateDetailsInfoArgs {
    public token: string;
    public clientDelegateInfo: ClientDelegateInfo.ClientDelegateInfo;
    public listDetailsToAdd: Array<ClientDelegateDetails.ClientDelegateDetails>;
    public listDetailIdsToRemove: Array<string>;
    public closeDelegateSession: boolean;
    constructor(args: IChangeClientDelegateDetailsInfoArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.clientDelegateInfo != null) {
            this.clientDelegateInfo = args.clientDelegateInfo;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[clientDelegateInfo] is unset!");
        }
        if (args != null && args.listDetailsToAdd != null) {
            this.listDetailsToAdd = args.listDetailsToAdd;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[listDetailsToAdd] is unset!");
        }
        if (args != null && args.listDetailIdsToRemove != null) {
            this.listDetailIdsToRemove = args.listDetailIdsToRemove;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[listDetailIdsToRemove] is unset!");
        }
        if (args != null && args.closeDelegateSession != null) {
            this.closeDelegateSession = args.closeDelegateSession;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[closeDelegateSession] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ChangeClientDelegateDetailsInfoArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.clientDelegateInfo != null) {
            output.writeFieldBegin("clientDelegateInfo", thrift.Thrift.Type.STRUCT, 2);
            this.clientDelegateInfo.write(output);
            output.writeFieldEnd();
        }
        if (this.listDetailsToAdd != null) {
            output.writeFieldBegin("listDetailsToAdd", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.listDetailsToAdd.length);
            this.listDetailsToAdd.forEach((value_96: ClientDelegateDetails.ClientDelegateDetails): void => {
                value_96.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.listDetailIdsToRemove != null) {
            output.writeFieldBegin("listDetailIdsToRemove", thrift.Thrift.Type.LIST, 4);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.listDetailIdsToRemove.length);
            this.listDetailIdsToRemove.forEach((value_97: string): void => {
                output.writeString(value_97);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.closeDelegateSession != null) {
            output.writeFieldBegin("closeDelegateSession", thrift.Thrift.Type.BOOL, 5);
            output.writeBool(this.closeDelegateSession);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ChangeClientDelegateDetailsInfoArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_98: string = input.readString();
                        _args.token = value_98;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_99: ClientDelegateInfo.ClientDelegateInfo = ClientDelegateInfo.ClientDelegateInfo.read(input);
                        _args.clientDelegateInfo = value_99;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_100: Array<ClientDelegateDetails.ClientDelegateDetails> = new Array<ClientDelegateDetails.ClientDelegateDetails>();
                        const metadata_12: thrift.TList = input.readListBegin();
                        const size_12: number = metadata_12.size;
                        for (let i_12: number = 0; i_12 < size_12; i_12++) {
                            const value_101: ClientDelegateDetails.ClientDelegateDetails = ClientDelegateDetails.ClientDelegateDetails.read(input);
                            value_100.push(value_101);
                        }
                        input.readListEnd();
                        _args.listDetailsToAdd = value_100;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_102: Array<string> = new Array<string>();
                        const metadata_13: thrift.TList = input.readListBegin();
                        const size_13: number = metadata_13.size;
                        for (let i_13: number = 0; i_13 < size_13; i_13++) {
                            const value_103: string = input.readString();
                            value_102.push(value_103);
                        }
                        input.readListEnd();
                        _args.listDetailIdsToRemove = value_102;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_104: boolean = input.readBool();
                        _args.closeDelegateSession = value_104;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.clientDelegateInfo !== undefined && _args.listDetailsToAdd !== undefined && _args.listDetailIdsToRemove !== undefined && _args.closeDelegateSession !== undefined) {
            return new ChangeClientDelegateDetailsInfoArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read ChangeClientDelegateDetailsInfoArgs from input");
        }
    }
}
export interface IRevokeClientDelegatesArgsArgs {
    token: string;
    clientDelegateId: string;
}
export class RevokeClientDelegatesArgs {
    public token: string;
    public clientDelegateId: string;
    constructor(args: IRevokeClientDelegatesArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.clientDelegateId != null) {
            this.clientDelegateId = args.clientDelegateId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[clientDelegateId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RevokeClientDelegatesArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.clientDelegateId != null) {
            output.writeFieldBegin("clientDelegateId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.clientDelegateId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RevokeClientDelegatesArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_105: string = input.readString();
                        _args.token = value_105;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_106: string = input.readString();
                        _args.clientDelegateId = value_106;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.clientDelegateId !== undefined) {
            return new RevokeClientDelegatesArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read RevokeClientDelegatesArgs from input");
        }
    }
}
export interface IGetAllClientDelegatesInfoListArgsArgs {
    token: string;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetAllClientDelegatesInfoListArgs {
    public token: string;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetAllClientDelegatesInfoListArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllClientDelegatesInfoListArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 2);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllClientDelegatesInfoListArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_107: string = input.readString();
                        _args.token = value_107;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_108: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_108;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.filter !== undefined) {
            return new GetAllClientDelegatesInfoListArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAllClientDelegatesInfoListArgs from input");
        }
    }
}
export interface IGetAllClientDelegatesDetailsArgsArgs {
    token: string;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetAllClientDelegatesDetailsArgs {
    public token: string;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetAllClientDelegatesDetailsArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllClientDelegatesDetailsArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 2);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllClientDelegatesDetailsArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_109: string = input.readString();
                        _args.token = value_109;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_110: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_110;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.filter !== undefined) {
            return new GetAllClientDelegatesDetailsArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAllClientDelegatesDetailsArgs from input");
        }
    }
}
export interface IGetClientDelegateDetailsArgsArgs {
    token: string;
    clientDelegateInfoId: string;
}
export class GetClientDelegateDetailsArgs {
    public token: string;
    public clientDelegateInfoId: string;
    constructor(args: IGetClientDelegateDetailsArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.clientDelegateInfoId != null) {
            this.clientDelegateInfoId = args.clientDelegateInfoId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[clientDelegateInfoId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetClientDelegateDetailsArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.clientDelegateInfoId != null) {
            output.writeFieldBegin("clientDelegateInfoId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.clientDelegateInfoId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetClientDelegateDetailsArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_111: string = input.readString();
                        _args.token = value_111;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_112: string = input.readString();
                        _args.clientDelegateInfoId = value_112;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.clientDelegateInfoId !== undefined) {
            return new GetClientDelegateDetailsArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetClientDelegateDetailsArgs from input");
        }
    }
}
export interface IGetAllClientsForDelegateArgsArgs {
    token: string;
    userId: string;
    reverse: boolean;
    documentId: string;
}
export class GetAllClientsForDelegateArgs {
    public token: string;
    public userId: string;
    public reverse: boolean;
    public documentId: string;
    constructor(args: IGetAllClientsForDelegateArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.userId != null) {
            this.userId = args.userId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[userId] is unset!");
        }
        if (args != null && args.reverse != null) {
            this.reverse = args.reverse;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[reverse] is unset!");
        }
        if (args != null && args.documentId != null) {
            this.documentId = args.documentId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[documentId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllClientsForDelegateArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.userId != null) {
            output.writeFieldBegin("userId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.userId);
            output.writeFieldEnd();
        }
        if (this.reverse != null) {
            output.writeFieldBegin("reverse", thrift.Thrift.Type.BOOL, 3);
            output.writeBool(this.reverse);
            output.writeFieldEnd();
        }
        if (this.documentId != null) {
            output.writeFieldBegin("documentId", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.documentId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllClientsForDelegateArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_113: string = input.readString();
                        _args.token = value_113;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_114: string = input.readString();
                        _args.userId = value_114;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_115: boolean = input.readBool();
                        _args.reverse = value_115;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_116: string = input.readString();
                        _args.documentId = value_116;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.userId !== undefined && _args.reverse !== undefined && _args.documentId !== undefined) {
            return new GetAllClientsForDelegateArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAllClientsForDelegateArgs from input");
        }
    }
}
export interface IGetAllNotificationsForDelegateArgsArgs {
    token: string;
}
export class GetAllNotificationsForDelegateArgs {
    public token: string;
    constructor(args: IGetAllNotificationsForDelegateArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllNotificationsForDelegateArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllNotificationsForDelegateArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_117: string = input.readString();
                        _args.token = value_117;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined) {
            return new GetAllNotificationsForDelegateArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAllNotificationsForDelegateArgs from input");
        }
    }
}
export interface IGetAccountsArgsArgs {
    token: string;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetAccountsArgs {
    public token: string;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetAccountsArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAccountsArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 2);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAccountsArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_118: string = input.readString();
                        _args.token = value_118;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_119: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_119;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.filter !== undefined) {
            return new GetAccountsArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAccountsArgs from input");
        }
    }
}
export interface IGetSecurityClassificationsByUserArgsArgs {
    token: string;
    userId: string;
}
export class GetSecurityClassificationsByUserArgs {
    public token: string;
    public userId: string;
    constructor(args: IGetSecurityClassificationsByUserArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.userId != null) {
            this.userId = args.userId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[userId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetSecurityClassificationsByUserArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.userId != null) {
            output.writeFieldBegin("userId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.userId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetSecurityClassificationsByUserArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_120: string = input.readString();
                        _args.token = value_120;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_121: string = input.readString();
                        _args.userId = value_121;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.userId !== undefined) {
            return new GetSecurityClassificationsByUserArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetSecurityClassificationsByUserArgs from input");
        }
    }
}
export interface IGetUserChiefArgsArgs {
    token: string;
    userId: string;
    level: ChiefLevel.ChiefLevel;
    userTypes: Set<__ROOT_NAMESPACE__.UserType>;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetUserChiefArgs {
    public token: string;
    public userId: string;
    public level: ChiefLevel.ChiefLevel;
    public userTypes: Set<__ROOT_NAMESPACE__.UserType>;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetUserChiefArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.userId != null) {
            this.userId = args.userId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[userId] is unset!");
        }
        if (args != null && args.level != null) {
            this.level = args.level;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[level] is unset!");
        }
        if (args != null && args.userTypes != null) {
            this.userTypes = args.userTypes;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[userTypes] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetUserChiefArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.userId != null) {
            output.writeFieldBegin("userId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.userId);
            output.writeFieldEnd();
        }
        if (this.level != null) {
            output.writeFieldBegin("level", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.level);
            output.writeFieldEnd();
        }
        if (this.userTypes != null) {
            output.writeFieldBegin("userTypes", thrift.Thrift.Type.SET, 4);
            output.writeSetBegin(thrift.Thrift.Type.I32, this.userTypes.size);
            this.userTypes.forEach((value_122: __ROOT_NAMESPACE__.UserType): void => {
                output.writeI32(value_122);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 5);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetUserChiefArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_123: string = input.readString();
                        _args.token = value_123;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_124: string = input.readString();
                        _args.userId = value_124;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_125: ChiefLevel.ChiefLevel = input.readI32();
                        _args.level = value_125;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_126: Set<__ROOT_NAMESPACE__.UserType> = new Set<__ROOT_NAMESPACE__.UserType>();
                        const metadata_14: thrift.TSet = input.readSetBegin();
                        const size_14: number = metadata_14.size;
                        for (let i_14: number = 0; i_14 < size_14; i_14++) {
                            const value_127: __ROOT_NAMESPACE__.UserType = input.readI32();
                            value_126.add(value_127);
                        }
                        input.readSetEnd();
                        _args.userTypes = value_126;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_128: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_128;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.userId !== undefined && _args.level !== undefined && _args.userTypes !== undefined && _args.filter !== undefined) {
            return new GetUserChiefArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetUserChiefArgs from input");
        }
    }
}
export interface IUpdateUserInfoArgsArgs {
    token: string;
    user: __ROOT_NAMESPACE__.UserOrGroup;
}
export class UpdateUserInfoArgs {
    public token: string;
    public user: __ROOT_NAMESPACE__.UserOrGroup;
    constructor(args: IUpdateUserInfoArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.user != null) {
            this.user = args.user;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[user] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("UpdateUserInfoArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.user != null) {
            output.writeFieldBegin("user", thrift.Thrift.Type.STRUCT, 2);
            this.user.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): UpdateUserInfoArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_129: string = input.readString();
                        _args.token = value_129;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_130: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                        _args.user = value_130;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.user !== undefined) {
            return new UpdateUserInfoArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read UpdateUserInfoArgs from input");
        }
    }
}
export interface IGetUserPreferencesArgsArgs {
    token: string;
    userId: string;
}
export class GetUserPreferencesArgs {
    public token: string;
    public userId: string;
    constructor(args: IGetUserPreferencesArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.userId != null) {
            this.userId = args.userId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[userId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetUserPreferencesArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.userId != null) {
            output.writeFieldBegin("userId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.userId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetUserPreferencesArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_131: string = input.readString();
                        _args.token = value_131;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_132: string = input.readString();
                        _args.userId = value_132;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.userId !== undefined) {
            return new GetUserPreferencesArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetUserPreferencesArgs from input");
        }
    }
}
export interface IUpdateUserPreferencesArgsArgs {
    token: string;
    preferences: UserPreferences.UserPreferences;
}
export class UpdateUserPreferencesArgs {
    public token: string;
    public preferences: UserPreferences.UserPreferences;
    constructor(args: IUpdateUserPreferencesArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.preferences != null) {
            this.preferences = args.preferences;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[preferences] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("UpdateUserPreferencesArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.preferences != null) {
            output.writeFieldBegin("preferences", thrift.Thrift.Type.STRUCT, 2);
            this.preferences.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): UpdateUserPreferencesArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_133: string = input.readString();
                        _args.token = value_133;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_134: UserPreferences.UserPreferences = UserPreferences.UserPreferences.read(input);
                        _args.preferences = value_134;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.preferences !== undefined) {
            return new UpdateUserPreferencesArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read UpdateUserPreferencesArgs from input");
        }
    }
}
export interface ICreateOrRemoveFavoriteUsersArgsArgs {
    token: string;
    userIdsToAdd: Array<string>;
    userIdsToRemove: Array<string>;
}
export class CreateOrRemoveFavoriteUsersArgs {
    public token: string;
    public userIdsToAdd: Array<string>;
    public userIdsToRemove: Array<string>;
    constructor(args: ICreateOrRemoveFavoriteUsersArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.userIdsToAdd != null) {
            this.userIdsToAdd = args.userIdsToAdd;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[userIdsToAdd] is unset!");
        }
        if (args != null && args.userIdsToRemove != null) {
            this.userIdsToRemove = args.userIdsToRemove;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[userIdsToRemove] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CreateOrRemoveFavoriteUsersArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.userIdsToAdd != null) {
            output.writeFieldBegin("userIdsToAdd", thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.userIdsToAdd.length);
            this.userIdsToAdd.forEach((value_135: string): void => {
                output.writeString(value_135);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.userIdsToRemove != null) {
            output.writeFieldBegin("userIdsToRemove", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.userIdsToRemove.length);
            this.userIdsToRemove.forEach((value_136: string): void => {
                output.writeString(value_136);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CreateOrRemoveFavoriteUsersArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_137: string = input.readString();
                        _args.token = value_137;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_138: Array<string> = new Array<string>();
                        const metadata_15: thrift.TList = input.readListBegin();
                        const size_15: number = metadata_15.size;
                        for (let i_15: number = 0; i_15 < size_15; i_15++) {
                            const value_139: string = input.readString();
                            value_138.push(value_139);
                        }
                        input.readListEnd();
                        _args.userIdsToAdd = value_138;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_140: Array<string> = new Array<string>();
                        const metadata_16: thrift.TList = input.readListBegin();
                        const size_16: number = metadata_16.size;
                        for (let i_16: number = 0; i_16 < size_16; i_16++) {
                            const value_141: string = input.readString();
                            value_140.push(value_141);
                        }
                        input.readListEnd();
                        _args.userIdsToRemove = value_140;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.userIdsToAdd !== undefined && _args.userIdsToRemove !== undefined) {
            return new CreateOrRemoveFavoriteUsersArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read CreateOrRemoveFavoriteUsersArgs from input");
        }
    }
}
export interface IGetUserAdditionalInfoArgsArgs {
    token: string;
    userId: string;
    userVersion: string;
}
export class GetUserAdditionalInfoArgs {
    public token: string;
    public userId: string;
    public userVersion: string;
    constructor(args: IGetUserAdditionalInfoArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.userId != null) {
            this.userId = args.userId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[userId] is unset!");
        }
        if (args != null && args.userVersion != null) {
            this.userVersion = args.userVersion;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[userVersion] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetUserAdditionalInfoArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.userId != null) {
            output.writeFieldBegin("userId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.userId);
            output.writeFieldEnd();
        }
        if (this.userVersion != null) {
            output.writeFieldBegin("userVersion", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.userVersion);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetUserAdditionalInfoArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_142: string = input.readString();
                        _args.token = value_142;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_143: string = input.readString();
                        _args.userId = value_143;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_144: string = input.readString();
                        _args.userVersion = value_144;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.userId !== undefined && _args.userVersion !== undefined) {
            return new GetUserAdditionalInfoArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetUserAdditionalInfoArgs from input");
        }
    }
}
export interface ISaveUserAdditionalInfoArgsArgs {
    token: string;
    userAdditionalInfo: UserAdditionalInfo.UserAdditionalInfo;
    login: string;
    password: string;
    accountGroupId: string;
    accountId: string;
}
export class SaveUserAdditionalInfoArgs {
    public token: string;
    public userAdditionalInfo: UserAdditionalInfo.UserAdditionalInfo;
    public login: string;
    public password: string;
    public accountGroupId: string;
    public accountId: string;
    constructor(args: ISaveUserAdditionalInfoArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.userAdditionalInfo != null) {
            this.userAdditionalInfo = args.userAdditionalInfo;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[userAdditionalInfo] is unset!");
        }
        if (args != null && args.login != null) {
            this.login = args.login;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[login] is unset!");
        }
        if (args != null && args.password != null) {
            this.password = args.password;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[password] is unset!");
        }
        if (args != null && args.accountGroupId != null) {
            this.accountGroupId = args.accountGroupId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[accountGroupId] is unset!");
        }
        if (args != null && args.accountId != null) {
            this.accountId = args.accountId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[accountId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("SaveUserAdditionalInfoArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.userAdditionalInfo != null) {
            output.writeFieldBegin("userAdditionalInfo", thrift.Thrift.Type.STRUCT, 2);
            this.userAdditionalInfo.write(output);
            output.writeFieldEnd();
        }
        if (this.login != null) {
            output.writeFieldBegin("login", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.login);
            output.writeFieldEnd();
        }
        if (this.password != null) {
            output.writeFieldBegin("password", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.password);
            output.writeFieldEnd();
        }
        if (this.accountGroupId != null) {
            output.writeFieldBegin("accountGroupId", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.accountGroupId);
            output.writeFieldEnd();
        }
        if (this.accountId != null) {
            output.writeFieldBegin("accountId", thrift.Thrift.Type.STRING, 6);
            output.writeString(this.accountId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): SaveUserAdditionalInfoArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_145: string = input.readString();
                        _args.token = value_145;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_146: UserAdditionalInfo.UserAdditionalInfo = UserAdditionalInfo.UserAdditionalInfo.read(input);
                        _args.userAdditionalInfo = value_146;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_147: string = input.readString();
                        _args.login = value_147;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_148: string = input.readString();
                        _args.password = value_148;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_149: string = input.readString();
                        _args.accountGroupId = value_149;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_150: string = input.readString();
                        _args.accountId = value_150;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.userAdditionalInfo !== undefined && _args.login !== undefined && _args.password !== undefined && _args.accountGroupId !== undefined && _args.accountId !== undefined) {
            return new SaveUserAdditionalInfoArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read SaveUserAdditionalInfoArgs from input");
        }
    }
}
export interface IRestoreClientArgsArgs {
    token: string;
    userId: string;
    reasonForRestore: string;
}
export class RestoreClientArgs {
    public token: string;
    public userId: string;
    public reasonForRestore: string;
    constructor(args: IRestoreClientArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.userId != null) {
            this.userId = args.userId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[userId] is unset!");
        }
        if (args != null && args.reasonForRestore != null) {
            this.reasonForRestore = args.reasonForRestore;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[reasonForRestore] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RestoreClientArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.userId != null) {
            output.writeFieldBegin("userId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.userId);
            output.writeFieldEnd();
        }
        if (this.reasonForRestore != null) {
            output.writeFieldBegin("reasonForRestore", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.reasonForRestore);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RestoreClientArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_151: string = input.readString();
                        _args.token = value_151;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_152: string = input.readString();
                        _args.userId = value_152;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_153: string = input.readString();
                        _args.reasonForRestore = value_153;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.userId !== undefined && _args.reasonForRestore !== undefined) {
            return new RestoreClientArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read RestoreClientArgs from input");
        }
    }
}
export interface IFindDelegatesArgsArgs {
    token: string;
    users: Array<__ROOT_NAMESPACE__.UserOrGroup>;
}
export class FindDelegatesArgs {
    public token: string;
    public users: Array<__ROOT_NAMESPACE__.UserOrGroup>;
    constructor(args: IFindDelegatesArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.users != null) {
            this.users = args.users;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[users] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("FindDelegatesArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.users != null) {
            output.writeFieldBegin("users", thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.users.length);
            this.users.forEach((value_154: __ROOT_NAMESPACE__.UserOrGroup): void => {
                value_154.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): FindDelegatesArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_155: string = input.readString();
                        _args.token = value_155;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_156: Array<__ROOT_NAMESPACE__.UserOrGroup> = new Array<__ROOT_NAMESPACE__.UserOrGroup>();
                        const metadata_17: thrift.TList = input.readListBegin();
                        const size_17: number = metadata_17.size;
                        for (let i_17: number = 0; i_17 < size_17; i_17++) {
                            const value_157: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                            value_156.push(value_157);
                        }
                        input.readListEnd();
                        _args.users = value_156;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.users !== undefined) {
            return new FindDelegatesArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read FindDelegatesArgs from input");
        }
    }
}
export interface IGetUserOrGroupResultArgs {
    success?: __ROOT_NAMESPACE__.UserOrGroup;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetUserOrGroupResult {
    public success?: __ROOT_NAMESPACE__.UserOrGroup;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetUserOrGroupResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetUserOrGroupResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetUserOrGroupResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_158: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                        _args.success = value_158;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_159: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_159;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_160: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_160;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetUserOrGroupResult(_args);
    }
}
export interface IGetAllUsersAndGroupsResultArgs {
    success?: Array<__ROOT_NAMESPACE__.UserOrGroup>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetAllUsersAndGroupsResult {
    public success?: Array<__ROOT_NAMESPACE__.UserOrGroup>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetAllUsersAndGroupsResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllUsersAndGroupsResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_161: __ROOT_NAMESPACE__.UserOrGroup): void => {
                value_161.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllUsersAndGroupsResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_162: Array<__ROOT_NAMESPACE__.UserOrGroup> = new Array<__ROOT_NAMESPACE__.UserOrGroup>();
                        const metadata_18: thrift.TList = input.readListBegin();
                        const size_18: number = metadata_18.size;
                        for (let i_18: number = 0; i_18 < size_18; i_18++) {
                            const value_163: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                            value_162.push(value_163);
                        }
                        input.readListEnd();
                        _args.success = value_162;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_164: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_164;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_165: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_165;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAllUsersAndGroupsResult(_args);
    }
}
export interface IGetCountAllUsersAndGroupsResultArgs {
    success?: number;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetCountAllUsersAndGroupsResult {
    public success?: number;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetCountAllUsersAndGroupsResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetCountAllUsersAndGroupsResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.I32, 0);
            output.writeI32(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetCountAllUsersAndGroupsResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_166: number = input.readI32();
                        _args.success = value_166;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_167: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_167;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_168: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_168;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetCountAllUsersAndGroupsResult(_args);
    }
}
export interface IGetAllUsersByGroupResultArgs {
    success?: Array<__ROOT_NAMESPACE__.UserOrGroup>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetAllUsersByGroupResult {
    public success?: Array<__ROOT_NAMESPACE__.UserOrGroup>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetAllUsersByGroupResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllUsersByGroupResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_169: __ROOT_NAMESPACE__.UserOrGroup): void => {
                value_169.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllUsersByGroupResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_170: Array<__ROOT_NAMESPACE__.UserOrGroup> = new Array<__ROOT_NAMESPACE__.UserOrGroup>();
                        const metadata_19: thrift.TList = input.readListBegin();
                        const size_19: number = metadata_19.size;
                        for (let i_19: number = 0; i_19 < size_19; i_19++) {
                            const value_171: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                            value_170.push(value_171);
                        }
                        input.readListEnd();
                        _args.success = value_170;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_172: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_172;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_173: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_173;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAllUsersByGroupResult(_args);
    }
}
export interface IGetCountAllUsersByGroupResultArgs {
    success?: number;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetCountAllUsersByGroupResult {
    public success?: number;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetCountAllUsersByGroupResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetCountAllUsersByGroupResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.I32, 0);
            output.writeI32(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetCountAllUsersByGroupResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_174: number = input.readI32();
                        _args.success = value_174;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_175: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_175;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_176: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_176;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetCountAllUsersByGroupResult(_args);
    }
}
export interface IGetAllUsersResultArgs {
    success?: Array<__ROOT_NAMESPACE__.UserOrGroup>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetAllUsersResult {
    public success?: Array<__ROOT_NAMESPACE__.UserOrGroup>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetAllUsersResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllUsersResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_177: __ROOT_NAMESPACE__.UserOrGroup): void => {
                value_177.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllUsersResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_178: Array<__ROOT_NAMESPACE__.UserOrGroup> = new Array<__ROOT_NAMESPACE__.UserOrGroup>();
                        const metadata_20: thrift.TList = input.readListBegin();
                        const size_20: number = metadata_20.size;
                        for (let i_20: number = 0; i_20 < size_20; i_20++) {
                            const value_179: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                            value_178.push(value_179);
                        }
                        input.readListEnd();
                        _args.success = value_178;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_180: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_180;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_181: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_181;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAllUsersResult(_args);
    }
}
export interface IGetCountAllUsersResultArgs {
    success?: number;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetCountAllUsersResult {
    public success?: number;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetCountAllUsersResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetCountAllUsersResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.I32, 0);
            output.writeI32(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetCountAllUsersResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_182: number = input.readI32();
                        _args.success = value_182;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_183: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_183;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_184: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_184;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetCountAllUsersResult(_args);
    }
}
export interface IGetAllGroupsResultArgs {
    success?: Array<__ROOT_NAMESPACE__.UserOrGroup>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetAllGroupsResult {
    public success?: Array<__ROOT_NAMESPACE__.UserOrGroup>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetAllGroupsResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllGroupsResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_185: __ROOT_NAMESPACE__.UserOrGroup): void => {
                value_185.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllGroupsResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_186: Array<__ROOT_NAMESPACE__.UserOrGroup> = new Array<__ROOT_NAMESPACE__.UserOrGroup>();
                        const metadata_21: thrift.TList = input.readListBegin();
                        const size_21: number = metadata_21.size;
                        for (let i_21: number = 0; i_21 < size_21; i_21++) {
                            const value_187: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                            value_186.push(value_187);
                        }
                        input.readListEnd();
                        _args.success = value_186;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_188: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_188;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_189: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_189;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAllGroupsResult(_args);
    }
}
export interface IGetCountAllGroupsResultArgs {
    success?: number;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetCountAllGroupsResult {
    public success?: number;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetCountAllGroupsResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetCountAllGroupsResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.I32, 0);
            output.writeI32(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetCountAllGroupsResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_190: number = input.readI32();
                        _args.success = value_190;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_191: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_191;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_192: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_192;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetCountAllGroupsResult(_args);
    }
}
export interface IGetRolesByUserOrGroupResultArgs {
    success?: Set<string>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetRolesByUserOrGroupResult {
    public success?: Set<string>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetRolesByUserOrGroupResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetRolesByUserOrGroupResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.SET, 0);
            output.writeSetBegin(thrift.Thrift.Type.STRING, this.success.size);
            this.success.forEach((value_193: string): void => {
                output.writeString(value_193);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetRolesByUserOrGroupResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_194: Set<string> = new Set<string>();
                        const metadata_22: thrift.TSet = input.readSetBegin();
                        const size_22: number = metadata_22.size;
                        for (let i_22: number = 0; i_22 < size_22; i_22++) {
                            const value_195: string = input.readString();
                            value_194.add(value_195);
                        }
                        input.readSetEnd();
                        _args.success = value_194;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_196: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_196;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_197: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_197;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetRolesByUserOrGroupResult(_args);
    }
}
export interface IGetUserOrGroupsByRoleResultArgs {
    success?: Array<__ROOT_NAMESPACE__.UserOrGroup>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetUserOrGroupsByRoleResult {
    public success?: Array<__ROOT_NAMESPACE__.UserOrGroup>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetUserOrGroupsByRoleResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetUserOrGroupsByRoleResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_198: __ROOT_NAMESPACE__.UserOrGroup): void => {
                value_198.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetUserOrGroupsByRoleResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_199: Array<__ROOT_NAMESPACE__.UserOrGroup> = new Array<__ROOT_NAMESPACE__.UserOrGroup>();
                        const metadata_23: thrift.TList = input.readListBegin();
                        const size_23: number = metadata_23.size;
                        for (let i_23: number = 0; i_23 < size_23; i_23++) {
                            const value_200: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                            value_199.push(value_200);
                        }
                        input.readListEnd();
                        _args.success = value_199;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_201: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_201;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_202: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_202;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetUserOrGroupsByRoleResult(_args);
    }
}
export interface ICreateOrUpdateUserGroupResultArgs {
    success?: __ROOT_NAMESPACE__.UserOrGroup;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class CreateOrUpdateUserGroupResult {
    public success?: __ROOT_NAMESPACE__.UserOrGroup;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: ICreateOrUpdateUserGroupResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CreateOrUpdateUserGroupResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CreateOrUpdateUserGroupResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_203: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                        _args.success = value_203;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_204: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_204;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_205: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_205;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new CreateOrUpdateUserGroupResult(_args);
    }
}
export interface IAddUsersToGroupsResultArgs {
    success?: boolean;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class AddUsersToGroupsResult {
    public success?: boolean;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IAddUsersToGroupsResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("AddUsersToGroupsResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): AddUsersToGroupsResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_206: boolean = input.readBool();
                        _args.success = value_206;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_207: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_207;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_208: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_208;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new AddUsersToGroupsResult(_args);
    }
}
export interface ICreateOrUpdateUserResultArgs {
    success?: __ROOT_NAMESPACE__.UserOrGroup;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class CreateOrUpdateUserResult {
    public success?: __ROOT_NAMESPACE__.UserOrGroup;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: ICreateOrUpdateUserResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CreateOrUpdateUserResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CreateOrUpdateUserResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_209: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                        _args.success = value_209;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_210: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_210;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_211: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_211;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new CreateOrUpdateUserResult(_args);
    }
}
export interface IRemoveClientResultArgs {
    success?: boolean;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class RemoveClientResult {
    public success?: boolean;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IRemoveClientResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RemoveClientResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RemoveClientResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_212: boolean = input.readBool();
                        _args.success = value_212;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_213: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_213;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_214: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_214;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new RemoveClientResult(_args);
    }
}
export interface IRemoveUsersFromGroupsResultArgs {
    success?: boolean;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class RemoveUsersFromGroupsResult {
    public success?: boolean;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IRemoveUsersFromGroupsResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RemoveUsersFromGroupsResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RemoveUsersFromGroupsResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_215: boolean = input.readBool();
                        _args.success = value_215;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_216: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_216;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_217: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_217;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new RemoveUsersFromGroupsResult(_args);
    }
}
export interface IRemoveGroupResultArgs {
    success?: boolean;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class RemoveGroupResult {
    public success?: boolean;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IRemoveGroupResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RemoveGroupResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RemoveGroupResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_218: boolean = input.readBool();
                        _args.success = value_218;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_219: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_219;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_220: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_220;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new RemoveGroupResult(_args);
    }
}
export interface IBlockUsersResultArgs {
    success?: boolean;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class BlockUsersResult {
    public success?: boolean;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IBlockUsersResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("BlockUsersResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): BlockUsersResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_221: boolean = input.readBool();
                        _args.success = value_221;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_222: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_222;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_223: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_223;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new BlockUsersResult(_args);
    }
}
export interface IUnBlockUsersResultArgs {
    success?: boolean;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class UnBlockUsersResult {
    public success?: boolean;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IUnBlockUsersResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("UnBlockUsersResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): UnBlockUsersResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_224: boolean = input.readBool();
                        _args.success = value_224;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_225: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_225;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_226: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_226;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new UnBlockUsersResult(_args);
    }
}
export interface IGetAllExistingRolesResultArgs {
    success?: Array<string>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetAllExistingRolesResult {
    public success?: Array<string>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetAllExistingRolesResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllExistingRolesResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.success.length);
            this.success.forEach((value_227: string): void => {
                output.writeString(value_227);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllExistingRolesResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_228: Array<string> = new Array<string>();
                        const metadata_24: thrift.TList = input.readListBegin();
                        const size_24: number = metadata_24.size;
                        for (let i_24: number = 0; i_24 < size_24; i_24++) {
                            const value_229: string = input.readString();
                            value_228.push(value_229);
                        }
                        input.readListEnd();
                        _args.success = value_228;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_230: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_230;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_231: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_231;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAllExistingRolesResult(_args);
    }
}
export interface IAddRolesToUsersOrGroupsResultArgs {
    success?: boolean;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class AddRolesToUsersOrGroupsResult {
    public success?: boolean;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IAddRolesToUsersOrGroupsResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("AddRolesToUsersOrGroupsResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): AddRolesToUsersOrGroupsResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_232: boolean = input.readBool();
                        _args.success = value_232;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_233: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_233;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_234: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_234;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new AddRolesToUsersOrGroupsResult(_args);
    }
}
export interface IRevokeRolesFromUsersOrGroupsResultArgs {
    success?: boolean;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class RevokeRolesFromUsersOrGroupsResult {
    public success?: boolean;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IRevokeRolesFromUsersOrGroupsResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RevokeRolesFromUsersOrGroupsResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RevokeRolesFromUsersOrGroupsResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_235: boolean = input.readBool();
                        _args.success = value_235;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_236: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_236;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_237: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_237;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new RevokeRolesFromUsersOrGroupsResult(_args);
    }
}
export interface IGetRolesByUserResultArgs {
    success?: Map<string, RoleScHelper.RoleScHelper>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetRolesByUserResult {
    public success?: Map<string, RoleScHelper.RoleScHelper>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetRolesByUserResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetRolesByUserResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.MAP, 0);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRUCT, this.success.size);
            this.success.forEach((value_238: RoleScHelper.RoleScHelper, key_1: string): void => {
                output.writeString(key_1);
                value_238.write(output);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetRolesByUserResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_239: Map<string, RoleScHelper.RoleScHelper> = new Map<string, RoleScHelper.RoleScHelper>();
                        const metadata_25: thrift.TMap = input.readMapBegin();
                        const size_25: number = metadata_25.size;
                        for (let i_25: number = 0; i_25 < size_25; i_25++) {
                            const key_2: string = input.readString();
                            const value_240: RoleScHelper.RoleScHelper = RoleScHelper.RoleScHelper.read(input);
                            value_239.set(key_2, value_240);
                        }
                        input.readMapEnd();
                        _args.success = value_239;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_241: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_241;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_242: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_242;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetRolesByUserResult(_args);
    }
}
export interface ILoadUserPublicKeyResultArgs {
    success?: boolean;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class LoadUserPublicKeyResult {
    public success?: boolean;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: ILoadUserPublicKeyResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("LoadUserPublicKeyResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): LoadUserPublicKeyResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_243: boolean = input.readBool();
                        _args.success = value_243;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_244: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_244;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_245: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_245;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new LoadUserPublicKeyResult(_args);
    }
}
export interface IGetAllUserPublicKeyInfoResultArgs {
    success?: Array<UserKeyData.UserKeyData>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetAllUserPublicKeyInfoResult {
    public success?: Array<UserKeyData.UserKeyData>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetAllUserPublicKeyInfoResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllUserPublicKeyInfoResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_246: UserKeyData.UserKeyData): void => {
                value_246.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllUserPublicKeyInfoResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_247: Array<UserKeyData.UserKeyData> = new Array<UserKeyData.UserKeyData>();
                        const metadata_26: thrift.TList = input.readListBegin();
                        const size_26: number = metadata_26.size;
                        for (let i_26: number = 0; i_26 < size_26; i_26++) {
                            const value_248: UserKeyData.UserKeyData = UserKeyData.UserKeyData.read(input);
                            value_247.push(value_248);
                        }
                        input.readListEnd();
                        _args.success = value_247;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_249: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_249;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_250: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_250;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAllUserPublicKeyInfoResult(_args);
    }
}
export interface IGetCountAllUserPublicKeyInfoResultArgs {
    success?: number;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetCountAllUserPublicKeyInfoResult {
    public success?: number;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetCountAllUserPublicKeyInfoResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetCountAllUserPublicKeyInfoResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.I32, 0);
            output.writeI32(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetCountAllUserPublicKeyInfoResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_251: number = input.readI32();
                        _args.success = value_251;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_252: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_252;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_253: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_253;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetCountAllUserPublicKeyInfoResult(_args);
    }
}
export interface IChangeClientDelegateDetailsInfoResultArgs {
    success?: Array<ClientDelegateDetails.ClientDelegateDetails>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class ChangeClientDelegateDetailsInfoResult {
    public success?: Array<ClientDelegateDetails.ClientDelegateDetails>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IChangeClientDelegateDetailsInfoResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ChangeClientDelegateDetailsInfoResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_254: ClientDelegateDetails.ClientDelegateDetails): void => {
                value_254.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ChangeClientDelegateDetailsInfoResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_255: Array<ClientDelegateDetails.ClientDelegateDetails> = new Array<ClientDelegateDetails.ClientDelegateDetails>();
                        const metadata_27: thrift.TList = input.readListBegin();
                        const size_27: number = metadata_27.size;
                        for (let i_27: number = 0; i_27 < size_27; i_27++) {
                            const value_256: ClientDelegateDetails.ClientDelegateDetails = ClientDelegateDetails.ClientDelegateDetails.read(input);
                            value_255.push(value_256);
                        }
                        input.readListEnd();
                        _args.success = value_255;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_257: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_257;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_258: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_258;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ChangeClientDelegateDetailsInfoResult(_args);
    }
}
export interface IRevokeClientDelegatesResultArgs {
    success?: boolean;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class RevokeClientDelegatesResult {
    public success?: boolean;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IRevokeClientDelegatesResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RevokeClientDelegatesResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RevokeClientDelegatesResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_259: boolean = input.readBool();
                        _args.success = value_259;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_260: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_260;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_261: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_261;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new RevokeClientDelegatesResult(_args);
    }
}
export interface IGetAllClientDelegatesInfoListResultArgs {
    success?: Array<ClientDelegateInfo.ClientDelegateInfo>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetAllClientDelegatesInfoListResult {
    public success?: Array<ClientDelegateInfo.ClientDelegateInfo>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetAllClientDelegatesInfoListResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllClientDelegatesInfoListResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_262: ClientDelegateInfo.ClientDelegateInfo): void => {
                value_262.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllClientDelegatesInfoListResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_263: Array<ClientDelegateInfo.ClientDelegateInfo> = new Array<ClientDelegateInfo.ClientDelegateInfo>();
                        const metadata_28: thrift.TList = input.readListBegin();
                        const size_28: number = metadata_28.size;
                        for (let i_28: number = 0; i_28 < size_28; i_28++) {
                            const value_264: ClientDelegateInfo.ClientDelegateInfo = ClientDelegateInfo.ClientDelegateInfo.read(input);
                            value_263.push(value_264);
                        }
                        input.readListEnd();
                        _args.success = value_263;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_265: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_265;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_266: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_266;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAllClientDelegatesInfoListResult(_args);
    }
}
export interface IGetAllClientDelegatesDetailsResultArgs {
    success?: Array<ClientDelegateDetails.ClientDelegateDetails>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetAllClientDelegatesDetailsResult {
    public success?: Array<ClientDelegateDetails.ClientDelegateDetails>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetAllClientDelegatesDetailsResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllClientDelegatesDetailsResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_267: ClientDelegateDetails.ClientDelegateDetails): void => {
                value_267.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllClientDelegatesDetailsResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_268: Array<ClientDelegateDetails.ClientDelegateDetails> = new Array<ClientDelegateDetails.ClientDelegateDetails>();
                        const metadata_29: thrift.TList = input.readListBegin();
                        const size_29: number = metadata_29.size;
                        for (let i_29: number = 0; i_29 < size_29; i_29++) {
                            const value_269: ClientDelegateDetails.ClientDelegateDetails = ClientDelegateDetails.ClientDelegateDetails.read(input);
                            value_268.push(value_269);
                        }
                        input.readListEnd();
                        _args.success = value_268;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_270: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_270;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_271: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_271;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAllClientDelegatesDetailsResult(_args);
    }
}
export interface IGetClientDelegateDetailsResultArgs {
    success?: Array<ClientDelegateDetails.ClientDelegateDetails>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetClientDelegateDetailsResult {
    public success?: Array<ClientDelegateDetails.ClientDelegateDetails>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetClientDelegateDetailsResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetClientDelegateDetailsResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_272: ClientDelegateDetails.ClientDelegateDetails): void => {
                value_272.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetClientDelegateDetailsResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_273: Array<ClientDelegateDetails.ClientDelegateDetails> = new Array<ClientDelegateDetails.ClientDelegateDetails>();
                        const metadata_30: thrift.TList = input.readListBegin();
                        const size_30: number = metadata_30.size;
                        for (let i_30: number = 0; i_30 < size_30; i_30++) {
                            const value_274: ClientDelegateDetails.ClientDelegateDetails = ClientDelegateDetails.ClientDelegateDetails.read(input);
                            value_273.push(value_274);
                        }
                        input.readListEnd();
                        _args.success = value_273;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_275: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_275;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_276: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_276;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetClientDelegateDetailsResult(_args);
    }
}
export interface IGetAllClientsForDelegateResultArgs {
    success?: Array<__ROOT_NAMESPACE__.UserOrGroup>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetAllClientsForDelegateResult {
    public success?: Array<__ROOT_NAMESPACE__.UserOrGroup>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetAllClientsForDelegateResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllClientsForDelegateResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_277: __ROOT_NAMESPACE__.UserOrGroup): void => {
                value_277.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllClientsForDelegateResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_278: Array<__ROOT_NAMESPACE__.UserOrGroup> = new Array<__ROOT_NAMESPACE__.UserOrGroup>();
                        const metadata_31: thrift.TList = input.readListBegin();
                        const size_31: number = metadata_31.size;
                        for (let i_31: number = 0; i_31 < size_31; i_31++) {
                            const value_279: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                            value_278.push(value_279);
                        }
                        input.readListEnd();
                        _args.success = value_278;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_280: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_280;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_281: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_281;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAllClientsForDelegateResult(_args);
    }
}
export interface IGetAllNotificationsForDelegateResultArgs {
    success?: Map<string, number>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetAllNotificationsForDelegateResult {
    public success?: Map<string, number>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetAllNotificationsForDelegateResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllNotificationsForDelegateResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.MAP, 0);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.I32, this.success.size);
            this.success.forEach((value_282: number, key_3: string): void => {
                output.writeString(key_3);
                output.writeI32(value_282);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllNotificationsForDelegateResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_283: Map<string, number> = new Map<string, number>();
                        const metadata_32: thrift.TMap = input.readMapBegin();
                        const size_32: number = metadata_32.size;
                        for (let i_32: number = 0; i_32 < size_32; i_32++) {
                            const key_4: string = input.readString();
                            const value_284: number = input.readI32();
                            value_283.set(key_4, value_284);
                        }
                        input.readMapEnd();
                        _args.success = value_283;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_285: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_285;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_286: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_286;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAllNotificationsForDelegateResult(_args);
    }
}
export interface IGetAccountsResultArgs {
    success?: Array<__ROOT_NAMESPACE__.Account>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetAccountsResult {
    public success?: Array<__ROOT_NAMESPACE__.Account>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetAccountsResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAccountsResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_287: __ROOT_NAMESPACE__.Account): void => {
                value_287.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAccountsResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_288: Array<__ROOT_NAMESPACE__.Account> = new Array<__ROOT_NAMESPACE__.Account>();
                        const metadata_33: thrift.TList = input.readListBegin();
                        const size_33: number = metadata_33.size;
                        for (let i_33: number = 0; i_33 < size_33; i_33++) {
                            const value_289: __ROOT_NAMESPACE__.Account = __ROOT_NAMESPACE__.Account.read(input);
                            value_288.push(value_289);
                        }
                        input.readListEnd();
                        _args.success = value_288;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_290: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_290;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_291: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_291;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAccountsResult(_args);
    }
}
export interface IGetSecurityClassificationsByUserResultArgs {
    success?: Map<string, RoleScHelper.RoleScHelper>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetSecurityClassificationsByUserResult {
    public success?: Map<string, RoleScHelper.RoleScHelper>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetSecurityClassificationsByUserResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetSecurityClassificationsByUserResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.MAP, 0);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRUCT, this.success.size);
            this.success.forEach((value_292: RoleScHelper.RoleScHelper, key_5: string): void => {
                output.writeString(key_5);
                value_292.write(output);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetSecurityClassificationsByUserResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_293: Map<string, RoleScHelper.RoleScHelper> = new Map<string, RoleScHelper.RoleScHelper>();
                        const metadata_34: thrift.TMap = input.readMapBegin();
                        const size_34: number = metadata_34.size;
                        for (let i_34: number = 0; i_34 < size_34; i_34++) {
                            const key_6: string = input.readString();
                            const value_294: RoleScHelper.RoleScHelper = RoleScHelper.RoleScHelper.read(input);
                            value_293.set(key_6, value_294);
                        }
                        input.readMapEnd();
                        _args.success = value_293;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_295: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_295;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_296: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_296;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetSecurityClassificationsByUserResult(_args);
    }
}
export interface IGetUserChiefResultArgs {
    success?: Array<__ROOT_NAMESPACE__.UserOrGroup>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetUserChiefResult {
    public success?: Array<__ROOT_NAMESPACE__.UserOrGroup>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetUserChiefResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetUserChiefResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_297: __ROOT_NAMESPACE__.UserOrGroup): void => {
                value_297.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetUserChiefResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_298: Array<__ROOT_NAMESPACE__.UserOrGroup> = new Array<__ROOT_NAMESPACE__.UserOrGroup>();
                        const metadata_35: thrift.TList = input.readListBegin();
                        const size_35: number = metadata_35.size;
                        for (let i_35: number = 0; i_35 < size_35; i_35++) {
                            const value_299: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                            value_298.push(value_299);
                        }
                        input.readListEnd();
                        _args.success = value_298;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_300: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_300;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_301: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_301;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetUserChiefResult(_args);
    }
}
export interface IUpdateUserInfoResultArgs {
    success?: __ROOT_NAMESPACE__.UserOrGroup;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class UpdateUserInfoResult {
    public success?: __ROOT_NAMESPACE__.UserOrGroup;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IUpdateUserInfoResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("UpdateUserInfoResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): UpdateUserInfoResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_302: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                        _args.success = value_302;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_303: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_303;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_304: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_304;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new UpdateUserInfoResult(_args);
    }
}
export interface IGetUserPreferencesResultArgs {
    success?: UserPreferences.UserPreferences;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetUserPreferencesResult {
    public success?: UserPreferences.UserPreferences;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetUserPreferencesResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetUserPreferencesResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetUserPreferencesResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_305: UserPreferences.UserPreferences = UserPreferences.UserPreferences.read(input);
                        _args.success = value_305;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_306: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_306;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_307: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_307;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetUserPreferencesResult(_args);
    }
}
export interface IUpdateUserPreferencesResultArgs {
    success?: boolean;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class UpdateUserPreferencesResult {
    public success?: boolean;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IUpdateUserPreferencesResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("UpdateUserPreferencesResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): UpdateUserPreferencesResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_308: boolean = input.readBool();
                        _args.success = value_308;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_309: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_309;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_310: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_310;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new UpdateUserPreferencesResult(_args);
    }
}
export interface ICreateOrRemoveFavoriteUsersResultArgs {
    success?: boolean;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class CreateOrRemoveFavoriteUsersResult {
    public success?: boolean;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: ICreateOrRemoveFavoriteUsersResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CreateOrRemoveFavoriteUsersResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CreateOrRemoveFavoriteUsersResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_311: boolean = input.readBool();
                        _args.success = value_311;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_312: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_312;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_313: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_313;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new CreateOrRemoveFavoriteUsersResult(_args);
    }
}
export interface IGetUserAdditionalInfoResultArgs {
    success?: UserAdditionalInfo.UserAdditionalInfo;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetUserAdditionalInfoResult {
    public success?: UserAdditionalInfo.UserAdditionalInfo;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetUserAdditionalInfoResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetUserAdditionalInfoResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetUserAdditionalInfoResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_314: UserAdditionalInfo.UserAdditionalInfo = UserAdditionalInfo.UserAdditionalInfo.read(input);
                        _args.success = value_314;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_315: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_315;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_316: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_316;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetUserAdditionalInfoResult(_args);
    }
}
export interface ISaveUserAdditionalInfoResultArgs {
    success?: UserAdditionalInfo.UserAdditionalInfo;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class SaveUserAdditionalInfoResult {
    public success?: UserAdditionalInfo.UserAdditionalInfo;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: ISaveUserAdditionalInfoResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("SaveUserAdditionalInfoResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): SaveUserAdditionalInfoResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_317: UserAdditionalInfo.UserAdditionalInfo = UserAdditionalInfo.UserAdditionalInfo.read(input);
                        _args.success = value_317;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_318: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_318;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_319: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_319;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new SaveUserAdditionalInfoResult(_args);
    }
}
export interface IRestoreClientResultArgs {
    success?: boolean;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class RestoreClientResult {
    public success?: boolean;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IRestoreClientResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RestoreClientResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RestoreClientResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_320: boolean = input.readBool();
                        _args.success = value_320;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_321: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_321;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_322: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_322;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new RestoreClientResult(_args);
    }
}
export interface IFindDelegatesResultArgs {
    success?: Array<UserDelegates.UserDelegates>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class FindDelegatesResult {
    public success?: Array<UserDelegates.UserDelegates>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IFindDelegatesResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("FindDelegatesResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_323: UserDelegates.UserDelegates): void => {
                value_323.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): FindDelegatesResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_324: Array<UserDelegates.UserDelegates> = new Array<UserDelegates.UserDelegates>();
                        const metadata_36: thrift.TList = input.readListBegin();
                        const size_36: number = metadata_36.size;
                        for (let i_36: number = 0; i_36 < size_36; i_36++) {
                            const value_325: UserDelegates.UserDelegates = UserDelegates.UserDelegates.read(input);
                            value_324.push(value_325);
                        }
                        input.readListEnd();
                        _args.success = value_324;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_326: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_326;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_327: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_327;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new FindDelegatesResult(_args);
    }
}
export class Client {
    public _seqid: number;
    public _reqs: {
        [name: number]: (err: Error | object | undefined, val?: any) => void;
    };
    public output: thrift.TTransport;
    public protocol: new (trans: thrift.TTransport) => thrift.TProtocol;
    constructor(output: thrift.TTransport, protocol: new (trans: thrift.TTransport) => thrift.TProtocol) {
        this._seqid = 0;
        this._reqs = {};
        this.output = output;
        this.protocol = protocol;
    }
    public incrementSeqId(): number {
        return this._seqid += 1;
    }
    public getUserOrGroup(token: string, userOrGroupId: string, userOrGroupType: __ROOT_NAMESPACE__.UserOrGroupType, userVersion: string): Promise<__ROOT_NAMESPACE__.UserOrGroup> {
        const requestId: number = this.incrementSeqId();
        return new Promise<__ROOT_NAMESPACE__.UserOrGroup>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getUserOrGroup(token, userOrGroupId, userOrGroupType, userVersion, requestId);
        });
    }
    public getAllUsersAndGroups(token: string, filter: __ROOT_NAMESPACE__.KazFilter): Promise<Array<__ROOT_NAMESPACE__.UserOrGroup>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<__ROOT_NAMESPACE__.UserOrGroup>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAllUsersAndGroups(token, filter, requestId);
        });
    }
    public getCountAllUsersAndGroups(token: string, filter: __ROOT_NAMESPACE__.KazFilter): Promise<number> {
        const requestId: number = this.incrementSeqId();
        return new Promise<number>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getCountAllUsersAndGroups(token, filter, requestId);
        });
    }
    public getAllUsersByGroup(token: string, groupId: string, filter: __ROOT_NAMESPACE__.KazFilter): Promise<Array<__ROOT_NAMESPACE__.UserOrGroup>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<__ROOT_NAMESPACE__.UserOrGroup>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAllUsersByGroup(token, groupId, filter, requestId);
        });
    }
    public getCountAllUsersByGroup(token: string, groupId: string, filter: __ROOT_NAMESPACE__.KazFilter): Promise<number> {
        const requestId: number = this.incrementSeqId();
        return new Promise<number>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getCountAllUsersByGroup(token, groupId, filter, requestId);
        });
    }
    public getAllUsers(token: string, filter: __ROOT_NAMESPACE__.KazFilter): Promise<Array<__ROOT_NAMESPACE__.UserOrGroup>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<__ROOT_NAMESPACE__.UserOrGroup>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAllUsers(token, filter, requestId);
        });
    }
    public getCountAllUsers(token: string, filter: __ROOT_NAMESPACE__.KazFilter): Promise<number> {
        const requestId: number = this.incrementSeqId();
        return new Promise<number>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getCountAllUsers(token, filter, requestId);
        });
    }
    public getAllGroups(token: string, groupId: string, filter: __ROOT_NAMESPACE__.KazFilter): Promise<Array<__ROOT_NAMESPACE__.UserOrGroup>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<__ROOT_NAMESPACE__.UserOrGroup>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAllGroups(token, groupId, filter, requestId);
        });
    }
    public getCountAllGroups(token: string, groupId: string, filter: __ROOT_NAMESPACE__.KazFilter): Promise<number> {
        const requestId: number = this.incrementSeqId();
        return new Promise<number>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getCountAllGroups(token, groupId, filter, requestId);
        });
    }
    public getRolesByUserOrGroup(token: string, type: __ROOT_NAMESPACE__.UserOrGroupType, userOrGroupId: string, filter: __ROOT_NAMESPACE__.KazFilter): Promise<Set<string>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Set<string>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getRolesByUserOrGroup(token, type, userOrGroupId, filter, requestId);
        });
    }
    public getUserOrGroupsByRole(token: string, role: string, filter: __ROOT_NAMESPACE__.KazFilter): Promise<Array<__ROOT_NAMESPACE__.UserOrGroup>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<__ROOT_NAMESPACE__.UserOrGroup>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getUserOrGroupsByRole(token, role, filter, requestId);
        });
    }
    public createOrUpdateUserGroup(token: string, userGroup: __ROOT_NAMESPACE__.UserOrGroup, accountId: string): Promise<__ROOT_NAMESPACE__.UserOrGroup> {
        const requestId: number = this.incrementSeqId();
        return new Promise<__ROOT_NAMESPACE__.UserOrGroup>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_createOrUpdateUserGroup(token, userGroup, accountId, requestId);
        });
    }
    public addUsersToGroups(token: string, groupsId: Array<string>, usersId: Array<string>, groupPolicy: ExistingDocumentsAccessPolicy.ExistingDocumentsAccessPolicy): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_addUsersToGroups(token, groupsId, usersId, groupPolicy, requestId);
        });
    }
    public createOrUpdateUser(token: string, user: __ROOT_NAMESPACE__.UserOrGroup, login: string, password: string, accountGroupId: string, accountId: string): Promise<__ROOT_NAMESPACE__.UserOrGroup> {
        const requestId: number = this.incrementSeqId();
        return new Promise<__ROOT_NAMESPACE__.UserOrGroup>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_createOrUpdateUser(token, user, login, password, accountGroupId, accountId, requestId);
        });
    }
    public removeClient(token: string, userId: string, reasonForRemoval: string): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_removeClient(token, userId, reasonForRemoval, requestId);
        });
    }
    public removeUsersFromGroups(token: string, groupsId: Array<string>, usersId: Array<string>): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_removeUsersFromGroups(token, groupsId, usersId, requestId);
        });
    }
    public removeGroup(token: string, groupsId: Array<string>): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_removeGroup(token, groupsId, requestId);
        });
    }
    public blockUsers(token: string, userIds: Array<string>): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_blockUsers(token, userIds, requestId);
        });
    }
    public unBlockUsers(token: string, userIds: Array<string>): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_unBlockUsers(token, userIds, requestId);
        });
    }
    public getAllExistingRoles(token: string, filter: __ROOT_NAMESPACE__.KazFilter): Promise<Array<string>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<string>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAllExistingRoles(token, filter, requestId);
        });
    }
    public addRolesToUsersOrGroups(token: string, usersOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>, roles: Array<string>): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_addRolesToUsersOrGroups(token, usersOrGroups, roles, requestId);
        });
    }
    public revokeRolesFromUsersOrGroups(token: string, usersOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>, roles: Array<string>): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_revokeRolesFromUsersOrGroups(token, usersOrGroups, roles, requestId);
        });
    }
    public getRolesByUser(token: string, userId: string): Promise<Map<string, RoleScHelper.RoleScHelper>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Map<string, RoleScHelper.RoleScHelper>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getRolesByUser(token, userId, requestId);
        });
    }
    public loadUserPublicKey(token: string, publicKey: string, signature: string): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_loadUserPublicKey(token, publicKey, signature, requestId);
        });
    }
    public getAllUserPublicKeyInfo(token: string, filter: __ROOT_NAMESPACE__.KazFilter): Promise<Array<UserKeyData.UserKeyData>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<UserKeyData.UserKeyData>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAllUserPublicKeyInfo(token, filter, requestId);
        });
    }
    public getCountAllUserPublicKeyInfo(token: string, filter: __ROOT_NAMESPACE__.KazFilter): Promise<number> {
        const requestId: number = this.incrementSeqId();
        return new Promise<number>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getCountAllUserPublicKeyInfo(token, filter, requestId);
        });
    }
    public changeClientDelegateDetailsInfo(token: string, clientDelegateInfo: ClientDelegateInfo.ClientDelegateInfo, listDetailsToAdd: Array<ClientDelegateDetails.ClientDelegateDetails>, listDetailIdsToRemove: Array<string>, closeDelegateSession: boolean): Promise<Array<ClientDelegateDetails.ClientDelegateDetails>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<ClientDelegateDetails.ClientDelegateDetails>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_changeClientDelegateDetailsInfo(token, clientDelegateInfo, listDetailsToAdd, listDetailIdsToRemove, closeDelegateSession, requestId);
        });
    }
    public revokeClientDelegates(token: string, clientDelegateId: string): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_revokeClientDelegates(token, clientDelegateId, requestId);
        });
    }
    public getAllClientDelegatesInfoList(token: string, filter: __ROOT_NAMESPACE__.KazFilter): Promise<Array<ClientDelegateInfo.ClientDelegateInfo>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<ClientDelegateInfo.ClientDelegateInfo>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAllClientDelegatesInfoList(token, filter, requestId);
        });
    }
    public getAllClientDelegatesDetails(token: string, filter: __ROOT_NAMESPACE__.KazFilter): Promise<Array<ClientDelegateDetails.ClientDelegateDetails>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<ClientDelegateDetails.ClientDelegateDetails>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAllClientDelegatesDetails(token, filter, requestId);
        });
    }
    public getClientDelegateDetails(token: string, clientDelegateInfoId: string): Promise<Array<ClientDelegateDetails.ClientDelegateDetails>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<ClientDelegateDetails.ClientDelegateDetails>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getClientDelegateDetails(token, clientDelegateInfoId, requestId);
        });
    }
    public getAllClientsForDelegate(token: string, userId: string, reverse: boolean, documentId: string): Promise<Array<__ROOT_NAMESPACE__.UserOrGroup>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<__ROOT_NAMESPACE__.UserOrGroup>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAllClientsForDelegate(token, userId, reverse, documentId, requestId);
        });
    }
    public getAllNotificationsForDelegate(token: string): Promise<Map<string, number>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Map<string, number>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAllNotificationsForDelegate(token, requestId);
        });
    }
    public getAccounts(token: string, filter: __ROOT_NAMESPACE__.KazFilter): Promise<Array<__ROOT_NAMESPACE__.Account>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<__ROOT_NAMESPACE__.Account>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAccounts(token, filter, requestId);
        });
    }
    public getSecurityClassificationsByUser(token: string, userId: string): Promise<Map<string, RoleScHelper.RoleScHelper>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Map<string, RoleScHelper.RoleScHelper>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getSecurityClassificationsByUser(token, userId, requestId);
        });
    }
    public getUserChief(token: string, userId: string, level: ChiefLevel.ChiefLevel, userTypes: Set<__ROOT_NAMESPACE__.UserType>, filter: __ROOT_NAMESPACE__.KazFilter): Promise<Array<__ROOT_NAMESPACE__.UserOrGroup>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<__ROOT_NAMESPACE__.UserOrGroup>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getUserChief(token, userId, level, userTypes, filter, requestId);
        });
    }
    public updateUserInfo(token: string, user: __ROOT_NAMESPACE__.UserOrGroup): Promise<__ROOT_NAMESPACE__.UserOrGroup> {
        const requestId: number = this.incrementSeqId();
        return new Promise<__ROOT_NAMESPACE__.UserOrGroup>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_updateUserInfo(token, user, requestId);
        });
    }
    public getUserPreferences(token: string, userId: string): Promise<UserPreferences.UserPreferences> {
        const requestId: number = this.incrementSeqId();
        return new Promise<UserPreferences.UserPreferences>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getUserPreferences(token, userId, requestId);
        });
    }
    public updateUserPreferences(token: string, preferences: UserPreferences.UserPreferences): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_updateUserPreferences(token, preferences, requestId);
        });
    }
    public createOrRemoveFavoriteUsers(token: string, userIdsToAdd: Array<string>, userIdsToRemove: Array<string>): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_createOrRemoveFavoriteUsers(token, userIdsToAdd, userIdsToRemove, requestId);
        });
    }
    public getUserAdditionalInfo(token: string, userId: string, userVersion: string): Promise<UserAdditionalInfo.UserAdditionalInfo> {
        const requestId: number = this.incrementSeqId();
        return new Promise<UserAdditionalInfo.UserAdditionalInfo>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getUserAdditionalInfo(token, userId, userVersion, requestId);
        });
    }
    public saveUserAdditionalInfo(token: string, userAdditionalInfo: UserAdditionalInfo.UserAdditionalInfo, login: string, password: string, accountGroupId: string, accountId: string): Promise<UserAdditionalInfo.UserAdditionalInfo> {
        const requestId: number = this.incrementSeqId();
        return new Promise<UserAdditionalInfo.UserAdditionalInfo>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_saveUserAdditionalInfo(token, userAdditionalInfo, login, password, accountGroupId, accountId, requestId);
        });
    }
    public restoreClient(token: string, userId: string, reasonForRestore: string): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_restoreClient(token, userId, reasonForRestore, requestId);
        });
    }
    public findDelegates(token: string, users: Array<__ROOT_NAMESPACE__.UserOrGroup>): Promise<Array<UserDelegates.UserDelegates>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<UserDelegates.UserDelegates>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_findDelegates(token, users, requestId);
        });
    }
    public send_getUserOrGroup(token: string, userOrGroupId: string, userOrGroupType: __ROOT_NAMESPACE__.UserOrGroupType, userVersion: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getUserOrGroup", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetUserOrGroupArgs = new GetUserOrGroupArgs({ token, userOrGroupId, userOrGroupType, userVersion });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getAllUsersAndGroups(token: string, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAllUsersAndGroups", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAllUsersAndGroupsArgs = new GetAllUsersAndGroupsArgs({ token, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getCountAllUsersAndGroups(token: string, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getCountAllUsersAndGroups", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetCountAllUsersAndGroupsArgs = new GetCountAllUsersAndGroupsArgs({ token, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getAllUsersByGroup(token: string, groupId: string, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAllUsersByGroup", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAllUsersByGroupArgs = new GetAllUsersByGroupArgs({ token, groupId, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getCountAllUsersByGroup(token: string, groupId: string, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getCountAllUsersByGroup", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetCountAllUsersByGroupArgs = new GetCountAllUsersByGroupArgs({ token, groupId, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getAllUsers(token: string, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAllUsers", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAllUsersArgs = new GetAllUsersArgs({ token, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getCountAllUsers(token: string, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getCountAllUsers", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetCountAllUsersArgs = new GetCountAllUsersArgs({ token, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getAllGroups(token: string, groupId: string, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAllGroups", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAllGroupsArgs = new GetAllGroupsArgs({ token, groupId, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getCountAllGroups(token: string, groupId: string, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getCountAllGroups", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetCountAllGroupsArgs = new GetCountAllGroupsArgs({ token, groupId, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getRolesByUserOrGroup(token: string, type: __ROOT_NAMESPACE__.UserOrGroupType, userOrGroupId: string, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getRolesByUserOrGroup", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetRolesByUserOrGroupArgs = new GetRolesByUserOrGroupArgs({ token, type, userOrGroupId, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getUserOrGroupsByRole(token: string, role: string, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getUserOrGroupsByRole", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetUserOrGroupsByRoleArgs = new GetUserOrGroupsByRoleArgs({ token, role, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_createOrUpdateUserGroup(token: string, userGroup: __ROOT_NAMESPACE__.UserOrGroup, accountId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("createOrUpdateUserGroup", thrift.Thrift.MessageType.CALL, requestId);
        const args: CreateOrUpdateUserGroupArgs = new CreateOrUpdateUserGroupArgs({ token, userGroup, accountId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_addUsersToGroups(token: string, groupsId: Array<string>, usersId: Array<string>, groupPolicy: ExistingDocumentsAccessPolicy.ExistingDocumentsAccessPolicy, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("addUsersToGroups", thrift.Thrift.MessageType.CALL, requestId);
        const args: AddUsersToGroupsArgs = new AddUsersToGroupsArgs({ token, groupsId, usersId, groupPolicy });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_createOrUpdateUser(token: string, user: __ROOT_NAMESPACE__.UserOrGroup, login: string, password: string, accountGroupId: string, accountId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("createOrUpdateUser", thrift.Thrift.MessageType.CALL, requestId);
        const args: CreateOrUpdateUserArgs = new CreateOrUpdateUserArgs({ token, user, login, password, accountGroupId, accountId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_removeClient(token: string, userId: string, reasonForRemoval: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("removeClient", thrift.Thrift.MessageType.CALL, requestId);
        const args: RemoveClientArgs = new RemoveClientArgs({ token, userId, reasonForRemoval });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_removeUsersFromGroups(token: string, groupsId: Array<string>, usersId: Array<string>, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("removeUsersFromGroups", thrift.Thrift.MessageType.CALL, requestId);
        const args: RemoveUsersFromGroupsArgs = new RemoveUsersFromGroupsArgs({ token, groupsId, usersId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_removeGroup(token: string, groupsId: Array<string>, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("removeGroup", thrift.Thrift.MessageType.CALL, requestId);
        const args: RemoveGroupArgs = new RemoveGroupArgs({ token, groupsId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_blockUsers(token: string, userIds: Array<string>, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("blockUsers", thrift.Thrift.MessageType.CALL, requestId);
        const args: BlockUsersArgs = new BlockUsersArgs({ token, userIds });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_unBlockUsers(token: string, userIds: Array<string>, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("unBlockUsers", thrift.Thrift.MessageType.CALL, requestId);
        const args: UnBlockUsersArgs = new UnBlockUsersArgs({ token, userIds });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getAllExistingRoles(token: string, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAllExistingRoles", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAllExistingRolesArgs = new GetAllExistingRolesArgs({ token, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_addRolesToUsersOrGroups(token: string, usersOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>, roles: Array<string>, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("addRolesToUsersOrGroups", thrift.Thrift.MessageType.CALL, requestId);
        const args: AddRolesToUsersOrGroupsArgs = new AddRolesToUsersOrGroupsArgs({ token, usersOrGroups, roles });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_revokeRolesFromUsersOrGroups(token: string, usersOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>, roles: Array<string>, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("revokeRolesFromUsersOrGroups", thrift.Thrift.MessageType.CALL, requestId);
        const args: RevokeRolesFromUsersOrGroupsArgs = new RevokeRolesFromUsersOrGroupsArgs({ token, usersOrGroups, roles });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getRolesByUser(token: string, userId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getRolesByUser", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetRolesByUserArgs = new GetRolesByUserArgs({ token, userId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_loadUserPublicKey(token: string, publicKey: string, signature: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("loadUserPublicKey", thrift.Thrift.MessageType.CALL, requestId);
        const args: LoadUserPublicKeyArgs = new LoadUserPublicKeyArgs({ token, publicKey, signature });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getAllUserPublicKeyInfo(token: string, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAllUserPublicKeyInfo", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAllUserPublicKeyInfoArgs = new GetAllUserPublicKeyInfoArgs({ token, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getCountAllUserPublicKeyInfo(token: string, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getCountAllUserPublicKeyInfo", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetCountAllUserPublicKeyInfoArgs = new GetCountAllUserPublicKeyInfoArgs({ token, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_changeClientDelegateDetailsInfo(token: string, clientDelegateInfo: ClientDelegateInfo.ClientDelegateInfo, listDetailsToAdd: Array<ClientDelegateDetails.ClientDelegateDetails>, listDetailIdsToRemove: Array<string>, closeDelegateSession: boolean, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("changeClientDelegateDetailsInfo", thrift.Thrift.MessageType.CALL, requestId);
        const args: ChangeClientDelegateDetailsInfoArgs = new ChangeClientDelegateDetailsInfoArgs({ token, clientDelegateInfo, listDetailsToAdd, listDetailIdsToRemove, closeDelegateSession });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_revokeClientDelegates(token: string, clientDelegateId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("revokeClientDelegates", thrift.Thrift.MessageType.CALL, requestId);
        const args: RevokeClientDelegatesArgs = new RevokeClientDelegatesArgs({ token, clientDelegateId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getAllClientDelegatesInfoList(token: string, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAllClientDelegatesInfoList", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAllClientDelegatesInfoListArgs = new GetAllClientDelegatesInfoListArgs({ token, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getAllClientDelegatesDetails(token: string, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAllClientDelegatesDetails", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAllClientDelegatesDetailsArgs = new GetAllClientDelegatesDetailsArgs({ token, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getClientDelegateDetails(token: string, clientDelegateInfoId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getClientDelegateDetails", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetClientDelegateDetailsArgs = new GetClientDelegateDetailsArgs({ token, clientDelegateInfoId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getAllClientsForDelegate(token: string, userId: string, reverse: boolean, documentId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAllClientsForDelegate", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAllClientsForDelegateArgs = new GetAllClientsForDelegateArgs({ token, userId, reverse, documentId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getAllNotificationsForDelegate(token: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAllNotificationsForDelegate", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAllNotificationsForDelegateArgs = new GetAllNotificationsForDelegateArgs({ token });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getAccounts(token: string, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAccounts", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAccountsArgs = new GetAccountsArgs({ token, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getSecurityClassificationsByUser(token: string, userId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getSecurityClassificationsByUser", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetSecurityClassificationsByUserArgs = new GetSecurityClassificationsByUserArgs({ token, userId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getUserChief(token: string, userId: string, level: ChiefLevel.ChiefLevel, userTypes: Set<__ROOT_NAMESPACE__.UserType>, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getUserChief", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetUserChiefArgs = new GetUserChiefArgs({ token, userId, level, userTypes, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_updateUserInfo(token: string, user: __ROOT_NAMESPACE__.UserOrGroup, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("updateUserInfo", thrift.Thrift.MessageType.CALL, requestId);
        const args: UpdateUserInfoArgs = new UpdateUserInfoArgs({ token, user });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getUserPreferences(token: string, userId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getUserPreferences", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetUserPreferencesArgs = new GetUserPreferencesArgs({ token, userId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_updateUserPreferences(token: string, preferences: UserPreferences.UserPreferences, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("updateUserPreferences", thrift.Thrift.MessageType.CALL, requestId);
        const args: UpdateUserPreferencesArgs = new UpdateUserPreferencesArgs({ token, preferences });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_createOrRemoveFavoriteUsers(token: string, userIdsToAdd: Array<string>, userIdsToRemove: Array<string>, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("createOrRemoveFavoriteUsers", thrift.Thrift.MessageType.CALL, requestId);
        const args: CreateOrRemoveFavoriteUsersArgs = new CreateOrRemoveFavoriteUsersArgs({ token, userIdsToAdd, userIdsToRemove });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getUserAdditionalInfo(token: string, userId: string, userVersion: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getUserAdditionalInfo", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetUserAdditionalInfoArgs = new GetUserAdditionalInfoArgs({ token, userId, userVersion });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_saveUserAdditionalInfo(token: string, userAdditionalInfo: UserAdditionalInfo.UserAdditionalInfo, login: string, password: string, accountGroupId: string, accountId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("saveUserAdditionalInfo", thrift.Thrift.MessageType.CALL, requestId);
        const args: SaveUserAdditionalInfoArgs = new SaveUserAdditionalInfoArgs({ token, userAdditionalInfo, login, password, accountGroupId, accountId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_restoreClient(token: string, userId: string, reasonForRestore: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("restoreClient", thrift.Thrift.MessageType.CALL, requestId);
        const args: RestoreClientArgs = new RestoreClientArgs({ token, userId, reasonForRestore });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_findDelegates(token: string, users: Array<__ROOT_NAMESPACE__.UserOrGroup>, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("findDelegates", thrift.Thrift.MessageType.CALL, requestId);
        const args: FindDelegatesArgs = new FindDelegatesArgs({ token, users });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public recv_getUserOrGroup(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetUserOrGroupResult = GetUserOrGroupResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getUserOrGroup failed: unknown result"));
                }
            }
        }
    }
    public recv_getAllUsersAndGroups(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAllUsersAndGroupsResult = GetAllUsersAndGroupsResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAllUsersAndGroups failed: unknown result"));
                }
            }
        }
    }
    public recv_getCountAllUsersAndGroups(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetCountAllUsersAndGroupsResult = GetCountAllUsersAndGroupsResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getCountAllUsersAndGroups failed: unknown result"));
                }
            }
        }
    }
    public recv_getAllUsersByGroup(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAllUsersByGroupResult = GetAllUsersByGroupResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAllUsersByGroup failed: unknown result"));
                }
            }
        }
    }
    public recv_getCountAllUsersByGroup(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetCountAllUsersByGroupResult = GetCountAllUsersByGroupResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getCountAllUsersByGroup failed: unknown result"));
                }
            }
        }
    }
    public recv_getAllUsers(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAllUsersResult = GetAllUsersResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAllUsers failed: unknown result"));
                }
            }
        }
    }
    public recv_getCountAllUsers(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetCountAllUsersResult = GetCountAllUsersResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getCountAllUsers failed: unknown result"));
                }
            }
        }
    }
    public recv_getAllGroups(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAllGroupsResult = GetAllGroupsResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAllGroups failed: unknown result"));
                }
            }
        }
    }
    public recv_getCountAllGroups(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetCountAllGroupsResult = GetCountAllGroupsResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getCountAllGroups failed: unknown result"));
                }
            }
        }
    }
    public recv_getRolesByUserOrGroup(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetRolesByUserOrGroupResult = GetRolesByUserOrGroupResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getRolesByUserOrGroup failed: unknown result"));
                }
            }
        }
    }
    public recv_getUserOrGroupsByRole(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetUserOrGroupsByRoleResult = GetUserOrGroupsByRoleResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getUserOrGroupsByRole failed: unknown result"));
                }
            }
        }
    }
    public recv_createOrUpdateUserGroup(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: CreateOrUpdateUserGroupResult = CreateOrUpdateUserGroupResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "createOrUpdateUserGroup failed: unknown result"));
                }
            }
        }
    }
    public recv_addUsersToGroups(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: AddUsersToGroupsResult = AddUsersToGroupsResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "addUsersToGroups failed: unknown result"));
                }
            }
        }
    }
    public recv_createOrUpdateUser(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: CreateOrUpdateUserResult = CreateOrUpdateUserResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "createOrUpdateUser failed: unknown result"));
                }
            }
        }
    }
    public recv_removeClient(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: RemoveClientResult = RemoveClientResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "removeClient failed: unknown result"));
                }
            }
        }
    }
    public recv_removeUsersFromGroups(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: RemoveUsersFromGroupsResult = RemoveUsersFromGroupsResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "removeUsersFromGroups failed: unknown result"));
                }
            }
        }
    }
    public recv_removeGroup(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: RemoveGroupResult = RemoveGroupResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "removeGroup failed: unknown result"));
                }
            }
        }
    }
    public recv_blockUsers(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: BlockUsersResult = BlockUsersResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "blockUsers failed: unknown result"));
                }
            }
        }
    }
    public recv_unBlockUsers(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: UnBlockUsersResult = UnBlockUsersResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "unBlockUsers failed: unknown result"));
                }
            }
        }
    }
    public recv_getAllExistingRoles(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAllExistingRolesResult = GetAllExistingRolesResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAllExistingRoles failed: unknown result"));
                }
            }
        }
    }
    public recv_addRolesToUsersOrGroups(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: AddRolesToUsersOrGroupsResult = AddRolesToUsersOrGroupsResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "addRolesToUsersOrGroups failed: unknown result"));
                }
            }
        }
    }
    public recv_revokeRolesFromUsersOrGroups(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: RevokeRolesFromUsersOrGroupsResult = RevokeRolesFromUsersOrGroupsResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "revokeRolesFromUsersOrGroups failed: unknown result"));
                }
            }
        }
    }
    public recv_getRolesByUser(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetRolesByUserResult = GetRolesByUserResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getRolesByUser failed: unknown result"));
                }
            }
        }
    }
    public recv_loadUserPublicKey(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: LoadUserPublicKeyResult = LoadUserPublicKeyResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "loadUserPublicKey failed: unknown result"));
                }
            }
        }
    }
    public recv_getAllUserPublicKeyInfo(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAllUserPublicKeyInfoResult = GetAllUserPublicKeyInfoResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAllUserPublicKeyInfo failed: unknown result"));
                }
            }
        }
    }
    public recv_getCountAllUserPublicKeyInfo(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetCountAllUserPublicKeyInfoResult = GetCountAllUserPublicKeyInfoResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getCountAllUserPublicKeyInfo failed: unknown result"));
                }
            }
        }
    }
    public recv_changeClientDelegateDetailsInfo(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: ChangeClientDelegateDetailsInfoResult = ChangeClientDelegateDetailsInfoResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "changeClientDelegateDetailsInfo failed: unknown result"));
                }
            }
        }
    }
    public recv_revokeClientDelegates(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: RevokeClientDelegatesResult = RevokeClientDelegatesResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "revokeClientDelegates failed: unknown result"));
                }
            }
        }
    }
    public recv_getAllClientDelegatesInfoList(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAllClientDelegatesInfoListResult = GetAllClientDelegatesInfoListResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAllClientDelegatesInfoList failed: unknown result"));
                }
            }
        }
    }
    public recv_getAllClientDelegatesDetails(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAllClientDelegatesDetailsResult = GetAllClientDelegatesDetailsResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAllClientDelegatesDetails failed: unknown result"));
                }
            }
        }
    }
    public recv_getClientDelegateDetails(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetClientDelegateDetailsResult = GetClientDelegateDetailsResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getClientDelegateDetails failed: unknown result"));
                }
            }
        }
    }
    public recv_getAllClientsForDelegate(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAllClientsForDelegateResult = GetAllClientsForDelegateResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAllClientsForDelegate failed: unknown result"));
                }
            }
        }
    }
    public recv_getAllNotificationsForDelegate(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAllNotificationsForDelegateResult = GetAllNotificationsForDelegateResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAllNotificationsForDelegate failed: unknown result"));
                }
            }
        }
    }
    public recv_getAccounts(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAccountsResult = GetAccountsResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAccounts failed: unknown result"));
                }
            }
        }
    }
    public recv_getSecurityClassificationsByUser(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetSecurityClassificationsByUserResult = GetSecurityClassificationsByUserResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getSecurityClassificationsByUser failed: unknown result"));
                }
            }
        }
    }
    public recv_getUserChief(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetUserChiefResult = GetUserChiefResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getUserChief failed: unknown result"));
                }
            }
        }
    }
    public recv_updateUserInfo(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: UpdateUserInfoResult = UpdateUserInfoResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "updateUserInfo failed: unknown result"));
                }
            }
        }
    }
    public recv_getUserPreferences(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetUserPreferencesResult = GetUserPreferencesResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getUserPreferences failed: unknown result"));
                }
            }
        }
    }
    public recv_updateUserPreferences(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: UpdateUserPreferencesResult = UpdateUserPreferencesResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "updateUserPreferences failed: unknown result"));
                }
            }
        }
    }
    public recv_createOrRemoveFavoriteUsers(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: CreateOrRemoveFavoriteUsersResult = CreateOrRemoveFavoriteUsersResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "createOrRemoveFavoriteUsers failed: unknown result"));
                }
            }
        }
    }
    public recv_getUserAdditionalInfo(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetUserAdditionalInfoResult = GetUserAdditionalInfoResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getUserAdditionalInfo failed: unknown result"));
                }
            }
        }
    }
    public recv_saveUserAdditionalInfo(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: SaveUserAdditionalInfoResult = SaveUserAdditionalInfoResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "saveUserAdditionalInfo failed: unknown result"));
                }
            }
        }
    }
    public recv_restoreClient(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: RestoreClientResult = RestoreClientResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "restoreClient failed: unknown result"));
                }
            }
        }
    }
    public recv_findDelegates(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: FindDelegatesResult = FindDelegatesResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "findDelegates failed: unknown result"));
                }
            }
        }
    }
}
export interface IHandler {
    getUserOrGroup(token: string, userOrGroupId: string, userOrGroupType: __ROOT_NAMESPACE__.UserOrGroupType, userVersion: string): __ROOT_NAMESPACE__.UserOrGroup | Promise<__ROOT_NAMESPACE__.UserOrGroup>;
    getAllUsersAndGroups(token: string, filter: __ROOT_NAMESPACE__.KazFilter): Array<__ROOT_NAMESPACE__.UserOrGroup> | Promise<Array<__ROOT_NAMESPACE__.UserOrGroup>>;
    getCountAllUsersAndGroups(token: string, filter: __ROOT_NAMESPACE__.KazFilter): number | Promise<number>;
    getAllUsersByGroup(token: string, groupId: string, filter: __ROOT_NAMESPACE__.KazFilter): Array<__ROOT_NAMESPACE__.UserOrGroup> | Promise<Array<__ROOT_NAMESPACE__.UserOrGroup>>;
    getCountAllUsersByGroup(token: string, groupId: string, filter: __ROOT_NAMESPACE__.KazFilter): number | Promise<number>;
    getAllUsers(token: string, filter: __ROOT_NAMESPACE__.KazFilter): Array<__ROOT_NAMESPACE__.UserOrGroup> | Promise<Array<__ROOT_NAMESPACE__.UserOrGroup>>;
    getCountAllUsers(token: string, filter: __ROOT_NAMESPACE__.KazFilter): number | Promise<number>;
    getAllGroups(token: string, groupId: string, filter: __ROOT_NAMESPACE__.KazFilter): Array<__ROOT_NAMESPACE__.UserOrGroup> | Promise<Array<__ROOT_NAMESPACE__.UserOrGroup>>;
    getCountAllGroups(token: string, groupId: string, filter: __ROOT_NAMESPACE__.KazFilter): number | Promise<number>;
    getRolesByUserOrGroup(token: string, type: __ROOT_NAMESPACE__.UserOrGroupType, userOrGroupId: string, filter: __ROOT_NAMESPACE__.KazFilter): Set<string> | Promise<Set<string>>;
    getUserOrGroupsByRole(token: string, role: string, filter: __ROOT_NAMESPACE__.KazFilter): Array<__ROOT_NAMESPACE__.UserOrGroup> | Promise<Array<__ROOT_NAMESPACE__.UserOrGroup>>;
    createOrUpdateUserGroup(token: string, userGroup: __ROOT_NAMESPACE__.UserOrGroup, accountId: string): __ROOT_NAMESPACE__.UserOrGroup | Promise<__ROOT_NAMESPACE__.UserOrGroup>;
    addUsersToGroups(token: string, groupsId: Array<string>, usersId: Array<string>, groupPolicy: ExistingDocumentsAccessPolicy.ExistingDocumentsAccessPolicy): boolean | Promise<boolean>;
    createOrUpdateUser(token: string, user: __ROOT_NAMESPACE__.UserOrGroup, login: string, password: string, accountGroupId: string, accountId: string): __ROOT_NAMESPACE__.UserOrGroup | Promise<__ROOT_NAMESPACE__.UserOrGroup>;
    removeClient(token: string, userId: string, reasonForRemoval: string): boolean | Promise<boolean>;
    removeUsersFromGroups(token: string, groupsId: Array<string>, usersId: Array<string>): boolean | Promise<boolean>;
    removeGroup(token: string, groupsId: Array<string>): boolean | Promise<boolean>;
    blockUsers(token: string, userIds: Array<string>): boolean | Promise<boolean>;
    unBlockUsers(token: string, userIds: Array<string>): boolean | Promise<boolean>;
    getAllExistingRoles(token: string, filter: __ROOT_NAMESPACE__.KazFilter): Array<string> | Promise<Array<string>>;
    addRolesToUsersOrGroups(token: string, usersOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>, roles: Array<string>): boolean | Promise<boolean>;
    revokeRolesFromUsersOrGroups(token: string, usersOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>, roles: Array<string>): boolean | Promise<boolean>;
    getRolesByUser(token: string, userId: string): Map<string, RoleScHelper.RoleScHelper> | Promise<Map<string, RoleScHelper.RoleScHelper>>;
    loadUserPublicKey(token: string, publicKey: string, signature: string): boolean | Promise<boolean>;
    getAllUserPublicKeyInfo(token: string, filter: __ROOT_NAMESPACE__.KazFilter): Array<UserKeyData.UserKeyData> | Promise<Array<UserKeyData.UserKeyData>>;
    getCountAllUserPublicKeyInfo(token: string, filter: __ROOT_NAMESPACE__.KazFilter): number | Promise<number>;
    changeClientDelegateDetailsInfo(token: string, clientDelegateInfo: ClientDelegateInfo.ClientDelegateInfo, listDetailsToAdd: Array<ClientDelegateDetails.ClientDelegateDetails>, listDetailIdsToRemove: Array<string>, closeDelegateSession: boolean): Array<ClientDelegateDetails.ClientDelegateDetails> | Promise<Array<ClientDelegateDetails.ClientDelegateDetails>>;
    revokeClientDelegates(token: string, clientDelegateId: string): boolean | Promise<boolean>;
    getAllClientDelegatesInfoList(token: string, filter: __ROOT_NAMESPACE__.KazFilter): Array<ClientDelegateInfo.ClientDelegateInfo> | Promise<Array<ClientDelegateInfo.ClientDelegateInfo>>;
    getAllClientDelegatesDetails(token: string, filter: __ROOT_NAMESPACE__.KazFilter): Array<ClientDelegateDetails.ClientDelegateDetails> | Promise<Array<ClientDelegateDetails.ClientDelegateDetails>>;
    getClientDelegateDetails(token: string, clientDelegateInfoId: string): Array<ClientDelegateDetails.ClientDelegateDetails> | Promise<Array<ClientDelegateDetails.ClientDelegateDetails>>;
    getAllClientsForDelegate(token: string, userId: string, reverse: boolean, documentId: string): Array<__ROOT_NAMESPACE__.UserOrGroup> | Promise<Array<__ROOT_NAMESPACE__.UserOrGroup>>;
    getAllNotificationsForDelegate(token: string): Map<string, number> | Promise<Map<string, number>>;
    getAccounts(token: string, filter: __ROOT_NAMESPACE__.KazFilter): Array<__ROOT_NAMESPACE__.Account> | Promise<Array<__ROOT_NAMESPACE__.Account>>;
    getSecurityClassificationsByUser(token: string, userId: string): Map<string, RoleScHelper.RoleScHelper> | Promise<Map<string, RoleScHelper.RoleScHelper>>;
    getUserChief(token: string, userId: string, level: ChiefLevel.ChiefLevel, userTypes: Set<__ROOT_NAMESPACE__.UserType>, filter: __ROOT_NAMESPACE__.KazFilter): Array<__ROOT_NAMESPACE__.UserOrGroup> | Promise<Array<__ROOT_NAMESPACE__.UserOrGroup>>;
    updateUserInfo(token: string, user: __ROOT_NAMESPACE__.UserOrGroup): __ROOT_NAMESPACE__.UserOrGroup | Promise<__ROOT_NAMESPACE__.UserOrGroup>;
    getUserPreferences(token: string, userId: string): UserPreferences.UserPreferences | Promise<UserPreferences.UserPreferences>;
    updateUserPreferences(token: string, preferences: UserPreferences.UserPreferences): boolean | Promise<boolean>;
    createOrRemoveFavoriteUsers(token: string, userIdsToAdd: Array<string>, userIdsToRemove: Array<string>): boolean | Promise<boolean>;
    getUserAdditionalInfo(token: string, userId: string, userVersion: string): UserAdditionalInfo.UserAdditionalInfo | Promise<UserAdditionalInfo.UserAdditionalInfo>;
    saveUserAdditionalInfo(token: string, userAdditionalInfo: UserAdditionalInfo.UserAdditionalInfo, login: string, password: string, accountGroupId: string, accountId: string): UserAdditionalInfo.UserAdditionalInfo | Promise<UserAdditionalInfo.UserAdditionalInfo>;
    restoreClient(token: string, userId: string, reasonForRestore: string): boolean | Promise<boolean>;
    findDelegates(token: string, users: Array<__ROOT_NAMESPACE__.UserOrGroup>): Array<UserDelegates.UserDelegates> | Promise<Array<UserDelegates.UserDelegates>>;
}
export class Processor {
    public _handler: IHandler;
    constructor(handler: IHandler) {
        this._handler = handler;
    }
    public process(input: thrift.TProtocol, output: thrift.TProtocol): void {
        const metadata: thrift.TMessage = input.readMessageBegin();
        const fname: string = metadata.fname;
        const requestId: number = metadata.rseqid;
        const methodName: string = "process_" + fname;
        switch (methodName) {
            case "process_getUserOrGroup": {
                this.process_getUserOrGroup(requestId, input, output);
                return;
            }
            case "process_getAllUsersAndGroups": {
                this.process_getAllUsersAndGroups(requestId, input, output);
                return;
            }
            case "process_getCountAllUsersAndGroups": {
                this.process_getCountAllUsersAndGroups(requestId, input, output);
                return;
            }
            case "process_getAllUsersByGroup": {
                this.process_getAllUsersByGroup(requestId, input, output);
                return;
            }
            case "process_getCountAllUsersByGroup": {
                this.process_getCountAllUsersByGroup(requestId, input, output);
                return;
            }
            case "process_getAllUsers": {
                this.process_getAllUsers(requestId, input, output);
                return;
            }
            case "process_getCountAllUsers": {
                this.process_getCountAllUsers(requestId, input, output);
                return;
            }
            case "process_getAllGroups": {
                this.process_getAllGroups(requestId, input, output);
                return;
            }
            case "process_getCountAllGroups": {
                this.process_getCountAllGroups(requestId, input, output);
                return;
            }
            case "process_getRolesByUserOrGroup": {
                this.process_getRolesByUserOrGroup(requestId, input, output);
                return;
            }
            case "process_getUserOrGroupsByRole": {
                this.process_getUserOrGroupsByRole(requestId, input, output);
                return;
            }
            case "process_createOrUpdateUserGroup": {
                this.process_createOrUpdateUserGroup(requestId, input, output);
                return;
            }
            case "process_addUsersToGroups": {
                this.process_addUsersToGroups(requestId, input, output);
                return;
            }
            case "process_createOrUpdateUser": {
                this.process_createOrUpdateUser(requestId, input, output);
                return;
            }
            case "process_removeClient": {
                this.process_removeClient(requestId, input, output);
                return;
            }
            case "process_removeUsersFromGroups": {
                this.process_removeUsersFromGroups(requestId, input, output);
                return;
            }
            case "process_removeGroup": {
                this.process_removeGroup(requestId, input, output);
                return;
            }
            case "process_blockUsers": {
                this.process_blockUsers(requestId, input, output);
                return;
            }
            case "process_unBlockUsers": {
                this.process_unBlockUsers(requestId, input, output);
                return;
            }
            case "process_getAllExistingRoles": {
                this.process_getAllExistingRoles(requestId, input, output);
                return;
            }
            case "process_addRolesToUsersOrGroups": {
                this.process_addRolesToUsersOrGroups(requestId, input, output);
                return;
            }
            case "process_revokeRolesFromUsersOrGroups": {
                this.process_revokeRolesFromUsersOrGroups(requestId, input, output);
                return;
            }
            case "process_getRolesByUser": {
                this.process_getRolesByUser(requestId, input, output);
                return;
            }
            case "process_loadUserPublicKey": {
                this.process_loadUserPublicKey(requestId, input, output);
                return;
            }
            case "process_getAllUserPublicKeyInfo": {
                this.process_getAllUserPublicKeyInfo(requestId, input, output);
                return;
            }
            case "process_getCountAllUserPublicKeyInfo": {
                this.process_getCountAllUserPublicKeyInfo(requestId, input, output);
                return;
            }
            case "process_changeClientDelegateDetailsInfo": {
                this.process_changeClientDelegateDetailsInfo(requestId, input, output);
                return;
            }
            case "process_revokeClientDelegates": {
                this.process_revokeClientDelegates(requestId, input, output);
                return;
            }
            case "process_getAllClientDelegatesInfoList": {
                this.process_getAllClientDelegatesInfoList(requestId, input, output);
                return;
            }
            case "process_getAllClientDelegatesDetails": {
                this.process_getAllClientDelegatesDetails(requestId, input, output);
                return;
            }
            case "process_getClientDelegateDetails": {
                this.process_getClientDelegateDetails(requestId, input, output);
                return;
            }
            case "process_getAllClientsForDelegate": {
                this.process_getAllClientsForDelegate(requestId, input, output);
                return;
            }
            case "process_getAllNotificationsForDelegate": {
                this.process_getAllNotificationsForDelegate(requestId, input, output);
                return;
            }
            case "process_getAccounts": {
                this.process_getAccounts(requestId, input, output);
                return;
            }
            case "process_getSecurityClassificationsByUser": {
                this.process_getSecurityClassificationsByUser(requestId, input, output);
                return;
            }
            case "process_getUserChief": {
                this.process_getUserChief(requestId, input, output);
                return;
            }
            case "process_updateUserInfo": {
                this.process_updateUserInfo(requestId, input, output);
                return;
            }
            case "process_getUserPreferences": {
                this.process_getUserPreferences(requestId, input, output);
                return;
            }
            case "process_updateUserPreferences": {
                this.process_updateUserPreferences(requestId, input, output);
                return;
            }
            case "process_createOrRemoveFavoriteUsers": {
                this.process_createOrRemoveFavoriteUsers(requestId, input, output);
                return;
            }
            case "process_getUserAdditionalInfo": {
                this.process_getUserAdditionalInfo(requestId, input, output);
                return;
            }
            case "process_saveUserAdditionalInfo": {
                this.process_saveUserAdditionalInfo(requestId, input, output);
                return;
            }
            case "process_restoreClient": {
                this.process_restoreClient(requestId, input, output);
                return;
            }
            case "process_findDelegates": {
                this.process_findDelegates(requestId, input, output);
                return;
            }
            default: {
                input.skip(thrift.Thrift.Type.STRUCT);
                input.readMessageEnd();
                const errMessage = "Unknown function " + fname;
                const err = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN_METHOD, errMessage);
                output.writeMessageBegin(fname, thrift.Thrift.MessageType.EXCEPTION, requestId);
                err.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        }
    }
    public process_getUserOrGroup(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<__ROOT_NAMESPACE__.UserOrGroup>((resolve, reject): void => {
            try {
                const args: GetUserOrGroupArgs = GetUserOrGroupArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getUserOrGroup(args.token, args.userOrGroupId, args.userOrGroupType, args.userVersion));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: __ROOT_NAMESPACE__.UserOrGroup): void => {
            const result: GetUserOrGroupResult = new GetUserOrGroupResult({ success: data });
            output.writeMessageBegin("getUserOrGroup", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetUserOrGroupResult = new GetUserOrGroupResult({ validError: err });
                output.writeMessageBegin("getUserOrGroup", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetUserOrGroupResult = new GetUserOrGroupResult({ error: err });
                output.writeMessageBegin("getUserOrGroup", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getUserOrGroup", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getAllUsersAndGroups(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<__ROOT_NAMESPACE__.UserOrGroup>>((resolve, reject): void => {
            try {
                const args: GetAllUsersAndGroupsArgs = GetAllUsersAndGroupsArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAllUsersAndGroups(args.token, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<__ROOT_NAMESPACE__.UserOrGroup>): void => {
            const result: GetAllUsersAndGroupsResult = new GetAllUsersAndGroupsResult({ success: data });
            output.writeMessageBegin("getAllUsersAndGroups", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetAllUsersAndGroupsResult = new GetAllUsersAndGroupsResult({ validError: err });
                output.writeMessageBegin("getAllUsersAndGroups", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetAllUsersAndGroupsResult = new GetAllUsersAndGroupsResult({ error: err });
                output.writeMessageBegin("getAllUsersAndGroups", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAllUsersAndGroups", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getCountAllUsersAndGroups(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<number>((resolve, reject): void => {
            try {
                const args: GetCountAllUsersAndGroupsArgs = GetCountAllUsersAndGroupsArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getCountAllUsersAndGroups(args.token, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: number): void => {
            const result: GetCountAllUsersAndGroupsResult = new GetCountAllUsersAndGroupsResult({ success: data });
            output.writeMessageBegin("getCountAllUsersAndGroups", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetCountAllUsersAndGroupsResult = new GetCountAllUsersAndGroupsResult({ validError: err });
                output.writeMessageBegin("getCountAllUsersAndGroups", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetCountAllUsersAndGroupsResult = new GetCountAllUsersAndGroupsResult({ error: err });
                output.writeMessageBegin("getCountAllUsersAndGroups", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getCountAllUsersAndGroups", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getAllUsersByGroup(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<__ROOT_NAMESPACE__.UserOrGroup>>((resolve, reject): void => {
            try {
                const args: GetAllUsersByGroupArgs = GetAllUsersByGroupArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAllUsersByGroup(args.token, args.groupId, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<__ROOT_NAMESPACE__.UserOrGroup>): void => {
            const result: GetAllUsersByGroupResult = new GetAllUsersByGroupResult({ success: data });
            output.writeMessageBegin("getAllUsersByGroup", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetAllUsersByGroupResult = new GetAllUsersByGroupResult({ validError: err });
                output.writeMessageBegin("getAllUsersByGroup", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetAllUsersByGroupResult = new GetAllUsersByGroupResult({ error: err });
                output.writeMessageBegin("getAllUsersByGroup", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAllUsersByGroup", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getCountAllUsersByGroup(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<number>((resolve, reject): void => {
            try {
                const args: GetCountAllUsersByGroupArgs = GetCountAllUsersByGroupArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getCountAllUsersByGroup(args.token, args.groupId, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: number): void => {
            const result: GetCountAllUsersByGroupResult = new GetCountAllUsersByGroupResult({ success: data });
            output.writeMessageBegin("getCountAllUsersByGroup", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetCountAllUsersByGroupResult = new GetCountAllUsersByGroupResult({ validError: err });
                output.writeMessageBegin("getCountAllUsersByGroup", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetCountAllUsersByGroupResult = new GetCountAllUsersByGroupResult({ error: err });
                output.writeMessageBegin("getCountAllUsersByGroup", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getCountAllUsersByGroup", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getAllUsers(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<__ROOT_NAMESPACE__.UserOrGroup>>((resolve, reject): void => {
            try {
                const args: GetAllUsersArgs = GetAllUsersArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAllUsers(args.token, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<__ROOT_NAMESPACE__.UserOrGroup>): void => {
            const result: GetAllUsersResult = new GetAllUsersResult({ success: data });
            output.writeMessageBegin("getAllUsers", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetAllUsersResult = new GetAllUsersResult({ validError: err });
                output.writeMessageBegin("getAllUsers", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetAllUsersResult = new GetAllUsersResult({ error: err });
                output.writeMessageBegin("getAllUsers", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAllUsers", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getCountAllUsers(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<number>((resolve, reject): void => {
            try {
                const args: GetCountAllUsersArgs = GetCountAllUsersArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getCountAllUsers(args.token, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: number): void => {
            const result: GetCountAllUsersResult = new GetCountAllUsersResult({ success: data });
            output.writeMessageBegin("getCountAllUsers", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetCountAllUsersResult = new GetCountAllUsersResult({ validError: err });
                output.writeMessageBegin("getCountAllUsers", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetCountAllUsersResult = new GetCountAllUsersResult({ error: err });
                output.writeMessageBegin("getCountAllUsers", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getCountAllUsers", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getAllGroups(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<__ROOT_NAMESPACE__.UserOrGroup>>((resolve, reject): void => {
            try {
                const args: GetAllGroupsArgs = GetAllGroupsArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAllGroups(args.token, args.groupId, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<__ROOT_NAMESPACE__.UserOrGroup>): void => {
            const result: GetAllGroupsResult = new GetAllGroupsResult({ success: data });
            output.writeMessageBegin("getAllGroups", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetAllGroupsResult = new GetAllGroupsResult({ validError: err });
                output.writeMessageBegin("getAllGroups", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetAllGroupsResult = new GetAllGroupsResult({ error: err });
                output.writeMessageBegin("getAllGroups", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAllGroups", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getCountAllGroups(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<number>((resolve, reject): void => {
            try {
                const args: GetCountAllGroupsArgs = GetCountAllGroupsArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getCountAllGroups(args.token, args.groupId, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: number): void => {
            const result: GetCountAllGroupsResult = new GetCountAllGroupsResult({ success: data });
            output.writeMessageBegin("getCountAllGroups", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetCountAllGroupsResult = new GetCountAllGroupsResult({ validError: err });
                output.writeMessageBegin("getCountAllGroups", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetCountAllGroupsResult = new GetCountAllGroupsResult({ error: err });
                output.writeMessageBegin("getCountAllGroups", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getCountAllGroups", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getRolesByUserOrGroup(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Set<string>>((resolve, reject): void => {
            try {
                const args: GetRolesByUserOrGroupArgs = GetRolesByUserOrGroupArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getRolesByUserOrGroup(args.token, args.type, args.userOrGroupId, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Set<string>): void => {
            const result: GetRolesByUserOrGroupResult = new GetRolesByUserOrGroupResult({ success: data });
            output.writeMessageBegin("getRolesByUserOrGroup", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetRolesByUserOrGroupResult = new GetRolesByUserOrGroupResult({ validError: err });
                output.writeMessageBegin("getRolesByUserOrGroup", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetRolesByUserOrGroupResult = new GetRolesByUserOrGroupResult({ error: err });
                output.writeMessageBegin("getRolesByUserOrGroup", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getRolesByUserOrGroup", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getUserOrGroupsByRole(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<__ROOT_NAMESPACE__.UserOrGroup>>((resolve, reject): void => {
            try {
                const args: GetUserOrGroupsByRoleArgs = GetUserOrGroupsByRoleArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getUserOrGroupsByRole(args.token, args.role, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<__ROOT_NAMESPACE__.UserOrGroup>): void => {
            const result: GetUserOrGroupsByRoleResult = new GetUserOrGroupsByRoleResult({ success: data });
            output.writeMessageBegin("getUserOrGroupsByRole", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetUserOrGroupsByRoleResult = new GetUserOrGroupsByRoleResult({ validError: err });
                output.writeMessageBegin("getUserOrGroupsByRole", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetUserOrGroupsByRoleResult = new GetUserOrGroupsByRoleResult({ error: err });
                output.writeMessageBegin("getUserOrGroupsByRole", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getUserOrGroupsByRole", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_createOrUpdateUserGroup(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<__ROOT_NAMESPACE__.UserOrGroup>((resolve, reject): void => {
            try {
                const args: CreateOrUpdateUserGroupArgs = CreateOrUpdateUserGroupArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.createOrUpdateUserGroup(args.token, args.userGroup, args.accountId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: __ROOT_NAMESPACE__.UserOrGroup): void => {
            const result: CreateOrUpdateUserGroupResult = new CreateOrUpdateUserGroupResult({ success: data });
            output.writeMessageBegin("createOrUpdateUserGroup", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: CreateOrUpdateUserGroupResult = new CreateOrUpdateUserGroupResult({ validError: err });
                output.writeMessageBegin("createOrUpdateUserGroup", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: CreateOrUpdateUserGroupResult = new CreateOrUpdateUserGroupResult({ error: err });
                output.writeMessageBegin("createOrUpdateUserGroup", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("createOrUpdateUserGroup", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_addUsersToGroups(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: AddUsersToGroupsArgs = AddUsersToGroupsArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.addUsersToGroups(args.token, args.groupsId, args.usersId, args.groupPolicy));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: AddUsersToGroupsResult = new AddUsersToGroupsResult({ success: data });
            output.writeMessageBegin("addUsersToGroups", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: AddUsersToGroupsResult = new AddUsersToGroupsResult({ validError: err });
                output.writeMessageBegin("addUsersToGroups", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: AddUsersToGroupsResult = new AddUsersToGroupsResult({ error: err });
                output.writeMessageBegin("addUsersToGroups", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("addUsersToGroups", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_createOrUpdateUser(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<__ROOT_NAMESPACE__.UserOrGroup>((resolve, reject): void => {
            try {
                const args: CreateOrUpdateUserArgs = CreateOrUpdateUserArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.createOrUpdateUser(args.token, args.user, args.login, args.password, args.accountGroupId, args.accountId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: __ROOT_NAMESPACE__.UserOrGroup): void => {
            const result: CreateOrUpdateUserResult = new CreateOrUpdateUserResult({ success: data });
            output.writeMessageBegin("createOrUpdateUser", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: CreateOrUpdateUserResult = new CreateOrUpdateUserResult({ validError: err });
                output.writeMessageBegin("createOrUpdateUser", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: CreateOrUpdateUserResult = new CreateOrUpdateUserResult({ error: err });
                output.writeMessageBegin("createOrUpdateUser", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("createOrUpdateUser", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_removeClient(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: RemoveClientArgs = RemoveClientArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.removeClient(args.token, args.userId, args.reasonForRemoval));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: RemoveClientResult = new RemoveClientResult({ success: data });
            output.writeMessageBegin("removeClient", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: RemoveClientResult = new RemoveClientResult({ validError: err });
                output.writeMessageBegin("removeClient", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: RemoveClientResult = new RemoveClientResult({ error: err });
                output.writeMessageBegin("removeClient", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("removeClient", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_removeUsersFromGroups(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: RemoveUsersFromGroupsArgs = RemoveUsersFromGroupsArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.removeUsersFromGroups(args.token, args.groupsId, args.usersId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: RemoveUsersFromGroupsResult = new RemoveUsersFromGroupsResult({ success: data });
            output.writeMessageBegin("removeUsersFromGroups", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: RemoveUsersFromGroupsResult = new RemoveUsersFromGroupsResult({ validError: err });
                output.writeMessageBegin("removeUsersFromGroups", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: RemoveUsersFromGroupsResult = new RemoveUsersFromGroupsResult({ error: err });
                output.writeMessageBegin("removeUsersFromGroups", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("removeUsersFromGroups", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_removeGroup(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: RemoveGroupArgs = RemoveGroupArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.removeGroup(args.token, args.groupsId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: RemoveGroupResult = new RemoveGroupResult({ success: data });
            output.writeMessageBegin("removeGroup", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: RemoveGroupResult = new RemoveGroupResult({ validError: err });
                output.writeMessageBegin("removeGroup", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: RemoveGroupResult = new RemoveGroupResult({ error: err });
                output.writeMessageBegin("removeGroup", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("removeGroup", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_blockUsers(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: BlockUsersArgs = BlockUsersArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.blockUsers(args.token, args.userIds));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: BlockUsersResult = new BlockUsersResult({ success: data });
            output.writeMessageBegin("blockUsers", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: BlockUsersResult = new BlockUsersResult({ validError: err });
                output.writeMessageBegin("blockUsers", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: BlockUsersResult = new BlockUsersResult({ error: err });
                output.writeMessageBegin("blockUsers", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("blockUsers", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_unBlockUsers(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: UnBlockUsersArgs = UnBlockUsersArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.unBlockUsers(args.token, args.userIds));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: UnBlockUsersResult = new UnBlockUsersResult({ success: data });
            output.writeMessageBegin("unBlockUsers", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: UnBlockUsersResult = new UnBlockUsersResult({ validError: err });
                output.writeMessageBegin("unBlockUsers", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: UnBlockUsersResult = new UnBlockUsersResult({ error: err });
                output.writeMessageBegin("unBlockUsers", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("unBlockUsers", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getAllExistingRoles(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<string>>((resolve, reject): void => {
            try {
                const args: GetAllExistingRolesArgs = GetAllExistingRolesArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAllExistingRoles(args.token, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<string>): void => {
            const result: GetAllExistingRolesResult = new GetAllExistingRolesResult({ success: data });
            output.writeMessageBegin("getAllExistingRoles", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetAllExistingRolesResult = new GetAllExistingRolesResult({ validError: err });
                output.writeMessageBegin("getAllExistingRoles", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetAllExistingRolesResult = new GetAllExistingRolesResult({ error: err });
                output.writeMessageBegin("getAllExistingRoles", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAllExistingRoles", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_addRolesToUsersOrGroups(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: AddRolesToUsersOrGroupsArgs = AddRolesToUsersOrGroupsArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.addRolesToUsersOrGroups(args.token, args.usersOrGroups, args.roles));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: AddRolesToUsersOrGroupsResult = new AddRolesToUsersOrGroupsResult({ success: data });
            output.writeMessageBegin("addRolesToUsersOrGroups", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: AddRolesToUsersOrGroupsResult = new AddRolesToUsersOrGroupsResult({ validError: err });
                output.writeMessageBegin("addRolesToUsersOrGroups", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: AddRolesToUsersOrGroupsResult = new AddRolesToUsersOrGroupsResult({ error: err });
                output.writeMessageBegin("addRolesToUsersOrGroups", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("addRolesToUsersOrGroups", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_revokeRolesFromUsersOrGroups(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: RevokeRolesFromUsersOrGroupsArgs = RevokeRolesFromUsersOrGroupsArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.revokeRolesFromUsersOrGroups(args.token, args.usersOrGroups, args.roles));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: RevokeRolesFromUsersOrGroupsResult = new RevokeRolesFromUsersOrGroupsResult({ success: data });
            output.writeMessageBegin("revokeRolesFromUsersOrGroups", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: RevokeRolesFromUsersOrGroupsResult = new RevokeRolesFromUsersOrGroupsResult({ validError: err });
                output.writeMessageBegin("revokeRolesFromUsersOrGroups", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: RevokeRolesFromUsersOrGroupsResult = new RevokeRolesFromUsersOrGroupsResult({ error: err });
                output.writeMessageBegin("revokeRolesFromUsersOrGroups", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("revokeRolesFromUsersOrGroups", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getRolesByUser(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Map<string, RoleScHelper.RoleScHelper>>((resolve, reject): void => {
            try {
                const args: GetRolesByUserArgs = GetRolesByUserArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getRolesByUser(args.token, args.userId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Map<string, RoleScHelper.RoleScHelper>): void => {
            const result: GetRolesByUserResult = new GetRolesByUserResult({ success: data });
            output.writeMessageBegin("getRolesByUser", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetRolesByUserResult = new GetRolesByUserResult({ validError: err });
                output.writeMessageBegin("getRolesByUser", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetRolesByUserResult = new GetRolesByUserResult({ error: err });
                output.writeMessageBegin("getRolesByUser", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getRolesByUser", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_loadUserPublicKey(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: LoadUserPublicKeyArgs = LoadUserPublicKeyArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.loadUserPublicKey(args.token, args.publicKey, args.signature));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: LoadUserPublicKeyResult = new LoadUserPublicKeyResult({ success: data });
            output.writeMessageBegin("loadUserPublicKey", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: LoadUserPublicKeyResult = new LoadUserPublicKeyResult({ validError: err });
                output.writeMessageBegin("loadUserPublicKey", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: LoadUserPublicKeyResult = new LoadUserPublicKeyResult({ error: err });
                output.writeMessageBegin("loadUserPublicKey", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("loadUserPublicKey", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getAllUserPublicKeyInfo(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<UserKeyData.UserKeyData>>((resolve, reject): void => {
            try {
                const args: GetAllUserPublicKeyInfoArgs = GetAllUserPublicKeyInfoArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAllUserPublicKeyInfo(args.token, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<UserKeyData.UserKeyData>): void => {
            const result: GetAllUserPublicKeyInfoResult = new GetAllUserPublicKeyInfoResult({ success: data });
            output.writeMessageBegin("getAllUserPublicKeyInfo", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetAllUserPublicKeyInfoResult = new GetAllUserPublicKeyInfoResult({ validError: err });
                output.writeMessageBegin("getAllUserPublicKeyInfo", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetAllUserPublicKeyInfoResult = new GetAllUserPublicKeyInfoResult({ error: err });
                output.writeMessageBegin("getAllUserPublicKeyInfo", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAllUserPublicKeyInfo", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getCountAllUserPublicKeyInfo(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<number>((resolve, reject): void => {
            try {
                const args: GetCountAllUserPublicKeyInfoArgs = GetCountAllUserPublicKeyInfoArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getCountAllUserPublicKeyInfo(args.token, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: number): void => {
            const result: GetCountAllUserPublicKeyInfoResult = new GetCountAllUserPublicKeyInfoResult({ success: data });
            output.writeMessageBegin("getCountAllUserPublicKeyInfo", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetCountAllUserPublicKeyInfoResult = new GetCountAllUserPublicKeyInfoResult({ validError: err });
                output.writeMessageBegin("getCountAllUserPublicKeyInfo", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetCountAllUserPublicKeyInfoResult = new GetCountAllUserPublicKeyInfoResult({ error: err });
                output.writeMessageBegin("getCountAllUserPublicKeyInfo", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getCountAllUserPublicKeyInfo", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_changeClientDelegateDetailsInfo(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<ClientDelegateDetails.ClientDelegateDetails>>((resolve, reject): void => {
            try {
                const args: ChangeClientDelegateDetailsInfoArgs = ChangeClientDelegateDetailsInfoArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.changeClientDelegateDetailsInfo(args.token, args.clientDelegateInfo, args.listDetailsToAdd, args.listDetailIdsToRemove, args.closeDelegateSession));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<ClientDelegateDetails.ClientDelegateDetails>): void => {
            const result: ChangeClientDelegateDetailsInfoResult = new ChangeClientDelegateDetailsInfoResult({ success: data });
            output.writeMessageBegin("changeClientDelegateDetailsInfo", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: ChangeClientDelegateDetailsInfoResult = new ChangeClientDelegateDetailsInfoResult({ validError: err });
                output.writeMessageBegin("changeClientDelegateDetailsInfo", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: ChangeClientDelegateDetailsInfoResult = new ChangeClientDelegateDetailsInfoResult({ error: err });
                output.writeMessageBegin("changeClientDelegateDetailsInfo", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("changeClientDelegateDetailsInfo", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_revokeClientDelegates(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: RevokeClientDelegatesArgs = RevokeClientDelegatesArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.revokeClientDelegates(args.token, args.clientDelegateId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: RevokeClientDelegatesResult = new RevokeClientDelegatesResult({ success: data });
            output.writeMessageBegin("revokeClientDelegates", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: RevokeClientDelegatesResult = new RevokeClientDelegatesResult({ validError: err });
                output.writeMessageBegin("revokeClientDelegates", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: RevokeClientDelegatesResult = new RevokeClientDelegatesResult({ error: err });
                output.writeMessageBegin("revokeClientDelegates", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("revokeClientDelegates", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getAllClientDelegatesInfoList(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<ClientDelegateInfo.ClientDelegateInfo>>((resolve, reject): void => {
            try {
                const args: GetAllClientDelegatesInfoListArgs = GetAllClientDelegatesInfoListArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAllClientDelegatesInfoList(args.token, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<ClientDelegateInfo.ClientDelegateInfo>): void => {
            const result: GetAllClientDelegatesInfoListResult = new GetAllClientDelegatesInfoListResult({ success: data });
            output.writeMessageBegin("getAllClientDelegatesInfoList", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetAllClientDelegatesInfoListResult = new GetAllClientDelegatesInfoListResult({ validError: err });
                output.writeMessageBegin("getAllClientDelegatesInfoList", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetAllClientDelegatesInfoListResult = new GetAllClientDelegatesInfoListResult({ error: err });
                output.writeMessageBegin("getAllClientDelegatesInfoList", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAllClientDelegatesInfoList", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getAllClientDelegatesDetails(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<ClientDelegateDetails.ClientDelegateDetails>>((resolve, reject): void => {
            try {
                const args: GetAllClientDelegatesDetailsArgs = GetAllClientDelegatesDetailsArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAllClientDelegatesDetails(args.token, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<ClientDelegateDetails.ClientDelegateDetails>): void => {
            const result: GetAllClientDelegatesDetailsResult = new GetAllClientDelegatesDetailsResult({ success: data });
            output.writeMessageBegin("getAllClientDelegatesDetails", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetAllClientDelegatesDetailsResult = new GetAllClientDelegatesDetailsResult({ validError: err });
                output.writeMessageBegin("getAllClientDelegatesDetails", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetAllClientDelegatesDetailsResult = new GetAllClientDelegatesDetailsResult({ error: err });
                output.writeMessageBegin("getAllClientDelegatesDetails", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAllClientDelegatesDetails", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getClientDelegateDetails(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<ClientDelegateDetails.ClientDelegateDetails>>((resolve, reject): void => {
            try {
                const args: GetClientDelegateDetailsArgs = GetClientDelegateDetailsArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getClientDelegateDetails(args.token, args.clientDelegateInfoId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<ClientDelegateDetails.ClientDelegateDetails>): void => {
            const result: GetClientDelegateDetailsResult = new GetClientDelegateDetailsResult({ success: data });
            output.writeMessageBegin("getClientDelegateDetails", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetClientDelegateDetailsResult = new GetClientDelegateDetailsResult({ validError: err });
                output.writeMessageBegin("getClientDelegateDetails", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetClientDelegateDetailsResult = new GetClientDelegateDetailsResult({ error: err });
                output.writeMessageBegin("getClientDelegateDetails", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getClientDelegateDetails", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getAllClientsForDelegate(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<__ROOT_NAMESPACE__.UserOrGroup>>((resolve, reject): void => {
            try {
                const args: GetAllClientsForDelegateArgs = GetAllClientsForDelegateArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAllClientsForDelegate(args.token, args.userId, args.reverse, args.documentId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<__ROOT_NAMESPACE__.UserOrGroup>): void => {
            const result: GetAllClientsForDelegateResult = new GetAllClientsForDelegateResult({ success: data });
            output.writeMessageBegin("getAllClientsForDelegate", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetAllClientsForDelegateResult = new GetAllClientsForDelegateResult({ validError: err });
                output.writeMessageBegin("getAllClientsForDelegate", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetAllClientsForDelegateResult = new GetAllClientsForDelegateResult({ error: err });
                output.writeMessageBegin("getAllClientsForDelegate", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAllClientsForDelegate", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getAllNotificationsForDelegate(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Map<string, number>>((resolve, reject): void => {
            try {
                const args: GetAllNotificationsForDelegateArgs = GetAllNotificationsForDelegateArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAllNotificationsForDelegate(args.token));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Map<string, number>): void => {
            const result: GetAllNotificationsForDelegateResult = new GetAllNotificationsForDelegateResult({ success: data });
            output.writeMessageBegin("getAllNotificationsForDelegate", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetAllNotificationsForDelegateResult = new GetAllNotificationsForDelegateResult({ validError: err });
                output.writeMessageBegin("getAllNotificationsForDelegate", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetAllNotificationsForDelegateResult = new GetAllNotificationsForDelegateResult({ error: err });
                output.writeMessageBegin("getAllNotificationsForDelegate", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAllNotificationsForDelegate", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getAccounts(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<__ROOT_NAMESPACE__.Account>>((resolve, reject): void => {
            try {
                const args: GetAccountsArgs = GetAccountsArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAccounts(args.token, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<__ROOT_NAMESPACE__.Account>): void => {
            const result: GetAccountsResult = new GetAccountsResult({ success: data });
            output.writeMessageBegin("getAccounts", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetAccountsResult = new GetAccountsResult({ validError: err });
                output.writeMessageBegin("getAccounts", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetAccountsResult = new GetAccountsResult({ error: err });
                output.writeMessageBegin("getAccounts", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAccounts", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getSecurityClassificationsByUser(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Map<string, RoleScHelper.RoleScHelper>>((resolve, reject): void => {
            try {
                const args: GetSecurityClassificationsByUserArgs = GetSecurityClassificationsByUserArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getSecurityClassificationsByUser(args.token, args.userId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Map<string, RoleScHelper.RoleScHelper>): void => {
            const result: GetSecurityClassificationsByUserResult = new GetSecurityClassificationsByUserResult({ success: data });
            output.writeMessageBegin("getSecurityClassificationsByUser", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetSecurityClassificationsByUserResult = new GetSecurityClassificationsByUserResult({ validError: err });
                output.writeMessageBegin("getSecurityClassificationsByUser", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetSecurityClassificationsByUserResult = new GetSecurityClassificationsByUserResult({ error: err });
                output.writeMessageBegin("getSecurityClassificationsByUser", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getSecurityClassificationsByUser", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getUserChief(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<__ROOT_NAMESPACE__.UserOrGroup>>((resolve, reject): void => {
            try {
                const args: GetUserChiefArgs = GetUserChiefArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getUserChief(args.token, args.userId, args.level, args.userTypes, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<__ROOT_NAMESPACE__.UserOrGroup>): void => {
            const result: GetUserChiefResult = new GetUserChiefResult({ success: data });
            output.writeMessageBegin("getUserChief", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetUserChiefResult = new GetUserChiefResult({ validError: err });
                output.writeMessageBegin("getUserChief", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetUserChiefResult = new GetUserChiefResult({ error: err });
                output.writeMessageBegin("getUserChief", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getUserChief", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_updateUserInfo(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<__ROOT_NAMESPACE__.UserOrGroup>((resolve, reject): void => {
            try {
                const args: UpdateUserInfoArgs = UpdateUserInfoArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.updateUserInfo(args.token, args.user));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: __ROOT_NAMESPACE__.UserOrGroup): void => {
            const result: UpdateUserInfoResult = new UpdateUserInfoResult({ success: data });
            output.writeMessageBegin("updateUserInfo", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: UpdateUserInfoResult = new UpdateUserInfoResult({ validError: err });
                output.writeMessageBegin("updateUserInfo", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: UpdateUserInfoResult = new UpdateUserInfoResult({ error: err });
                output.writeMessageBegin("updateUserInfo", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("updateUserInfo", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getUserPreferences(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<UserPreferences.UserPreferences>((resolve, reject): void => {
            try {
                const args: GetUserPreferencesArgs = GetUserPreferencesArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getUserPreferences(args.token, args.userId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: UserPreferences.UserPreferences): void => {
            const result: GetUserPreferencesResult = new GetUserPreferencesResult({ success: data });
            output.writeMessageBegin("getUserPreferences", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetUserPreferencesResult = new GetUserPreferencesResult({ validError: err });
                output.writeMessageBegin("getUserPreferences", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetUserPreferencesResult = new GetUserPreferencesResult({ error: err });
                output.writeMessageBegin("getUserPreferences", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getUserPreferences", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_updateUserPreferences(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: UpdateUserPreferencesArgs = UpdateUserPreferencesArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.updateUserPreferences(args.token, args.preferences));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: UpdateUserPreferencesResult = new UpdateUserPreferencesResult({ success: data });
            output.writeMessageBegin("updateUserPreferences", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: UpdateUserPreferencesResult = new UpdateUserPreferencesResult({ validError: err });
                output.writeMessageBegin("updateUserPreferences", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: UpdateUserPreferencesResult = new UpdateUserPreferencesResult({ error: err });
                output.writeMessageBegin("updateUserPreferences", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("updateUserPreferences", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_createOrRemoveFavoriteUsers(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: CreateOrRemoveFavoriteUsersArgs = CreateOrRemoveFavoriteUsersArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.createOrRemoveFavoriteUsers(args.token, args.userIdsToAdd, args.userIdsToRemove));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: CreateOrRemoveFavoriteUsersResult = new CreateOrRemoveFavoriteUsersResult({ success: data });
            output.writeMessageBegin("createOrRemoveFavoriteUsers", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: CreateOrRemoveFavoriteUsersResult = new CreateOrRemoveFavoriteUsersResult({ validError: err });
                output.writeMessageBegin("createOrRemoveFavoriteUsers", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: CreateOrRemoveFavoriteUsersResult = new CreateOrRemoveFavoriteUsersResult({ error: err });
                output.writeMessageBegin("createOrRemoveFavoriteUsers", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("createOrRemoveFavoriteUsers", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getUserAdditionalInfo(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<UserAdditionalInfo.UserAdditionalInfo>((resolve, reject): void => {
            try {
                const args: GetUserAdditionalInfoArgs = GetUserAdditionalInfoArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getUserAdditionalInfo(args.token, args.userId, args.userVersion));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: UserAdditionalInfo.UserAdditionalInfo): void => {
            const result: GetUserAdditionalInfoResult = new GetUserAdditionalInfoResult({ success: data });
            output.writeMessageBegin("getUserAdditionalInfo", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetUserAdditionalInfoResult = new GetUserAdditionalInfoResult({ validError: err });
                output.writeMessageBegin("getUserAdditionalInfo", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetUserAdditionalInfoResult = new GetUserAdditionalInfoResult({ error: err });
                output.writeMessageBegin("getUserAdditionalInfo", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getUserAdditionalInfo", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_saveUserAdditionalInfo(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<UserAdditionalInfo.UserAdditionalInfo>((resolve, reject): void => {
            try {
                const args: SaveUserAdditionalInfoArgs = SaveUserAdditionalInfoArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.saveUserAdditionalInfo(args.token, args.userAdditionalInfo, args.login, args.password, args.accountGroupId, args.accountId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: UserAdditionalInfo.UserAdditionalInfo): void => {
            const result: SaveUserAdditionalInfoResult = new SaveUserAdditionalInfoResult({ success: data });
            output.writeMessageBegin("saveUserAdditionalInfo", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: SaveUserAdditionalInfoResult = new SaveUserAdditionalInfoResult({ validError: err });
                output.writeMessageBegin("saveUserAdditionalInfo", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: SaveUserAdditionalInfoResult = new SaveUserAdditionalInfoResult({ error: err });
                output.writeMessageBegin("saveUserAdditionalInfo", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("saveUserAdditionalInfo", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_restoreClient(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: RestoreClientArgs = RestoreClientArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.restoreClient(args.token, args.userId, args.reasonForRestore));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: RestoreClientResult = new RestoreClientResult({ success: data });
            output.writeMessageBegin("restoreClient", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: RestoreClientResult = new RestoreClientResult({ validError: err });
                output.writeMessageBegin("restoreClient", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: RestoreClientResult = new RestoreClientResult({ error: err });
                output.writeMessageBegin("restoreClient", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("restoreClient", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_findDelegates(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<UserDelegates.UserDelegates>>((resolve, reject): void => {
            try {
                const args: FindDelegatesArgs = FindDelegatesArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.findDelegates(args.token, args.users));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<UserDelegates.UserDelegates>): void => {
            const result: FindDelegatesResult = new FindDelegatesResult({ success: data });
            output.writeMessageBegin("findDelegates", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: FindDelegatesResult = new FindDelegatesResult({ validError: err });
                output.writeMessageBegin("findDelegates", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: FindDelegatesResult = new FindDelegatesResult({ error: err });
                output.writeMessageBegin("findDelegates", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("findDelegates", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
}

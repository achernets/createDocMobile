/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import { Int64 } from "thrift";
import * as thrift from "thrift";
export interface ICoExecutorArgs {
    id?: string;
    fio?: string;
    execDate?: number | Int64;
}
export class CoExecutor {
    public id?: string;
    public fio?: string;
    public execDate?: Int64;
    constructor(args?: ICoExecutorArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.fio != null) {
            this.fio = args.fio;
        }
        if (args != null && args.execDate != null) {
            if (typeof args.execDate === "number") {
                this.execDate = new Int64(args.execDate);
            }
            else {
                this.execDate = args.execDate;
            }
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CoExecutor");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.fio != null) {
            output.writeFieldBegin("fio", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.fio);
            output.writeFieldEnd();
        }
        if (this.execDate != null) {
            output.writeFieldBegin("execDate", thrift.Thrift.Type.I64, 3);
            output.writeI64(this.execDate);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CoExecutor {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.id = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.fio = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_3: Int64 = input.readI64();
                        _args.execDate = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new CoExecutor(_args);
    }
}

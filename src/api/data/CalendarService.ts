/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import { Int64 } from "thrift";
import * as thrift from "thrift";
import * as __ROOT_NAMESPACE__ from "./";
import * as Deadline from "./Deadline";
import * as WeekendDictionary from "./WeekendDictionary";
export interface IGetAllDeadlinesArgsArgs {
    token: string;
    beginDate: number | Int64;
    endDate: number | Int64;
    usersOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetAllDeadlinesArgs {
    public token: string;
    public beginDate: Int64;
    public endDate: Int64;
    public usersOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetAllDeadlinesArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.beginDate != null) {
            if (typeof args.beginDate === "number") {
                this.beginDate = new Int64(args.beginDate);
            }
            else {
                this.beginDate = args.beginDate;
            }
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[beginDate] is unset!");
        }
        if (args != null && args.endDate != null) {
            if (typeof args.endDate === "number") {
                this.endDate = new Int64(args.endDate);
            }
            else {
                this.endDate = args.endDate;
            }
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[endDate] is unset!");
        }
        if (args != null && args.usersOrGroups != null) {
            this.usersOrGroups = args.usersOrGroups;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[usersOrGroups] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllDeadlinesArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.beginDate != null) {
            output.writeFieldBegin("beginDate", thrift.Thrift.Type.I64, 2);
            output.writeI64(this.beginDate);
            output.writeFieldEnd();
        }
        if (this.endDate != null) {
            output.writeFieldBegin("endDate", thrift.Thrift.Type.I64, 3);
            output.writeI64(this.endDate);
            output.writeFieldEnd();
        }
        if (this.usersOrGroups != null) {
            output.writeFieldBegin("usersOrGroups", thrift.Thrift.Type.LIST, 4);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.usersOrGroups.length);
            this.usersOrGroups.forEach((value_1: __ROOT_NAMESPACE__.UserOrGroup): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 5);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllDeadlinesArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.token = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_3: Int64 = input.readI64();
                        _args.beginDate = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_4: Int64 = input.readI64();
                        _args.endDate = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_5: Array<__ROOT_NAMESPACE__.UserOrGroup> = new Array<__ROOT_NAMESPACE__.UserOrGroup>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_6: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                            value_5.push(value_6);
                        }
                        input.readListEnd();
                        _args.usersOrGroups = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_7: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.beginDate !== undefined && _args.endDate !== undefined && _args.usersOrGroups !== undefined && _args.filter !== undefined) {
            return new GetAllDeadlinesArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAllDeadlinesArgs from input");
        }
    }
}
export interface IGetCountAllDeadlinesArgsArgs {
    token: string;
    beginDate: number | Int64;
    endDate: number | Int64;
    usersOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetCountAllDeadlinesArgs {
    public token: string;
    public beginDate: Int64;
    public endDate: Int64;
    public usersOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetCountAllDeadlinesArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.beginDate != null) {
            if (typeof args.beginDate === "number") {
                this.beginDate = new Int64(args.beginDate);
            }
            else {
                this.beginDate = args.beginDate;
            }
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[beginDate] is unset!");
        }
        if (args != null && args.endDate != null) {
            if (typeof args.endDate === "number") {
                this.endDate = new Int64(args.endDate);
            }
            else {
                this.endDate = args.endDate;
            }
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[endDate] is unset!");
        }
        if (args != null && args.usersOrGroups != null) {
            this.usersOrGroups = args.usersOrGroups;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[usersOrGroups] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetCountAllDeadlinesArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.beginDate != null) {
            output.writeFieldBegin("beginDate", thrift.Thrift.Type.I64, 2);
            output.writeI64(this.beginDate);
            output.writeFieldEnd();
        }
        if (this.endDate != null) {
            output.writeFieldBegin("endDate", thrift.Thrift.Type.I64, 3);
            output.writeI64(this.endDate);
            output.writeFieldEnd();
        }
        if (this.usersOrGroups != null) {
            output.writeFieldBegin("usersOrGroups", thrift.Thrift.Type.LIST, 4);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.usersOrGroups.length);
            this.usersOrGroups.forEach((value_8: __ROOT_NAMESPACE__.UserOrGroup): void => {
                value_8.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 5);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetCountAllDeadlinesArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_9: string = input.readString();
                        _args.token = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_10: Int64 = input.readI64();
                        _args.beginDate = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_11: Int64 = input.readI64();
                        _args.endDate = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_12: Array<__ROOT_NAMESPACE__.UserOrGroup> = new Array<__ROOT_NAMESPACE__.UserOrGroup>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_13: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                            value_12.push(value_13);
                        }
                        input.readListEnd();
                        _args.usersOrGroups = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_14: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.beginDate !== undefined && _args.endDate !== undefined && _args.usersOrGroups !== undefined && _args.filter !== undefined) {
            return new GetCountAllDeadlinesArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetCountAllDeadlinesArgs from input");
        }
    }
}
export interface IGetAllGroupedDeadlinesArgsArgs {
    token: string;
    beginDate: number | Int64;
    endDate: number | Int64;
    usersOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetAllGroupedDeadlinesArgs {
    public token: string;
    public beginDate: Int64;
    public endDate: Int64;
    public usersOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetAllGroupedDeadlinesArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.beginDate != null) {
            if (typeof args.beginDate === "number") {
                this.beginDate = new Int64(args.beginDate);
            }
            else {
                this.beginDate = args.beginDate;
            }
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[beginDate] is unset!");
        }
        if (args != null && args.endDate != null) {
            if (typeof args.endDate === "number") {
                this.endDate = new Int64(args.endDate);
            }
            else {
                this.endDate = args.endDate;
            }
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[endDate] is unset!");
        }
        if (args != null && args.usersOrGroups != null) {
            this.usersOrGroups = args.usersOrGroups;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[usersOrGroups] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllGroupedDeadlinesArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.beginDate != null) {
            output.writeFieldBegin("beginDate", thrift.Thrift.Type.I64, 2);
            output.writeI64(this.beginDate);
            output.writeFieldEnd();
        }
        if (this.endDate != null) {
            output.writeFieldBegin("endDate", thrift.Thrift.Type.I64, 3);
            output.writeI64(this.endDate);
            output.writeFieldEnd();
        }
        if (this.usersOrGroups != null) {
            output.writeFieldBegin("usersOrGroups", thrift.Thrift.Type.LIST, 4);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.usersOrGroups.length);
            this.usersOrGroups.forEach((value_15: __ROOT_NAMESPACE__.UserOrGroup): void => {
                value_15.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 5);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllGroupedDeadlinesArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_16: string = input.readString();
                        _args.token = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_17: Int64 = input.readI64();
                        _args.beginDate = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_18: Int64 = input.readI64();
                        _args.endDate = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_19: Array<__ROOT_NAMESPACE__.UserOrGroup> = new Array<__ROOT_NAMESPACE__.UserOrGroup>();
                        const metadata_3: thrift.TList = input.readListBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_20: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                            value_19.push(value_20);
                        }
                        input.readListEnd();
                        _args.usersOrGroups = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_21: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.beginDate !== undefined && _args.endDate !== undefined && _args.usersOrGroups !== undefined && _args.filter !== undefined) {
            return new GetAllGroupedDeadlinesArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAllGroupedDeadlinesArgs from input");
        }
    }
}
export interface IGetAllReassignmentsArgsArgs {
    token: string;
    beginDate: number | Int64;
    endDate: number | Int64;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetAllReassignmentsArgs {
    public token: string;
    public beginDate: Int64;
    public endDate: Int64;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetAllReassignmentsArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.beginDate != null) {
            if (typeof args.beginDate === "number") {
                this.beginDate = new Int64(args.beginDate);
            }
            else {
                this.beginDate = args.beginDate;
            }
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[beginDate] is unset!");
        }
        if (args != null && args.endDate != null) {
            if (typeof args.endDate === "number") {
                this.endDate = new Int64(args.endDate);
            }
            else {
                this.endDate = args.endDate;
            }
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[endDate] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllReassignmentsArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.beginDate != null) {
            output.writeFieldBegin("beginDate", thrift.Thrift.Type.I64, 2);
            output.writeI64(this.beginDate);
            output.writeFieldEnd();
        }
        if (this.endDate != null) {
            output.writeFieldBegin("endDate", thrift.Thrift.Type.I64, 3);
            output.writeI64(this.endDate);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 4);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllReassignmentsArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_22: string = input.readString();
                        _args.token = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_23: Int64 = input.readI64();
                        _args.beginDate = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_24: Int64 = input.readI64();
                        _args.endDate = value_24;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_25: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_25;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.beginDate !== undefined && _args.endDate !== undefined && _args.filter !== undefined) {
            return new GetAllReassignmentsArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAllReassignmentsArgs from input");
        }
    }
}
export interface IGetAllWeekendDictionariesArgsArgs {
    token: string;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class GetAllWeekendDictionariesArgs {
    public token: string;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IGetAllWeekendDictionariesArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllWeekendDictionariesArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 2);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllWeekendDictionariesArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_26: string = input.readString();
                        _args.token = value_26;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_27: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_27;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.filter !== undefined) {
            return new GetAllWeekendDictionariesArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAllWeekendDictionariesArgs from input");
        }
    }
}
export interface IChangeWeekendDictionariesArgsArgs {
    token: string;
    toUpdate: Array<WeekendDictionary.WeekendDictionary>;
    toRemove: Array<string>;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class ChangeWeekendDictionariesArgs {
    public token: string;
    public toUpdate: Array<WeekendDictionary.WeekendDictionary>;
    public toRemove: Array<string>;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IChangeWeekendDictionariesArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.toUpdate != null) {
            this.toUpdate = args.toUpdate;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[toUpdate] is unset!");
        }
        if (args != null && args.toRemove != null) {
            this.toRemove = args.toRemove;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[toRemove] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ChangeWeekendDictionariesArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.toUpdate != null) {
            output.writeFieldBegin("toUpdate", thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.toUpdate.length);
            this.toUpdate.forEach((value_28: WeekendDictionary.WeekendDictionary): void => {
                value_28.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.toRemove != null) {
            output.writeFieldBegin("toRemove", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.toRemove.length);
            this.toRemove.forEach((value_29: string): void => {
                output.writeString(value_29);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 4);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ChangeWeekendDictionariesArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_30: string = input.readString();
                        _args.token = value_30;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_31: Array<WeekendDictionary.WeekendDictionary> = new Array<WeekendDictionary.WeekendDictionary>();
                        const metadata_4: thrift.TList = input.readListBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const value_32: WeekendDictionary.WeekendDictionary = WeekendDictionary.WeekendDictionary.read(input);
                            value_31.push(value_32);
                        }
                        input.readListEnd();
                        _args.toUpdate = value_31;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_33: Array<string> = new Array<string>();
                        const metadata_5: thrift.TList = input.readListBegin();
                        const size_5: number = metadata_5.size;
                        for (let i_5: number = 0; i_5 < size_5; i_5++) {
                            const value_34: string = input.readString();
                            value_33.push(value_34);
                        }
                        input.readListEnd();
                        _args.toRemove = value_33;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_35: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_35;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.toUpdate !== undefined && _args.toRemove !== undefined && _args.filter !== undefined) {
            return new ChangeWeekendDictionariesArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read ChangeWeekendDictionariesArgs from input");
        }
    }
}
export interface IPopulateWeekendsArgsArgs {
    token: string;
    dateFrom: number | Int64;
    dateTo: number | Int64;
    filter: __ROOT_NAMESPACE__.KazFilter;
}
export class PopulateWeekendsArgs {
    public token: string;
    public dateFrom: Int64;
    public dateTo: Int64;
    public filter: __ROOT_NAMESPACE__.KazFilter;
    constructor(args: IPopulateWeekendsArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.dateFrom != null) {
            if (typeof args.dateFrom === "number") {
                this.dateFrom = new Int64(args.dateFrom);
            }
            else {
                this.dateFrom = args.dateFrom;
            }
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[dateFrom] is unset!");
        }
        if (args != null && args.dateTo != null) {
            if (typeof args.dateTo === "number") {
                this.dateTo = new Int64(args.dateTo);
            }
            else {
                this.dateTo = args.dateTo;
            }
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[dateTo] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("PopulateWeekendsArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.dateFrom != null) {
            output.writeFieldBegin("dateFrom", thrift.Thrift.Type.I64, 2);
            output.writeI64(this.dateFrom);
            output.writeFieldEnd();
        }
        if (this.dateTo != null) {
            output.writeFieldBegin("dateTo", thrift.Thrift.Type.I64, 3);
            output.writeI64(this.dateTo);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 4);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): PopulateWeekendsArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_36: string = input.readString();
                        _args.token = value_36;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_37: Int64 = input.readI64();
                        _args.dateFrom = value_37;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_38: Int64 = input.readI64();
                        _args.dateTo = value_38;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_39: __ROOT_NAMESPACE__.KazFilter = __ROOT_NAMESPACE__.KazFilter.read(input);
                        _args.filter = value_39;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.dateFrom !== undefined && _args.dateTo !== undefined && _args.filter !== undefined) {
            return new PopulateWeekendsArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read PopulateWeekendsArgs from input");
        }
    }
}
export interface IConvertJiraTimeToDateArgsArgs {
    token: string;
    userId: string;
    jiraPeriod: string;
}
export class ConvertJiraTimeToDateArgs {
    public token: string;
    public userId: string;
    public jiraPeriod: string;
    constructor(args: IConvertJiraTimeToDateArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.userId != null) {
            this.userId = args.userId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[userId] is unset!");
        }
        if (args != null && args.jiraPeriod != null) {
            this.jiraPeriod = args.jiraPeriod;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[jiraPeriod] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ConvertJiraTimeToDateArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.userId != null) {
            output.writeFieldBegin("userId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.userId);
            output.writeFieldEnd();
        }
        if (this.jiraPeriod != null) {
            output.writeFieldBegin("jiraPeriod", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.jiraPeriod);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ConvertJiraTimeToDateArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_40: string = input.readString();
                        _args.token = value_40;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_41: string = input.readString();
                        _args.userId = value_41;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_42: string = input.readString();
                        _args.jiraPeriod = value_42;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.userId !== undefined && _args.jiraPeriod !== undefined) {
            return new ConvertJiraTimeToDateArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read ConvertJiraTimeToDateArgs from input");
        }
    }
}
export interface IGetAllDeadlinesResultArgs {
    success?: Array<Deadline.Deadline>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetAllDeadlinesResult {
    public success?: Array<Deadline.Deadline>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetAllDeadlinesResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllDeadlinesResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_43: Deadline.Deadline): void => {
                value_43.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllDeadlinesResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_44: Array<Deadline.Deadline> = new Array<Deadline.Deadline>();
                        const metadata_6: thrift.TList = input.readListBegin();
                        const size_6: number = metadata_6.size;
                        for (let i_6: number = 0; i_6 < size_6; i_6++) {
                            const value_45: Deadline.Deadline = Deadline.Deadline.read(input);
                            value_44.push(value_45);
                        }
                        input.readListEnd();
                        _args.success = value_44;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_46: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_46;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_47: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_47;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAllDeadlinesResult(_args);
    }
}
export interface IGetCountAllDeadlinesResultArgs {
    success?: number;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetCountAllDeadlinesResult {
    public success?: number;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetCountAllDeadlinesResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetCountAllDeadlinesResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.I32, 0);
            output.writeI32(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetCountAllDeadlinesResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_48: number = input.readI32();
                        _args.success = value_48;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_49: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_49;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_50: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_50;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetCountAllDeadlinesResult(_args);
    }
}
export interface IGetAllGroupedDeadlinesResultArgs {
    success?: Map<number | Int64, number | Int64>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetAllGroupedDeadlinesResult {
    public success?: Map<Int64, Int64>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetAllGroupedDeadlinesResultArgs) {
        if (args != null && args.success != null) {
            //@ts-ignore
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllGroupedDeadlinesResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.MAP, 0);
            output.writeMapBegin(thrift.Thrift.Type.I64, thrift.Thrift.Type.I64, this.success.size);
            this.success.forEach((value_51: Int64, key_1: Int64): void => {
                output.writeI64(key_1);
                output.writeI64(value_51);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllGroupedDeadlinesResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_52: Map<Int64, Int64> = new Map<Int64, Int64>();
                        const metadata_7: thrift.TMap = input.readMapBegin();
                        const size_7: number = metadata_7.size;
                        for (let i_7: number = 0; i_7 < size_7; i_7++) {
                            const key_2: Int64 = input.readI64();
                            const value_53: Int64 = input.readI64();
                            value_52.set(key_2, value_53);
                        }
                        input.readMapEnd();
                        _args.success = value_52;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_54: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_54;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_55: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_55;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAllGroupedDeadlinesResult(_args);
    }
}
export interface IGetAllReassignmentsResultArgs {
    success?: Array<__ROOT_NAMESPACE__.DocumentReassign>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetAllReassignmentsResult {
    public success?: Array<__ROOT_NAMESPACE__.DocumentReassign>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetAllReassignmentsResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllReassignmentsResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_56: __ROOT_NAMESPACE__.DocumentReassign): void => {
                value_56.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllReassignmentsResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_57: Array<__ROOT_NAMESPACE__.DocumentReassign> = new Array<__ROOT_NAMESPACE__.DocumentReassign>();
                        const metadata_8: thrift.TList = input.readListBegin();
                        const size_8: number = metadata_8.size;
                        for (let i_8: number = 0; i_8 < size_8; i_8++) {
                            const value_58: __ROOT_NAMESPACE__.DocumentReassign = __ROOT_NAMESPACE__.DocumentReassign.read(input);
                            value_57.push(value_58);
                        }
                        input.readListEnd();
                        _args.success = value_57;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_59: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_59;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_60: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_60;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAllReassignmentsResult(_args);
    }
}
export interface IGetAllWeekendDictionariesResultArgs {
    success?: Array<WeekendDictionary.WeekendDictionary>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetAllWeekendDictionariesResult {
    public success?: Array<WeekendDictionary.WeekendDictionary>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetAllWeekendDictionariesResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllWeekendDictionariesResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_61: WeekendDictionary.WeekendDictionary): void => {
                value_61.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllWeekendDictionariesResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_62: Array<WeekendDictionary.WeekendDictionary> = new Array<WeekendDictionary.WeekendDictionary>();
                        const metadata_9: thrift.TList = input.readListBegin();
                        const size_9: number = metadata_9.size;
                        for (let i_9: number = 0; i_9 < size_9; i_9++) {
                            const value_63: WeekendDictionary.WeekendDictionary = WeekendDictionary.WeekendDictionary.read(input);
                            value_62.push(value_63);
                        }
                        input.readListEnd();
                        _args.success = value_62;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_64: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_64;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_65: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_65;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAllWeekendDictionariesResult(_args);
    }
}
export interface IChangeWeekendDictionariesResultArgs {
    success?: Array<WeekendDictionary.WeekendDictionary>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class ChangeWeekendDictionariesResult {
    public success?: Array<WeekendDictionary.WeekendDictionary>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IChangeWeekendDictionariesResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ChangeWeekendDictionariesResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_66: WeekendDictionary.WeekendDictionary): void => {
                value_66.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ChangeWeekendDictionariesResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_67: Array<WeekendDictionary.WeekendDictionary> = new Array<WeekendDictionary.WeekendDictionary>();
                        const metadata_10: thrift.TList = input.readListBegin();
                        const size_10: number = metadata_10.size;
                        for (let i_10: number = 0; i_10 < size_10; i_10++) {
                            const value_68: WeekendDictionary.WeekendDictionary = WeekendDictionary.WeekendDictionary.read(input);
                            value_67.push(value_68);
                        }
                        input.readListEnd();
                        _args.success = value_67;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_69: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_69;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_70: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_70;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ChangeWeekendDictionariesResult(_args);
    }
}
export interface IPopulateWeekendsResultArgs {
    success?: Array<WeekendDictionary.WeekendDictionary>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class PopulateWeekendsResult {
    public success?: Array<WeekendDictionary.WeekendDictionary>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IPopulateWeekendsResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("PopulateWeekendsResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_71: WeekendDictionary.WeekendDictionary): void => {
                value_71.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): PopulateWeekendsResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_72: Array<WeekendDictionary.WeekendDictionary> = new Array<WeekendDictionary.WeekendDictionary>();
                        const metadata_11: thrift.TList = input.readListBegin();
                        const size_11: number = metadata_11.size;
                        for (let i_11: number = 0; i_11 < size_11; i_11++) {
                            const value_73: WeekendDictionary.WeekendDictionary = WeekendDictionary.WeekendDictionary.read(input);
                            value_72.push(value_73);
                        }
                        input.readListEnd();
                        _args.success = value_72;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_74: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_74;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_75: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_75;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new PopulateWeekendsResult(_args);
    }
}
export interface IConvertJiraTimeToDateResultArgs {
    success?: number | Int64;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class ConvertJiraTimeToDateResult {
    public success?: Int64;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IConvertJiraTimeToDateResultArgs) {
        if (args != null && args.success != null) {
            if (typeof args.success === "number") {
                this.success = new Int64(args.success);
            }
            else {
                this.success = args.success;
            }
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ConvertJiraTimeToDateResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.I64, 0);
            output.writeI64(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ConvertJiraTimeToDateResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_76: Int64 = input.readI64();
                        _args.success = value_76;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_77: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_77;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_78: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_78;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ConvertJiraTimeToDateResult(_args);
    }
}
export class Client {
    public _seqid: number;
    public _reqs: {
        [name: number]: (err: Error | object | undefined, val?: any) => void;
    };
    public output: thrift.TTransport;
    public protocol: new (trans: thrift.TTransport) => thrift.TProtocol;
    constructor(output: thrift.TTransport, protocol: new (trans: thrift.TTransport) => thrift.TProtocol) {
        this._seqid = 0;
        this._reqs = {};
        this.output = output;
        this.protocol = protocol;
    }
    public incrementSeqId(): number {
        return this._seqid += 1;
    }
    public getAllDeadlines(token: string, beginDate: Int64, endDate: Int64, usersOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>, filter: __ROOT_NAMESPACE__.KazFilter): Promise<Array<Deadline.Deadline>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<Deadline.Deadline>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAllDeadlines(token, beginDate, endDate, usersOrGroups, filter, requestId);
        });
    }
    public getCountAllDeadlines(token: string, beginDate: Int64, endDate: Int64, usersOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>, filter: __ROOT_NAMESPACE__.KazFilter): Promise<number> {
        const requestId: number = this.incrementSeqId();
        return new Promise<number>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getCountAllDeadlines(token, beginDate, endDate, usersOrGroups, filter, requestId);
        });
    }
    public getAllGroupedDeadlines(token: string, beginDate: Int64, endDate: Int64, usersOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>, filter: __ROOT_NAMESPACE__.KazFilter): Promise<Map<Int64, Int64>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Map<Int64, Int64>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAllGroupedDeadlines(token, beginDate, endDate, usersOrGroups, filter, requestId);
        });
    }
    public getAllReassignments(token: string, beginDate: Int64, endDate: Int64, filter: __ROOT_NAMESPACE__.KazFilter): Promise<Array<__ROOT_NAMESPACE__.DocumentReassign>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<__ROOT_NAMESPACE__.DocumentReassign>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAllReassignments(token, beginDate, endDate, filter, requestId);
        });
    }
    public getAllWeekendDictionaries(token: string, filter: __ROOT_NAMESPACE__.KazFilter): Promise<Array<WeekendDictionary.WeekendDictionary>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<WeekendDictionary.WeekendDictionary>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAllWeekendDictionaries(token, filter, requestId);
        });
    }
    public changeWeekendDictionaries(token: string, toUpdate: Array<WeekendDictionary.WeekendDictionary>, toRemove: Array<string>, filter: __ROOT_NAMESPACE__.KazFilter): Promise<Array<WeekendDictionary.WeekendDictionary>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<WeekendDictionary.WeekendDictionary>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_changeWeekendDictionaries(token, toUpdate, toRemove, filter, requestId);
        });
    }
    public populateWeekends(token: string, dateFrom: Int64, dateTo: Int64, filter: __ROOT_NAMESPACE__.KazFilter): Promise<Array<WeekendDictionary.WeekendDictionary>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<WeekendDictionary.WeekendDictionary>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_populateWeekends(token, dateFrom, dateTo, filter, requestId);
        });
    }
    public convertJiraTimeToDate(token: string, userId: string, jiraPeriod: string): Promise<Int64> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Int64>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_convertJiraTimeToDate(token, userId, jiraPeriod, requestId);
        });
    }
    public send_getAllDeadlines(token: string, beginDate: Int64, endDate: Int64, usersOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAllDeadlines", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAllDeadlinesArgs = new GetAllDeadlinesArgs({ token, beginDate, endDate, usersOrGroups, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getCountAllDeadlines(token: string, beginDate: Int64, endDate: Int64, usersOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getCountAllDeadlines", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetCountAllDeadlinesArgs = new GetCountAllDeadlinesArgs({ token, beginDate, endDate, usersOrGroups, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getAllGroupedDeadlines(token: string, beginDate: Int64, endDate: Int64, usersOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAllGroupedDeadlines", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAllGroupedDeadlinesArgs = new GetAllGroupedDeadlinesArgs({ token, beginDate, endDate, usersOrGroups, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getAllReassignments(token: string, beginDate: Int64, endDate: Int64, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAllReassignments", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAllReassignmentsArgs = new GetAllReassignmentsArgs({ token, beginDate, endDate, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getAllWeekendDictionaries(token: string, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAllWeekendDictionaries", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAllWeekendDictionariesArgs = new GetAllWeekendDictionariesArgs({ token, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_changeWeekendDictionaries(token: string, toUpdate: Array<WeekendDictionary.WeekendDictionary>, toRemove: Array<string>, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("changeWeekendDictionaries", thrift.Thrift.MessageType.CALL, requestId);
        const args: ChangeWeekendDictionariesArgs = new ChangeWeekendDictionariesArgs({ token, toUpdate, toRemove, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_populateWeekends(token: string, dateFrom: Int64, dateTo: Int64, filter: __ROOT_NAMESPACE__.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("populateWeekends", thrift.Thrift.MessageType.CALL, requestId);
        const args: PopulateWeekendsArgs = new PopulateWeekendsArgs({ token, dateFrom, dateTo, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_convertJiraTimeToDate(token: string, userId: string, jiraPeriod: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("convertJiraTimeToDate", thrift.Thrift.MessageType.CALL, requestId);
        const args: ConvertJiraTimeToDateArgs = new ConvertJiraTimeToDateArgs({ token, userId, jiraPeriod });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public recv_getAllDeadlines(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAllDeadlinesResult = GetAllDeadlinesResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAllDeadlines failed: unknown result"));
                }
            }
        }
    }
    public recv_getCountAllDeadlines(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetCountAllDeadlinesResult = GetCountAllDeadlinesResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getCountAllDeadlines failed: unknown result"));
                }
            }
        }
    }
    public recv_getAllGroupedDeadlines(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAllGroupedDeadlinesResult = GetAllGroupedDeadlinesResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAllGroupedDeadlines failed: unknown result"));
                }
            }
        }
    }
    public recv_getAllReassignments(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAllReassignmentsResult = GetAllReassignmentsResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAllReassignments failed: unknown result"));
                }
            }
        }
    }
    public recv_getAllWeekendDictionaries(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAllWeekendDictionariesResult = GetAllWeekendDictionariesResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAllWeekendDictionaries failed: unknown result"));
                }
            }
        }
    }
    public recv_changeWeekendDictionaries(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: ChangeWeekendDictionariesResult = ChangeWeekendDictionariesResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "changeWeekendDictionaries failed: unknown result"));
                }
            }
        }
    }
    public recv_populateWeekends(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: PopulateWeekendsResult = PopulateWeekendsResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "populateWeekends failed: unknown result"));
                }
            }
        }
    }
    public recv_convertJiraTimeToDate(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: ConvertJiraTimeToDateResult = ConvertJiraTimeToDateResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "convertJiraTimeToDate failed: unknown result"));
                }
            }
        }
    }
}
export interface IHandler {
    getAllDeadlines(token: string, beginDate: Int64, endDate: Int64, usersOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>, filter: __ROOT_NAMESPACE__.KazFilter): Array<Deadline.Deadline> | Promise<Array<Deadline.Deadline>>;
    getCountAllDeadlines(token: string, beginDate: Int64, endDate: Int64, usersOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>, filter: __ROOT_NAMESPACE__.KazFilter): number | Promise<number>;
    getAllGroupedDeadlines(token: string, beginDate: Int64, endDate: Int64, usersOrGroups: Array<__ROOT_NAMESPACE__.UserOrGroup>, filter: __ROOT_NAMESPACE__.KazFilter): Map<Int64, Int64> | Promise<Map<Int64, Int64>>;
    getAllReassignments(token: string, beginDate: Int64, endDate: Int64, filter: __ROOT_NAMESPACE__.KazFilter): Array<__ROOT_NAMESPACE__.DocumentReassign> | Promise<Array<__ROOT_NAMESPACE__.DocumentReassign>>;
    getAllWeekendDictionaries(token: string, filter: __ROOT_NAMESPACE__.KazFilter): Array<WeekendDictionary.WeekendDictionary> | Promise<Array<WeekendDictionary.WeekendDictionary>>;
    changeWeekendDictionaries(token: string, toUpdate: Array<WeekendDictionary.WeekendDictionary>, toRemove: Array<string>, filter: __ROOT_NAMESPACE__.KazFilter): Array<WeekendDictionary.WeekendDictionary> | Promise<Array<WeekendDictionary.WeekendDictionary>>;
    populateWeekends(token: string, dateFrom: Int64, dateTo: Int64, filter: __ROOT_NAMESPACE__.KazFilter): Array<WeekendDictionary.WeekendDictionary> | Promise<Array<WeekendDictionary.WeekendDictionary>>;
    convertJiraTimeToDate(token: string, userId: string, jiraPeriod: string): Int64 | Promise<Int64>;
}
export class Processor {
    public _handler: IHandler;
    constructor(handler: IHandler) {
        this._handler = handler;
    }
    public process(input: thrift.TProtocol, output: thrift.TProtocol): void {
        const metadata: thrift.TMessage = input.readMessageBegin();
        const fname: string = metadata.fname;
        const requestId: number = metadata.rseqid;
        const methodName: string = "process_" + fname;
        switch (methodName) {
            case "process_getAllDeadlines": {
                this.process_getAllDeadlines(requestId, input, output);
                return;
            }
            case "process_getCountAllDeadlines": {
                this.process_getCountAllDeadlines(requestId, input, output);
                return;
            }
            case "process_getAllGroupedDeadlines": {
                this.process_getAllGroupedDeadlines(requestId, input, output);
                return;
            }
            case "process_getAllReassignments": {
                this.process_getAllReassignments(requestId, input, output);
                return;
            }
            case "process_getAllWeekendDictionaries": {
                this.process_getAllWeekendDictionaries(requestId, input, output);
                return;
            }
            case "process_changeWeekendDictionaries": {
                this.process_changeWeekendDictionaries(requestId, input, output);
                return;
            }
            case "process_populateWeekends": {
                this.process_populateWeekends(requestId, input, output);
                return;
            }
            case "process_convertJiraTimeToDate": {
                this.process_convertJiraTimeToDate(requestId, input, output);
                return;
            }
            default: {
                input.skip(thrift.Thrift.Type.STRUCT);
                input.readMessageEnd();
                const errMessage = "Unknown function " + fname;
                const err = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN_METHOD, errMessage);
                output.writeMessageBegin(fname, thrift.Thrift.MessageType.EXCEPTION, requestId);
                err.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        }
    }
    public process_getAllDeadlines(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<Deadline.Deadline>>((resolve, reject): void => {
            try {
                const args: GetAllDeadlinesArgs = GetAllDeadlinesArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAllDeadlines(args.token, args.beginDate, args.endDate, args.usersOrGroups, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<Deadline.Deadline>): void => {
            const result: GetAllDeadlinesResult = new GetAllDeadlinesResult({ success: data });
            output.writeMessageBegin("getAllDeadlines", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetAllDeadlinesResult = new GetAllDeadlinesResult({ validError: err });
                output.writeMessageBegin("getAllDeadlines", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetAllDeadlinesResult = new GetAllDeadlinesResult({ error: err });
                output.writeMessageBegin("getAllDeadlines", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAllDeadlines", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getCountAllDeadlines(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<number>((resolve, reject): void => {
            try {
                const args: GetCountAllDeadlinesArgs = GetCountAllDeadlinesArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getCountAllDeadlines(args.token, args.beginDate, args.endDate, args.usersOrGroups, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: number): void => {
            const result: GetCountAllDeadlinesResult = new GetCountAllDeadlinesResult({ success: data });
            output.writeMessageBegin("getCountAllDeadlines", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetCountAllDeadlinesResult = new GetCountAllDeadlinesResult({ validError: err });
                output.writeMessageBegin("getCountAllDeadlines", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetCountAllDeadlinesResult = new GetCountAllDeadlinesResult({ error: err });
                output.writeMessageBegin("getCountAllDeadlines", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getCountAllDeadlines", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getAllGroupedDeadlines(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Map<Int64, Int64>>((resolve, reject): void => {
            try {
                const args: GetAllGroupedDeadlinesArgs = GetAllGroupedDeadlinesArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAllGroupedDeadlines(args.token, args.beginDate, args.endDate, args.usersOrGroups, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Map<Int64, Int64>): void => {
            const result: GetAllGroupedDeadlinesResult = new GetAllGroupedDeadlinesResult({ success: data });
            output.writeMessageBegin("getAllGroupedDeadlines", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetAllGroupedDeadlinesResult = new GetAllGroupedDeadlinesResult({ validError: err });
                output.writeMessageBegin("getAllGroupedDeadlines", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetAllGroupedDeadlinesResult = new GetAllGroupedDeadlinesResult({ error: err });
                output.writeMessageBegin("getAllGroupedDeadlines", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAllGroupedDeadlines", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getAllReassignments(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<__ROOT_NAMESPACE__.DocumentReassign>>((resolve, reject): void => {
            try {
                const args: GetAllReassignmentsArgs = GetAllReassignmentsArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAllReassignments(args.token, args.beginDate, args.endDate, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<__ROOT_NAMESPACE__.DocumentReassign>): void => {
            const result: GetAllReassignmentsResult = new GetAllReassignmentsResult({ success: data });
            output.writeMessageBegin("getAllReassignments", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetAllReassignmentsResult = new GetAllReassignmentsResult({ validError: err });
                output.writeMessageBegin("getAllReassignments", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetAllReassignmentsResult = new GetAllReassignmentsResult({ error: err });
                output.writeMessageBegin("getAllReassignments", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAllReassignments", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getAllWeekendDictionaries(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<WeekendDictionary.WeekendDictionary>>((resolve, reject): void => {
            try {
                const args: GetAllWeekendDictionariesArgs = GetAllWeekendDictionariesArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAllWeekendDictionaries(args.token, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<WeekendDictionary.WeekendDictionary>): void => {
            const result: GetAllWeekendDictionariesResult = new GetAllWeekendDictionariesResult({ success: data });
            output.writeMessageBegin("getAllWeekendDictionaries", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetAllWeekendDictionariesResult = new GetAllWeekendDictionariesResult({ validError: err });
                output.writeMessageBegin("getAllWeekendDictionaries", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetAllWeekendDictionariesResult = new GetAllWeekendDictionariesResult({ error: err });
                output.writeMessageBegin("getAllWeekendDictionaries", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAllWeekendDictionaries", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_changeWeekendDictionaries(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<WeekendDictionary.WeekendDictionary>>((resolve, reject): void => {
            try {
                const args: ChangeWeekendDictionariesArgs = ChangeWeekendDictionariesArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.changeWeekendDictionaries(args.token, args.toUpdate, args.toRemove, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<WeekendDictionary.WeekendDictionary>): void => {
            const result: ChangeWeekendDictionariesResult = new ChangeWeekendDictionariesResult({ success: data });
            output.writeMessageBegin("changeWeekendDictionaries", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: ChangeWeekendDictionariesResult = new ChangeWeekendDictionariesResult({ validError: err });
                output.writeMessageBegin("changeWeekendDictionaries", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: ChangeWeekendDictionariesResult = new ChangeWeekendDictionariesResult({ error: err });
                output.writeMessageBegin("changeWeekendDictionaries", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("changeWeekendDictionaries", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_populateWeekends(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<WeekendDictionary.WeekendDictionary>>((resolve, reject): void => {
            try {
                const args: PopulateWeekendsArgs = PopulateWeekendsArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.populateWeekends(args.token, args.dateFrom, args.dateTo, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<WeekendDictionary.WeekendDictionary>): void => {
            const result: PopulateWeekendsResult = new PopulateWeekendsResult({ success: data });
            output.writeMessageBegin("populateWeekends", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: PopulateWeekendsResult = new PopulateWeekendsResult({ validError: err });
                output.writeMessageBegin("populateWeekends", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: PopulateWeekendsResult = new PopulateWeekendsResult({ error: err });
                output.writeMessageBegin("populateWeekends", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("populateWeekends", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_convertJiraTimeToDate(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Int64>((resolve, reject): void => {
            try {
                const args: ConvertJiraTimeToDateArgs = ConvertJiraTimeToDateArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.convertJiraTimeToDate(args.token, args.userId, args.jiraPeriod));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Int64): void => {
            const result: ConvertJiraTimeToDateResult = new ConvertJiraTimeToDateResult({ success: data });
            output.writeMessageBegin("convertJiraTimeToDate", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: ConvertJiraTimeToDateResult = new ConvertJiraTimeToDateResult({ validError: err });
                output.writeMessageBegin("convertJiraTimeToDate", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: ConvertJiraTimeToDateResult = new ConvertJiraTimeToDateResult({ error: err });
                output.writeMessageBegin("convertJiraTimeToDate", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("convertJiraTimeToDate", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
}

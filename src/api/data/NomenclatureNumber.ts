/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import { Int64 } from "thrift";
import * as thrift from "thrift";
import * as __ROOT_NAMESPACE__ from "./";
import * as NomenclatureGroup from "./NomenclatureGroup";
export interface INomenclatureNumberArgs {
    id?: string;
    oName?: string;
    numberPattern?: string;
    currentSequenceValue?: number | Int64;
    accountId?: string;
    account?: __ROOT_NAMESPACE__.Account;
    nomenclatureGroup?: NomenclatureGroup.NomenclatureGroup;
}
export class NomenclatureNumber {
    public id?: string;
    public oName?: string;
    public numberPattern?: string;
    public currentSequenceValue?: Int64;
    public accountId?: string;
    public account?: __ROOT_NAMESPACE__.Account;
    public nomenclatureGroup?: NomenclatureGroup.NomenclatureGroup;
    constructor(args?: INomenclatureNumberArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.oName != null) {
            this.oName = args.oName;
        }
        if (args != null && args.numberPattern != null) {
            this.numberPattern = args.numberPattern;
        }
        if (args != null && args.currentSequenceValue != null) {
            if (typeof args.currentSequenceValue === "number") {
                this.currentSequenceValue = new Int64(args.currentSequenceValue);
            }
            else {
                this.currentSequenceValue = args.currentSequenceValue;
            }
        }
        if (args != null && args.accountId != null) {
            this.accountId = args.accountId;
        }
        if (args != null && args.account != null) {
            this.account = args.account;
        }
        if (args != null && args.nomenclatureGroup != null) {
            this.nomenclatureGroup = args.nomenclatureGroup;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("NomenclatureNumber");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.oName != null) {
            output.writeFieldBegin("oName", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.oName);
            output.writeFieldEnd();
        }
        if (this.numberPattern != null) {
            output.writeFieldBegin("numberPattern", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.numberPattern);
            output.writeFieldEnd();
        }
        if (this.currentSequenceValue != null) {
            output.writeFieldBegin("currentSequenceValue", thrift.Thrift.Type.I64, 4);
            output.writeI64(this.currentSequenceValue);
            output.writeFieldEnd();
        }
        if (this.accountId != null) {
            output.writeFieldBegin("accountId", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.accountId);
            output.writeFieldEnd();
        }
        if (this.account != null) {
            output.writeFieldBegin("account", thrift.Thrift.Type.STRUCT, 6);
            this.account.write(output);
            output.writeFieldEnd();
        }
        if (this.nomenclatureGroup != null) {
            output.writeFieldBegin("nomenclatureGroup", thrift.Thrift.Type.STRUCT, 7);
            this.nomenclatureGroup.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): NomenclatureNumber {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.id = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.oName = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.numberPattern = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_4: Int64 = input.readI64();
                        _args.currentSequenceValue = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.accountId = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_6: __ROOT_NAMESPACE__.Account = __ROOT_NAMESPACE__.Account.read(input);
                        _args.account = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_7: NomenclatureGroup.NomenclatureGroup = NomenclatureGroup.NomenclatureGroup.read(input);
                        _args.nomenclatureGroup = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new NomenclatureNumber(_args);
    }
}

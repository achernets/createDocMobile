/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import { Int64 } from "thrift";
import * as thrift from "thrift";
import * as __ROOT_NAMESPACE__ from "./";
export interface IVoteUserAnswerArgs {
    id?: string;
    parentId?: string;
    createDate?: number | Int64;
    iteration?: number;
    userComment?: string;
    user?: __ROOT_NAMESPACE__.UserOrGroup;
    originalUser?: __ROOT_NAMESPACE__.UserOrGroup;
    secretary?: __ROOT_NAMESPACE__.UserOrGroup;
    lastVersion?: boolean;
    answerParamId?: string;
}
export class VoteUserAnswer {
    public id?: string;
    public parentId?: string;
    public createDate?: Int64;
    public iteration?: number;
    public userComment?: string;
    public user?: __ROOT_NAMESPACE__.UserOrGroup;
    public originalUser?: __ROOT_NAMESPACE__.UserOrGroup;
    public secretary?: __ROOT_NAMESPACE__.UserOrGroup;
    public lastVersion?: boolean;
    public answerParamId?: string;
    constructor(args?: IVoteUserAnswerArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.parentId != null) {
            this.parentId = args.parentId;
        }
        if (args != null && args.createDate != null) {
            if (typeof args.createDate === "number") {
                this.createDate = new Int64(args.createDate);
            }
            else {
                this.createDate = args.createDate;
            }
        }
        if (args != null && args.iteration != null) {
            this.iteration = args.iteration;
        }
        if (args != null && args.userComment != null) {
            this.userComment = args.userComment;
        }
        if (args != null && args.user != null) {
            this.user = args.user;
        }
        if (args != null && args.originalUser != null) {
            this.originalUser = args.originalUser;
        }
        if (args != null && args.secretary != null) {
            this.secretary = args.secretary;
        }
        if (args != null && args.lastVersion != null) {
            this.lastVersion = args.lastVersion;
        }
        if (args != null && args.answerParamId != null) {
            this.answerParamId = args.answerParamId;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("VoteUserAnswer");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.parentId != null) {
            output.writeFieldBegin("parentId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.parentId);
            output.writeFieldEnd();
        }
        if (this.createDate != null) {
            output.writeFieldBegin("createDate", thrift.Thrift.Type.I64, 3);
            output.writeI64(this.createDate);
            output.writeFieldEnd();
        }
        if (this.iteration != null) {
            output.writeFieldBegin("iteration", thrift.Thrift.Type.I32, 4);
            output.writeI32(this.iteration);
            output.writeFieldEnd();
        }
        if (this.userComment != null) {
            output.writeFieldBegin("userComment", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.userComment);
            output.writeFieldEnd();
        }
        if (this.user != null) {
            output.writeFieldBegin("user", thrift.Thrift.Type.STRUCT, 6);
            this.user.write(output);
            output.writeFieldEnd();
        }
        if (this.originalUser != null) {
            output.writeFieldBegin("originalUser", thrift.Thrift.Type.STRUCT, 7);
            this.originalUser.write(output);
            output.writeFieldEnd();
        }
        if (this.secretary != null) {
            output.writeFieldBegin("secretary", thrift.Thrift.Type.STRUCT, 8);
            this.secretary.write(output);
            output.writeFieldEnd();
        }
        if (this.lastVersion != null) {
            output.writeFieldBegin("lastVersion", thrift.Thrift.Type.BOOL, 9);
            output.writeBool(this.lastVersion);
            output.writeFieldEnd();
        }
        if (this.answerParamId != null) {
            output.writeFieldBegin("answerParamId", thrift.Thrift.Type.STRING, 10);
            output.writeString(this.answerParamId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): VoteUserAnswer {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.id = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.parentId = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_3: Int64 = input.readI64();
                        _args.createDate = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_4: number = input.readI32();
                        _args.iteration = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.userComment = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_6: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                        _args.user = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_7: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                        _args.originalUser = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_8: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                        _args.secretary = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_9: boolean = input.readBool();
                        _args.lastVersion = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_10: string = input.readString();
                        _args.answerParamId = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new VoteUserAnswer(_args);
    }
}

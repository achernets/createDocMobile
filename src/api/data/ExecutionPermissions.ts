/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface IExecutionPermissionsArgs {
    canComment?: boolean;
    canEditResolution?: boolean;
    canRevokeDecision?: boolean;
    canRespondToComment?: boolean;
}
export class ExecutionPermissions {
    public canComment?: boolean;
    public canEditResolution?: boolean;
    public canRevokeDecision?: boolean;
    public canRespondToComment?: boolean;
    constructor(args?: IExecutionPermissionsArgs) {
        if (args != null && args.canComment != null) {
            this.canComment = args.canComment;
        }
        if (args != null && args.canEditResolution != null) {
            this.canEditResolution = args.canEditResolution;
        }
        if (args != null && args.canRevokeDecision != null) {
            this.canRevokeDecision = args.canRevokeDecision;
        }
        if (args != null && args.canRespondToComment != null) {
            this.canRespondToComment = args.canRespondToComment;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ExecutionPermissions");
        if (this.canComment != null) {
            output.writeFieldBegin("canComment", thrift.Thrift.Type.BOOL, 1);
            output.writeBool(this.canComment);
            output.writeFieldEnd();
        }
        if (this.canEditResolution != null) {
            output.writeFieldBegin("canEditResolution", thrift.Thrift.Type.BOOL, 2);
            output.writeBool(this.canEditResolution);
            output.writeFieldEnd();
        }
        if (this.canRevokeDecision != null) {
            output.writeFieldBegin("canRevokeDecision", thrift.Thrift.Type.BOOL, 3);
            output.writeBool(this.canRevokeDecision);
            output.writeFieldEnd();
        }
        if (this.canRespondToComment != null) {
            output.writeFieldBegin("canRespondToComment", thrift.Thrift.Type.BOOL, 4);
            output.writeBool(this.canRespondToComment);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ExecutionPermissions {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_1: boolean = input.readBool();
                        _args.canComment = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_2: boolean = input.readBool();
                        _args.canEditResolution = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_3: boolean = input.readBool();
                        _args.canRevokeDecision = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_4: boolean = input.readBool();
                        _args.canRespondToComment = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ExecutionPermissions(_args);
    }
}

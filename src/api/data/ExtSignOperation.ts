/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as ExtSignOperationStatus from "./ExtSignOperationStatus";
import * as __ROOT_NAMESPACE__ from "./";
import * as ExtSignServer from "./ExtSignServer";
export interface IExtSignOperationArgs {
    operationId?: string;
    qrCode?: string;
    operationStatus?: ExtSignOperationStatus.ExtSignOperationStatus;
    dataToSignList?: Array<__ROOT_NAMESPACE__.SignData>;
    extServerInfo?: ExtSignServer.ExtSignServer;
    androidAppLink?: string;
    iosAppLink?: string;
}
export class ExtSignOperation {
    public operationId?: string;
    public qrCode?: string;
    public operationStatus?: ExtSignOperationStatus.ExtSignOperationStatus;
    public dataToSignList?: Array<__ROOT_NAMESPACE__.SignData>;
    public extServerInfo?: ExtSignServer.ExtSignServer;
    public androidAppLink?: string;
    public iosAppLink?: string;
    constructor(args?: IExtSignOperationArgs) {
        if (args != null && args.operationId != null) {
            this.operationId = args.operationId;
        }
        if (args != null && args.qrCode != null) {
            this.qrCode = args.qrCode;
        }
        if (args != null && args.operationStatus != null) {
            this.operationStatus = args.operationStatus;
        }
        if (args != null && args.dataToSignList != null) {
            this.dataToSignList = args.dataToSignList;
        }
        if (args != null && args.extServerInfo != null) {
            this.extServerInfo = args.extServerInfo;
        }
        if (args != null && args.androidAppLink != null) {
            this.androidAppLink = args.androidAppLink;
        }
        if (args != null && args.iosAppLink != null) {
            this.iosAppLink = args.iosAppLink;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ExtSignOperation");
        if (this.operationId != null) {
            output.writeFieldBegin("operationId", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.operationId);
            output.writeFieldEnd();
        }
        if (this.qrCode != null) {
            output.writeFieldBegin("qrCode", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.qrCode);
            output.writeFieldEnd();
        }
        if (this.operationStatus != null) {
            output.writeFieldBegin("operationStatus", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.operationStatus);
            output.writeFieldEnd();
        }
        if (this.dataToSignList != null) {
            output.writeFieldBegin("dataToSignList", thrift.Thrift.Type.LIST, 4);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.dataToSignList.length);
            this.dataToSignList.forEach((value_1: __ROOT_NAMESPACE__.SignData): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.extServerInfo != null) {
            output.writeFieldBegin("extServerInfo", thrift.Thrift.Type.STRUCT, 5);
            this.extServerInfo.write(output);
            output.writeFieldEnd();
        }
        if (this.androidAppLink != null) {
            output.writeFieldBegin("androidAppLink", thrift.Thrift.Type.STRING, 6);
            output.writeString(this.androidAppLink);
            output.writeFieldEnd();
        }
        if (this.iosAppLink != null) {
            output.writeFieldBegin("iosAppLink", thrift.Thrift.Type.STRING, 7);
            output.writeString(this.iosAppLink);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ExtSignOperation {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.operationId = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.qrCode = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_4: ExtSignOperationStatus.ExtSignOperationStatus = input.readI32();
                        _args.operationStatus = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_5: Array<__ROOT_NAMESPACE__.SignData> = new Array<__ROOT_NAMESPACE__.SignData>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_6: __ROOT_NAMESPACE__.SignData = __ROOT_NAMESPACE__.SignData.read(input);
                            value_5.push(value_6);
                        }
                        input.readListEnd();
                        _args.dataToSignList = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_7: ExtSignServer.ExtSignServer = ExtSignServer.ExtSignServer.read(input);
                        _args.extServerInfo = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_8: string = input.readString();
                        _args.androidAppLink = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_9: string = input.readString();
                        _args.iosAppLink = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ExtSignOperation(_args);
    }
}

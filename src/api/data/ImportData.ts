/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as __ROOT_NAMESPACE__ from "./";
import * as DiffType from "./DiffType";
export interface IImportDataArgs {
    id?: string;
    name?: string;
    stageList?: Array<__ROOT_NAMESPACE__.DocumentPatternStage>;
    linkList?: Array<__ROOT_NAMESPACE__.DocumentPatternStagesLink>;
    diffCounts?: Map<DiffType.DiffType, number>;
}
export class ImportData {
    public id?: string;
    public name?: string;
    public stageList?: Array<__ROOT_NAMESPACE__.DocumentPatternStage>;
    public linkList?: Array<__ROOT_NAMESPACE__.DocumentPatternStagesLink>;
    public diffCounts?: Map<DiffType.DiffType, number>;
    constructor(args?: IImportDataArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.name != null) {
            this.name = args.name;
        }
        if (args != null && args.stageList != null) {
            this.stageList = args.stageList;
        }
        if (args != null && args.linkList != null) {
            this.linkList = args.linkList;
        }
        if (args != null && args.diffCounts != null) {
            this.diffCounts = args.diffCounts;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ImportData");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.name != null) {
            output.writeFieldBegin("name", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.name);
            output.writeFieldEnd();
        }
        if (this.stageList != null) {
            output.writeFieldBegin("stageList", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.stageList.length);
            this.stageList.forEach((value_1: __ROOT_NAMESPACE__.DocumentPatternStage): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.linkList != null) {
            output.writeFieldBegin("linkList", thrift.Thrift.Type.LIST, 4);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.linkList.length);
            this.linkList.forEach((value_2: __ROOT_NAMESPACE__.DocumentPatternStagesLink): void => {
                value_2.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.diffCounts != null) {
            output.writeFieldBegin("diffCounts", thrift.Thrift.Type.MAP, 5);
            output.writeMapBegin(thrift.Thrift.Type.I32, thrift.Thrift.Type.I32, this.diffCounts.size);
            this.diffCounts.forEach((value_3: number, key_1: DiffType.DiffType): void => {
                output.writeI32(key_1);
                output.writeI32(value_3);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ImportData {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.id = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.name = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_6: Array<__ROOT_NAMESPACE__.DocumentPatternStage> = new Array<__ROOT_NAMESPACE__.DocumentPatternStage>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_7: __ROOT_NAMESPACE__.DocumentPatternStage = __ROOT_NAMESPACE__.DocumentPatternStage.read(input);
                            value_6.push(value_7);
                        }
                        input.readListEnd();
                        _args.stageList = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_8: Array<__ROOT_NAMESPACE__.DocumentPatternStagesLink> = new Array<__ROOT_NAMESPACE__.DocumentPatternStagesLink>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_9: __ROOT_NAMESPACE__.DocumentPatternStagesLink = __ROOT_NAMESPACE__.DocumentPatternStagesLink.read(input);
                            value_8.push(value_9);
                        }
                        input.readListEnd();
                        _args.linkList = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_10: Map<DiffType.DiffType, number> = new Map<DiffType.DiffType, number>();
                        const metadata_3: thrift.TMap = input.readMapBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const key_2: DiffType.DiffType = input.readI32();
                            const value_11: number = input.readI32();
                            value_10.set(key_2, value_11);
                        }
                        input.readMapEnd();
                        _args.diffCounts = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ImportData(_args);
    }
}

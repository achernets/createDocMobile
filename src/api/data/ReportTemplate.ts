/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import { Int64 } from "thrift";
import * as thrift from "thrift";
import * as ReportParams from "./ReportParams";
import * as ReportTemplateType from "./ReportTemplateType";
import * as ReportType from "./ReportType";
export interface IReportTemplateArgs {
    id?: string;
    createDate?: number | Int64;
    reportName?: string;
    fastPrint?: boolean;
    reportCount?: number | Int64;
    adParams?: Array<ReportParams.ReportParams>;
    group?: string;
    reportType?: ReportTemplateType.ReportTemplateType;
    accountIds?: Set<string>;
    reportTypes?: Set<ReportType.ReportType>;
    addWatermark?: boolean;
    reportNameLoc?: Map<string, string>;
    groupLoc?: Map<string, string>;
    viaHtml?: boolean;
}
export class ReportTemplate {
    public id?: string;
    public createDate?: Int64;
    public reportName?: string;
    public fastPrint?: boolean;
    public reportCount?: Int64;
    public adParams?: Array<ReportParams.ReportParams>;
    public group?: string;
    public reportType?: ReportTemplateType.ReportTemplateType;
    public accountIds?: Set<string>;
    public reportTypes?: Set<ReportType.ReportType>;
    public addWatermark?: boolean;
    public reportNameLoc?: Map<string, string>;
    public groupLoc?: Map<string, string>;
    public viaHtml?: boolean;
    constructor(args?: IReportTemplateArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.createDate != null) {
            if (typeof args.createDate === "number") {
                this.createDate = new Int64(args.createDate);
            }
            else {
                this.createDate = args.createDate;
            }
        }
        if (args != null && args.reportName != null) {
            this.reportName = args.reportName;
        }
        if (args != null && args.fastPrint != null) {
            this.fastPrint = args.fastPrint;
        }
        if (args != null && args.reportCount != null) {
            if (typeof args.reportCount === "number") {
                this.reportCount = new Int64(args.reportCount);
            }
            else {
                this.reportCount = args.reportCount;
            }
        }
        if (args != null && args.adParams != null) {
            this.adParams = args.adParams;
        }
        if (args != null && args.group != null) {
            this.group = args.group;
        }
        if (args != null && args.reportType != null) {
            this.reportType = args.reportType;
        }
        if (args != null && args.accountIds != null) {
            this.accountIds = args.accountIds;
        }
        if (args != null && args.reportTypes != null) {
            this.reportTypes = args.reportTypes;
        }
        if (args != null && args.addWatermark != null) {
            this.addWatermark = args.addWatermark;
        }
        if (args != null && args.reportNameLoc != null) {
            this.reportNameLoc = args.reportNameLoc;
        }
        if (args != null && args.groupLoc != null) {
            this.groupLoc = args.groupLoc;
        }
        if (args != null && args.viaHtml != null) {
            this.viaHtml = args.viaHtml;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ReportTemplate");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.createDate != null) {
            output.writeFieldBegin("createDate", thrift.Thrift.Type.I64, 2);
            output.writeI64(this.createDate);
            output.writeFieldEnd();
        }
        if (this.reportName != null) {
            output.writeFieldBegin("reportName", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.reportName);
            output.writeFieldEnd();
        }
        if (this.fastPrint != null) {
            output.writeFieldBegin("fastPrint", thrift.Thrift.Type.BOOL, 4);
            output.writeBool(this.fastPrint);
            output.writeFieldEnd();
        }
        if (this.reportCount != null) {
            output.writeFieldBegin("reportCount", thrift.Thrift.Type.I64, 5);
            output.writeI64(this.reportCount);
            output.writeFieldEnd();
        }
        if (this.adParams != null) {
            output.writeFieldBegin("adParams", thrift.Thrift.Type.LIST, 6);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.adParams.length);
            this.adParams.forEach((value_1: ReportParams.ReportParams): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.group != null) {
            output.writeFieldBegin("group", thrift.Thrift.Type.STRING, 7);
            output.writeString(this.group);
            output.writeFieldEnd();
        }
        if (this.reportType != null) {
            output.writeFieldBegin("reportType", thrift.Thrift.Type.I32, 8);
            output.writeI32(this.reportType);
            output.writeFieldEnd();
        }
        if (this.accountIds != null) {
            output.writeFieldBegin("accountIds", thrift.Thrift.Type.SET, 9);
            output.writeSetBegin(thrift.Thrift.Type.STRING, this.accountIds.size);
            this.accountIds.forEach((value_2: string): void => {
                output.writeString(value_2);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        if (this.reportTypes != null) {
            output.writeFieldBegin("reportTypes", thrift.Thrift.Type.SET, 10);
            output.writeSetBegin(thrift.Thrift.Type.I32, this.reportTypes.size);
            this.reportTypes.forEach((value_3: ReportType.ReportType): void => {
                output.writeI32(value_3);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        if (this.addWatermark != null) {
            output.writeFieldBegin("addWatermark", thrift.Thrift.Type.BOOL, 11);
            output.writeBool(this.addWatermark);
            output.writeFieldEnd();
        }
        if (this.reportNameLoc != null) {
            output.writeFieldBegin("reportNameLoc", thrift.Thrift.Type.MAP, 12);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.reportNameLoc.size);
            this.reportNameLoc.forEach((value_4: string, key_1: string): void => {
                output.writeString(key_1);
                output.writeString(value_4);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.groupLoc != null) {
            output.writeFieldBegin("groupLoc", thrift.Thrift.Type.MAP, 13);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.groupLoc.size);
            this.groupLoc.forEach((value_5: string, key_2: string): void => {
                output.writeString(key_2);
                output.writeString(value_5);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.viaHtml != null) {
            output.writeFieldBegin("viaHtml", thrift.Thrift.Type.BOOL, 14);
            output.writeBool(this.viaHtml);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ReportTemplate {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.id = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_7: Int64 = input.readI64();
                        _args.createDate = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_8: string = input.readString();
                        _args.reportName = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_9: boolean = input.readBool();
                        _args.fastPrint = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_10: Int64 = input.readI64();
                        _args.reportCount = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_11: Array<ReportParams.ReportParams> = new Array<ReportParams.ReportParams>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_12: ReportParams.ReportParams = ReportParams.ReportParams.read(input);
                            value_11.push(value_12);
                        }
                        input.readListEnd();
                        _args.adParams = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_13: string = input.readString();
                        _args.group = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_14: ReportTemplateType.ReportTemplateType = input.readI32();
                        _args.reportType = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_15: Set<string> = new Set<string>();
                        const metadata_2: thrift.TSet = input.readSetBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_16: string = input.readString();
                            value_15.add(value_16);
                        }
                        input.readSetEnd();
                        _args.accountIds = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_17: Set<ReportType.ReportType> = new Set<ReportType.ReportType>();
                        const metadata_3: thrift.TSet = input.readSetBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_18: ReportType.ReportType = input.readI32();
                            value_17.add(value_18);
                        }
                        input.readSetEnd();
                        _args.reportTypes = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_19: boolean = input.readBool();
                        _args.addWatermark = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_20: Map<string, string> = new Map<string, string>();
                        const metadata_4: thrift.TMap = input.readMapBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const key_3: string = input.readString();
                            const value_21: string = input.readString();
                            value_20.set(key_3, value_21);
                        }
                        input.readMapEnd();
                        _args.reportNameLoc = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_22: Map<string, string> = new Map<string, string>();
                        const metadata_5: thrift.TMap = input.readMapBegin();
                        const size_5: number = metadata_5.size;
                        for (let i_5: number = 0; i_5 < size_5; i_5++) {
                            const key_4: string = input.readString();
                            const value_23: string = input.readString();
                            value_22.set(key_4, value_23);
                        }
                        input.readMapEnd();
                        _args.groupLoc = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_24: boolean = input.readBool();
                        _args.viaHtml = value_24;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ReportTemplate(_args);
    }
}

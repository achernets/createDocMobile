/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as AvailablePatternStageForm from "./AvailablePatternStageForm";
import * as __ROOT_NAMESPACE__ from "./";
import * as ModifyEnable from "./ModifyEnable";
export interface IAvailablePatternStageArgs {
    id?: string;
    formAvail?: AvailablePatternStageForm.AvailablePatternStageForm;
    nameAvail?: string;
    descriptionAvail?: string;
    status?: __ROOT_NAMESPACE__.DocPatternStageStatus;
    adParams?: Array<__ROOT_NAMESPACE__.StageParam>;
    availableAnswers?: Set<string>;
    fixedDecisions?: ModifyEnable.ModifyEnable;
    scale?: number;
    orderNum?: number;
    patternType?: __ROOT_NAMESPACE__.PatternType;
    availableGroup?: string;
    stageType?: string;
    uuid?: string;
    objectClass?: string;
    colorShape?: string;
    colorBackground?: string;
    colorFont?: string;
    iconUrl?: string;
}
export class AvailablePatternStage {
    public id?: string;
    public formAvail?: AvailablePatternStageForm.AvailablePatternStageForm;
    public nameAvail?: string;
    public descriptionAvail?: string;
    public status?: __ROOT_NAMESPACE__.DocPatternStageStatus;
    public adParams?: Array<__ROOT_NAMESPACE__.StageParam>;
    public availableAnswers?: Set<string>;
    public fixedDecisions?: ModifyEnable.ModifyEnable;
    public scale?: number;
    public orderNum?: number;
    public patternType?: __ROOT_NAMESPACE__.PatternType;
    public availableGroup?: string;
    public stageType?: string;
    public uuid?: string;
    public objectClass?: string;
    public colorShape?: string;
    public colorBackground?: string;
    public colorFont?: string;
    public iconUrl?: string;
    constructor(args?: IAvailablePatternStageArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.formAvail != null) {
            this.formAvail = args.formAvail;
        }
        if (args != null && args.nameAvail != null) {
            this.nameAvail = args.nameAvail;
        }
        if (args != null && args.descriptionAvail != null) {
            this.descriptionAvail = args.descriptionAvail;
        }
        if (args != null && args.status != null) {
            this.status = args.status;
        }
        if (args != null && args.adParams != null) {
            this.adParams = args.adParams;
        }
        if (args != null && args.availableAnswers != null) {
            this.availableAnswers = args.availableAnswers;
        }
        if (args != null && args.fixedDecisions != null) {
            this.fixedDecisions = args.fixedDecisions;
        }
        if (args != null && args.scale != null) {
            this.scale = args.scale;
        }
        if (args != null && args.orderNum != null) {
            this.orderNum = args.orderNum;
        }
        if (args != null && args.patternType != null) {
            this.patternType = args.patternType;
        }
        if (args != null && args.availableGroup != null) {
            this.availableGroup = args.availableGroup;
        }
        if (args != null && args.stageType != null) {
            this.stageType = args.stageType;
        }
        if (args != null && args.uuid != null) {
            this.uuid = args.uuid;
        }
        if (args != null && args.objectClass != null) {
            this.objectClass = args.objectClass;
        }
        if (args != null && args.colorShape != null) {
            this.colorShape = args.colorShape;
        }
        if (args != null && args.colorBackground != null) {
            this.colorBackground = args.colorBackground;
        }
        if (args != null && args.colorFont != null) {
            this.colorFont = args.colorFont;
        }
        if (args != null && args.iconUrl != null) {
            this.iconUrl = args.iconUrl;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("AvailablePatternStage");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.formAvail != null) {
            output.writeFieldBegin("formAvail", thrift.Thrift.Type.I32, 2);
            output.writeI32(this.formAvail);
            output.writeFieldEnd();
        }
        if (this.nameAvail != null) {
            output.writeFieldBegin("nameAvail", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.nameAvail);
            output.writeFieldEnd();
        }
        if (this.descriptionAvail != null) {
            output.writeFieldBegin("descriptionAvail", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.descriptionAvail);
            output.writeFieldEnd();
        }
        if (this.status != null) {
            output.writeFieldBegin("status", thrift.Thrift.Type.I32, 6);
            output.writeI32(this.status);
            output.writeFieldEnd();
        }
        if (this.adParams != null) {
            output.writeFieldBegin("adParams", thrift.Thrift.Type.LIST, 7);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.adParams.length);
            this.adParams.forEach((value_1: __ROOT_NAMESPACE__.StageParam): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.availableAnswers != null) {
            output.writeFieldBegin("availableAnswers", thrift.Thrift.Type.SET, 8);
            output.writeSetBegin(thrift.Thrift.Type.STRING, this.availableAnswers.size);
            this.availableAnswers.forEach((value_2: string): void => {
                output.writeString(value_2);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        if (this.fixedDecisions != null) {
            output.writeFieldBegin("fixedDecisions", thrift.Thrift.Type.I32, 9);
            output.writeI32(this.fixedDecisions);
            output.writeFieldEnd();
        }
        if (this.scale != null) {
            output.writeFieldBegin("scale", thrift.Thrift.Type.I32, 12);
            output.writeI32(this.scale);
            output.writeFieldEnd();
        }
        if (this.orderNum != null) {
            output.writeFieldBegin("orderNum", thrift.Thrift.Type.I32, 13);
            output.writeI32(this.orderNum);
            output.writeFieldEnd();
        }
        if (this.patternType != null) {
            output.writeFieldBegin("patternType", thrift.Thrift.Type.I32, 14);
            output.writeI32(this.patternType);
            output.writeFieldEnd();
        }
        if (this.availableGroup != null) {
            output.writeFieldBegin("availableGroup", thrift.Thrift.Type.STRING, 15);
            output.writeString(this.availableGroup);
            output.writeFieldEnd();
        }
        if (this.stageType != null) {
            output.writeFieldBegin("stageType", thrift.Thrift.Type.STRING, 16);
            output.writeString(this.stageType);
            output.writeFieldEnd();
        }
        if (this.uuid != null) {
            output.writeFieldBegin("uuid", thrift.Thrift.Type.STRING, 17);
            output.writeString(this.uuid);
            output.writeFieldEnd();
        }
        if (this.objectClass != null) {
            output.writeFieldBegin("objectClass", thrift.Thrift.Type.STRING, 18);
            output.writeString(this.objectClass);
            output.writeFieldEnd();
        }
        if (this.colorShape != null) {
            output.writeFieldBegin("colorShape", thrift.Thrift.Type.STRING, 19);
            output.writeString(this.colorShape);
            output.writeFieldEnd();
        }
        if (this.colorBackground != null) {
            output.writeFieldBegin("colorBackground", thrift.Thrift.Type.STRING, 20);
            output.writeString(this.colorBackground);
            output.writeFieldEnd();
        }
        if (this.colorFont != null) {
            output.writeFieldBegin("colorFont", thrift.Thrift.Type.STRING, 21);
            output.writeString(this.colorFont);
            output.writeFieldEnd();
        }
        if (this.iconUrl != null) {
            output.writeFieldBegin("iconUrl", thrift.Thrift.Type.STRING, 22);
            output.writeString(this.iconUrl);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): AvailablePatternStage {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.id = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_4: AvailablePatternStageForm.AvailablePatternStageForm = input.readI32();
                        _args.formAvail = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.nameAvail = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.descriptionAvail = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_7: __ROOT_NAMESPACE__.DocPatternStageStatus = input.readI32();
                        _args.status = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_8: Array<__ROOT_NAMESPACE__.StageParam> = new Array<__ROOT_NAMESPACE__.StageParam>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_9: __ROOT_NAMESPACE__.StageParam = __ROOT_NAMESPACE__.StageParam.read(input);
                            value_8.push(value_9);
                        }
                        input.readListEnd();
                        _args.adParams = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_10: Set<string> = new Set<string>();
                        const metadata_2: thrift.TSet = input.readSetBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_11: string = input.readString();
                            value_10.add(value_11);
                        }
                        input.readSetEnd();
                        _args.availableAnswers = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_12: ModifyEnable.ModifyEnable = input.readI32();
                        _args.fixedDecisions = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_13: number = input.readI32();
                        _args.scale = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_14: number = input.readI32();
                        _args.orderNum = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_15: __ROOT_NAMESPACE__.PatternType = input.readI32();
                        _args.patternType = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_16: string = input.readString();
                        _args.availableGroup = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_17: string = input.readString();
                        _args.stageType = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 17:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_18: string = input.readString();
                        _args.uuid = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 18:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_19: string = input.readString();
                        _args.objectClass = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 19:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_20: string = input.readString();
                        _args.colorShape = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 20:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_21: string = input.readString();
                        _args.colorBackground = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 21:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_22: string = input.readString();
                        _args.colorFont = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 22:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_23: string = input.readString();
                        _args.iconUrl = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new AvailablePatternStage(_args);
    }
}

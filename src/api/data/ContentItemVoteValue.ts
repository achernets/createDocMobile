/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as __ROOT_NAMESPACE__ from "./";
export interface IContentItemVoteValueArgs {
    voteId?: string;
    voteStatus?: __ROOT_NAMESPACE__.VoteStatus;
    voteResult?: __ROOT_NAMESPACE__.VoteResult;
    voteSettings?: __ROOT_NAMESPACE__.VoteSettings;
}
export class ContentItemVoteValue {
    public voteId?: string;
    public voteStatus?: __ROOT_NAMESPACE__.VoteStatus;
    public voteResult?: __ROOT_NAMESPACE__.VoteResult;
    public voteSettings?: __ROOT_NAMESPACE__.VoteSettings;
    constructor(args?: IContentItemVoteValueArgs) {
        if (args != null && args.voteId != null) {
            this.voteId = args.voteId;
        }
        if (args != null && args.voteStatus != null) {
            this.voteStatus = args.voteStatus;
        }
        if (args != null && args.voteResult != null) {
            this.voteResult = args.voteResult;
        }
        if (args != null && args.voteSettings != null) {
            this.voteSettings = args.voteSettings;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ContentItemVoteValue");
        if (this.voteId != null) {
            output.writeFieldBegin("voteId", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.voteId);
            output.writeFieldEnd();
        }
        if (this.voteStatus != null) {
            output.writeFieldBegin("voteStatus", thrift.Thrift.Type.I32, 2);
            output.writeI32(this.voteStatus);
            output.writeFieldEnd();
        }
        if (this.voteResult != null) {
            output.writeFieldBegin("voteResult", thrift.Thrift.Type.STRUCT, 3);
            this.voteResult.write(output);
            output.writeFieldEnd();
        }
        if (this.voteSettings != null) {
            output.writeFieldBegin("voteSettings", thrift.Thrift.Type.STRUCT, 4);
            this.voteSettings.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ContentItemVoteValue {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.voteId = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_2: __ROOT_NAMESPACE__.VoteStatus = input.readI32();
                        _args.voteStatus = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_3: __ROOT_NAMESPACE__.VoteResult = __ROOT_NAMESPACE__.VoteResult.read(input);
                        _args.voteResult = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_4: __ROOT_NAMESPACE__.VoteSettings = __ROOT_NAMESPACE__.VoteSettings.read(input);
                        _args.voteSettings = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ContentItemVoteValue(_args);
    }
}

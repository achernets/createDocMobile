/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as DiffType from "./DiffType";
import * as DiffState from "./DiffState";
import * as ImportAction from "./ImportAction";
export interface IDiffArgs {
    type?: DiffType.DiffType;
    imported?: DiffState.DiffState;
    proposed?: DiffState.DiffState;
    selected?: DiffState.DiffState;
    action?: ImportAction.ImportAction;
}
export class Diff {
    public type?: DiffType.DiffType;
    public imported?: DiffState.DiffState;
    public proposed?: DiffState.DiffState;
    public selected?: DiffState.DiffState;
    public action?: ImportAction.ImportAction;
    constructor(args?: IDiffArgs) {
        if (args != null && args.type != null) {
            this.type = args.type;
        }
        if (args != null && args.imported != null) {
            this.imported = args.imported;
        }
        if (args != null && args.proposed != null) {
            this.proposed = args.proposed;
        }
        if (args != null && args.selected != null) {
            this.selected = args.selected;
        }
        if (args != null && args.action != null) {
            this.action = args.action;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("Diff");
        if (this.type != null) {
            output.writeFieldBegin("type", thrift.Thrift.Type.I32, 1);
            output.writeI32(this.type);
            output.writeFieldEnd();
        }
        if (this.imported != null) {
            output.writeFieldBegin("imported", thrift.Thrift.Type.STRUCT, 2);
            this.imported.write(output);
            output.writeFieldEnd();
        }
        if (this.proposed != null) {
            output.writeFieldBegin("proposed", thrift.Thrift.Type.STRUCT, 3);
            this.proposed.write(output);
            output.writeFieldEnd();
        }
        if (this.selected != null) {
            output.writeFieldBegin("selected", thrift.Thrift.Type.STRUCT, 4);
            this.selected.write(output);
            output.writeFieldEnd();
        }
        if (this.action != null) {
            output.writeFieldBegin("action", thrift.Thrift.Type.I32, 5);
            output.writeI32(this.action);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): Diff {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_1: DiffType.DiffType = input.readI32();
                        _args.type = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: DiffState.DiffState = DiffState.DiffState.read(input);
                        _args.imported = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_3: DiffState.DiffState = DiffState.DiffState.read(input);
                        _args.proposed = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_4: DiffState.DiffState = DiffState.DiffState.read(input);
                        _args.selected = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_5: ImportAction.ImportAction = input.readI32();
                        _args.action = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new Diff(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as __ROOT_NAMESPACE__ from "./";
export interface IMailingUserArgs {
    id?: string;
    user?: __ROOT_NAMESPACE__.UserOrGroup;
    controllers?: Array<__ROOT_NAMESPACE__.UserOrGroup>;
    mailing?: boolean;
}
export class MailingUser {
    public id?: string;
    public user?: __ROOT_NAMESPACE__.UserOrGroup;
    public controllers?: Array<__ROOT_NAMESPACE__.UserOrGroup>;
    public mailing?: boolean;
    constructor(args?: IMailingUserArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.user != null) {
            this.user = args.user;
        }
        if (args != null && args.controllers != null) {
            this.controllers = args.controllers;
        }
        if (args != null && args.mailing != null) {
            this.mailing = args.mailing;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("MailingUser");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.user != null) {
            output.writeFieldBegin("user", thrift.Thrift.Type.STRUCT, 2);
            this.user.write(output);
            output.writeFieldEnd();
        }
        if (this.controllers != null) {
            output.writeFieldBegin("controllers", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.controllers.length);
            this.controllers.forEach((value_1: __ROOT_NAMESPACE__.UserOrGroup): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.mailing != null) {
            output.writeFieldBegin("mailing", thrift.Thrift.Type.BOOL, 4);
            output.writeBool(this.mailing);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): MailingUser {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.id = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_3: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                        _args.user = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_4: Array<__ROOT_NAMESPACE__.UserOrGroup> = new Array<__ROOT_NAMESPACE__.UserOrGroup>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_5: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                            value_4.push(value_5);
                        }
                        input.readListEnd();
                        _args.controllers = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_6: boolean = input.readBool();
                        _args.mailing = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new MailingUser(_args);
    }
}

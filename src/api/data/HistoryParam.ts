/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as HistoryParamType from "./HistoryParamType";
export interface IHistoryParamArgs {
    type?: HistoryParamType.HistoryParamType;
    value?: string;
    id?: string;
    isRemoved?: boolean;
    childParams?: Array<HistoryParam>;
}
export class HistoryParam {
    public type?: HistoryParamType.HistoryParamType;
    public value?: string;
    public id?: string;
    public isRemoved?: boolean;
    public childParams?: Array<HistoryParam>;
    constructor(args?: IHistoryParamArgs) {
        if (args != null && args.type != null) {
            this.type = args.type;
        }
        if (args != null && args.value != null) {
            this.value = args.value;
        }
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.isRemoved != null) {
            this.isRemoved = args.isRemoved;
        }
        if (args != null && args.childParams != null) {
            this.childParams = args.childParams;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("HistoryParam");
        if (this.type != null) {
            output.writeFieldBegin("type", thrift.Thrift.Type.I32, 1);
            output.writeI32(this.type);
            output.writeFieldEnd();
        }
        if (this.value != null) {
            output.writeFieldBegin("value", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.value);
            output.writeFieldEnd();
        }
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.isRemoved != null) {
            output.writeFieldBegin("isRemoved", thrift.Thrift.Type.BOOL, 4);
            output.writeBool(this.isRemoved);
            output.writeFieldEnd();
        }
        if (this.childParams != null) {
            output.writeFieldBegin("childParams", thrift.Thrift.Type.LIST, 5);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.childParams.length);
            this.childParams.forEach((value_1: HistoryParam): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): HistoryParam {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_2: HistoryParamType.HistoryParamType = input.readI32();
                        _args.type = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.value = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.id = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_5: boolean = input.readBool();
                        _args.isRemoved = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_6: Array<HistoryParam> = new Array<HistoryParam>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_7: HistoryParam = HistoryParam.read(input);
                            value_6.push(value_7);
                        }
                        input.readListEnd();
                        _args.childParams = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new HistoryParam(_args);
    }
}

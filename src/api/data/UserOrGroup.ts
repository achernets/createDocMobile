/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import { Int64 } from "thrift";
import * as thrift from "thrift";
import * as UserOrGroupType from "./UserOrGroupType";
import * as GroupSelector from "./GroupSelector";
import * as Department from "./Department";
import * as UserType from "./UserType";
export interface IUserOrGroupArgs {
    type?: UserOrGroupType.UserOrGroupType;
    userOrGroupId?: string;
    nameGroup?: string;
    descriptionGroup?: string;
    userFirstName?: string;
    userLastName?: string;
    userMiddleName?: string;
    attrs?: Map<string, string>;
    deleteDate?: number | Int64;
    avatarUrl?: string;
    groupSelector?: GroupSelector.GroupSelector;
    position?: string;
    userCount?: number;
    email?: string;
    workPhone?: string;
    haveAccess?: boolean;
    scMask?: string;
    employeeNumber?: string;
    departments?: Array<Department.Department>;
    fixed?: boolean;
    endlessPassword?: boolean;
    needChangePassword?: boolean;
    accountIdGroup?: string;
    userType?: UserType.UserType;
    id?: string;
    ldapId?: string;
    company?: string;
    mobilePhone?: string;
    favorite?: boolean;
    remark?: string;
    fixedExec?: boolean;
    chiefId?: string;
    nameGroupLoc?: Map<string, string>;
    descriptionGroupLoc?: Map<string, string>;
    preferredLang?: string;
    uuid?: string;
}
export class UserOrGroup {
    public type?: UserOrGroupType.UserOrGroupType;
    public userOrGroupId?: string;
    public nameGroup?: string;
    public descriptionGroup?: string;
    public userFirstName?: string;
    public userLastName?: string;
    public userMiddleName?: string;
    public attrs?: Map<string, string>;
    public deleteDate?: Int64;
    public avatarUrl?: string;
    public groupSelector?: GroupSelector.GroupSelector;
    public position?: string;
    public userCount?: number;
    public email?: string;
    public workPhone?: string;
    public haveAccess?: boolean;
    public scMask?: string;
    public employeeNumber?: string;
    public departments?: Array<Department.Department>;
    public fixed?: boolean;
    public endlessPassword?: boolean;
    public needChangePassword?: boolean;
    public accountIdGroup?: string;
    public userType?: UserType.UserType;
    public id?: string;
    public ldapId?: string;
    public company?: string;
    public mobilePhone?: string;
    public favorite?: boolean;
    public remark?: string;
    public fixedExec?: boolean;
    public chiefId?: string;
    public nameGroupLoc?: Map<string, string>;
    public descriptionGroupLoc?: Map<string, string>;
    public preferredLang?: string;
    public uuid?: string;
    constructor(args?: IUserOrGroupArgs) {
        if (args != null && args.type != null) {
            this.type = args.type;
        }
        if (args != null && args.userOrGroupId != null) {
            this.userOrGroupId = args.userOrGroupId;
        }
        if (args != null && args.nameGroup != null) {
            this.nameGroup = args.nameGroup;
        }
        if (args != null && args.descriptionGroup != null) {
            this.descriptionGroup = args.descriptionGroup;
        }
        if (args != null && args.userFirstName != null) {
            this.userFirstName = args.userFirstName;
        }
        if (args != null && args.userLastName != null) {
            this.userLastName = args.userLastName;
        }
        if (args != null && args.userMiddleName != null) {
            this.userMiddleName = args.userMiddleName;
        }
        if (args != null && args.attrs != null) {
            this.attrs = args.attrs;
        }
        if (args != null && args.deleteDate != null) {
            if (typeof args.deleteDate === "number") {
                this.deleteDate = new Int64(args.deleteDate);
            }
            else {
                this.deleteDate = args.deleteDate;
            }
        }
        if (args != null && args.avatarUrl != null) {
            this.avatarUrl = args.avatarUrl;
        }
        if (args != null && args.groupSelector != null) {
            this.groupSelector = args.groupSelector;
        }
        if (args != null && args.position != null) {
            this.position = args.position;
        }
        if (args != null && args.userCount != null) {
            this.userCount = args.userCount;
        }
        if (args != null && args.email != null) {
            this.email = args.email;
        }
        if (args != null && args.workPhone != null) {
            this.workPhone = args.workPhone;
        }
        if (args != null && args.haveAccess != null) {
            this.haveAccess = args.haveAccess;
        }
        if (args != null && args.scMask != null) {
            this.scMask = args.scMask;
        }
        if (args != null && args.employeeNumber != null) {
            this.employeeNumber = args.employeeNumber;
        }
        if (args != null && args.departments != null) {
            this.departments = args.departments;
        }
        if (args != null && args.fixed != null) {
            this.fixed = args.fixed;
        }
        if (args != null && args.endlessPassword != null) {
            this.endlessPassword = args.endlessPassword;
        }
        if (args != null && args.needChangePassword != null) {
            this.needChangePassword = args.needChangePassword;
        }
        if (args != null && args.accountIdGroup != null) {
            this.accountIdGroup = args.accountIdGroup;
        }
        if (args != null && args.userType != null) {
            this.userType = args.userType;
        }
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.ldapId != null) {
            this.ldapId = args.ldapId;
        }
        if (args != null && args.company != null) {
            this.company = args.company;
        }
        if (args != null && args.mobilePhone != null) {
            this.mobilePhone = args.mobilePhone;
        }
        if (args != null && args.favorite != null) {
            this.favorite = args.favorite;
        }
        if (args != null && args.remark != null) {
            this.remark = args.remark;
        }
        if (args != null && args.fixedExec != null) {
            this.fixedExec = args.fixedExec;
        }
        if (args != null && args.chiefId != null) {
            this.chiefId = args.chiefId;
        }
        if (args != null && args.nameGroupLoc != null) {
            this.nameGroupLoc = args.nameGroupLoc;
        }
        if (args != null && args.descriptionGroupLoc != null) {
            this.descriptionGroupLoc = args.descriptionGroupLoc;
        }
        if (args != null && args.preferredLang != null) {
            this.preferredLang = args.preferredLang;
        }
        if (args != null && args.uuid != null) {
            this.uuid = args.uuid;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("UserOrGroup");
        if (this.type != null) {
            output.writeFieldBegin("type", thrift.Thrift.Type.I32, 1);
            output.writeI32(this.type);
            output.writeFieldEnd();
        }
        if (this.userOrGroupId != null) {
            output.writeFieldBegin("userOrGroupId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.userOrGroupId);
            output.writeFieldEnd();
        }
        if (this.nameGroup != null) {
            output.writeFieldBegin("nameGroup", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.nameGroup);
            output.writeFieldEnd();
        }
        if (this.descriptionGroup != null) {
            output.writeFieldBegin("descriptionGroup", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.descriptionGroup);
            output.writeFieldEnd();
        }
        if (this.userFirstName != null) {
            output.writeFieldBegin("userFirstName", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.userFirstName);
            output.writeFieldEnd();
        }
        if (this.userLastName != null) {
            output.writeFieldBegin("userLastName", thrift.Thrift.Type.STRING, 6);
            output.writeString(this.userLastName);
            output.writeFieldEnd();
        }
        if (this.userMiddleName != null) {
            output.writeFieldBegin("userMiddleName", thrift.Thrift.Type.STRING, 7);
            output.writeString(this.userMiddleName);
            output.writeFieldEnd();
        }
        if (this.attrs != null) {
            output.writeFieldBegin("attrs", thrift.Thrift.Type.MAP, 8);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.attrs.size);
            this.attrs.forEach((value_1: string, key_1: string): void => {
                output.writeString(key_1);
                output.writeString(value_1);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.deleteDate != null) {
            output.writeFieldBegin("deleteDate", thrift.Thrift.Type.I64, 9);
            output.writeI64(this.deleteDate);
            output.writeFieldEnd();
        }
        if (this.avatarUrl != null) {
            output.writeFieldBegin("avatarUrl", thrift.Thrift.Type.STRING, 10);
            output.writeString(this.avatarUrl);
            output.writeFieldEnd();
        }
        if (this.groupSelector != null) {
            output.writeFieldBegin("groupSelector", thrift.Thrift.Type.I32, 11);
            output.writeI32(this.groupSelector);
            output.writeFieldEnd();
        }
        if (this.position != null) {
            output.writeFieldBegin("position", thrift.Thrift.Type.STRING, 12);
            output.writeString(this.position);
            output.writeFieldEnd();
        }
        if (this.userCount != null) {
            output.writeFieldBegin("userCount", thrift.Thrift.Type.I32, 13);
            output.writeI32(this.userCount);
            output.writeFieldEnd();
        }
        if (this.email != null) {
            output.writeFieldBegin("email", thrift.Thrift.Type.STRING, 14);
            output.writeString(this.email);
            output.writeFieldEnd();
        }
        if (this.workPhone != null) {
            output.writeFieldBegin("workPhone", thrift.Thrift.Type.STRING, 15);
            output.writeString(this.workPhone);
            output.writeFieldEnd();
        }
        if (this.haveAccess != null) {
            output.writeFieldBegin("haveAccess", thrift.Thrift.Type.BOOL, 16);
            output.writeBool(this.haveAccess);
            output.writeFieldEnd();
        }
        if (this.scMask != null) {
            output.writeFieldBegin("scMask", thrift.Thrift.Type.STRING, 17);
            output.writeString(this.scMask);
            output.writeFieldEnd();
        }
        if (this.employeeNumber != null) {
            output.writeFieldBegin("employeeNumber", thrift.Thrift.Type.STRING, 18);
            output.writeString(this.employeeNumber);
            output.writeFieldEnd();
        }
        if (this.departments != null) {
            output.writeFieldBegin("departments", thrift.Thrift.Type.LIST, 19);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.departments.length);
            this.departments.forEach((value_2: Department.Department): void => {
                value_2.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.fixed != null) {
            output.writeFieldBegin("fixed", thrift.Thrift.Type.BOOL, 20);
            output.writeBool(this.fixed);
            output.writeFieldEnd();
        }
        if (this.endlessPassword != null) {
            output.writeFieldBegin("endlessPassword", thrift.Thrift.Type.BOOL, 21);
            output.writeBool(this.endlessPassword);
            output.writeFieldEnd();
        }
        if (this.needChangePassword != null) {
            output.writeFieldBegin("needChangePassword", thrift.Thrift.Type.BOOL, 22);
            output.writeBool(this.needChangePassword);
            output.writeFieldEnd();
        }
        if (this.accountIdGroup != null) {
            output.writeFieldBegin("accountIdGroup", thrift.Thrift.Type.STRING, 23);
            output.writeString(this.accountIdGroup);
            output.writeFieldEnd();
        }
        if (this.userType != null) {
            output.writeFieldBegin("userType", thrift.Thrift.Type.I32, 24);
            output.writeI32(this.userType);
            output.writeFieldEnd();
        }
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 25);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.ldapId != null) {
            output.writeFieldBegin("ldapId", thrift.Thrift.Type.STRING, 26);
            output.writeString(this.ldapId);
            output.writeFieldEnd();
        }
        if (this.company != null) {
            output.writeFieldBegin("company", thrift.Thrift.Type.STRING, 27);
            output.writeString(this.company);
            output.writeFieldEnd();
        }
        if (this.mobilePhone != null) {
            output.writeFieldBegin("mobilePhone", thrift.Thrift.Type.STRING, 28);
            output.writeString(this.mobilePhone);
            output.writeFieldEnd();
        }
        if (this.favorite != null) {
            output.writeFieldBegin("favorite", thrift.Thrift.Type.BOOL, 29);
            output.writeBool(this.favorite);
            output.writeFieldEnd();
        }
        if (this.remark != null) {
            output.writeFieldBegin("remark", thrift.Thrift.Type.STRING, 30);
            output.writeString(this.remark);
            output.writeFieldEnd();
        }
        if (this.fixedExec != null) {
            output.writeFieldBegin("fixedExec", thrift.Thrift.Type.BOOL, 31);
            output.writeBool(this.fixedExec);
            output.writeFieldEnd();
        }
        if (this.chiefId != null) {
            output.writeFieldBegin("chiefId", thrift.Thrift.Type.STRING, 32);
            output.writeString(this.chiefId);
            output.writeFieldEnd();
        }
        if (this.nameGroupLoc != null) {
            output.writeFieldBegin("nameGroupLoc", thrift.Thrift.Type.MAP, 33);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.nameGroupLoc.size);
            this.nameGroupLoc.forEach((value_3: string, key_2: string): void => {
                output.writeString(key_2);
                output.writeString(value_3);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.descriptionGroupLoc != null) {
            output.writeFieldBegin("descriptionGroupLoc", thrift.Thrift.Type.MAP, 34);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.descriptionGroupLoc.size);
            this.descriptionGroupLoc.forEach((value_4: string, key_3: string): void => {
                output.writeString(key_3);
                output.writeString(value_4);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.preferredLang != null) {
            output.writeFieldBegin("preferredLang", thrift.Thrift.Type.STRING, 35);
            output.writeString(this.preferredLang);
            output.writeFieldEnd();
        }
        if (this.uuid != null) {
            output.writeFieldBegin("uuid", thrift.Thrift.Type.STRING, 36);
            output.writeString(this.uuid);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): UserOrGroup {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_5: UserOrGroupType.UserOrGroupType = input.readI32();
                        _args.type = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.userOrGroupId = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_7: string = input.readString();
                        _args.nameGroup = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_8: string = input.readString();
                        _args.descriptionGroup = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_9: string = input.readString();
                        _args.userFirstName = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_10: string = input.readString();
                        _args.userLastName = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_11: string = input.readString();
                        _args.userMiddleName = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_12: Map<string, string> = new Map<string, string>();
                        const metadata_1: thrift.TMap = input.readMapBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const key_4: string = input.readString();
                            const value_13: string = input.readString();
                            value_12.set(key_4, value_13);
                        }
                        input.readMapEnd();
                        _args.attrs = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_14: Int64 = input.readI64();
                        _args.deleteDate = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_15: string = input.readString();
                        _args.avatarUrl = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_16: GroupSelector.GroupSelector = input.readI32();
                        _args.groupSelector = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_17: string = input.readString();
                        _args.position = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_18: number = input.readI32();
                        _args.userCount = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_19: string = input.readString();
                        _args.email = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_20: string = input.readString();
                        _args.workPhone = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_21: boolean = input.readBool();
                        _args.haveAccess = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 17:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_22: string = input.readString();
                        _args.scMask = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 18:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_23: string = input.readString();
                        _args.employeeNumber = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 19:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_24: Array<Department.Department> = new Array<Department.Department>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_25: Department.Department = Department.Department.read(input);
                            value_24.push(value_25);
                        }
                        input.readListEnd();
                        _args.departments = value_24;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 20:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_26: boolean = input.readBool();
                        _args.fixed = value_26;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 21:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_27: boolean = input.readBool();
                        _args.endlessPassword = value_27;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 22:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_28: boolean = input.readBool();
                        _args.needChangePassword = value_28;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 23:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_29: string = input.readString();
                        _args.accountIdGroup = value_29;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 24:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_30: UserType.UserType = input.readI32();
                        _args.userType = value_30;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 25:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_31: string = input.readString();
                        _args.id = value_31;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 26:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_32: string = input.readString();
                        _args.ldapId = value_32;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 27:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_33: string = input.readString();
                        _args.company = value_33;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 28:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_34: string = input.readString();
                        _args.mobilePhone = value_34;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 29:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_35: boolean = input.readBool();
                        _args.favorite = value_35;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 30:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_36: string = input.readString();
                        _args.remark = value_36;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 31:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_37: boolean = input.readBool();
                        _args.fixedExec = value_37;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 32:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_38: string = input.readString();
                        _args.chiefId = value_38;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 33:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_39: Map<string, string> = new Map<string, string>();
                        const metadata_3: thrift.TMap = input.readMapBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const key_5: string = input.readString();
                            const value_40: string = input.readString();
                            value_39.set(key_5, value_40);
                        }
                        input.readMapEnd();
                        _args.nameGroupLoc = value_39;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 34:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_41: Map<string, string> = new Map<string, string>();
                        const metadata_4: thrift.TMap = input.readMapBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const key_6: string = input.readString();
                            const value_42: string = input.readString();
                            value_41.set(key_6, value_42);
                        }
                        input.readMapEnd();
                        _args.descriptionGroupLoc = value_41;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 35:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_43: string = input.readString();
                        _args.preferredLang = value_43;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 36:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_44: string = input.readString();
                        _args.uuid = value_44;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new UserOrGroup(_args);
    }
}

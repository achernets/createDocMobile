/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface IVotePermissionsArgs {
    canVote?: boolean;
    canChangeOwnDecision?: boolean;
    canChangeAnyDecision?: boolean;
    canVoteAny?: boolean;
    canMarkReported?: boolean;
    canMarkNotReported?: boolean;
}
export class VotePermissions {
    public canVote?: boolean;
    public canChangeOwnDecision?: boolean;
    public canChangeAnyDecision?: boolean;
    public canVoteAny?: boolean;
    public canMarkReported?: boolean;
    public canMarkNotReported?: boolean;
    constructor(args?: IVotePermissionsArgs) {
        if (args != null && args.canVote != null) {
            this.canVote = args.canVote;
        }
        if (args != null && args.canChangeOwnDecision != null) {
            this.canChangeOwnDecision = args.canChangeOwnDecision;
        }
        if (args != null && args.canChangeAnyDecision != null) {
            this.canChangeAnyDecision = args.canChangeAnyDecision;
        }
        if (args != null && args.canVoteAny != null) {
            this.canVoteAny = args.canVoteAny;
        }
        if (args != null && args.canMarkReported != null) {
            this.canMarkReported = args.canMarkReported;
        }
        if (args != null && args.canMarkNotReported != null) {
            this.canMarkNotReported = args.canMarkNotReported;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("VotePermissions");
        if (this.canVote != null) {
            output.writeFieldBegin("canVote", thrift.Thrift.Type.BOOL, 1);
            output.writeBool(this.canVote);
            output.writeFieldEnd();
        }
        if (this.canChangeOwnDecision != null) {
            output.writeFieldBegin("canChangeOwnDecision", thrift.Thrift.Type.BOOL, 2);
            output.writeBool(this.canChangeOwnDecision);
            output.writeFieldEnd();
        }
        if (this.canChangeAnyDecision != null) {
            output.writeFieldBegin("canChangeAnyDecision", thrift.Thrift.Type.BOOL, 3);
            output.writeBool(this.canChangeAnyDecision);
            output.writeFieldEnd();
        }
        if (this.canVoteAny != null) {
            output.writeFieldBegin("canVoteAny", thrift.Thrift.Type.BOOL, 4);
            output.writeBool(this.canVoteAny);
            output.writeFieldEnd();
        }
        if (this.canMarkReported != null) {
            output.writeFieldBegin("canMarkReported", thrift.Thrift.Type.BOOL, 5);
            output.writeBool(this.canMarkReported);
            output.writeFieldEnd();
        }
        if (this.canMarkNotReported != null) {
            output.writeFieldBegin("canMarkNotReported", thrift.Thrift.Type.BOOL, 6);
            output.writeBool(this.canMarkNotReported);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): VotePermissions {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_1: boolean = input.readBool();
                        _args.canVote = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_2: boolean = input.readBool();
                        _args.canChangeOwnDecision = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_3: boolean = input.readBool();
                        _args.canChangeAnyDecision = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_4: boolean = input.readBool();
                        _args.canVoteAny = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_5: boolean = input.readBool();
                        _args.canMarkReported = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_6: boolean = input.readBool();
                        _args.canMarkNotReported = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new VotePermissions(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as DocumentRelationInfo from "./DocumentRelationInfo";
import * as DocumentRelationLink from "./DocumentRelationLink";
export interface IDocumentRelationModelArgs {
    docId?: string;
    docRelInfoList?: Array<DocumentRelationInfo.DocumentRelationInfo>;
    docRelLinkList?: Array<DocumentRelationLink.DocumentRelationLink>;
}
export class DocumentRelationModel {
    public docId?: string;
    public docRelInfoList?: Array<DocumentRelationInfo.DocumentRelationInfo>;
    public docRelLinkList?: Array<DocumentRelationLink.DocumentRelationLink>;
    constructor(args?: IDocumentRelationModelArgs) {
        if (args != null && args.docId != null) {
            this.docId = args.docId;
        }
        if (args != null && args.docRelInfoList != null) {
            this.docRelInfoList = args.docRelInfoList;
        }
        if (args != null && args.docRelLinkList != null) {
            this.docRelLinkList = args.docRelLinkList;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("DocumentRelationModel");
        if (this.docId != null) {
            output.writeFieldBegin("docId", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.docId);
            output.writeFieldEnd();
        }
        if (this.docRelInfoList != null) {
            output.writeFieldBegin("docRelInfoList", thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.docRelInfoList.length);
            this.docRelInfoList.forEach((value_1: DocumentRelationInfo.DocumentRelationInfo): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.docRelLinkList != null) {
            output.writeFieldBegin("docRelLinkList", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.docRelLinkList.length);
            this.docRelLinkList.forEach((value_2: DocumentRelationLink.DocumentRelationLink): void => {
                value_2.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): DocumentRelationModel {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.docId = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_4: Array<DocumentRelationInfo.DocumentRelationInfo> = new Array<DocumentRelationInfo.DocumentRelationInfo>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_5: DocumentRelationInfo.DocumentRelationInfo = DocumentRelationInfo.DocumentRelationInfo.read(input);
                            value_4.push(value_5);
                        }
                        input.readListEnd();
                        _args.docRelInfoList = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_6: Array<DocumentRelationLink.DocumentRelationLink> = new Array<DocumentRelationLink.DocumentRelationLink>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_7: DocumentRelationLink.DocumentRelationLink = DocumentRelationLink.DocumentRelationLink.read(input);
                            value_6.push(value_7);
                        }
                        input.readListEnd();
                        _args.docRelLinkList = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new DocumentRelationModel(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface IDocumentPatternGroupArgs {
    id?: string;
    nameDocPatGroup?: string;
    descriptionDocPatGroup?: string;
    category?: string;
    enableWorkWithSC?: boolean;
    order?: number;
    nameDocPatGroupLoc?: Map<string, string>;
    descriptionDocPatGroupLoc?: Map<string, string>;
    categoryLoc?: Map<string, string>;
    hideInDocFilter?: boolean;
}
export class DocumentPatternGroup {
    public id?: string;
    public nameDocPatGroup?: string;
    public descriptionDocPatGroup?: string;
    public category?: string;
    public enableWorkWithSC?: boolean;
    public order?: number;
    public nameDocPatGroupLoc?: Map<string, string>;
    public descriptionDocPatGroupLoc?: Map<string, string>;
    public categoryLoc?: Map<string, string>;
    public hideInDocFilter?: boolean;
    constructor(args?: IDocumentPatternGroupArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.nameDocPatGroup != null) {
            this.nameDocPatGroup = args.nameDocPatGroup;
        }
        if (args != null && args.descriptionDocPatGroup != null) {
            this.descriptionDocPatGroup = args.descriptionDocPatGroup;
        }
        if (args != null && args.category != null) {
            this.category = args.category;
        }
        if (args != null && args.enableWorkWithSC != null) {
            this.enableWorkWithSC = args.enableWorkWithSC;
        }
        if (args != null && args.order != null) {
            this.order = args.order;
        }
        if (args != null && args.nameDocPatGroupLoc != null) {
            this.nameDocPatGroupLoc = args.nameDocPatGroupLoc;
        }
        if (args != null && args.descriptionDocPatGroupLoc != null) {
            this.descriptionDocPatGroupLoc = args.descriptionDocPatGroupLoc;
        }
        if (args != null && args.categoryLoc != null) {
            this.categoryLoc = args.categoryLoc;
        }
        if (args != null && args.hideInDocFilter != null) {
            this.hideInDocFilter = args.hideInDocFilter;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("DocumentPatternGroup");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.nameDocPatGroup != null) {
            output.writeFieldBegin("nameDocPatGroup", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.nameDocPatGroup);
            output.writeFieldEnd();
        }
        if (this.descriptionDocPatGroup != null) {
            output.writeFieldBegin("descriptionDocPatGroup", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.descriptionDocPatGroup);
            output.writeFieldEnd();
        }
        if (this.category != null) {
            output.writeFieldBegin("category", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.category);
            output.writeFieldEnd();
        }
        if (this.enableWorkWithSC != null) {
            output.writeFieldBegin("enableWorkWithSC", thrift.Thrift.Type.BOOL, 5);
            output.writeBool(this.enableWorkWithSC);
            output.writeFieldEnd();
        }
        if (this.order != null) {
            output.writeFieldBegin("order", thrift.Thrift.Type.I32, 6);
            output.writeI32(this.order);
            output.writeFieldEnd();
        }
        if (this.nameDocPatGroupLoc != null) {
            output.writeFieldBegin("nameDocPatGroupLoc", thrift.Thrift.Type.MAP, 7);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.nameDocPatGroupLoc.size);
            this.nameDocPatGroupLoc.forEach((value_1: string, key_1: string): void => {
                output.writeString(key_1);
                output.writeString(value_1);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.descriptionDocPatGroupLoc != null) {
            output.writeFieldBegin("descriptionDocPatGroupLoc", thrift.Thrift.Type.MAP, 8);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.descriptionDocPatGroupLoc.size);
            this.descriptionDocPatGroupLoc.forEach((value_2: string, key_2: string): void => {
                output.writeString(key_2);
                output.writeString(value_2);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.categoryLoc != null) {
            output.writeFieldBegin("categoryLoc", thrift.Thrift.Type.MAP, 9);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.categoryLoc.size);
            this.categoryLoc.forEach((value_3: string, key_3: string): void => {
                output.writeString(key_3);
                output.writeString(value_3);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.hideInDocFilter != null) {
            output.writeFieldBegin("hideInDocFilter", thrift.Thrift.Type.BOOL, 10);
            output.writeBool(this.hideInDocFilter);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): DocumentPatternGroup {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.id = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.nameDocPatGroup = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.descriptionDocPatGroup = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_7: string = input.readString();
                        _args.category = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_8: boolean = input.readBool();
                        _args.enableWorkWithSC = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_9: number = input.readI32();
                        _args.order = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_10: Map<string, string> = new Map<string, string>();
                        const metadata_1: thrift.TMap = input.readMapBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const key_4: string = input.readString();
                            const value_11: string = input.readString();
                            value_10.set(key_4, value_11);
                        }
                        input.readMapEnd();
                        _args.nameDocPatGroupLoc = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_12: Map<string, string> = new Map<string, string>();
                        const metadata_2: thrift.TMap = input.readMapBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const key_5: string = input.readString();
                            const value_13: string = input.readString();
                            value_12.set(key_5, value_13);
                        }
                        input.readMapEnd();
                        _args.descriptionDocPatGroupLoc = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_14: Map<string, string> = new Map<string, string>();
                        const metadata_3: thrift.TMap = input.readMapBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const key_6: string = input.readString();
                            const value_15: string = input.readString();
                            value_14.set(key_6, value_15);
                        }
                        input.readMapEnd();
                        _args.categoryLoc = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_16: boolean = input.readBool();
                        _args.hideInDocFilter = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new DocumentPatternGroup(_args);
    }
}

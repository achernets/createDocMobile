/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as ChangeLogObjectType from "./ChangeLogObjectType";
import * as ChangeLogActionType from "./ChangeLogActionType";
import * as ChangeLogDetail from "./ChangeLogDetail";
export interface IChangeLogArgs {
    identifier?: string;
    logName?: string;
    objType?: ChangeLogObjectType.ChangeLogObjectType;
    actionType?: ChangeLogActionType.ChangeLogActionType;
    logDetails?: Array<ChangeLogDetail.ChangeLogDetail>;
}
export class ChangeLog {
    public identifier?: string;
    public logName?: string;
    public objType?: ChangeLogObjectType.ChangeLogObjectType;
    public actionType?: ChangeLogActionType.ChangeLogActionType;
    public logDetails?: Array<ChangeLogDetail.ChangeLogDetail>;
    constructor(args?: IChangeLogArgs) {
        if (args != null && args.identifier != null) {
            this.identifier = args.identifier;
        }
        if (args != null && args.logName != null) {
            this.logName = args.logName;
        }
        if (args != null && args.objType != null) {
            this.objType = args.objType;
        }
        if (args != null && args.actionType != null) {
            this.actionType = args.actionType;
        }
        if (args != null && args.logDetails != null) {
            this.logDetails = args.logDetails;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ChangeLog");
        if (this.identifier != null) {
            output.writeFieldBegin("identifier", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.identifier);
            output.writeFieldEnd();
        }
        if (this.logName != null) {
            output.writeFieldBegin("logName", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.logName);
            output.writeFieldEnd();
        }
        if (this.objType != null) {
            output.writeFieldBegin("objType", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.objType);
            output.writeFieldEnd();
        }
        if (this.actionType != null) {
            output.writeFieldBegin("actionType", thrift.Thrift.Type.I32, 4);
            output.writeI32(this.actionType);
            output.writeFieldEnd();
        }
        if (this.logDetails != null) {
            output.writeFieldBegin("logDetails", thrift.Thrift.Type.LIST, 5);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.logDetails.length);
            this.logDetails.forEach((value_1: ChangeLogDetail.ChangeLogDetail): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ChangeLog {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.identifier = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.logName = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_4: ChangeLogObjectType.ChangeLogObjectType = input.readI32();
                        _args.objType = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_5: ChangeLogActionType.ChangeLogActionType = input.readI32();
                        _args.actionType = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_6: Array<ChangeLogDetail.ChangeLogDetail> = new Array<ChangeLogDetail.ChangeLogDetail>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_7: ChangeLogDetail.ChangeLogDetail = ChangeLogDetail.ChangeLogDetail.read(input);
                            value_6.push(value_7);
                        }
                        input.readListEnd();
                        _args.logDetails = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ChangeLog(_args);
    }
}

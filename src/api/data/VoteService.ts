/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as __ROOT_NAMESPACE__ from "./";
import * as VoteSettings from "./VoteSettings";
import * as VoteStatus from "./VoteStatus";
import * as Vote from "./Vote";
import * as VoteUserAnswer from "./VoteUserAnswer";
export interface IGetVoteSettingsArgsArgs {
    token: string;
    voteId: string;
}
export class GetVoteSettingsArgs {
    public token: string;
    public voteId: string;
    constructor(args: IGetVoteSettingsArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.voteId != null) {
            this.voteId = args.voteId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[voteId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetVoteSettingsArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.voteId != null) {
            output.writeFieldBegin("voteId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.voteId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetVoteSettingsArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.token = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.voteId = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.voteId !== undefined) {
            return new GetVoteSettingsArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetVoteSettingsArgs from input");
        }
    }
}
export interface IUpdateVoteSettingsArgsArgs {
    token: string;
    voteSettings: VoteSettings.VoteSettings;
}
export class UpdateVoteSettingsArgs {
    public token: string;
    public voteSettings: VoteSettings.VoteSettings;
    constructor(args: IUpdateVoteSettingsArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.voteSettings != null) {
            this.voteSettings = args.voteSettings;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[voteSettings] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("UpdateVoteSettingsArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.voteSettings != null) {
            output.writeFieldBegin("voteSettings", thrift.Thrift.Type.STRUCT, 2);
            this.voteSettings.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): UpdateVoteSettingsArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.token = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_4: VoteSettings.VoteSettings = VoteSettings.VoteSettings.read(input);
                        _args.voteSettings = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.voteSettings !== undefined) {
            return new UpdateVoteSettingsArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read UpdateVoteSettingsArgs from input");
        }
    }
}
export interface IChangeVoteStatusArgsArgs {
    token: string;
    voteId: string;
    voteStatus: VoteStatus.VoteStatus;
}
export class ChangeVoteStatusArgs {
    public token: string;
    public voteId: string;
    public voteStatus: VoteStatus.VoteStatus;
    constructor(args: IChangeVoteStatusArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.voteId != null) {
            this.voteId = args.voteId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[voteId] is unset!");
        }
        if (args != null && args.voteStatus != null) {
            this.voteStatus = args.voteStatus;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[voteStatus] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ChangeVoteStatusArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.voteId != null) {
            output.writeFieldBegin("voteId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.voteId);
            output.writeFieldEnd();
        }
        if (this.voteStatus != null) {
            output.writeFieldBegin("voteStatus", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.voteStatus);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ChangeVoteStatusArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.token = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.voteId = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_7: VoteStatus.VoteStatus = input.readI32();
                        _args.voteStatus = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.voteId !== undefined && _args.voteStatus !== undefined) {
            return new ChangeVoteStatusArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read ChangeVoteStatusArgs from input");
        }
    }
}
export interface IGetFullVoteInfoArgsArgs {
    token: string;
    voteId: string;
}
export class GetFullVoteInfoArgs {
    public token: string;
    public voteId: string;
    constructor(args: IGetFullVoteInfoArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.voteId != null) {
            this.voteId = args.voteId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[voteId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetFullVoteInfoArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.voteId != null) {
            output.writeFieldBegin("voteId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.voteId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetFullVoteInfoArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_8: string = input.readString();
                        _args.token = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_9: string = input.readString();
                        _args.voteId = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.voteId !== undefined) {
            return new GetFullVoteInfoArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetFullVoteInfoArgs from input");
        }
    }
}
export interface IWriteVoteUserResponseArgsArgs {
    token: string;
    voteId: string;
    voteAnswer: VoteUserAnswer.VoteUserAnswer;
}
export class WriteVoteUserResponseArgs {
    public token: string;
    public voteId: string;
    public voteAnswer: VoteUserAnswer.VoteUserAnswer;
    constructor(args: IWriteVoteUserResponseArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.voteId != null) {
            this.voteId = args.voteId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[voteId] is unset!");
        }
        if (args != null && args.voteAnswer != null) {
            this.voteAnswer = args.voteAnswer;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[voteAnswer] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("WriteVoteUserResponseArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.voteId != null) {
            output.writeFieldBegin("voteId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.voteId);
            output.writeFieldEnd();
        }
        if (this.voteAnswer != null) {
            output.writeFieldBegin("voteAnswer", thrift.Thrift.Type.STRUCT, 3);
            this.voteAnswer.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): WriteVoteUserResponseArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_10: string = input.readString();
                        _args.token = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_11: string = input.readString();
                        _args.voteId = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_12: VoteUserAnswer.VoteUserAnswer = VoteUserAnswer.VoteUserAnswer.read(input);
                        _args.voteAnswer = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.voteId !== undefined && _args.voteAnswer !== undefined) {
            return new WriteVoteUserResponseArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read WriteVoteUserResponseArgs from input");
        }
    }
}
export interface IWriteVoteUserResponsesBySecretaryArgsArgs {
    token: string;
    voteId: string;
    voteAnswers: Array<VoteUserAnswer.VoteUserAnswer>;
}
export class WriteVoteUserResponsesBySecretaryArgs {
    public token: string;
    public voteId: string;
    public voteAnswers: Array<VoteUserAnswer.VoteUserAnswer>;
    constructor(args: IWriteVoteUserResponsesBySecretaryArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.voteId != null) {
            this.voteId = args.voteId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[voteId] is unset!");
        }
        if (args != null && args.voteAnswers != null) {
            this.voteAnswers = args.voteAnswers;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[voteAnswers] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("WriteVoteUserResponsesBySecretaryArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.voteId != null) {
            output.writeFieldBegin("voteId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.voteId);
            output.writeFieldEnd();
        }
        if (this.voteAnswers != null) {
            output.writeFieldBegin("voteAnswers", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.voteAnswers.length);
            this.voteAnswers.forEach((value_13: VoteUserAnswer.VoteUserAnswer): void => {
                value_13.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): WriteVoteUserResponsesBySecretaryArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_14: string = input.readString();
                        _args.token = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_15: string = input.readString();
                        _args.voteId = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_16: Array<VoteUserAnswer.VoteUserAnswer> = new Array<VoteUserAnswer.VoteUserAnswer>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_17: VoteUserAnswer.VoteUserAnswer = VoteUserAnswer.VoteUserAnswer.read(input);
                            value_16.push(value_17);
                        }
                        input.readListEnd();
                        _args.voteAnswers = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.voteId !== undefined && _args.voteAnswers !== undefined) {
            return new WriteVoteUserResponsesBySecretaryArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read WriteVoteUserResponsesBySecretaryArgs from input");
        }
    }
}
export interface IPrepareVoteForTestArgsArgs {
    token: string;
    voteId: string;
}
export class PrepareVoteForTestArgs {
    public token: string;
    public voteId: string;
    constructor(args: IPrepareVoteForTestArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.voteId != null) {
            this.voteId = args.voteId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[voteId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("PrepareVoteForTestArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.voteId != null) {
            output.writeFieldBegin("voteId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.voteId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): PrepareVoteForTestArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_18: string = input.readString();
                        _args.token = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_19: string = input.readString();
                        _args.voteId = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.voteId !== undefined) {
            return new PrepareVoteForTestArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read PrepareVoteForTestArgs from input");
        }
    }
}
export interface IRestartVoteArgsArgs {
    token: string;
    voteId: string;
}
export class RestartVoteArgs {
    public token: string;
    public voteId: string;
    constructor(args: IRestartVoteArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.voteId != null) {
            this.voteId = args.voteId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[voteId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RestartVoteArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.voteId != null) {
            output.writeFieldBegin("voteId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.voteId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RestartVoteArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_20: string = input.readString();
                        _args.token = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_21: string = input.readString();
                        _args.voteId = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.voteId !== undefined) {
            return new RestartVoteArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read RestartVoteArgs from input");
        }
    }
}
export interface IGetVoteHistoryArgsArgs {
    token: string;
    voteId: string;
    userId: string;
}
export class GetVoteHistoryArgs {
    public token: string;
    public voteId: string;
    public userId: string;
    constructor(args: IGetVoteHistoryArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.voteId != null) {
            this.voteId = args.voteId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[voteId] is unset!");
        }
        if (args != null && args.userId != null) {
            this.userId = args.userId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[userId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetVoteHistoryArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.voteId != null) {
            output.writeFieldBegin("voteId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.voteId);
            output.writeFieldEnd();
        }
        if (this.userId != null) {
            output.writeFieldBegin("userId", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.userId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetVoteHistoryArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_22: string = input.readString();
                        _args.token = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_23: string = input.readString();
                        _args.voteId = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_24: string = input.readString();
                        _args.userId = value_24;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.voteId !== undefined && _args.userId !== undefined) {
            return new GetVoteHistoryArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetVoteHistoryArgs from input");
        }
    }
}
export interface IGetVoteSettingsResultArgs {
    success?: VoteSettings.VoteSettings;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetVoteSettingsResult {
    public success?: VoteSettings.VoteSettings;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetVoteSettingsResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetVoteSettingsResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetVoteSettingsResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_25: VoteSettings.VoteSettings = VoteSettings.VoteSettings.read(input);
                        _args.success = value_25;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_26: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_26;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_27: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_27;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetVoteSettingsResult(_args);
    }
}
export interface IUpdateVoteSettingsResultArgs {
    success?: VoteSettings.VoteSettings;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class UpdateVoteSettingsResult {
    public success?: VoteSettings.VoteSettings;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IUpdateVoteSettingsResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("UpdateVoteSettingsResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): UpdateVoteSettingsResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_28: VoteSettings.VoteSettings = VoteSettings.VoteSettings.read(input);
                        _args.success = value_28;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_29: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_29;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_30: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_30;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new UpdateVoteSettingsResult(_args);
    }
}
export interface IChangeVoteStatusResultArgs {
    success?: Vote.Vote;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class ChangeVoteStatusResult {
    public success?: Vote.Vote;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IChangeVoteStatusResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ChangeVoteStatusResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ChangeVoteStatusResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_31: Vote.Vote = Vote.Vote.read(input);
                        _args.success = value_31;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_32: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_32;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_33: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_33;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ChangeVoteStatusResult(_args);
    }
}
export interface IGetFullVoteInfoResultArgs {
    success?: Vote.Vote;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetFullVoteInfoResult {
    public success?: Vote.Vote;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetFullVoteInfoResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetFullVoteInfoResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetFullVoteInfoResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_34: Vote.Vote = Vote.Vote.read(input);
                        _args.success = value_34;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_35: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_35;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_36: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_36;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetFullVoteInfoResult(_args);
    }
}
export interface IWriteVoteUserResponseResultArgs {
    success?: VoteUserAnswer.VoteUserAnswer;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class WriteVoteUserResponseResult {
    public success?: VoteUserAnswer.VoteUserAnswer;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IWriteVoteUserResponseResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("WriteVoteUserResponseResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): WriteVoteUserResponseResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_37: VoteUserAnswer.VoteUserAnswer = VoteUserAnswer.VoteUserAnswer.read(input);
                        _args.success = value_37;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_38: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_38;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_39: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_39;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new WriteVoteUserResponseResult(_args);
    }
}
export interface IWriteVoteUserResponsesBySecretaryResultArgs {
    success?: Array<VoteUserAnswer.VoteUserAnswer>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class WriteVoteUserResponsesBySecretaryResult {
    public success?: Array<VoteUserAnswer.VoteUserAnswer>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IWriteVoteUserResponsesBySecretaryResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("WriteVoteUserResponsesBySecretaryResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_40: VoteUserAnswer.VoteUserAnswer): void => {
                value_40.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): WriteVoteUserResponsesBySecretaryResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_41: Array<VoteUserAnswer.VoteUserAnswer> = new Array<VoteUserAnswer.VoteUserAnswer>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_42: VoteUserAnswer.VoteUserAnswer = VoteUserAnswer.VoteUserAnswer.read(input);
                            value_41.push(value_42);
                        }
                        input.readListEnd();
                        _args.success = value_41;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_43: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_43;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_44: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_44;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new WriteVoteUserResponsesBySecretaryResult(_args);
    }
}
export interface IPrepareVoteForTestResultArgs {
    success?: boolean;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class PrepareVoteForTestResult {
    public success?: boolean;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IPrepareVoteForTestResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("PrepareVoteForTestResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): PrepareVoteForTestResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_45: boolean = input.readBool();
                        _args.success = value_45;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_46: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_46;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_47: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_47;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new PrepareVoteForTestResult(_args);
    }
}
export interface IRestartVoteResultArgs {
    success?: Vote.Vote;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class RestartVoteResult {
    public success?: Vote.Vote;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IRestartVoteResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RestartVoteResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RestartVoteResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_48: Vote.Vote = Vote.Vote.read(input);
                        _args.success = value_48;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_49: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_49;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_50: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_50;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new RestartVoteResult(_args);
    }
}
export interface IGetVoteHistoryResultArgs {
    success?: Array<VoteUserAnswer.VoteUserAnswer>;
    validError?: __ROOT_NAMESPACE__.PreconditionException;
    error?: __ROOT_NAMESPACE__.ServerException;
}
export class GetVoteHistoryResult {
    public success?: Array<VoteUserAnswer.VoteUserAnswer>;
    public validError?: __ROOT_NAMESPACE__.PreconditionException;
    public error?: __ROOT_NAMESPACE__.ServerException;
    constructor(args?: IGetVoteHistoryResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetVoteHistoryResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_51: VoteUserAnswer.VoteUserAnswer): void => {
                value_51.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetVoteHistoryResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_52: Array<VoteUserAnswer.VoteUserAnswer> = new Array<VoteUserAnswer.VoteUserAnswer>();
                        const metadata_3: thrift.TList = input.readListBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_53: VoteUserAnswer.VoteUserAnswer = VoteUserAnswer.VoteUserAnswer.read(input);
                            value_52.push(value_53);
                        }
                        input.readListEnd();
                        _args.success = value_52;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_54: __ROOT_NAMESPACE__.PreconditionException = __ROOT_NAMESPACE__.PreconditionException.read(input);
                        _args.validError = value_54;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_55: __ROOT_NAMESPACE__.ServerException = __ROOT_NAMESPACE__.ServerException.read(input);
                        _args.error = value_55;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetVoteHistoryResult(_args);
    }
}
export class Client {
    public _seqid: number;
    public _reqs: {
        [name: number]: (err: Error | object | undefined, val?: any) => void;
    };
    public output: thrift.TTransport;
    public protocol: new (trans: thrift.TTransport) => thrift.TProtocol;
    constructor(output: thrift.TTransport, protocol: new (trans: thrift.TTransport) => thrift.TProtocol) {
        this._seqid = 0;
        this._reqs = {};
        this.output = output;
        this.protocol = protocol;
    }
    public incrementSeqId(): number {
        return this._seqid += 1;
    }
    public getVoteSettings(token: string, voteId: string): Promise<VoteSettings.VoteSettings> {
        const requestId: number = this.incrementSeqId();
        return new Promise<VoteSettings.VoteSettings>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getVoteSettings(token, voteId, requestId);
        });
    }
    public updateVoteSettings(token: string, voteSettings: VoteSettings.VoteSettings): Promise<VoteSettings.VoteSettings> {
        const requestId: number = this.incrementSeqId();
        return new Promise<VoteSettings.VoteSettings>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_updateVoteSettings(token, voteSettings, requestId);
        });
    }
    public changeVoteStatus(token: string, voteId: string, voteStatus: VoteStatus.VoteStatus): Promise<Vote.Vote> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Vote.Vote>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_changeVoteStatus(token, voteId, voteStatus, requestId);
        });
    }
    public getFullVoteInfo(token: string, voteId: string): Promise<Vote.Vote> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Vote.Vote>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getFullVoteInfo(token, voteId, requestId);
        });
    }
    public writeVoteUserResponse(token: string, voteId: string, voteAnswer: VoteUserAnswer.VoteUserAnswer): Promise<VoteUserAnswer.VoteUserAnswer> {
        const requestId: number = this.incrementSeqId();
        return new Promise<VoteUserAnswer.VoteUserAnswer>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_writeVoteUserResponse(token, voteId, voteAnswer, requestId);
        });
    }
    public writeVoteUserResponsesBySecretary(token: string, voteId: string, voteAnswers: Array<VoteUserAnswer.VoteUserAnswer>): Promise<Array<VoteUserAnswer.VoteUserAnswer>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<VoteUserAnswer.VoteUserAnswer>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_writeVoteUserResponsesBySecretary(token, voteId, voteAnswers, requestId);
        });
    }
    public prepareVoteForTest(token: string, voteId: string): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_prepareVoteForTest(token, voteId, requestId);
        });
    }
    public restartVote(token: string, voteId: string): Promise<Vote.Vote> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Vote.Vote>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_restartVote(token, voteId, requestId);
        });
    }
    public getVoteHistory(token: string, voteId: string, userId: string): Promise<Array<VoteUserAnswer.VoteUserAnswer>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<VoteUserAnswer.VoteUserAnswer>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getVoteHistory(token, voteId, userId, requestId);
        });
    }
    public send_getVoteSettings(token: string, voteId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getVoteSettings", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetVoteSettingsArgs = new GetVoteSettingsArgs({ token, voteId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_updateVoteSettings(token: string, voteSettings: VoteSettings.VoteSettings, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("updateVoteSettings", thrift.Thrift.MessageType.CALL, requestId);
        const args: UpdateVoteSettingsArgs = new UpdateVoteSettingsArgs({ token, voteSettings });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_changeVoteStatus(token: string, voteId: string, voteStatus: VoteStatus.VoteStatus, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("changeVoteStatus", thrift.Thrift.MessageType.CALL, requestId);
        const args: ChangeVoteStatusArgs = new ChangeVoteStatusArgs({ token, voteId, voteStatus });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getFullVoteInfo(token: string, voteId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getFullVoteInfo", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetFullVoteInfoArgs = new GetFullVoteInfoArgs({ token, voteId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_writeVoteUserResponse(token: string, voteId: string, voteAnswer: VoteUserAnswer.VoteUserAnswer, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("writeVoteUserResponse", thrift.Thrift.MessageType.CALL, requestId);
        const args: WriteVoteUserResponseArgs = new WriteVoteUserResponseArgs({ token, voteId, voteAnswer });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_writeVoteUserResponsesBySecretary(token: string, voteId: string, voteAnswers: Array<VoteUserAnswer.VoteUserAnswer>, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("writeVoteUserResponsesBySecretary", thrift.Thrift.MessageType.CALL, requestId);
        const args: WriteVoteUserResponsesBySecretaryArgs = new WriteVoteUserResponsesBySecretaryArgs({ token, voteId, voteAnswers });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_prepareVoteForTest(token: string, voteId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("prepareVoteForTest", thrift.Thrift.MessageType.CALL, requestId);
        const args: PrepareVoteForTestArgs = new PrepareVoteForTestArgs({ token, voteId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_restartVote(token: string, voteId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("restartVote", thrift.Thrift.MessageType.CALL, requestId);
        const args: RestartVoteArgs = new RestartVoteArgs({ token, voteId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getVoteHistory(token: string, voteId: string, userId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getVoteHistory", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetVoteHistoryArgs = new GetVoteHistoryArgs({ token, voteId, userId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public recv_getVoteSettings(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetVoteSettingsResult = GetVoteSettingsResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getVoteSettings failed: unknown result"));
                }
            }
        }
    }
    public recv_updateVoteSettings(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: UpdateVoteSettingsResult = UpdateVoteSettingsResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "updateVoteSettings failed: unknown result"));
                }
            }
        }
    }
    public recv_changeVoteStatus(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: ChangeVoteStatusResult = ChangeVoteStatusResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "changeVoteStatus failed: unknown result"));
                }
            }
        }
    }
    public recv_getFullVoteInfo(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetFullVoteInfoResult = GetFullVoteInfoResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getFullVoteInfo failed: unknown result"));
                }
            }
        }
    }
    public recv_writeVoteUserResponse(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: WriteVoteUserResponseResult = WriteVoteUserResponseResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "writeVoteUserResponse failed: unknown result"));
                }
            }
        }
    }
    public recv_writeVoteUserResponsesBySecretary(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: WriteVoteUserResponsesBySecretaryResult = WriteVoteUserResponsesBySecretaryResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "writeVoteUserResponsesBySecretary failed: unknown result"));
                }
            }
        }
    }
    public recv_prepareVoteForTest(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: PrepareVoteForTestResult = PrepareVoteForTestResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "prepareVoteForTest failed: unknown result"));
                }
            }
        }
    }
    public recv_restartVote(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: RestartVoteResult = RestartVoteResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "restartVote failed: unknown result"));
                }
            }
        }
    }
    public recv_getVoteHistory(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetVoteHistoryResult = GetVoteHistoryResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getVoteHistory failed: unknown result"));
                }
            }
        }
    }
}
export interface IHandler {
    getVoteSettings(token: string, voteId: string): VoteSettings.VoteSettings | Promise<VoteSettings.VoteSettings>;
    updateVoteSettings(token: string, voteSettings: VoteSettings.VoteSettings): VoteSettings.VoteSettings | Promise<VoteSettings.VoteSettings>;
    changeVoteStatus(token: string, voteId: string, voteStatus: VoteStatus.VoteStatus): Vote.Vote | Promise<Vote.Vote>;
    getFullVoteInfo(token: string, voteId: string): Vote.Vote | Promise<Vote.Vote>;
    writeVoteUserResponse(token: string, voteId: string, voteAnswer: VoteUserAnswer.VoteUserAnswer): VoteUserAnswer.VoteUserAnswer | Promise<VoteUserAnswer.VoteUserAnswer>;
    writeVoteUserResponsesBySecretary(token: string, voteId: string, voteAnswers: Array<VoteUserAnswer.VoteUserAnswer>): Array<VoteUserAnswer.VoteUserAnswer> | Promise<Array<VoteUserAnswer.VoteUserAnswer>>;
    prepareVoteForTest(token: string, voteId: string): boolean | Promise<boolean>;
    restartVote(token: string, voteId: string): Vote.Vote | Promise<Vote.Vote>;
    getVoteHistory(token: string, voteId: string, userId: string): Array<VoteUserAnswer.VoteUserAnswer> | Promise<Array<VoteUserAnswer.VoteUserAnswer>>;
}
export class Processor {
    public _handler: IHandler;
    constructor(handler: IHandler) {
        this._handler = handler;
    }
    public process(input: thrift.TProtocol, output: thrift.TProtocol): void {
        const metadata: thrift.TMessage = input.readMessageBegin();
        const fname: string = metadata.fname;
        const requestId: number = metadata.rseqid;
        const methodName: string = "process_" + fname;
        switch (methodName) {
            case "process_getVoteSettings": {
                this.process_getVoteSettings(requestId, input, output);
                return;
            }
            case "process_updateVoteSettings": {
                this.process_updateVoteSettings(requestId, input, output);
                return;
            }
            case "process_changeVoteStatus": {
                this.process_changeVoteStatus(requestId, input, output);
                return;
            }
            case "process_getFullVoteInfo": {
                this.process_getFullVoteInfo(requestId, input, output);
                return;
            }
            case "process_writeVoteUserResponse": {
                this.process_writeVoteUserResponse(requestId, input, output);
                return;
            }
            case "process_writeVoteUserResponsesBySecretary": {
                this.process_writeVoteUserResponsesBySecretary(requestId, input, output);
                return;
            }
            case "process_prepareVoteForTest": {
                this.process_prepareVoteForTest(requestId, input, output);
                return;
            }
            case "process_restartVote": {
                this.process_restartVote(requestId, input, output);
                return;
            }
            case "process_getVoteHistory": {
                this.process_getVoteHistory(requestId, input, output);
                return;
            }
            default: {
                input.skip(thrift.Thrift.Type.STRUCT);
                input.readMessageEnd();
                const errMessage = "Unknown function " + fname;
                const err = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN_METHOD, errMessage);
                output.writeMessageBegin(fname, thrift.Thrift.MessageType.EXCEPTION, requestId);
                err.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        }
    }
    public process_getVoteSettings(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<VoteSettings.VoteSettings>((resolve, reject): void => {
            try {
                const args: GetVoteSettingsArgs = GetVoteSettingsArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getVoteSettings(args.token, args.voteId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: VoteSettings.VoteSettings): void => {
            const result: GetVoteSettingsResult = new GetVoteSettingsResult({ success: data });
            output.writeMessageBegin("getVoteSettings", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetVoteSettingsResult = new GetVoteSettingsResult({ validError: err });
                output.writeMessageBegin("getVoteSettings", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetVoteSettingsResult = new GetVoteSettingsResult({ error: err });
                output.writeMessageBegin("getVoteSettings", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getVoteSettings", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_updateVoteSettings(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<VoteSettings.VoteSettings>((resolve, reject): void => {
            try {
                const args: UpdateVoteSettingsArgs = UpdateVoteSettingsArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.updateVoteSettings(args.token, args.voteSettings));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: VoteSettings.VoteSettings): void => {
            const result: UpdateVoteSettingsResult = new UpdateVoteSettingsResult({ success: data });
            output.writeMessageBegin("updateVoteSettings", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: UpdateVoteSettingsResult = new UpdateVoteSettingsResult({ validError: err });
                output.writeMessageBegin("updateVoteSettings", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: UpdateVoteSettingsResult = new UpdateVoteSettingsResult({ error: err });
                output.writeMessageBegin("updateVoteSettings", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("updateVoteSettings", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_changeVoteStatus(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Vote.Vote>((resolve, reject): void => {
            try {
                const args: ChangeVoteStatusArgs = ChangeVoteStatusArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.changeVoteStatus(args.token, args.voteId, args.voteStatus));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Vote.Vote): void => {
            const result: ChangeVoteStatusResult = new ChangeVoteStatusResult({ success: data });
            output.writeMessageBegin("changeVoteStatus", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: ChangeVoteStatusResult = new ChangeVoteStatusResult({ validError: err });
                output.writeMessageBegin("changeVoteStatus", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: ChangeVoteStatusResult = new ChangeVoteStatusResult({ error: err });
                output.writeMessageBegin("changeVoteStatus", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("changeVoteStatus", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getFullVoteInfo(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Vote.Vote>((resolve, reject): void => {
            try {
                const args: GetFullVoteInfoArgs = GetFullVoteInfoArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getFullVoteInfo(args.token, args.voteId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Vote.Vote): void => {
            const result: GetFullVoteInfoResult = new GetFullVoteInfoResult({ success: data });
            output.writeMessageBegin("getFullVoteInfo", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetFullVoteInfoResult = new GetFullVoteInfoResult({ validError: err });
                output.writeMessageBegin("getFullVoteInfo", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetFullVoteInfoResult = new GetFullVoteInfoResult({ error: err });
                output.writeMessageBegin("getFullVoteInfo", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getFullVoteInfo", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_writeVoteUserResponse(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<VoteUserAnswer.VoteUserAnswer>((resolve, reject): void => {
            try {
                const args: WriteVoteUserResponseArgs = WriteVoteUserResponseArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.writeVoteUserResponse(args.token, args.voteId, args.voteAnswer));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: VoteUserAnswer.VoteUserAnswer): void => {
            const result: WriteVoteUserResponseResult = new WriteVoteUserResponseResult({ success: data });
            output.writeMessageBegin("writeVoteUserResponse", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: WriteVoteUserResponseResult = new WriteVoteUserResponseResult({ validError: err });
                output.writeMessageBegin("writeVoteUserResponse", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: WriteVoteUserResponseResult = new WriteVoteUserResponseResult({ error: err });
                output.writeMessageBegin("writeVoteUserResponse", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("writeVoteUserResponse", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_writeVoteUserResponsesBySecretary(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<VoteUserAnswer.VoteUserAnswer>>((resolve, reject): void => {
            try {
                const args: WriteVoteUserResponsesBySecretaryArgs = WriteVoteUserResponsesBySecretaryArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.writeVoteUserResponsesBySecretary(args.token, args.voteId, args.voteAnswers));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<VoteUserAnswer.VoteUserAnswer>): void => {
            const result: WriteVoteUserResponsesBySecretaryResult = new WriteVoteUserResponsesBySecretaryResult({ success: data });
            output.writeMessageBegin("writeVoteUserResponsesBySecretary", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: WriteVoteUserResponsesBySecretaryResult = new WriteVoteUserResponsesBySecretaryResult({ validError: err });
                output.writeMessageBegin("writeVoteUserResponsesBySecretary", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: WriteVoteUserResponsesBySecretaryResult = new WriteVoteUserResponsesBySecretaryResult({ error: err });
                output.writeMessageBegin("writeVoteUserResponsesBySecretary", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("writeVoteUserResponsesBySecretary", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_prepareVoteForTest(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: PrepareVoteForTestArgs = PrepareVoteForTestArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.prepareVoteForTest(args.token, args.voteId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: PrepareVoteForTestResult = new PrepareVoteForTestResult({ success: data });
            output.writeMessageBegin("prepareVoteForTest", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: PrepareVoteForTestResult = new PrepareVoteForTestResult({ validError: err });
                output.writeMessageBegin("prepareVoteForTest", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: PrepareVoteForTestResult = new PrepareVoteForTestResult({ error: err });
                output.writeMessageBegin("prepareVoteForTest", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("prepareVoteForTest", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_restartVote(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Vote.Vote>((resolve, reject): void => {
            try {
                const args: RestartVoteArgs = RestartVoteArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.restartVote(args.token, args.voteId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Vote.Vote): void => {
            const result: RestartVoteResult = new RestartVoteResult({ success: data });
            output.writeMessageBegin("restartVote", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: RestartVoteResult = new RestartVoteResult({ validError: err });
                output.writeMessageBegin("restartVote", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: RestartVoteResult = new RestartVoteResult({ error: err });
                output.writeMessageBegin("restartVote", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("restartVote", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getVoteHistory(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<VoteUserAnswer.VoteUserAnswer>>((resolve, reject): void => {
            try {
                const args: GetVoteHistoryArgs = GetVoteHistoryArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getVoteHistory(args.token, args.voteId, args.userId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<VoteUserAnswer.VoteUserAnswer>): void => {
            const result: GetVoteHistoryResult = new GetVoteHistoryResult({ success: data });
            output.writeMessageBegin("getVoteHistory", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof __ROOT_NAMESPACE__.PreconditionException) {
                const result: GetVoteHistoryResult = new GetVoteHistoryResult({ validError: err });
                output.writeMessageBegin("getVoteHistory", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof __ROOT_NAMESPACE__.ServerException) {
                const result: GetVoteHistoryResult = new GetVoteHistoryResult({ error: err });
                output.writeMessageBegin("getVoteHistory", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getVoteHistory", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
}

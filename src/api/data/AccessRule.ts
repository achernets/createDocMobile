/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as __ROOT_NAMESPACE__ from "./";
export interface IAccessRuleArgs {
    forAuthor?: boolean;
    forResponsible?: boolean;
    forExecutors?: boolean;
    forUserOrGroup?: boolean;
    forRole?: boolean;
    allowList?: Array<__ROOT_NAMESPACE__.UserOrGroup>;
    allowRole?: Set<string>;
    forAllDocView?: boolean;
}
export class AccessRule {
    public forAuthor?: boolean;
    public forResponsible?: boolean;
    public forExecutors?: boolean;
    public forUserOrGroup?: boolean;
    public forRole?: boolean;
    public allowList?: Array<__ROOT_NAMESPACE__.UserOrGroup>;
    public allowRole?: Set<string>;
    public forAllDocView?: boolean;
    constructor(args?: IAccessRuleArgs) {
        if (args != null && args.forAuthor != null) {
            this.forAuthor = args.forAuthor;
        }
        if (args != null && args.forResponsible != null) {
            this.forResponsible = args.forResponsible;
        }
        if (args != null && args.forExecutors != null) {
            this.forExecutors = args.forExecutors;
        }
        if (args != null && args.forUserOrGroup != null) {
            this.forUserOrGroup = args.forUserOrGroup;
        }
        if (args != null && args.forRole != null) {
            this.forRole = args.forRole;
        }
        if (args != null && args.allowList != null) {
            this.allowList = args.allowList;
        }
        if (args != null && args.allowRole != null) {
            this.allowRole = args.allowRole;
        }
        if (args != null && args.forAllDocView != null) {
            this.forAllDocView = args.forAllDocView;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("AccessRule");
        if (this.forAuthor != null) {
            output.writeFieldBegin("forAuthor", thrift.Thrift.Type.BOOL, 1);
            output.writeBool(this.forAuthor);
            output.writeFieldEnd();
        }
        if (this.forResponsible != null) {
            output.writeFieldBegin("forResponsible", thrift.Thrift.Type.BOOL, 2);
            output.writeBool(this.forResponsible);
            output.writeFieldEnd();
        }
        if (this.forExecutors != null) {
            output.writeFieldBegin("forExecutors", thrift.Thrift.Type.BOOL, 3);
            output.writeBool(this.forExecutors);
            output.writeFieldEnd();
        }
        if (this.forUserOrGroup != null) {
            output.writeFieldBegin("forUserOrGroup", thrift.Thrift.Type.BOOL, 4);
            output.writeBool(this.forUserOrGroup);
            output.writeFieldEnd();
        }
        if (this.forRole != null) {
            output.writeFieldBegin("forRole", thrift.Thrift.Type.BOOL, 5);
            output.writeBool(this.forRole);
            output.writeFieldEnd();
        }
        if (this.allowList != null) {
            output.writeFieldBegin("allowList", thrift.Thrift.Type.LIST, 6);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.allowList.length);
            this.allowList.forEach((value_1: __ROOT_NAMESPACE__.UserOrGroup): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.allowRole != null) {
            output.writeFieldBegin("allowRole", thrift.Thrift.Type.SET, 7);
            output.writeSetBegin(thrift.Thrift.Type.STRING, this.allowRole.size);
            this.allowRole.forEach((value_2: string): void => {
                output.writeString(value_2);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        if (this.forAllDocView != null) {
            output.writeFieldBegin("forAllDocView", thrift.Thrift.Type.BOOL, 8);
            output.writeBool(this.forAllDocView);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): AccessRule {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_3: boolean = input.readBool();
                        _args.forAuthor = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_4: boolean = input.readBool();
                        _args.forResponsible = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_5: boolean = input.readBool();
                        _args.forExecutors = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_6: boolean = input.readBool();
                        _args.forUserOrGroup = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_7: boolean = input.readBool();
                        _args.forRole = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_8: Array<__ROOT_NAMESPACE__.UserOrGroup> = new Array<__ROOT_NAMESPACE__.UserOrGroup>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_9: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                            value_8.push(value_9);
                        }
                        input.readListEnd();
                        _args.allowList = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_10: Set<string> = new Set<string>();
                        const metadata_2: thrift.TSet = input.readSetBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_11: string = input.readString();
                            value_10.add(value_11);
                        }
                        input.readSetEnd();
                        _args.allowRole = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_12: boolean = input.readBool();
                        _args.forAllDocView = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new AccessRule(_args);
    }
}

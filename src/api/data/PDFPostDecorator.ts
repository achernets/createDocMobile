/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as PDFPostDecoratorType from "./PDFPostDecoratorType";
import * as AttachmentExtStatus from "./AttachmentExtStatus";
export interface IPDFPostDecoratorArgs {
    id?: string;
    key?: string;
    enabled?: boolean;
    postDecoratorType?: PDFPostDecoratorType.PDFPostDecoratorType;
    postProcessorName?: string;
    useByDefault?: boolean;
    useInEmptyPrint?: boolean;
    postProcessorNameLoc?: Map<string, string>;
    attachmentExtStatuses?: Set<AttachmentExtStatus.AttachmentExtStatus>;
}
export class PDFPostDecorator {
    public id?: string;
    public key?: string;
    public enabled?: boolean;
    public postDecoratorType?: PDFPostDecoratorType.PDFPostDecoratorType;
    public postProcessorName?: string;
    public useByDefault?: boolean;
    public useInEmptyPrint?: boolean;
    public postProcessorNameLoc?: Map<string, string>;
    public attachmentExtStatuses?: Set<AttachmentExtStatus.AttachmentExtStatus>;
    constructor(args?: IPDFPostDecoratorArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.key != null) {
            this.key = args.key;
        }
        if (args != null && args.enabled != null) {
            this.enabled = args.enabled;
        }
        if (args != null && args.postDecoratorType != null) {
            this.postDecoratorType = args.postDecoratorType;
        }
        if (args != null && args.postProcessorName != null) {
            this.postProcessorName = args.postProcessorName;
        }
        if (args != null && args.useByDefault != null) {
            this.useByDefault = args.useByDefault;
        }
        if (args != null && args.useInEmptyPrint != null) {
            this.useInEmptyPrint = args.useInEmptyPrint;
        }
        if (args != null && args.postProcessorNameLoc != null) {
            this.postProcessorNameLoc = args.postProcessorNameLoc;
        }
        if (args != null && args.attachmentExtStatuses != null) {
            this.attachmentExtStatuses = args.attachmentExtStatuses;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("PDFPostDecorator");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.key != null) {
            output.writeFieldBegin("key", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.key);
            output.writeFieldEnd();
        }
        if (this.enabled != null) {
            output.writeFieldBegin("enabled", thrift.Thrift.Type.BOOL, 3);
            output.writeBool(this.enabled);
            output.writeFieldEnd();
        }
        if (this.postDecoratorType != null) {
            output.writeFieldBegin("postDecoratorType", thrift.Thrift.Type.I32, 4);
            output.writeI32(this.postDecoratorType);
            output.writeFieldEnd();
        }
        if (this.postProcessorName != null) {
            output.writeFieldBegin("postProcessorName", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.postProcessorName);
            output.writeFieldEnd();
        }
        if (this.useByDefault != null) {
            output.writeFieldBegin("useByDefault", thrift.Thrift.Type.BOOL, 6);
            output.writeBool(this.useByDefault);
            output.writeFieldEnd();
        }
        if (this.useInEmptyPrint != null) {
            output.writeFieldBegin("useInEmptyPrint", thrift.Thrift.Type.BOOL, 7);
            output.writeBool(this.useInEmptyPrint);
            output.writeFieldEnd();
        }
        if (this.postProcessorNameLoc != null) {
            output.writeFieldBegin("postProcessorNameLoc", thrift.Thrift.Type.MAP, 8);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.postProcessorNameLoc.size);
            this.postProcessorNameLoc.forEach((value_1: string, key_1: string): void => {
                output.writeString(key_1);
                output.writeString(value_1);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.attachmentExtStatuses != null) {
            output.writeFieldBegin("attachmentExtStatuses", thrift.Thrift.Type.SET, 9);
            output.writeSetBegin(thrift.Thrift.Type.I32, this.attachmentExtStatuses.size);
            this.attachmentExtStatuses.forEach((value_2: AttachmentExtStatus.AttachmentExtStatus): void => {
                output.writeI32(value_2);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): PDFPostDecorator {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.id = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.key = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_5: boolean = input.readBool();
                        _args.enabled = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_6: PDFPostDecoratorType.PDFPostDecoratorType = input.readI32();
                        _args.postDecoratorType = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_7: string = input.readString();
                        _args.postProcessorName = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_8: boolean = input.readBool();
                        _args.useByDefault = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_9: boolean = input.readBool();
                        _args.useInEmptyPrint = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_10: Map<string, string> = new Map<string, string>();
                        const metadata_1: thrift.TMap = input.readMapBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const key_2: string = input.readString();
                            const value_11: string = input.readString();
                            value_10.set(key_2, value_11);
                        }
                        input.readMapEnd();
                        _args.postProcessorNameLoc = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_12: Set<AttachmentExtStatus.AttachmentExtStatus> = new Set<AttachmentExtStatus.AttachmentExtStatus>();
                        const metadata_2: thrift.TSet = input.readSetBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_13: AttachmentExtStatus.AttachmentExtStatus = input.readI32();
                            value_12.add(value_13);
                        }
                        input.readSetEnd();
                        _args.attachmentExtStatuses = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new PDFPostDecorator(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import { Int64 } from "thrift";
import * as thrift from "thrift";
import * as DigitalSignDetails from "./DigitalSignDetails";
export interface ISignInfoArgs {
    digitalSignId?: string;
    signDetails?: Array<DigitalSignDetails.DigitalSignDetails>;
    documentId?: string;
    methodName?: string;
    attachmentName?: string;
    attachmentPdfName?: string;
    attachmentPdfFileSize?: number | Int64;
    attachmentP7bName?: string;
    documentUrl?: string;
    originalAttachmentDownloadUrl?: string;
    pdfAttachmentDownloadUrl?: string;
    p7bAttachmentDownloadUrl?: string;
}
export class SignInfo {
    public digitalSignId?: string;
    public signDetails?: Array<DigitalSignDetails.DigitalSignDetails>;
    public documentId?: string;
    public methodName?: string;
    public attachmentName?: string;
    public attachmentPdfName?: string;
    public attachmentPdfFileSize?: Int64;
    public attachmentP7bName?: string;
    public documentUrl?: string;
    public originalAttachmentDownloadUrl?: string;
    public pdfAttachmentDownloadUrl?: string;
    public p7bAttachmentDownloadUrl?: string;
    constructor(args?: ISignInfoArgs) {
        if (args != null && args.digitalSignId != null) {
            this.digitalSignId = args.digitalSignId;
        }
        if (args != null && args.signDetails != null) {
            this.signDetails = args.signDetails;
        }
        if (args != null && args.documentId != null) {
            this.documentId = args.documentId;
        }
        if (args != null && args.methodName != null) {
            this.methodName = args.methodName;
        }
        if (args != null && args.attachmentName != null) {
            this.attachmentName = args.attachmentName;
        }
        if (args != null && args.attachmentPdfName != null) {
            this.attachmentPdfName = args.attachmentPdfName;
        }
        if (args != null && args.attachmentPdfFileSize != null) {
            if (typeof args.attachmentPdfFileSize === "number") {
                this.attachmentPdfFileSize = new Int64(args.attachmentPdfFileSize);
            }
            else {
                this.attachmentPdfFileSize = args.attachmentPdfFileSize;
            }
        }
        if (args != null && args.attachmentP7bName != null) {
            this.attachmentP7bName = args.attachmentP7bName;
        }
        if (args != null && args.documentUrl != null) {
            this.documentUrl = args.documentUrl;
        }
        if (args != null && args.originalAttachmentDownloadUrl != null) {
            this.originalAttachmentDownloadUrl = args.originalAttachmentDownloadUrl;
        }
        if (args != null && args.pdfAttachmentDownloadUrl != null) {
            this.pdfAttachmentDownloadUrl = args.pdfAttachmentDownloadUrl;
        }
        if (args != null && args.p7bAttachmentDownloadUrl != null) {
            this.p7bAttachmentDownloadUrl = args.p7bAttachmentDownloadUrl;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("SignInfo");
        if (this.digitalSignId != null) {
            output.writeFieldBegin("digitalSignId", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.digitalSignId);
            output.writeFieldEnd();
        }
        if (this.signDetails != null) {
            output.writeFieldBegin("signDetails", thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.signDetails.length);
            this.signDetails.forEach((value_1: DigitalSignDetails.DigitalSignDetails): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.documentId != null) {
            output.writeFieldBegin("documentId", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.documentId);
            output.writeFieldEnd();
        }
        if (this.methodName != null) {
            output.writeFieldBegin("methodName", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.methodName);
            output.writeFieldEnd();
        }
        if (this.attachmentName != null) {
            output.writeFieldBegin("attachmentName", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.attachmentName);
            output.writeFieldEnd();
        }
        if (this.attachmentPdfName != null) {
            output.writeFieldBegin("attachmentPdfName", thrift.Thrift.Type.STRING, 6);
            output.writeString(this.attachmentPdfName);
            output.writeFieldEnd();
        }
        if (this.attachmentPdfFileSize != null) {
            output.writeFieldBegin("attachmentPdfFileSize", thrift.Thrift.Type.I64, 7);
            output.writeI64(this.attachmentPdfFileSize);
            output.writeFieldEnd();
        }
        if (this.attachmentP7bName != null) {
            output.writeFieldBegin("attachmentP7bName", thrift.Thrift.Type.STRING, 8);
            output.writeString(this.attachmentP7bName);
            output.writeFieldEnd();
        }
        if (this.documentUrl != null) {
            output.writeFieldBegin("documentUrl", thrift.Thrift.Type.STRING, 9);
            output.writeString(this.documentUrl);
            output.writeFieldEnd();
        }
        if (this.originalAttachmentDownloadUrl != null) {
            output.writeFieldBegin("originalAttachmentDownloadUrl", thrift.Thrift.Type.STRING, 10);
            output.writeString(this.originalAttachmentDownloadUrl);
            output.writeFieldEnd();
        }
        if (this.pdfAttachmentDownloadUrl != null) {
            output.writeFieldBegin("pdfAttachmentDownloadUrl", thrift.Thrift.Type.STRING, 11);
            output.writeString(this.pdfAttachmentDownloadUrl);
            output.writeFieldEnd();
        }
        if (this.p7bAttachmentDownloadUrl != null) {
            output.writeFieldBegin("p7bAttachmentDownloadUrl", thrift.Thrift.Type.STRING, 12);
            output.writeString(this.p7bAttachmentDownloadUrl);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): SignInfo {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.digitalSignId = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_3: Array<DigitalSignDetails.DigitalSignDetails> = new Array<DigitalSignDetails.DigitalSignDetails>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_4: DigitalSignDetails.DigitalSignDetails = DigitalSignDetails.DigitalSignDetails.read(input);
                            value_3.push(value_4);
                        }
                        input.readListEnd();
                        _args.signDetails = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.documentId = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.methodName = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_7: string = input.readString();
                        _args.attachmentName = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_8: string = input.readString();
                        _args.attachmentPdfName = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_9: Int64 = input.readI64();
                        _args.attachmentPdfFileSize = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_10: string = input.readString();
                        _args.attachmentP7bName = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_11: string = input.readString();
                        _args.documentUrl = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_12: string = input.readString();
                        _args.originalAttachmentDownloadUrl = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_13: string = input.readString();
                        _args.pdfAttachmentDownloadUrl = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_14: string = input.readString();
                        _args.p7bAttachmentDownloadUrl = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new SignInfo(_args);
    }
}

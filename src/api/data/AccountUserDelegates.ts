/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as UserDelegates from "./UserDelegates";
import * as ClientDelegateInfo from "./ClientDelegateInfo";
import * as ClientDelegateDetails from "./ClientDelegateDetails";
export interface IAccountUserDelegatesArgs {
    delegates?: Array<UserDelegates.UserDelegates>;
    delegateInfo?: ClientDelegateInfo.ClientDelegateInfo;
    delegateDetails?: ClientDelegateDetails.ClientDelegateDetails;
    closeDelegateSession?: boolean;
}
export class AccountUserDelegates {
    public delegates?: Array<UserDelegates.UserDelegates>;
    public delegateInfo?: ClientDelegateInfo.ClientDelegateInfo;
    public delegateDetails?: ClientDelegateDetails.ClientDelegateDetails;
    public closeDelegateSession?: boolean;
    constructor(args?: IAccountUserDelegatesArgs) {
        if (args != null && args.delegates != null) {
            this.delegates = args.delegates;
        }
        if (args != null && args.delegateInfo != null) {
            this.delegateInfo = args.delegateInfo;
        }
        if (args != null && args.delegateDetails != null) {
            this.delegateDetails = args.delegateDetails;
        }
        if (args != null && args.closeDelegateSession != null) {
            this.closeDelegateSession = args.closeDelegateSession;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("AccountUserDelegates");
        if (this.delegates != null) {
            output.writeFieldBegin("delegates", thrift.Thrift.Type.LIST, 1);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.delegates.length);
            this.delegates.forEach((value_1: UserDelegates.UserDelegates): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.delegateInfo != null) {
            output.writeFieldBegin("delegateInfo", thrift.Thrift.Type.STRUCT, 2);
            this.delegateInfo.write(output);
            output.writeFieldEnd();
        }
        if (this.delegateDetails != null) {
            output.writeFieldBegin("delegateDetails", thrift.Thrift.Type.STRUCT, 3);
            this.delegateDetails.write(output);
            output.writeFieldEnd();
        }
        if (this.closeDelegateSession != null) {
            output.writeFieldBegin("closeDelegateSession", thrift.Thrift.Type.BOOL, 4);
            output.writeBool(this.closeDelegateSession);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): AccountUserDelegates {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_2: Array<UserDelegates.UserDelegates> = new Array<UserDelegates.UserDelegates>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_3: UserDelegates.UserDelegates = UserDelegates.UserDelegates.read(input);
                            value_2.push(value_3);
                        }
                        input.readListEnd();
                        _args.delegates = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_4: ClientDelegateInfo.ClientDelegateInfo = ClientDelegateInfo.ClientDelegateInfo.read(input);
                        _args.delegateInfo = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_5: ClientDelegateDetails.ClientDelegateDetails = ClientDelegateDetails.ClientDelegateDetails.read(input);
                        _args.delegateDetails = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_6: boolean = input.readBool();
                        _args.closeDelegateSession = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new AccountUserDelegates(_args);
    }
}

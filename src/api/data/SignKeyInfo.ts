/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface ISignKeyInfoArgs {
    keyId?: string;
    key?: string;
    fileExt?: string;
    password?: string;
    remoteServiceKey?: string;
    userIdentifier?: string;
}
export class SignKeyInfo {
    public keyId?: string;
    public key?: string;
    public fileExt?: string;
    public password?: string;
    public remoteServiceKey?: string;
    public userIdentifier?: string;
    constructor(args?: ISignKeyInfoArgs) {
        if (args != null && args.keyId != null) {
            this.keyId = args.keyId;
        }
        if (args != null && args.key != null) {
            this.key = args.key;
        }
        if (args != null && args.fileExt != null) {
            this.fileExt = args.fileExt;
        }
        if (args != null && args.password != null) {
            this.password = args.password;
        }
        if (args != null && args.remoteServiceKey != null) {
            this.remoteServiceKey = args.remoteServiceKey;
        }
        if (args != null && args.userIdentifier != null) {
            this.userIdentifier = args.userIdentifier;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("SignKeyInfo");
        if (this.keyId != null) {
            output.writeFieldBegin("keyId", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.keyId);
            output.writeFieldEnd();
        }
        if (this.key != null) {
            output.writeFieldBegin("key", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.key);
            output.writeFieldEnd();
        }
        if (this.fileExt != null) {
            output.writeFieldBegin("fileExt", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.fileExt);
            output.writeFieldEnd();
        }
        if (this.password != null) {
            output.writeFieldBegin("password", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.password);
            output.writeFieldEnd();
        }
        if (this.remoteServiceKey != null) {
            output.writeFieldBegin("remoteServiceKey", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.remoteServiceKey);
            output.writeFieldEnd();
        }
        if (this.userIdentifier != null) {
            output.writeFieldBegin("userIdentifier", thrift.Thrift.Type.STRING, 6);
            output.writeString(this.userIdentifier);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): SignKeyInfo {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.keyId = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.key = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.fileExt = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.password = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.remoteServiceKey = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.userIdentifier = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new SignKeyInfo(_args);
    }
}

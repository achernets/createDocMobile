/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import { Int64 } from "thrift";
import * as thrift from "thrift";
import * as ExecutionLogWorkType from "./ExecutionLogWorkType";
import * as DocumentComment from "./DocumentComment";
import * as __ROOT_NAMESPACE__ from "./";
export interface IExecutionLogWorkArgs {
    id?: string;
    cardId?: string;
    logWorkType?: ExecutionLogWorkType.ExecutionLogWorkType;
    logDate?: number | Int64;
    comments?: Array<DocumentComment.DocumentComment>;
    originalUser?: __ROOT_NAMESPACE__.UserOrGroup;
}
export class ExecutionLogWork {
    public id?: string;
    public cardId?: string;
    public logWorkType?: ExecutionLogWorkType.ExecutionLogWorkType;
    public logDate?: Int64;
    public comments?: Array<DocumentComment.DocumentComment>;
    public originalUser?: __ROOT_NAMESPACE__.UserOrGroup;
    constructor(args?: IExecutionLogWorkArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.cardId != null) {
            this.cardId = args.cardId;
        }
        if (args != null && args.logWorkType != null) {
            this.logWorkType = args.logWorkType;
        }
        if (args != null && args.logDate != null) {
            if (typeof args.logDate === "number") {
                this.logDate = new Int64(args.logDate);
            }
            else {
                this.logDate = args.logDate;
            }
        }
        if (args != null && args.comments != null) {
            this.comments = args.comments;
        }
        if (args != null && args.originalUser != null) {
            this.originalUser = args.originalUser;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ExecutionLogWork");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.cardId != null) {
            output.writeFieldBegin("cardId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.cardId);
            output.writeFieldEnd();
        }
        if (this.logWorkType != null) {
            output.writeFieldBegin("logWorkType", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.logWorkType);
            output.writeFieldEnd();
        }
        if (this.logDate != null) {
            output.writeFieldBegin("logDate", thrift.Thrift.Type.I64, 4);
            output.writeI64(this.logDate);
            output.writeFieldEnd();
        }
        if (this.comments != null) {
            output.writeFieldBegin("comments", thrift.Thrift.Type.LIST, 6);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.comments.length);
            this.comments.forEach((value_1: DocumentComment.DocumentComment): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.originalUser != null) {
            output.writeFieldBegin("originalUser", thrift.Thrift.Type.STRUCT, 7);
            this.originalUser.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ExecutionLogWork {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.id = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.cardId = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_4: ExecutionLogWorkType.ExecutionLogWorkType = input.readI32();
                        _args.logWorkType = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_5: Int64 = input.readI64();
                        _args.logDate = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_6: Array<DocumentComment.DocumentComment> = new Array<DocumentComment.DocumentComment>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_7: DocumentComment.DocumentComment = DocumentComment.DocumentComment.read(input);
                            value_6.push(value_7);
                        }
                        input.readListEnd();
                        _args.comments = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_8: __ROOT_NAMESPACE__.UserOrGroup = __ROOT_NAMESPACE__.UserOrGroup.read(input);
                        _args.originalUser = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ExecutionLogWork(_args);
    }
}

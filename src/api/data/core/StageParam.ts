/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as StageParamType from "./StageParamType";
import * as core from "./";
import * as PatternToUser from "./PatternToUser";
export interface IStageParamArgs {
    key?: string;
    value?: Array<string>;
    type?: StageParamType.StageParamType;
    oName?: Array<string>;
    multi?: boolean;
    inValues?: Array<string>;
    scriptId?: core.CompositeId;
    req?: boolean;
    displayName?: string;
    subProcessAuthors?: Array<PatternToUser.PatternToUser>;
    pHint?: string;
    displayNameLoc?: Map<string, string>;
}
export class StageParam {
    public key?: string;
    public value?: Array<string>;
    public type?: StageParamType.StageParamType;
    public oName?: Array<string>;
    public multi?: boolean;
    public inValues?: Array<string>;
    public scriptId?: core.CompositeId;
    public req?: boolean;
    public displayName?: string;
    public subProcessAuthors?: Array<PatternToUser.PatternToUser>;
    public pHint?: string;
    public displayNameLoc?: Map<string, string>;
    constructor(args?: IStageParamArgs) {
        if (args != null && args.key != null) {
            this.key = args.key;
        }
        if (args != null && args.value != null) {
            this.value = args.value;
        }
        if (args != null && args.type != null) {
            this.type = args.type;
        }
        if (args != null && args.oName != null) {
            this.oName = args.oName;
        }
        if (args != null && args.multi != null) {
            this.multi = args.multi;
        }
        if (args != null && args.inValues != null) {
            this.inValues = args.inValues;
        }
        if (args != null && args.scriptId != null) {
            this.scriptId = args.scriptId;
        }
        if (args != null && args.req != null) {
            this.req = args.req;
        }
        if (args != null && args.displayName != null) {
            this.displayName = args.displayName;
        }
        if (args != null && args.subProcessAuthors != null) {
            this.subProcessAuthors = args.subProcessAuthors;
        }
        if (args != null && args.pHint != null) {
            this.pHint = args.pHint;
        }
        if (args != null && args.displayNameLoc != null) {
            this.displayNameLoc = args.displayNameLoc;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("StageParam");
        if (this.key != null) {
            output.writeFieldBegin("key", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.key);
            output.writeFieldEnd();
        }
        if (this.value != null) {
            output.writeFieldBegin("value", thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.value.length);
            this.value.forEach((value_1: string): void => {
                output.writeString(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.type != null) {
            output.writeFieldBegin("type", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.type);
            output.writeFieldEnd();
        }
        if (this.oName != null) {
            output.writeFieldBegin("oName", thrift.Thrift.Type.LIST, 4);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.oName.length);
            this.oName.forEach((value_2: string): void => {
                output.writeString(value_2);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.multi != null) {
            output.writeFieldBegin("multi", thrift.Thrift.Type.BOOL, 5);
            output.writeBool(this.multi);
            output.writeFieldEnd();
        }
        if (this.inValues != null) {
            output.writeFieldBegin("inValues", thrift.Thrift.Type.LIST, 6);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.inValues.length);
            this.inValues.forEach((value_3: string): void => {
                output.writeString(value_3);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.scriptId != null) {
            output.writeFieldBegin("scriptId", thrift.Thrift.Type.STRUCT, 7);
            this.scriptId.write(output);
            output.writeFieldEnd();
        }
        if (this.req != null) {
            output.writeFieldBegin("req", thrift.Thrift.Type.BOOL, 8);
            output.writeBool(this.req);
            output.writeFieldEnd();
        }
        if (this.displayName != null) {
            output.writeFieldBegin("displayName", thrift.Thrift.Type.STRING, 9);
            output.writeString(this.displayName);
            output.writeFieldEnd();
        }
        if (this.subProcessAuthors != null) {
            output.writeFieldBegin("subProcessAuthors", thrift.Thrift.Type.LIST, 10);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.subProcessAuthors.length);
            this.subProcessAuthors.forEach((value_4: PatternToUser.PatternToUser): void => {
                value_4.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.pHint != null) {
            output.writeFieldBegin("pHint", thrift.Thrift.Type.STRING, 11);
            output.writeString(this.pHint);
            output.writeFieldEnd();
        }
        if (this.displayNameLoc != null) {
            output.writeFieldBegin("displayNameLoc", thrift.Thrift.Type.MAP, 12);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.displayNameLoc.size);
            this.displayNameLoc.forEach((value_5: string, key_1: string): void => {
                output.writeString(key_1);
                output.writeString(value_5);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): StageParam {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.key = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_7: Array<string> = new Array<string>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_8: string = input.readString();
                            value_7.push(value_8);
                        }
                        input.readListEnd();
                        _args.value = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_9: StageParamType.StageParamType = input.readI32();
                        _args.type = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_10: Array<string> = new Array<string>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_11: string = input.readString();
                            value_10.push(value_11);
                        }
                        input.readListEnd();
                        _args.oName = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_12: boolean = input.readBool();
                        _args.multi = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_13: Array<string> = new Array<string>();
                        const metadata_3: thrift.TList = input.readListBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_14: string = input.readString();
                            value_13.push(value_14);
                        }
                        input.readListEnd();
                        _args.inValues = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_15: core.CompositeId = core.CompositeId.read(input);
                        _args.scriptId = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_16: boolean = input.readBool();
                        _args.req = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_17: string = input.readString();
                        _args.displayName = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_18: Array<PatternToUser.PatternToUser> = new Array<PatternToUser.PatternToUser>();
                        const metadata_4: thrift.TList = input.readListBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const value_19: PatternToUser.PatternToUser = PatternToUser.PatternToUser.read(input);
                            value_18.push(value_19);
                        }
                        input.readListEnd();
                        _args.subProcessAuthors = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_20: string = input.readString();
                        _args.pHint = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_21: Map<string, string> = new Map<string, string>();
                        const metadata_5: thrift.TMap = input.readMapBegin();
                        const size_5: number = metadata_5.size;
                        for (let i_5: number = 0; i_5 < size_5; i_5++) {
                            const key_2: string = input.readString();
                            const value_22: string = input.readString();
                            value_21.set(key_2, value_22);
                        }
                        input.readMapEnd();
                        _args.displayNameLoc = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new StageParam(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 from "node-int64";
import * as thrift from "thrift";
import * as DocumentExecution from "./DocumentExecution";
import * as Attachment from "./Attachment";
import * as DocumentComment from "./DocumentComment";
import * as DocumentRelation from "./DocumentRelation";
import * as ExecutionLogWork from "./ExecutionLogWork";
export interface IExecutionTreeArgs {
    card?: DocumentExecution.DocumentExecution;
    attachments?: Array<Attachment.Attachment>;
    comments?: Array<DocumentComment.DocumentComment>;
    childTree?: Array<ExecutionTree>;
    parentTree?: ExecutionTree;
    docRelations?: Array<DocumentRelation.DocumentRelation>;
    period?: string;
    periodicEndDate?: number | Int64;
    executionLogWorkList?: Array<ExecutionLogWork.ExecutionLogWork>;
}
export class ExecutionTree {
    public card?: DocumentExecution.DocumentExecution;
    public attachments?: Array<Attachment.Attachment>;
    public comments?: Array<DocumentComment.DocumentComment>;
    public childTree?: Array<ExecutionTree>;
    public parentTree?: ExecutionTree;
    public docRelations?: Array<DocumentRelation.DocumentRelation>;
    public period?: string;
    public periodicEndDate?: Int64;
    public executionLogWorkList?: Array<ExecutionLogWork.ExecutionLogWork>;
    constructor(args?: IExecutionTreeArgs) {
        if (args != null && args.card != null) {
            this.card = args.card;
        }
        if (args != null && args.attachments != null) {
            this.attachments = args.attachments;
        }
        if (args != null && args.comments != null) {
            this.comments = args.comments;
        }
        if (args != null && args.childTree != null) {
            this.childTree = args.childTree;
        }
        if (args != null && args.parentTree != null) {
            this.parentTree = args.parentTree;
        }
        if (args != null && args.docRelations != null) {
            this.docRelations = args.docRelations;
        }
        if (args != null && args.period != null) {
            this.period = args.period;
        }
        if (args != null && args.periodicEndDate != null) {
            if (typeof args.periodicEndDate === "number") {
                this.periodicEndDate = new Int64(args.periodicEndDate);
            }
            else {
                this.periodicEndDate = args.periodicEndDate;
            }
        }
        if (args != null && args.executionLogWorkList != null) {
            this.executionLogWorkList = args.executionLogWorkList;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ExecutionTree");
        if (this.card != null) {
            output.writeFieldBegin("card", thrift.Thrift.Type.STRUCT, 1);
            this.card.write(output);
            output.writeFieldEnd();
        }
        if (this.attachments != null) {
            output.writeFieldBegin("attachments", thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.attachments.length);
            this.attachments.forEach((value_1: Attachment.Attachment): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.comments != null) {
            output.writeFieldBegin("comments", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.comments.length);
            this.comments.forEach((value_2: DocumentComment.DocumentComment): void => {
                value_2.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.childTree != null) {
            output.writeFieldBegin("childTree", thrift.Thrift.Type.LIST, 4);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.childTree.length);
            this.childTree.forEach((value_3: ExecutionTree): void => {
                value_3.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.parentTree != null) {
            output.writeFieldBegin("parentTree", thrift.Thrift.Type.STRUCT, 5);
            this.parentTree.write(output);
            output.writeFieldEnd();
        }
        if (this.docRelations != null) {
            output.writeFieldBegin("docRelations", thrift.Thrift.Type.LIST, 6);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.docRelations.length);
            this.docRelations.forEach((value_4: DocumentRelation.DocumentRelation): void => {
                value_4.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.period != null) {
            output.writeFieldBegin("period", thrift.Thrift.Type.STRING, 7);
            output.writeString(this.period);
            output.writeFieldEnd();
        }
        if (this.periodicEndDate != null) {
            output.writeFieldBegin("periodicEndDate", thrift.Thrift.Type.I64, 8);
            output.writeI64(this.periodicEndDate);
            output.writeFieldEnd();
        }
        if (this.executionLogWorkList != null) {
            output.writeFieldBegin("executionLogWorkList", thrift.Thrift.Type.LIST, 9);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.executionLogWorkList.length);
            this.executionLogWorkList.forEach((value_5: ExecutionLogWork.ExecutionLogWork): void => {
                value_5.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ExecutionTree {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_6: DocumentExecution.DocumentExecution = DocumentExecution.DocumentExecution.read(input);
                        _args.card = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_7: Array<Attachment.Attachment> = new Array<Attachment.Attachment>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_8: Attachment.Attachment = Attachment.Attachment.read(input);
                            value_7.push(value_8);
                        }
                        input.readListEnd();
                        _args.attachments = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_9: Array<DocumentComment.DocumentComment> = new Array<DocumentComment.DocumentComment>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_10: DocumentComment.DocumentComment = DocumentComment.DocumentComment.read(input);
                            value_9.push(value_10);
                        }
                        input.readListEnd();
                        _args.comments = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_11: Array<ExecutionTree> = new Array<ExecutionTree>();
                        const metadata_3: thrift.TList = input.readListBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_12: ExecutionTree = ExecutionTree.read(input);
                            value_11.push(value_12);
                        }
                        input.readListEnd();
                        _args.childTree = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_13: ExecutionTree = ExecutionTree.read(input);
                        _args.parentTree = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_14: Array<DocumentRelation.DocumentRelation> = new Array<DocumentRelation.DocumentRelation>();
                        const metadata_4: thrift.TList = input.readListBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const value_15: DocumentRelation.DocumentRelation = DocumentRelation.DocumentRelation.read(input);
                            value_14.push(value_15);
                        }
                        input.readListEnd();
                        _args.docRelations = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_16: string = input.readString();
                        _args.period = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_17: Int64 = input.readI64();
                        _args.periodicEndDate = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_18: Array<ExecutionLogWork.ExecutionLogWork> = new Array<ExecutionLogWork.ExecutionLogWork>();
                        const metadata_5: thrift.TList = input.readListBegin();
                        const size_5: number = metadata_5.size;
                        for (let i_5: number = 0; i_5 < size_5; i_5++) {
                            const value_19: ExecutionLogWork.ExecutionLogWork = ExecutionLogWork.ExecutionLogWork.read(input);
                            value_18.push(value_19);
                        }
                        input.readListEnd();
                        _args.executionLogWorkList = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ExecutionTree(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as VoteAnswerType from "./VoteAnswerType";
import * as core from "./";
export interface IVoteAnswerParamsArgs {
    id?: string;
    answerName?: string;
    answerType?: VoteAnswerType.VoteAnswerType;
    legitimacy?: boolean;
    commentRequirement?: core.DocPatternStageRequirement;
}
export class VoteAnswerParams {
    public id?: string;
    public answerName?: string;
    public answerType?: VoteAnswerType.VoteAnswerType;
    public legitimacy?: boolean;
    public commentRequirement?: core.DocPatternStageRequirement;
    constructor(args?: IVoteAnswerParamsArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.answerName != null) {
            this.answerName = args.answerName;
        }
        if (args != null && args.answerType != null) {
            this.answerType = args.answerType;
        }
        if (args != null && args.legitimacy != null) {
            this.legitimacy = args.legitimacy;
        }
        if (args != null && args.commentRequirement != null) {
            this.commentRequirement = args.commentRequirement;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("VoteAnswerParams");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.answerName != null) {
            output.writeFieldBegin("answerName", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.answerName);
            output.writeFieldEnd();
        }
        if (this.answerType != null) {
            output.writeFieldBegin("answerType", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.answerType);
            output.writeFieldEnd();
        }
        if (this.legitimacy != null) {
            output.writeFieldBegin("legitimacy", thrift.Thrift.Type.BOOL, 4);
            output.writeBool(this.legitimacy);
            output.writeFieldEnd();
        }
        if (this.commentRequirement != null) {
            output.writeFieldBegin("commentRequirement", thrift.Thrift.Type.I32, 5);
            output.writeI32(this.commentRequirement);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): VoteAnswerParams {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.id = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.answerName = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_3: VoteAnswerType.VoteAnswerType = input.readI32();
                        _args.answerType = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_4: boolean = input.readBool();
                        _args.legitimacy = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_5: core.DocPatternStageRequirement = input.readI32();
                        _args.commentRequirement = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new VoteAnswerParams(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as DocRelationType from "./DocRelationType";
export interface IDocumentRelationLinkArgs {
    fromId?: string;
    toId?: string;
    linkType?: DocRelationType.DocRelationType;
    isAuto?: boolean;
}
export class DocumentRelationLink {
    public fromId?: string;
    public toId?: string;
    public linkType?: DocRelationType.DocRelationType;
    public isAuto?: boolean;
    constructor(args?: IDocumentRelationLinkArgs) {
        if (args != null && args.fromId != null) {
            this.fromId = args.fromId;
        }
        if (args != null && args.toId != null) {
            this.toId = args.toId;
        }
        if (args != null && args.linkType != null) {
            this.linkType = args.linkType;
        }
        if (args != null && args.isAuto != null) {
            this.isAuto = args.isAuto;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("DocumentRelationLink");
        if (this.fromId != null) {
            output.writeFieldBegin("fromId", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.fromId);
            output.writeFieldEnd();
        }
        if (this.toId != null) {
            output.writeFieldBegin("toId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.toId);
            output.writeFieldEnd();
        }
        if (this.linkType != null) {
            output.writeFieldBegin("linkType", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.linkType);
            output.writeFieldEnd();
        }
        if (this.isAuto != null) {
            output.writeFieldBegin("isAuto", thrift.Thrift.Type.BOOL, 4);
            output.writeBool(this.isAuto);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): DocumentRelationLink {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.fromId = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.toId = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_3: DocRelationType.DocRelationType = input.readI32();
                        _args.linkType = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_4: boolean = input.readBool();
                        _args.isAuto = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new DocumentRelationLink(_args);
    }
}

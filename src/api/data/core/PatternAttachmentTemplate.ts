/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 from "node-int64";
import * as thrift from "thrift";
import * as PatternAttachmentTemplateAddType from "./PatternAttachmentTemplateAddType";
import * as core from "./";
export interface IPatternAttachmentTemplateArgs {
    id?: string;
    creatorId?: string;
    createDate?: number | Int64;
    patternId?: string;
    oName?: string;
    size?: number | Int64;
    externalId?: string;
    autoAdd?: boolean;
    disableEditAutoAttachmentOnCreate?: boolean;
    disableDeleteAutoAttachmentOnCreate?: boolean;
    templateAddType?: PatternAttachmentTemplateAddType.PatternAttachmentTemplateAddType;
    addFunctionId?: core.CompositeId;
}
export class PatternAttachmentTemplate {
    public id?: string;
    public creatorId?: string;
    public createDate?: Int64;
    public patternId?: string;
    public oName?: string;
    public size?: Int64;
    public externalId?: string;
    public autoAdd?: boolean;
    public disableEditAutoAttachmentOnCreate?: boolean;
    public disableDeleteAutoAttachmentOnCreate?: boolean;
    public templateAddType?: PatternAttachmentTemplateAddType.PatternAttachmentTemplateAddType;
    public addFunctionId?: core.CompositeId;
    constructor(args?: IPatternAttachmentTemplateArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.creatorId != null) {
            this.creatorId = args.creatorId;
        }
        if (args != null && args.createDate != null) {
            if (typeof args.createDate === "number") {
                this.createDate = new Int64(args.createDate);
            }
            else {
                this.createDate = args.createDate;
            }
        }
        if (args != null && args.patternId != null) {
            this.patternId = args.patternId;
        }
        if (args != null && args.oName != null) {
            this.oName = args.oName;
        }
        if (args != null && args.size != null) {
            if (typeof args.size === "number") {
                this.size = new Int64(args.size);
            }
            else {
                this.size = args.size;
            }
        }
        if (args != null && args.externalId != null) {
            this.externalId = args.externalId;
        }
        if (args != null && args.autoAdd != null) {
            this.autoAdd = args.autoAdd;
        }
        if (args != null && args.disableEditAutoAttachmentOnCreate != null) {
            this.disableEditAutoAttachmentOnCreate = args.disableEditAutoAttachmentOnCreate;
        }
        if (args != null && args.disableDeleteAutoAttachmentOnCreate != null) {
            this.disableDeleteAutoAttachmentOnCreate = args.disableDeleteAutoAttachmentOnCreate;
        }
        if (args != null && args.templateAddType != null) {
            this.templateAddType = args.templateAddType;
        }
        if (args != null && args.addFunctionId != null) {
            this.addFunctionId = args.addFunctionId;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("PatternAttachmentTemplate");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.creatorId != null) {
            output.writeFieldBegin("creatorId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.creatorId);
            output.writeFieldEnd();
        }
        if (this.createDate != null) {
            output.writeFieldBegin("createDate", thrift.Thrift.Type.I64, 3);
            output.writeI64(this.createDate);
            output.writeFieldEnd();
        }
        if (this.patternId != null) {
            output.writeFieldBegin("patternId", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.patternId);
            output.writeFieldEnd();
        }
        if (this.oName != null) {
            output.writeFieldBegin("oName", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.oName);
            output.writeFieldEnd();
        }
        if (this.size != null) {
            output.writeFieldBegin("size", thrift.Thrift.Type.I64, 6);
            output.writeI64(this.size);
            output.writeFieldEnd();
        }
        if (this.externalId != null) {
            output.writeFieldBegin("externalId", thrift.Thrift.Type.STRING, 7);
            output.writeString(this.externalId);
            output.writeFieldEnd();
        }
        if (this.autoAdd != null) {
            output.writeFieldBegin("autoAdd", thrift.Thrift.Type.BOOL, 8);
            output.writeBool(this.autoAdd);
            output.writeFieldEnd();
        }
        if (this.disableEditAutoAttachmentOnCreate != null) {
            output.writeFieldBegin("disableEditAutoAttachmentOnCreate", thrift.Thrift.Type.BOOL, 9);
            output.writeBool(this.disableEditAutoAttachmentOnCreate);
            output.writeFieldEnd();
        }
        if (this.disableDeleteAutoAttachmentOnCreate != null) {
            output.writeFieldBegin("disableDeleteAutoAttachmentOnCreate", thrift.Thrift.Type.BOOL, 10);
            output.writeBool(this.disableDeleteAutoAttachmentOnCreate);
            output.writeFieldEnd();
        }
        if (this.templateAddType != null) {
            output.writeFieldBegin("templateAddType", thrift.Thrift.Type.I32, 11);
            output.writeI32(this.templateAddType);
            output.writeFieldEnd();
        }
        if (this.addFunctionId != null) {
            output.writeFieldBegin("addFunctionId", thrift.Thrift.Type.STRUCT, 12);
            this.addFunctionId.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): PatternAttachmentTemplate {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.id = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.creatorId = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_3: Int64 = input.readI64();
                        _args.createDate = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.patternId = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.oName = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_6: Int64 = input.readI64();
                        _args.size = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_7: string = input.readString();
                        _args.externalId = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_8: boolean = input.readBool();
                        _args.autoAdd = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_9: boolean = input.readBool();
                        _args.disableEditAutoAttachmentOnCreate = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_10: boolean = input.readBool();
                        _args.disableDeleteAutoAttachmentOnCreate = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_11: PatternAttachmentTemplateAddType.PatternAttachmentTemplateAddType = input.readI32();
                        _args.templateAddType = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_12: core.CompositeId = core.CompositeId.read(input);
                        _args.addFunctionId = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new PatternAttachmentTemplate(_args);
    }
}

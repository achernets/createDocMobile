/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface IOrgStructureArgs {
    id?: string;
    accountGroupId?: string;
    name?: string;
    order?: number;
    main?: boolean;
}
export class OrgStructure {
    public id?: string;
    public accountGroupId?: string;
    public name?: string;
    public order?: number;
    public main?: boolean;
    constructor(args?: IOrgStructureArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.accountGroupId != null) {
            this.accountGroupId = args.accountGroupId;
        }
        if (args != null && args.name != null) {
            this.name = args.name;
        }
        if (args != null && args.order != null) {
            this.order = args.order;
        }
        if (args != null && args.main != null) {
            this.main = args.main;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("OrgStructure");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.accountGroupId != null) {
            output.writeFieldBegin("accountGroupId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.accountGroupId);
            output.writeFieldEnd();
        }
        if (this.name != null) {
            output.writeFieldBegin("name", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.name);
            output.writeFieldEnd();
        }
        if (this.order != null) {
            output.writeFieldBegin("order", thrift.Thrift.Type.I32, 4);
            output.writeI32(this.order);
            output.writeFieldEnd();
        }
        if (this.main != null) {
            output.writeFieldBegin("main", thrift.Thrift.Type.BOOL, 5);
            output.writeBool(this.main);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): OrgStructure {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.id = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.accountGroupId = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.name = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_4: number = input.readI32();
                        _args.order = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_5: boolean = input.readBool();
                        _args.main = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new OrgStructure(_args);
    }
}

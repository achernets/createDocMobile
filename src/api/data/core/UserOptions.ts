/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface IUserOptionsArgs {
    accountId?: string;
    createOrUpdate?: boolean;
    disable?: boolean;
    changeVersion?: boolean;
    sendEmail?: boolean;
}
export class UserOptions {
    public accountId?: string;
    public createOrUpdate?: boolean;
    public disable?: boolean;
    public changeVersion?: boolean;
    public sendEmail?: boolean;
    constructor(args?: IUserOptionsArgs) {
        if (args != null && args.accountId != null) {
            this.accountId = args.accountId;
        }
        if (args != null && args.createOrUpdate != null) {
            this.createOrUpdate = args.createOrUpdate;
        }
        if (args != null && args.disable != null) {
            this.disable = args.disable;
        }
        if (args != null && args.changeVersion != null) {
            this.changeVersion = args.changeVersion;
        }
        if (args != null && args.sendEmail != null) {
            this.sendEmail = args.sendEmail;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("UserOptions");
        if (this.accountId != null) {
            output.writeFieldBegin("accountId", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.accountId);
            output.writeFieldEnd();
        }
        if (this.createOrUpdate != null) {
            output.writeFieldBegin("createOrUpdate", thrift.Thrift.Type.BOOL, 2);
            output.writeBool(this.createOrUpdate);
            output.writeFieldEnd();
        }
        if (this.disable != null) {
            output.writeFieldBegin("disable", thrift.Thrift.Type.BOOL, 3);
            output.writeBool(this.disable);
            output.writeFieldEnd();
        }
        if (this.changeVersion != null) {
            output.writeFieldBegin("changeVersion", thrift.Thrift.Type.BOOL, 4);
            output.writeBool(this.changeVersion);
            output.writeFieldEnd();
        }
        if (this.sendEmail != null) {
            output.writeFieldBegin("sendEmail", thrift.Thrift.Type.BOOL, 5);
            output.writeBool(this.sendEmail);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): UserOptions {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.accountId = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_2: boolean = input.readBool();
                        _args.createOrUpdate = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_3: boolean = input.readBool();
                        _args.disable = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_4: boolean = input.readBool();
                        _args.changeVersion = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_5: boolean = input.readBool();
                        _args.sendEmail = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new UserOptions(_args);
    }
}

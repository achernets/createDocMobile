/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 from "node-int64";
import * as thrift from "thrift";
import * as core from "./";
import * as KnowledgeDocumentStatus from "./KnowledgeDocumentStatus";
import * as KnowledgeDocumentPermission from "./KnowledgeDocumentPermission";
import * as KnowledgeDocumentRelation from "./KnowledgeDocumentRelation";
export interface IKnowledgeDocumentArgs {
    id?: string;
    nodeTreeId?: string;
    documentId?: string;
    kName?: string;
    tagList?: string;
    attachmentCount?: number;
    dNameLoc?: Map<string, string>;
    attachments?: Array<core.Attachment>;
    contentHolders?: Array<core.ContentHolder>;
    policy?: core.DocumentAccessPolicy;
    status?: KnowledgeDocumentStatus.KnowledgeDocumentStatus;
    createDate?: number | Int64;
    regDate?: number | Int64;
    regNumber?: string;
    sysNumber?: string;
    docAuthor?: core.UserOrGroup;
    creator?: core.UserOrGroup;
    knowledgeDocumentPermission?: KnowledgeDocumentPermission.KnowledgeDocumentPermission;
    relations?: Array<KnowledgeDocumentRelation.KnowledgeDocumentRelation>;
    statusComment?: string;
    docAuthorDepartment?: string;
}
export class KnowledgeDocument {
    public id?: string;
    public nodeTreeId?: string;
    public documentId?: string;
    public kName?: string;
    public tagList?: string;
    public attachmentCount?: number;
    public dNameLoc?: Map<string, string>;
    public attachments?: Array<core.Attachment>;
    public contentHolders?: Array<core.ContentHolder>;
    public policy?: core.DocumentAccessPolicy;
    public status?: KnowledgeDocumentStatus.KnowledgeDocumentStatus;
    public createDate?: Int64;
    public regDate?: Int64;
    public regNumber?: string;
    public sysNumber?: string;
    public docAuthor?: core.UserOrGroup;
    public creator?: core.UserOrGroup;
    public knowledgeDocumentPermission?: KnowledgeDocumentPermission.KnowledgeDocumentPermission;
    public relations?: Array<KnowledgeDocumentRelation.KnowledgeDocumentRelation>;
    public statusComment?: string;
    public docAuthorDepartment?: string;
    constructor(args?: IKnowledgeDocumentArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.nodeTreeId != null) {
            this.nodeTreeId = args.nodeTreeId;
        }
        if (args != null && args.documentId != null) {
            this.documentId = args.documentId;
        }
        if (args != null && args.kName != null) {
            this.kName = args.kName;
        }
        if (args != null && args.tagList != null) {
            this.tagList = args.tagList;
        }
        if (args != null && args.attachmentCount != null) {
            this.attachmentCount = args.attachmentCount;
        }
        if (args != null && args.dNameLoc != null) {
            this.dNameLoc = args.dNameLoc;
        }
        if (args != null && args.attachments != null) {
            this.attachments = args.attachments;
        }
        if (args != null && args.contentHolders != null) {
            this.contentHolders = args.contentHolders;
        }
        if (args != null && args.policy != null) {
            this.policy = args.policy;
        }
        if (args != null && args.status != null) {
            this.status = args.status;
        }
        if (args != null && args.createDate != null) {
            if (typeof args.createDate === "number") {
                this.createDate = new Int64(args.createDate);
            }
            else {
                this.createDate = args.createDate;
            }
        }
        if (args != null && args.regDate != null) {
            if (typeof args.regDate === "number") {
                this.regDate = new Int64(args.regDate);
            }
            else {
                this.regDate = args.regDate;
            }
        }
        if (args != null && args.regNumber != null) {
            this.regNumber = args.regNumber;
        }
        if (args != null && args.sysNumber != null) {
            this.sysNumber = args.sysNumber;
        }
        if (args != null && args.docAuthor != null) {
            this.docAuthor = args.docAuthor;
        }
        if (args != null && args.creator != null) {
            this.creator = args.creator;
        }
        if (args != null && args.knowledgeDocumentPermission != null) {
            this.knowledgeDocumentPermission = args.knowledgeDocumentPermission;
        }
        if (args != null && args.relations != null) {
            this.relations = args.relations;
        }
        if (args != null && args.statusComment != null) {
            this.statusComment = args.statusComment;
        }
        if (args != null && args.docAuthorDepartment != null) {
            this.docAuthorDepartment = args.docAuthorDepartment;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("KnowledgeDocument");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.nodeTreeId != null) {
            output.writeFieldBegin("nodeTreeId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.nodeTreeId);
            output.writeFieldEnd();
        }
        if (this.documentId != null) {
            output.writeFieldBegin("documentId", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.documentId);
            output.writeFieldEnd();
        }
        if (this.kName != null) {
            output.writeFieldBegin("kName", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.kName);
            output.writeFieldEnd();
        }
        if (this.tagList != null) {
            output.writeFieldBegin("tagList", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.tagList);
            output.writeFieldEnd();
        }
        if (this.attachmentCount != null) {
            output.writeFieldBegin("attachmentCount", thrift.Thrift.Type.I32, 6);
            output.writeI32(this.attachmentCount);
            output.writeFieldEnd();
        }
        if (this.dNameLoc != null) {
            output.writeFieldBegin("dNameLoc", thrift.Thrift.Type.MAP, 7);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.dNameLoc.size);
            this.dNameLoc.forEach((value_1: string, key_1: string): void => {
                output.writeString(key_1);
                output.writeString(value_1);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.attachments != null) {
            output.writeFieldBegin("attachments", thrift.Thrift.Type.LIST, 8);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.attachments.length);
            this.attachments.forEach((value_2: core.Attachment): void => {
                value_2.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.contentHolders != null) {
            output.writeFieldBegin("contentHolders", thrift.Thrift.Type.LIST, 9);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.contentHolders.length);
            this.contentHolders.forEach((value_3: core.ContentHolder): void => {
                value_3.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.policy != null) {
            output.writeFieldBegin("policy", thrift.Thrift.Type.STRUCT, 10);
            this.policy.write(output);
            output.writeFieldEnd();
        }
        if (this.status != null) {
            output.writeFieldBegin("status", thrift.Thrift.Type.I32, 11);
            output.writeI32(this.status);
            output.writeFieldEnd();
        }
        if (this.createDate != null) {
            output.writeFieldBegin("createDate", thrift.Thrift.Type.I64, 12);
            output.writeI64(this.createDate);
            output.writeFieldEnd();
        }
        if (this.regDate != null) {
            output.writeFieldBegin("regDate", thrift.Thrift.Type.I64, 13);
            output.writeI64(this.regDate);
            output.writeFieldEnd();
        }
        if (this.regNumber != null) {
            output.writeFieldBegin("regNumber", thrift.Thrift.Type.STRING, 14);
            output.writeString(this.regNumber);
            output.writeFieldEnd();
        }
        if (this.sysNumber != null) {
            output.writeFieldBegin("sysNumber", thrift.Thrift.Type.STRING, 15);
            output.writeString(this.sysNumber);
            output.writeFieldEnd();
        }
        if (this.docAuthor != null) {
            output.writeFieldBegin("docAuthor", thrift.Thrift.Type.STRUCT, 16);
            this.docAuthor.write(output);
            output.writeFieldEnd();
        }
        if (this.creator != null) {
            output.writeFieldBegin("creator", thrift.Thrift.Type.STRUCT, 17);
            this.creator.write(output);
            output.writeFieldEnd();
        }
        if (this.knowledgeDocumentPermission != null) {
            output.writeFieldBegin("knowledgeDocumentPermission", thrift.Thrift.Type.STRUCT, 18);
            this.knowledgeDocumentPermission.write(output);
            output.writeFieldEnd();
        }
        if (this.relations != null) {
            output.writeFieldBegin("relations", thrift.Thrift.Type.LIST, 19);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.relations.length);
            this.relations.forEach((value_4: KnowledgeDocumentRelation.KnowledgeDocumentRelation): void => {
                value_4.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.statusComment != null) {
            output.writeFieldBegin("statusComment", thrift.Thrift.Type.STRING, 20);
            output.writeString(this.statusComment);
            output.writeFieldEnd();
        }
        if (this.docAuthorDepartment != null) {
            output.writeFieldBegin("docAuthorDepartment", thrift.Thrift.Type.STRING, 21);
            output.writeString(this.docAuthorDepartment);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): KnowledgeDocument {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.id = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.nodeTreeId = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_7: string = input.readString();
                        _args.documentId = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_8: string = input.readString();
                        _args.kName = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_9: string = input.readString();
                        _args.tagList = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_10: number = input.readI32();
                        _args.attachmentCount = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_11: Map<string, string> = new Map<string, string>();
                        const metadata_1: thrift.TMap = input.readMapBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const key_2: string = input.readString();
                            const value_12: string = input.readString();
                            value_11.set(key_2, value_12);
                        }
                        input.readMapEnd();
                        _args.dNameLoc = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_13: Array<core.Attachment> = new Array<core.Attachment>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_14: core.Attachment = core.Attachment.read(input);
                            value_13.push(value_14);
                        }
                        input.readListEnd();
                        _args.attachments = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_15: Array<core.ContentHolder> = new Array<core.ContentHolder>();
                        const metadata_3: thrift.TList = input.readListBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_16: core.ContentHolder = core.ContentHolder.read(input);
                            value_15.push(value_16);
                        }
                        input.readListEnd();
                        _args.contentHolders = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_17: core.DocumentAccessPolicy = core.DocumentAccessPolicy.read(input);
                        _args.policy = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_18: KnowledgeDocumentStatus.KnowledgeDocumentStatus = input.readI32();
                        _args.status = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_19: Int64 = input.readI64();
                        _args.createDate = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_20: Int64 = input.readI64();
                        _args.regDate = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_21: string = input.readString();
                        _args.regNumber = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_22: string = input.readString();
                        _args.sysNumber = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_23: core.UserOrGroup = core.UserOrGroup.read(input);
                        _args.docAuthor = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 17:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_24: core.UserOrGroup = core.UserOrGroup.read(input);
                        _args.creator = value_24;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 18:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_25: KnowledgeDocumentPermission.KnowledgeDocumentPermission = KnowledgeDocumentPermission.KnowledgeDocumentPermission.read(input);
                        _args.knowledgeDocumentPermission = value_25;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 19:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_26: Array<KnowledgeDocumentRelation.KnowledgeDocumentRelation> = new Array<KnowledgeDocumentRelation.KnowledgeDocumentRelation>();
                        const metadata_4: thrift.TList = input.readListBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const value_27: KnowledgeDocumentRelation.KnowledgeDocumentRelation = KnowledgeDocumentRelation.KnowledgeDocumentRelation.read(input);
                            value_26.push(value_27);
                        }
                        input.readListEnd();
                        _args.relations = value_26;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 20:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_28: string = input.readString();
                        _args.statusComment = value_28;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 21:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_29: string = input.readString();
                        _args.docAuthorDepartment = value_29;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new KnowledgeDocument(_args);
    }
}

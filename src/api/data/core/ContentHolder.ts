/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as ContentHolderLink from "./ContentHolderLink";
import * as ContentHolderUserVisibility from "./ContentHolderUserVisibility";
export interface IContentHolderArgs {
    id?: string;
    patternId?: string;
    oName?: string;
    isSystem?: boolean;
    contentHolderLink?: Array<ContentHolderLink.ContentHolderLink>;
    visibleOnShort?: boolean;
    visibleOnFull?: boolean;
    showInInfo?: boolean;
    order?: number;
    contentVisibilityList?: Array<ContentHolderUserVisibility.ContentHolderUserVisibility>;
    canEditUserHOS?: boolean;
    onShow?: string;
    oNameLoc?: Map<string, string>;
    canEditContent?: boolean;
    canRemove?: boolean;
    documentId?: string;
}
export class ContentHolder {
    public id?: string;
    public patternId?: string;
    public oName?: string;
    public isSystem?: boolean;
    public contentHolderLink?: Array<ContentHolderLink.ContentHolderLink>;
    public visibleOnShort?: boolean;
    public visibleOnFull?: boolean;
    public showInInfo?: boolean;
    public order?: number;
    public contentVisibilityList?: Array<ContentHolderUserVisibility.ContentHolderUserVisibility>;
    public canEditUserHOS?: boolean;
    public onShow?: string;
    public oNameLoc?: Map<string, string>;
    public canEditContent?: boolean;
    public canRemove?: boolean;
    public documentId?: string;
    constructor(args?: IContentHolderArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.patternId != null) {
            this.patternId = args.patternId;
        }
        if (args != null && args.oName != null) {
            this.oName = args.oName;
        }
        if (args != null && args.isSystem != null) {
            this.isSystem = args.isSystem;
        }
        if (args != null && args.contentHolderLink != null) {
            this.contentHolderLink = args.contentHolderLink;
        }
        if (args != null && args.visibleOnShort != null) {
            this.visibleOnShort = args.visibleOnShort;
        }
        if (args != null && args.visibleOnFull != null) {
            this.visibleOnFull = args.visibleOnFull;
        }
        if (args != null && args.showInInfo != null) {
            this.showInInfo = args.showInInfo;
        }
        if (args != null && args.order != null) {
            this.order = args.order;
        }
        if (args != null && args.contentVisibilityList != null) {
            this.contentVisibilityList = args.contentVisibilityList;
        }
        if (args != null && args.canEditUserHOS != null) {
            this.canEditUserHOS = args.canEditUserHOS;
        }
        if (args != null && args.onShow != null) {
            this.onShow = args.onShow;
        }
        if (args != null && args.oNameLoc != null) {
            this.oNameLoc = args.oNameLoc;
        }
        if (args != null && args.canEditContent != null) {
            this.canEditContent = args.canEditContent;
        }
        if (args != null && args.canRemove != null) {
            this.canRemove = args.canRemove;
        }
        if (args != null && args.documentId != null) {
            this.documentId = args.documentId;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ContentHolder");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.patternId != null) {
            output.writeFieldBegin("patternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.patternId);
            output.writeFieldEnd();
        }
        if (this.oName != null) {
            output.writeFieldBegin("oName", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.oName);
            output.writeFieldEnd();
        }
        if (this.isSystem != null) {
            output.writeFieldBegin("isSystem", thrift.Thrift.Type.BOOL, 4);
            output.writeBool(this.isSystem);
            output.writeFieldEnd();
        }
        if (this.contentHolderLink != null) {
            output.writeFieldBegin("contentHolderLink", thrift.Thrift.Type.LIST, 5);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.contentHolderLink.length);
            this.contentHolderLink.forEach((value_1: ContentHolderLink.ContentHolderLink): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.visibleOnShort != null) {
            output.writeFieldBegin("visibleOnShort", thrift.Thrift.Type.BOOL, 6);
            output.writeBool(this.visibleOnShort);
            output.writeFieldEnd();
        }
        if (this.visibleOnFull != null) {
            output.writeFieldBegin("visibleOnFull", thrift.Thrift.Type.BOOL, 7);
            output.writeBool(this.visibleOnFull);
            output.writeFieldEnd();
        }
        if (this.showInInfo != null) {
            output.writeFieldBegin("showInInfo", thrift.Thrift.Type.BOOL, 8);
            output.writeBool(this.showInInfo);
            output.writeFieldEnd();
        }
        if (this.order != null) {
            output.writeFieldBegin("order", thrift.Thrift.Type.I32, 9);
            output.writeI32(this.order);
            output.writeFieldEnd();
        }
        if (this.contentVisibilityList != null) {
            output.writeFieldBegin("contentVisibilityList", thrift.Thrift.Type.LIST, 10);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.contentVisibilityList.length);
            this.contentVisibilityList.forEach((value_2: ContentHolderUserVisibility.ContentHolderUserVisibility): void => {
                value_2.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.canEditUserHOS != null) {
            output.writeFieldBegin("canEditUserHOS", thrift.Thrift.Type.BOOL, 11);
            output.writeBool(this.canEditUserHOS);
            output.writeFieldEnd();
        }
        if (this.onShow != null) {
            output.writeFieldBegin("onShow", thrift.Thrift.Type.STRING, 12);
            output.writeString(this.onShow);
            output.writeFieldEnd();
        }
        if (this.oNameLoc != null) {
            output.writeFieldBegin("oNameLoc", thrift.Thrift.Type.MAP, 13);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.oNameLoc.size);
            this.oNameLoc.forEach((value_3: string, key_1: string): void => {
                output.writeString(key_1);
                output.writeString(value_3);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.canEditContent != null) {
            output.writeFieldBegin("canEditContent", thrift.Thrift.Type.BOOL, 14);
            output.writeBool(this.canEditContent);
            output.writeFieldEnd();
        }
        if (this.canRemove != null) {
            output.writeFieldBegin("canRemove", thrift.Thrift.Type.BOOL, 15);
            output.writeBool(this.canRemove);
            output.writeFieldEnd();
        }
        if (this.documentId != null) {
            output.writeFieldBegin("documentId", thrift.Thrift.Type.STRING, 16);
            output.writeString(this.documentId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ContentHolder {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.id = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.patternId = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.oName = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_7: boolean = input.readBool();
                        _args.isSystem = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_8: Array<ContentHolderLink.ContentHolderLink> = new Array<ContentHolderLink.ContentHolderLink>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_9: ContentHolderLink.ContentHolderLink = ContentHolderLink.ContentHolderLink.read(input);
                            value_8.push(value_9);
                        }
                        input.readListEnd();
                        _args.contentHolderLink = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_10: boolean = input.readBool();
                        _args.visibleOnShort = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_11: boolean = input.readBool();
                        _args.visibleOnFull = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_12: boolean = input.readBool();
                        _args.showInInfo = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_13: number = input.readI32();
                        _args.order = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_14: Array<ContentHolderUserVisibility.ContentHolderUserVisibility> = new Array<ContentHolderUserVisibility.ContentHolderUserVisibility>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_15: ContentHolderUserVisibility.ContentHolderUserVisibility = ContentHolderUserVisibility.ContentHolderUserVisibility.read(input);
                            value_14.push(value_15);
                        }
                        input.readListEnd();
                        _args.contentVisibilityList = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_16: boolean = input.readBool();
                        _args.canEditUserHOS = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_17: string = input.readString();
                        _args.onShow = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_18: Map<string, string> = new Map<string, string>();
                        const metadata_3: thrift.TMap = input.readMapBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const key_2: string = input.readString();
                            const value_19: string = input.readString();
                            value_18.set(key_2, value_19);
                        }
                        input.readMapEnd();
                        _args.oNameLoc = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_20: boolean = input.readBool();
                        _args.canEditContent = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_21: boolean = input.readBool();
                        _args.canRemove = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_22: string = input.readString();
                        _args.documentId = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ContentHolder(_args);
    }
}

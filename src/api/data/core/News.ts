/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 from "node-int64";
import * as thrift from "thrift";
export interface INewsArgs {
    id?: string;
    createDate?: number | Int64;
    theNewsName?: string;
    theNewsDescription?: string;
    accountIds?: Set<string>;
    previewUrl?: string;
    urls?: Array<string>;
}
export class News {
    public id?: string;
    public createDate?: Int64;
    public theNewsName?: string;
    public theNewsDescription?: string;
    public accountIds?: Set<string>;
    public previewUrl?: string;
    public urls?: Array<string>;
    constructor(args?: INewsArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.createDate != null) {
            if (typeof args.createDate === "number") {
                this.createDate = new Int64(args.createDate);
            }
            else {
                this.createDate = args.createDate;
            }
        }
        if (args != null && args.theNewsName != null) {
            this.theNewsName = args.theNewsName;
        }
        if (args != null && args.theNewsDescription != null) {
            this.theNewsDescription = args.theNewsDescription;
        }
        if (args != null && args.accountIds != null) {
            this.accountIds = args.accountIds;
        }
        if (args != null && args.previewUrl != null) {
            this.previewUrl = args.previewUrl;
        }
        if (args != null && args.urls != null) {
            this.urls = args.urls;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("News");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.createDate != null) {
            output.writeFieldBegin("createDate", thrift.Thrift.Type.I64, 2);
            output.writeI64(this.createDate);
            output.writeFieldEnd();
        }
        if (this.theNewsName != null) {
            output.writeFieldBegin("theNewsName", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.theNewsName);
            output.writeFieldEnd();
        }
        if (this.theNewsDescription != null) {
            output.writeFieldBegin("theNewsDescription", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.theNewsDescription);
            output.writeFieldEnd();
        }
        if (this.accountIds != null) {
            output.writeFieldBegin("accountIds", thrift.Thrift.Type.SET, 5);
            output.writeSetBegin(thrift.Thrift.Type.STRING, this.accountIds.size);
            this.accountIds.forEach((value_1: string): void => {
                output.writeString(value_1);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        if (this.previewUrl != null) {
            output.writeFieldBegin("previewUrl", thrift.Thrift.Type.STRING, 6);
            output.writeString(this.previewUrl);
            output.writeFieldEnd();
        }
        if (this.urls != null) {
            output.writeFieldBegin("urls", thrift.Thrift.Type.LIST, 7);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.urls.length);
            this.urls.forEach((value_2: string): void => {
                output.writeString(value_2);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): News {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.id = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_4: Int64 = input.readI64();
                        _args.createDate = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.theNewsName = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.theNewsDescription = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_7: Set<string> = new Set<string>();
                        const metadata_1: thrift.TSet = input.readSetBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_8: string = input.readString();
                            value_7.add(value_8);
                        }
                        input.readSetEnd();
                        _args.accountIds = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_9: string = input.readString();
                        _args.previewUrl = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_10: Array<string> = new Array<string>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_11: string = input.readString();
                            value_10.push(value_11);
                        }
                        input.readListEnd();
                        _args.urls = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new News(_args);
    }
}

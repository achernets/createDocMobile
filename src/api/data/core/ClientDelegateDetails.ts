/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 from "node-int64";
import * as thrift from "thrift";
import * as core from "./";
export interface IClientDelegateDetailsArgs {
    id?: string;
    dateStart?: number | Int64;
    dateEnd?: number | Int64;
    account?: core.Account;
    docPatternGroup?: core.DocumentPatternGroup;
    docPattern?: core.DocumentPattern;
    actionTypes?: Set<core.DocPatternStageActionType>;
    documentDateFrom?: number | Int64;
    documentDateTo?: number | Int64;
    notNotifyOriginalUserByEmail?: boolean;
    clientDelegateInfoId?: string;
}
export class ClientDelegateDetails {
    public id?: string;
    public dateStart?: Int64;
    public dateEnd?: Int64;
    public account?: core.Account;
    public docPatternGroup?: core.DocumentPatternGroup;
    public docPattern?: core.DocumentPattern;
    public actionTypes?: Set<core.DocPatternStageActionType>;
    public documentDateFrom?: Int64;
    public documentDateTo?: Int64;
    public notNotifyOriginalUserByEmail?: boolean;
    public clientDelegateInfoId?: string;
    constructor(args?: IClientDelegateDetailsArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.dateStart != null) {
            if (typeof args.dateStart === "number") {
                this.dateStart = new Int64(args.dateStart);
            }
            else {
                this.dateStart = args.dateStart;
            }
        }
        if (args != null && args.dateEnd != null) {
            if (typeof args.dateEnd === "number") {
                this.dateEnd = new Int64(args.dateEnd);
            }
            else {
                this.dateEnd = args.dateEnd;
            }
        }
        if (args != null && args.account != null) {
            this.account = args.account;
        }
        if (args != null && args.docPatternGroup != null) {
            this.docPatternGroup = args.docPatternGroup;
        }
        if (args != null && args.docPattern != null) {
            this.docPattern = args.docPattern;
        }
        if (args != null && args.actionTypes != null) {
            this.actionTypes = args.actionTypes;
        }
        if (args != null && args.documentDateFrom != null) {
            if (typeof args.documentDateFrom === "number") {
                this.documentDateFrom = new Int64(args.documentDateFrom);
            }
            else {
                this.documentDateFrom = args.documentDateFrom;
            }
        }
        if (args != null && args.documentDateTo != null) {
            if (typeof args.documentDateTo === "number") {
                this.documentDateTo = new Int64(args.documentDateTo);
            }
            else {
                this.documentDateTo = args.documentDateTo;
            }
        }
        if (args != null && args.notNotifyOriginalUserByEmail != null) {
            this.notNotifyOriginalUserByEmail = args.notNotifyOriginalUserByEmail;
        }
        if (args != null && args.clientDelegateInfoId != null) {
            this.clientDelegateInfoId = args.clientDelegateInfoId;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ClientDelegateDetails");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.dateStart != null) {
            output.writeFieldBegin("dateStart", thrift.Thrift.Type.I64, 2);
            output.writeI64(this.dateStart);
            output.writeFieldEnd();
        }
        if (this.dateEnd != null) {
            output.writeFieldBegin("dateEnd", thrift.Thrift.Type.I64, 3);
            output.writeI64(this.dateEnd);
            output.writeFieldEnd();
        }
        if (this.account != null) {
            output.writeFieldBegin("account", thrift.Thrift.Type.STRUCT, 4);
            this.account.write(output);
            output.writeFieldEnd();
        }
        if (this.docPatternGroup != null) {
            output.writeFieldBegin("docPatternGroup", thrift.Thrift.Type.STRUCT, 5);
            this.docPatternGroup.write(output);
            output.writeFieldEnd();
        }
        if (this.docPattern != null) {
            output.writeFieldBegin("docPattern", thrift.Thrift.Type.STRUCT, 6);
            this.docPattern.write(output);
            output.writeFieldEnd();
        }
        if (this.actionTypes != null) {
            output.writeFieldBegin("actionTypes", thrift.Thrift.Type.SET, 7);
            output.writeSetBegin(thrift.Thrift.Type.I32, this.actionTypes.size);
            this.actionTypes.forEach((value_1: core.DocPatternStageActionType): void => {
                output.writeI32(value_1);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        if (this.documentDateFrom != null) {
            output.writeFieldBegin("documentDateFrom", thrift.Thrift.Type.I64, 8);
            output.writeI64(this.documentDateFrom);
            output.writeFieldEnd();
        }
        if (this.documentDateTo != null) {
            output.writeFieldBegin("documentDateTo", thrift.Thrift.Type.I64, 9);
            output.writeI64(this.documentDateTo);
            output.writeFieldEnd();
        }
        if (this.notNotifyOriginalUserByEmail != null) {
            output.writeFieldBegin("notNotifyOriginalUserByEmail", thrift.Thrift.Type.BOOL, 10);
            output.writeBool(this.notNotifyOriginalUserByEmail);
            output.writeFieldEnd();
        }
        if (this.clientDelegateInfoId != null) {
            output.writeFieldBegin("clientDelegateInfoId", thrift.Thrift.Type.STRING, 11);
            output.writeString(this.clientDelegateInfoId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ClientDelegateDetails {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.id = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_3: Int64 = input.readI64();
                        _args.dateStart = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_4: Int64 = input.readI64();
                        _args.dateEnd = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_5: core.Account = core.Account.read(input);
                        _args.account = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_6: core.DocumentPatternGroup = core.DocumentPatternGroup.read(input);
                        _args.docPatternGroup = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_7: core.DocumentPattern = core.DocumentPattern.read(input);
                        _args.docPattern = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_8: Set<core.DocPatternStageActionType> = new Set<core.DocPatternStageActionType>();
                        const metadata_1: thrift.TSet = input.readSetBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_9: core.DocPatternStageActionType = input.readI32();
                            value_8.add(value_9);
                        }
                        input.readSetEnd();
                        _args.actionTypes = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_10: Int64 = input.readI64();
                        _args.documentDateFrom = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_11: Int64 = input.readI64();
                        _args.documentDateTo = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_12: boolean = input.readBool();
                        _args.notNotifyOriginalUserByEmail = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_13: string = input.readString();
                        _args.clientDelegateInfoId = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ClientDelegateDetails(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as core from "./";
import * as ScriptDictionaryType from "./ScriptDictionaryType";
export interface IScriptDictionaryArgs {
    id?: core.CompositeId;
    oName?: string;
    oDescription?: string;
    script?: string;
    valid?: boolean;
    type?: ScriptDictionaryType.ScriptDictionaryType;
}
export class ScriptDictionary {
    public id?: core.CompositeId;
    public oName?: string;
    public oDescription?: string;
    public script?: string;
    public valid?: boolean;
    public type?: ScriptDictionaryType.ScriptDictionaryType;
    constructor(args?: IScriptDictionaryArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.oName != null) {
            this.oName = args.oName;
        }
        if (args != null && args.oDescription != null) {
            this.oDescription = args.oDescription;
        }
        if (args != null && args.script != null) {
            this.script = args.script;
        }
        if (args != null && args.valid != null) {
            this.valid = args.valid;
        }
        if (args != null && args.type != null) {
            this.type = args.type;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ScriptDictionary");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRUCT, 1);
            this.id.write(output);
            output.writeFieldEnd();
        }
        if (this.oName != null) {
            output.writeFieldBegin("oName", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.oName);
            output.writeFieldEnd();
        }
        if (this.oDescription != null) {
            output.writeFieldBegin("oDescription", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.oDescription);
            output.writeFieldEnd();
        }
        if (this.script != null) {
            output.writeFieldBegin("script", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.script);
            output.writeFieldEnd();
        }
        if (this.valid != null) {
            output.writeFieldBegin("valid", thrift.Thrift.Type.BOOL, 5);
            output.writeBool(this.valid);
            output.writeFieldEnd();
        }
        if (this.type != null) {
            output.writeFieldBegin("type", thrift.Thrift.Type.I32, 6);
            output.writeI32(this.type);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ScriptDictionary {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_1: core.CompositeId = core.CompositeId.read(input);
                        _args.id = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.oName = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.oDescription = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.script = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_5: boolean = input.readBool();
                        _args.valid = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_6: ScriptDictionaryType.ScriptDictionaryType = input.readI32();
                        _args.type = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ScriptDictionary(_args);
    }
}

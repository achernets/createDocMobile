/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface IAuthCredsArgs {
    serviceName?: string;
    externalToken?: string;
    login?: string;
    password?: string;
}
export class AuthCreds {
    public serviceName?: string;
    public externalToken?: string;
    public login?: string;
    public password?: string;
    constructor(args?: IAuthCredsArgs) {
        if (args != null && args.serviceName != null) {
            this.serviceName = args.serviceName;
        }
        if (args != null && args.externalToken != null) {
            this.externalToken = args.externalToken;
        }
        if (args != null && args.login != null) {
            this.login = args.login;
        }
        if (args != null && args.password != null) {
            this.password = args.password;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("AuthCreds");
        if (this.serviceName != null) {
            output.writeFieldBegin("serviceName", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.serviceName);
            output.writeFieldEnd();
        }
        if (this.externalToken != null) {
            output.writeFieldBegin("externalToken", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.externalToken);
            output.writeFieldEnd();
        }
        if (this.login != null) {
            output.writeFieldBegin("login", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.login);
            output.writeFieldEnd();
        }
        if (this.password != null) {
            output.writeFieldBegin("password", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.password);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): AuthCreds {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.serviceName = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.externalToken = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.login = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.password = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new AuthCreds(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as AvailablePatternStageType from "./AvailablePatternStageType";
export interface IPatternRelationLinkArgs {
    parentId?: string;
    childId?: string;
    stageType?: AvailablePatternStageType.AvailablePatternStageType;
    stageName?: string;
}
export class PatternRelationLink {
    public parentId?: string;
    public childId?: string;
    public stageType?: AvailablePatternStageType.AvailablePatternStageType;
    public stageName?: string;
    constructor(args?: IPatternRelationLinkArgs) {
        if (args != null && args.parentId != null) {
            this.parentId = args.parentId;
        }
        if (args != null && args.childId != null) {
            this.childId = args.childId;
        }
        if (args != null && args.stageType != null) {
            this.stageType = args.stageType;
        }
        if (args != null && args.stageName != null) {
            this.stageName = args.stageName;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("PatternRelationLink");
        if (this.parentId != null) {
            output.writeFieldBegin("parentId", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.parentId);
            output.writeFieldEnd();
        }
        if (this.childId != null) {
            output.writeFieldBegin("childId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.childId);
            output.writeFieldEnd();
        }
        if (this.stageType != null) {
            output.writeFieldBegin("stageType", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.stageType);
            output.writeFieldEnd();
        }
        if (this.stageName != null) {
            output.writeFieldBegin("stageName", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.stageName);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): PatternRelationLink {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.parentId = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.childId = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_3: AvailablePatternStageType.AvailablePatternStageType = input.readI32();
                        _args.stageType = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.stageName = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new PatternRelationLink(_args);
    }
}

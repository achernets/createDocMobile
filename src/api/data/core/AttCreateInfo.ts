/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as core from "./";
export interface IAttCreateInfoArgs {
    attachmentId?: string;
    attachmentTemplateId?: string;
    fileName?: string;
    forDraft?: boolean;
    editMode?: core.AttachmentEditMode;
    attachmentExtStatus?: core.AttachmentExtStatus;
}
export class AttCreateInfo {
    public attachmentId?: string;
    public attachmentTemplateId?: string;
    public fileName?: string;
    public forDraft?: boolean;
    public editMode?: core.AttachmentEditMode;
    public attachmentExtStatus?: core.AttachmentExtStatus;
    constructor(args?: IAttCreateInfoArgs) {
        if (args != null && args.attachmentId != null) {
            this.attachmentId = args.attachmentId;
        }
        if (args != null && args.attachmentTemplateId != null) {
            this.attachmentTemplateId = args.attachmentTemplateId;
        }
        if (args != null && args.fileName != null) {
            this.fileName = args.fileName;
        }
        if (args != null && args.forDraft != null) {
            this.forDraft = args.forDraft;
        }
        if (args != null && args.editMode != null) {
            this.editMode = args.editMode;
        }
        if (args != null && args.attachmentExtStatus != null) {
            this.attachmentExtStatus = args.attachmentExtStatus;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("AttCreateInfo");
        if (this.attachmentId != null) {
            output.writeFieldBegin("attachmentId", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.attachmentId);
            output.writeFieldEnd();
        }
        if (this.attachmentTemplateId != null) {
            output.writeFieldBegin("attachmentTemplateId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.attachmentTemplateId);
            output.writeFieldEnd();
        }
        if (this.fileName != null) {
            output.writeFieldBegin("fileName", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.fileName);
            output.writeFieldEnd();
        }
        if (this.forDraft != null) {
            output.writeFieldBegin("forDraft", thrift.Thrift.Type.BOOL, 4);
            output.writeBool(this.forDraft);
            output.writeFieldEnd();
        }
        if (this.editMode != null) {
            output.writeFieldBegin("editMode", thrift.Thrift.Type.I32, 5);
            output.writeI32(this.editMode);
            output.writeFieldEnd();
        }
        if (this.attachmentExtStatus != null) {
            output.writeFieldBegin("attachmentExtStatus", thrift.Thrift.Type.I32, 7);
            output.writeI32(this.attachmentExtStatus);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): AttCreateInfo {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.attachmentId = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.attachmentTemplateId = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.fileName = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_4: boolean = input.readBool();
                        _args.forDraft = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_5: core.AttachmentEditMode = input.readI32();
                        _args.editMode = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_6: core.AttachmentExtStatus = input.readI32();
                        _args.attachmentExtStatus = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new AttCreateInfo(_args);
    }
}

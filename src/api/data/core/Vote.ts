/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as VoteStatus from "./VoteStatus";
import * as VoteParticipant from "./VoteParticipant";
import * as VoteResult from "./VoteResult";
import * as VotePermissions from "./VotePermissions";
import * as VoteUserAnswer from "./VoteUserAnswer";
import * as VoteSettings from "./VoteSettings";
import * as VoteType from "./VoteType";
export interface IVoteArgs {
    id?: string;
    iteration?: number;
    voteStatus?: VoteStatus.VoteStatus;
    participantList?: Array<VoteParticipant.VoteParticipant>;
    voteResult?: VoteResult.VoteResult;
    votePermissions?: VotePermissions.VotePermissions;
    voteUserAnswerList?: Array<VoteUserAnswer.VoteUserAnswer>;
    voteSettings?: VoteSettings.VoteSettings;
    voteType?: VoteType.VoteType;
    completed?: boolean;
}
export class Vote {
    public id?: string;
    public iteration?: number;
    public voteStatus?: VoteStatus.VoteStatus;
    public participantList?: Array<VoteParticipant.VoteParticipant>;
    public voteResult?: VoteResult.VoteResult;
    public votePermissions?: VotePermissions.VotePermissions;
    public voteUserAnswerList?: Array<VoteUserAnswer.VoteUserAnswer>;
    public voteSettings?: VoteSettings.VoteSettings;
    public voteType?: VoteType.VoteType;
    public completed?: boolean;
    constructor(args?: IVoteArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.iteration != null) {
            this.iteration = args.iteration;
        }
        if (args != null && args.voteStatus != null) {
            this.voteStatus = args.voteStatus;
        }
        if (args != null && args.participantList != null) {
            this.participantList = args.participantList;
        }
        if (args != null && args.voteResult != null) {
            this.voteResult = args.voteResult;
        }
        if (args != null && args.votePermissions != null) {
            this.votePermissions = args.votePermissions;
        }
        if (args != null && args.voteUserAnswerList != null) {
            this.voteUserAnswerList = args.voteUserAnswerList;
        }
        if (args != null && args.voteSettings != null) {
            this.voteSettings = args.voteSettings;
        }
        if (args != null && args.voteType != null) {
            this.voteType = args.voteType;
        }
        if (args != null && args.completed != null) {
            this.completed = args.completed;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("Vote");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.iteration != null) {
            output.writeFieldBegin("iteration", thrift.Thrift.Type.I32, 2);
            output.writeI32(this.iteration);
            output.writeFieldEnd();
        }
        if (this.voteStatus != null) {
            output.writeFieldBegin("voteStatus", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.voteStatus);
            output.writeFieldEnd();
        }
        if (this.participantList != null) {
            output.writeFieldBegin("participantList", thrift.Thrift.Type.LIST, 4);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.participantList.length);
            this.participantList.forEach((value_1: VoteParticipant.VoteParticipant): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.voteResult != null) {
            output.writeFieldBegin("voteResult", thrift.Thrift.Type.STRUCT, 5);
            this.voteResult.write(output);
            output.writeFieldEnd();
        }
        if (this.votePermissions != null) {
            output.writeFieldBegin("votePermissions", thrift.Thrift.Type.STRUCT, 6);
            this.votePermissions.write(output);
            output.writeFieldEnd();
        }
        if (this.voteUserAnswerList != null) {
            output.writeFieldBegin("voteUserAnswerList", thrift.Thrift.Type.LIST, 7);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.voteUserAnswerList.length);
            this.voteUserAnswerList.forEach((value_2: VoteUserAnswer.VoteUserAnswer): void => {
                value_2.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.voteSettings != null) {
            output.writeFieldBegin("voteSettings", thrift.Thrift.Type.STRUCT, 8);
            this.voteSettings.write(output);
            output.writeFieldEnd();
        }
        if (this.voteType != null) {
            output.writeFieldBegin("voteType", thrift.Thrift.Type.I32, 9);
            output.writeI32(this.voteType);
            output.writeFieldEnd();
        }
        if (this.completed != null) {
            output.writeFieldBegin("completed", thrift.Thrift.Type.BOOL, 10);
            output.writeBool(this.completed);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): Vote {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.id = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_4: number = input.readI32();
                        _args.iteration = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_5: VoteStatus.VoteStatus = input.readI32();
                        _args.voteStatus = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_6: Array<VoteParticipant.VoteParticipant> = new Array<VoteParticipant.VoteParticipant>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_7: VoteParticipant.VoteParticipant = VoteParticipant.VoteParticipant.read(input);
                            value_6.push(value_7);
                        }
                        input.readListEnd();
                        _args.participantList = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_8: VoteResult.VoteResult = VoteResult.VoteResult.read(input);
                        _args.voteResult = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_9: VotePermissions.VotePermissions = VotePermissions.VotePermissions.read(input);
                        _args.votePermissions = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_10: Array<VoteUserAnswer.VoteUserAnswer> = new Array<VoteUserAnswer.VoteUserAnswer>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_11: VoteUserAnswer.VoteUserAnswer = VoteUserAnswer.VoteUserAnswer.read(input);
                            value_10.push(value_11);
                        }
                        input.readListEnd();
                        _args.voteUserAnswerList = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_12: VoteSettings.VoteSettings = VoteSettings.VoteSettings.read(input);
                        _args.voteSettings = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_13: VoteType.VoteType = input.readI32();
                        _args.voteType = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_14: boolean = input.readBool();
                        _args.completed = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new Vote(_args);
    }
}

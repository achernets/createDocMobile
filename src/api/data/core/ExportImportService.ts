/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 from "node-int64";
import * as thrift from "thrift";
import * as core from "./";
import * as ImportData from "./ImportData";
import * as DiffType from "./DiffType";
import * as Diff from "./Diff";
export interface IExportPatternArgsArgs {
    token: string;
    docPatternId: string;
}
export class ExportPatternArgs {
    public token: string;
    public docPatternId: string;
    constructor(args: IExportPatternArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.docPatternId != null) {
            this.docPatternId = args.docPatternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[docPatternId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ExportPatternArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.docPatternId != null) {
            output.writeFieldBegin("docPatternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.docPatternId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ExportPatternArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.token = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.docPatternId = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.docPatternId !== undefined) {
            return new ExportPatternArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read ExportPatternArgs from input");
        }
    }
}
export interface IGetAllImportDataArgsArgs {
    token: string;
    filter: core.KazFilter;
}
export class GetAllImportDataArgs {
    public token: string;
    public filter: core.KazFilter;
    constructor(args: IGetAllImportDataArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllImportDataArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 2);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllImportDataArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.token = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_4: core.KazFilter = core.KazFilter.read(input);
                        _args.filter = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.filter !== undefined) {
            return new GetAllImportDataArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAllImportDataArgs from input");
        }
    }
}
export interface IGetCountImportDataArgsArgs {
    token: string;
    filter: core.KazFilter;
}
export class GetCountImportDataArgs {
    public token: string;
    public filter: core.KazFilter;
    constructor(args: IGetCountImportDataArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetCountImportDataArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 2);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetCountImportDataArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.token = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_6: core.KazFilter = core.KazFilter.read(input);
                        _args.filter = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.filter !== undefined) {
            return new GetCountImportDataArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetCountImportDataArgs from input");
        }
    }
}
export interface IImportPatternArgsArgs {
    token: string;
    xmlFile: Buffer;
    accountId: string;
    importedPatternId: string;
    bpmRequired: boolean;
}
export class ImportPatternArgs {
    public token: string;
    public xmlFile: Buffer;
    public accountId: string;
    public importedPatternId: string;
    public bpmRequired: boolean;
    constructor(args: IImportPatternArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.xmlFile != null) {
            this.xmlFile = args.xmlFile;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[xmlFile] is unset!");
        }
        if (args != null && args.accountId != null) {
            this.accountId = args.accountId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[accountId] is unset!");
        }
        if (args != null && args.importedPatternId != null) {
            this.importedPatternId = args.importedPatternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[importedPatternId] is unset!");
        }
        if (args != null && args.bpmRequired != null) {
            this.bpmRequired = args.bpmRequired;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[bpmRequired] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ImportPatternArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.xmlFile != null) {
            output.writeFieldBegin("xmlFile", thrift.Thrift.Type.STRING, 2);
            output.writeBinary(this.xmlFile);
            output.writeFieldEnd();
        }
        if (this.accountId != null) {
            output.writeFieldBegin("accountId", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.accountId);
            output.writeFieldEnd();
        }
        if (this.importedPatternId != null) {
            output.writeFieldBegin("importedPatternId", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.importedPatternId);
            output.writeFieldEnd();
        }
        if (this.bpmRequired != null) {
            output.writeFieldBegin("bpmRequired", thrift.Thrift.Type.BOOL, 5);
            output.writeBool(this.bpmRequired);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ImportPatternArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_7: string = input.readString();
                        _args.token = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_8: Buffer = input.readBinary();
                        _args.xmlFile = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_9: string = input.readString();
                        _args.accountId = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_10: string = input.readString();
                        _args.importedPatternId = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_11: boolean = input.readBool();
                        _args.bpmRequired = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.xmlFile !== undefined && _args.accountId !== undefined && _args.importedPatternId !== undefined && _args.bpmRequired !== undefined) {
            return new ImportPatternArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read ImportPatternArgs from input");
        }
    }
}
export interface IGetChangesArgsArgs {
    token: string;
    importedPatternId: string;
    diffType: DiffType.DiffType;
}
export class GetChangesArgs {
    public token: string;
    public importedPatternId: string;
    public diffType: DiffType.DiffType;
    constructor(args: IGetChangesArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.importedPatternId != null) {
            this.importedPatternId = args.importedPatternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[importedPatternId] is unset!");
        }
        if (args != null && args.diffType != null) {
            this.diffType = args.diffType;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[diffType] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetChangesArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.importedPatternId != null) {
            output.writeFieldBegin("importedPatternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.importedPatternId);
            output.writeFieldEnd();
        }
        if (this.diffType != null) {
            output.writeFieldBegin("diffType", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.diffType);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetChangesArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_12: string = input.readString();
                        _args.token = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_13: string = input.readString();
                        _args.importedPatternId = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_14: DiffType.DiffType = input.readI32();
                        _args.diffType = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.importedPatternId !== undefined && _args.diffType !== undefined) {
            return new GetChangesArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetChangesArgs from input");
        }
    }
}
export interface IApplyChangesArgsArgs {
    token: string;
    importedPatternId: string;
    data: Array<Diff.Diff>;
}
export class ApplyChangesArgs {
    public token: string;
    public importedPatternId: string;
    public data: Array<Diff.Diff>;
    constructor(args: IApplyChangesArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.importedPatternId != null) {
            this.importedPatternId = args.importedPatternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[importedPatternId] is unset!");
        }
        if (args != null && args.data != null) {
            this.data = args.data;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[data] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ApplyChangesArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.importedPatternId != null) {
            output.writeFieldBegin("importedPatternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.importedPatternId);
            output.writeFieldEnd();
        }
        if (this.data != null) {
            output.writeFieldBegin("data", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.data.length);
            this.data.forEach((value_15: Diff.Diff): void => {
                value_15.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ApplyChangesArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_16: string = input.readString();
                        _args.token = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_17: string = input.readString();
                        _args.importedPatternId = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_18: Array<Diff.Diff> = new Array<Diff.Diff>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_19: Diff.Diff = Diff.Diff.read(input);
                            value_18.push(value_19);
                        }
                        input.readListEnd();
                        _args.data = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.importedPatternId !== undefined && _args.data !== undefined) {
            return new ApplyChangesArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read ApplyChangesArgs from input");
        }
    }
}
export interface IFinishImportPatternArgsArgs {
    token: string;
    importedPatternId: string;
}
export class FinishImportPatternArgs {
    public token: string;
    public importedPatternId: string;
    constructor(args: IFinishImportPatternArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.importedPatternId != null) {
            this.importedPatternId = args.importedPatternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[importedPatternId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("FinishImportPatternArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.importedPatternId != null) {
            output.writeFieldBegin("importedPatternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.importedPatternId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): FinishImportPatternArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_20: string = input.readString();
                        _args.token = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_21: string = input.readString();
                        _args.importedPatternId = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.importedPatternId !== undefined) {
            return new FinishImportPatternArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read FinishImportPatternArgs from input");
        }
    }
}
export interface IRemoveImportDataArgsArgs {
    token: string;
    importedPatternId: string;
}
export class RemoveImportDataArgs {
    public token: string;
    public importedPatternId: string;
    constructor(args: IRemoveImportDataArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.importedPatternId != null) {
            this.importedPatternId = args.importedPatternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[importedPatternId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RemoveImportDataArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.importedPatternId != null) {
            output.writeFieldBegin("importedPatternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.importedPatternId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RemoveImportDataArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_22: string = input.readString();
                        _args.token = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_23: string = input.readString();
                        _args.importedPatternId = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.importedPatternId !== undefined) {
            return new RemoveImportDataArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read RemoveImportDataArgs from input");
        }
    }
}
export interface IExportPatternResultArgs {
    success?: Buffer;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class ExportPatternResult {
    public success?: Buffer;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IExportPatternResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ExportPatternResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRING, 0);
            output.writeBinary(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ExportPatternResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_24: Buffer = input.readBinary();
                        _args.success = value_24;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_25: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_25;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_26: core.ServerException = core.ServerException.read(input);
                        _args.error = value_26;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ExportPatternResult(_args);
    }
}
export interface IGetAllImportDataResultArgs {
    success?: Array<ImportData.ImportData>;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class GetAllImportDataResult {
    public success?: Array<ImportData.ImportData>;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IGetAllImportDataResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllImportDataResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_27: ImportData.ImportData): void => {
                value_27.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllImportDataResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_28: Array<ImportData.ImportData> = new Array<ImportData.ImportData>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_29: ImportData.ImportData = ImportData.ImportData.read(input);
                            value_28.push(value_29);
                        }
                        input.readListEnd();
                        _args.success = value_28;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_30: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_30;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_31: core.ServerException = core.ServerException.read(input);
                        _args.error = value_31;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAllImportDataResult(_args);
    }
}
export interface IGetCountImportDataResultArgs {
    success?: number | Int64;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class GetCountImportDataResult {
    public success?: Int64;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IGetCountImportDataResultArgs) {
        if (args != null && args.success != null) {
            if (typeof args.success === "number") {
                this.success = new Int64(args.success);
            }
            else {
                this.success = args.success;
            }
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetCountImportDataResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.I64, 0);
            output.writeI64(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetCountImportDataResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_32: Int64 = input.readI64();
                        _args.success = value_32;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_33: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_33;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_34: core.ServerException = core.ServerException.read(input);
                        _args.error = value_34;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetCountImportDataResult(_args);
    }
}
export interface IImportPatternResultArgs {
    success?: ImportData.ImportData;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class ImportPatternResult {
    public success?: ImportData.ImportData;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IImportPatternResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ImportPatternResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ImportPatternResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_35: ImportData.ImportData = ImportData.ImportData.read(input);
                        _args.success = value_35;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_36: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_36;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_37: core.ServerException = core.ServerException.read(input);
                        _args.error = value_37;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ImportPatternResult(_args);
    }
}
export interface IGetChangesResultArgs {
    success?: Array<Diff.Diff>;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class GetChangesResult {
    public success?: Array<Diff.Diff>;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IGetChangesResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetChangesResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_38: Diff.Diff): void => {
                value_38.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetChangesResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_39: Array<Diff.Diff> = new Array<Diff.Diff>();
                        const metadata_3: thrift.TList = input.readListBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_40: Diff.Diff = Diff.Diff.read(input);
                            value_39.push(value_40);
                        }
                        input.readListEnd();
                        _args.success = value_39;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_41: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_41;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_42: core.ServerException = core.ServerException.read(input);
                        _args.error = value_42;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetChangesResult(_args);
    }
}
export interface IApplyChangesResultArgs {
    success?: Array<Diff.Diff>;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class ApplyChangesResult {
    public success?: Array<Diff.Diff>;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IApplyChangesResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ApplyChangesResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_43: Diff.Diff): void => {
                value_43.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ApplyChangesResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_44: Array<Diff.Diff> = new Array<Diff.Diff>();
                        const metadata_4: thrift.TList = input.readListBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const value_45: Diff.Diff = Diff.Diff.read(input);
                            value_44.push(value_45);
                        }
                        input.readListEnd();
                        _args.success = value_44;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_46: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_46;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_47: core.ServerException = core.ServerException.read(input);
                        _args.error = value_47;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ApplyChangesResult(_args);
    }
}
export interface IFinishImportPatternResultArgs {
    success?: number;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class FinishImportPatternResult {
    public success?: number;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IFinishImportPatternResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("FinishImportPatternResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.I32, 0);
            output.writeI32(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): FinishImportPatternResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_48: number = input.readI32();
                        _args.success = value_48;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_49: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_49;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_50: core.ServerException = core.ServerException.read(input);
                        _args.error = value_50;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new FinishImportPatternResult(_args);
    }
}
export interface IRemoveImportDataResultArgs {
    success?: boolean;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class RemoveImportDataResult {
    public success?: boolean;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IRemoveImportDataResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RemoveImportDataResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RemoveImportDataResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_51: boolean = input.readBool();
                        _args.success = value_51;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_52: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_52;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_53: core.ServerException = core.ServerException.read(input);
                        _args.error = value_53;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new RemoveImportDataResult(_args);
    }
}
export class Client {
    public _seqid: number;
    public _reqs: {
        [name: number]: (err: Error | object | undefined, val?: any) => void;
    };
    public output: thrift.TTransport;
    public protocol: new (trans: thrift.TTransport) => thrift.TProtocol;
    constructor(output: thrift.TTransport, protocol: new (trans: thrift.TTransport) => thrift.TProtocol) {
        this._seqid = 0;
        this._reqs = {};
        this.output = output;
        this.protocol = protocol;
    }
    public incrementSeqId(): number {
        return this._seqid += 1;
    }
    public exportPattern(token: string, docPatternId: string): Promise<Buffer> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Buffer>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_exportPattern(token, docPatternId, requestId);
        });
    }
    public getAllImportData(token: string, filter: core.KazFilter): Promise<Array<ImportData.ImportData>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<ImportData.ImportData>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAllImportData(token, filter, requestId);
        });
    }
    public getCountImportData(token: string, filter: core.KazFilter): Promise<Int64> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Int64>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getCountImportData(token, filter, requestId);
        });
    }
    public importPattern(token: string, xmlFile: Buffer, accountId: string, importedPatternId: string, bpmRequired: boolean): Promise<ImportData.ImportData> {
        const requestId: number = this.incrementSeqId();
        return new Promise<ImportData.ImportData>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_importPattern(token, xmlFile, accountId, importedPatternId, bpmRequired, requestId);
        });
    }
    public getChanges(token: string, importedPatternId: string, diffType: DiffType.DiffType): Promise<Array<Diff.Diff>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<Diff.Diff>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getChanges(token, importedPatternId, diffType, requestId);
        });
    }
    public applyChanges(token: string, importedPatternId: string, data: Array<Diff.Diff>): Promise<Array<Diff.Diff>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<Diff.Diff>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_applyChanges(token, importedPatternId, data, requestId);
        });
    }
    public finishImportPattern(token: string, importedPatternId: string): Promise<number> {
        const requestId: number = this.incrementSeqId();
        return new Promise<number>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_finishImportPattern(token, importedPatternId, requestId);
        });
    }
    public removeImportData(token: string, importedPatternId: string): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_removeImportData(token, importedPatternId, requestId);
        });
    }
    public send_exportPattern(token: string, docPatternId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("exportPattern", thrift.Thrift.MessageType.CALL, requestId);
        const args: ExportPatternArgs = new ExportPatternArgs({ token, docPatternId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getAllImportData(token: string, filter: core.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAllImportData", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAllImportDataArgs = new GetAllImportDataArgs({ token, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getCountImportData(token: string, filter: core.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getCountImportData", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetCountImportDataArgs = new GetCountImportDataArgs({ token, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_importPattern(token: string, xmlFile: Buffer, accountId: string, importedPatternId: string, bpmRequired: boolean, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("importPattern", thrift.Thrift.MessageType.CALL, requestId);
        const args: ImportPatternArgs = new ImportPatternArgs({ token, xmlFile, accountId, importedPatternId, bpmRequired });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getChanges(token: string, importedPatternId: string, diffType: DiffType.DiffType, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getChanges", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetChangesArgs = new GetChangesArgs({ token, importedPatternId, diffType });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_applyChanges(token: string, importedPatternId: string, data: Array<Diff.Diff>, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("applyChanges", thrift.Thrift.MessageType.CALL, requestId);
        const args: ApplyChangesArgs = new ApplyChangesArgs({ token, importedPatternId, data });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_finishImportPattern(token: string, importedPatternId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("finishImportPattern", thrift.Thrift.MessageType.CALL, requestId);
        const args: FinishImportPatternArgs = new FinishImportPatternArgs({ token, importedPatternId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_removeImportData(token: string, importedPatternId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("removeImportData", thrift.Thrift.MessageType.CALL, requestId);
        const args: RemoveImportDataArgs = new RemoveImportDataArgs({ token, importedPatternId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public recv_exportPattern(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: ExportPatternResult = ExportPatternResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "exportPattern failed: unknown result"));
                }
            }
        }
    }
    public recv_getAllImportData(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAllImportDataResult = GetAllImportDataResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAllImportData failed: unknown result"));
                }
            }
        }
    }
    public recv_getCountImportData(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetCountImportDataResult = GetCountImportDataResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getCountImportData failed: unknown result"));
                }
            }
        }
    }
    public recv_importPattern(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: ImportPatternResult = ImportPatternResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "importPattern failed: unknown result"));
                }
            }
        }
    }
    public recv_getChanges(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetChangesResult = GetChangesResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getChanges failed: unknown result"));
                }
            }
        }
    }
    public recv_applyChanges(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: ApplyChangesResult = ApplyChangesResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "applyChanges failed: unknown result"));
                }
            }
        }
    }
    public recv_finishImportPattern(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: FinishImportPatternResult = FinishImportPatternResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "finishImportPattern failed: unknown result"));
                }
            }
        }
    }
    public recv_removeImportData(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: RemoveImportDataResult = RemoveImportDataResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "removeImportData failed: unknown result"));
                }
            }
        }
    }
}
export interface IHandler {
    exportPattern(token: string, docPatternId: string): Buffer | Promise<Buffer>;
    getAllImportData(token: string, filter: core.KazFilter): Array<ImportData.ImportData> | Promise<Array<ImportData.ImportData>>;
    getCountImportData(token: string, filter: core.KazFilter): Int64 | Promise<Int64>;
    importPattern(token: string, xmlFile: Buffer, accountId: string, importedPatternId: string, bpmRequired: boolean): ImportData.ImportData | Promise<ImportData.ImportData>;
    getChanges(token: string, importedPatternId: string, diffType: DiffType.DiffType): Array<Diff.Diff> | Promise<Array<Diff.Diff>>;
    applyChanges(token: string, importedPatternId: string, data: Array<Diff.Diff>): Array<Diff.Diff> | Promise<Array<Diff.Diff>>;
    finishImportPattern(token: string, importedPatternId: string): number | Promise<number>;
    removeImportData(token: string, importedPatternId: string): boolean | Promise<boolean>;
}
export class Processor {
    public _handler: IHandler;
    constructor(handler: IHandler) {
        this._handler = handler;
    }
    public process(input: thrift.TProtocol, output: thrift.TProtocol): void {
        const metadata: thrift.TMessage = input.readMessageBegin();
        const fname: string = metadata.fname;
        const requestId: number = metadata.rseqid;
        const methodName: string = "process_" + fname;
        switch (methodName) {
            case "process_exportPattern": {
                this.process_exportPattern(requestId, input, output);
                return;
            }
            case "process_getAllImportData": {
                this.process_getAllImportData(requestId, input, output);
                return;
            }
            case "process_getCountImportData": {
                this.process_getCountImportData(requestId, input, output);
                return;
            }
            case "process_importPattern": {
                this.process_importPattern(requestId, input, output);
                return;
            }
            case "process_getChanges": {
                this.process_getChanges(requestId, input, output);
                return;
            }
            case "process_applyChanges": {
                this.process_applyChanges(requestId, input, output);
                return;
            }
            case "process_finishImportPattern": {
                this.process_finishImportPattern(requestId, input, output);
                return;
            }
            case "process_removeImportData": {
                this.process_removeImportData(requestId, input, output);
                return;
            }
            default: {
                input.skip(thrift.Thrift.Type.STRUCT);
                input.readMessageEnd();
                const errMessage = "Unknown function " + fname;
                const err = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN_METHOD, errMessage);
                output.writeMessageBegin(fname, thrift.Thrift.MessageType.EXCEPTION, requestId);
                err.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        }
    }
    public process_exportPattern(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Buffer>((resolve, reject): void => {
            try {
                const args: ExportPatternArgs = ExportPatternArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.exportPattern(args.token, args.docPatternId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Buffer): void => {
            const result: ExportPatternResult = new ExportPatternResult({ success: data });
            output.writeMessageBegin("exportPattern", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: ExportPatternResult = new ExportPatternResult({ validError: err });
                output.writeMessageBegin("exportPattern", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: ExportPatternResult = new ExportPatternResult({ error: err });
                output.writeMessageBegin("exportPattern", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("exportPattern", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getAllImportData(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<ImportData.ImportData>>((resolve, reject): void => {
            try {
                const args: GetAllImportDataArgs = GetAllImportDataArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAllImportData(args.token, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<ImportData.ImportData>): void => {
            const result: GetAllImportDataResult = new GetAllImportDataResult({ success: data });
            output.writeMessageBegin("getAllImportData", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: GetAllImportDataResult = new GetAllImportDataResult({ validError: err });
                output.writeMessageBegin("getAllImportData", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: GetAllImportDataResult = new GetAllImportDataResult({ error: err });
                output.writeMessageBegin("getAllImportData", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAllImportData", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getCountImportData(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Int64>((resolve, reject): void => {
            try {
                const args: GetCountImportDataArgs = GetCountImportDataArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getCountImportData(args.token, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Int64): void => {
            const result: GetCountImportDataResult = new GetCountImportDataResult({ success: data });
            output.writeMessageBegin("getCountImportData", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: GetCountImportDataResult = new GetCountImportDataResult({ validError: err });
                output.writeMessageBegin("getCountImportData", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: GetCountImportDataResult = new GetCountImportDataResult({ error: err });
                output.writeMessageBegin("getCountImportData", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getCountImportData", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_importPattern(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<ImportData.ImportData>((resolve, reject): void => {
            try {
                const args: ImportPatternArgs = ImportPatternArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.importPattern(args.token, args.xmlFile, args.accountId, args.importedPatternId, args.bpmRequired));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: ImportData.ImportData): void => {
            const result: ImportPatternResult = new ImportPatternResult({ success: data });
            output.writeMessageBegin("importPattern", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: ImportPatternResult = new ImportPatternResult({ validError: err });
                output.writeMessageBegin("importPattern", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: ImportPatternResult = new ImportPatternResult({ error: err });
                output.writeMessageBegin("importPattern", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("importPattern", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getChanges(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<Diff.Diff>>((resolve, reject): void => {
            try {
                const args: GetChangesArgs = GetChangesArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getChanges(args.token, args.importedPatternId, args.diffType));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<Diff.Diff>): void => {
            const result: GetChangesResult = new GetChangesResult({ success: data });
            output.writeMessageBegin("getChanges", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: GetChangesResult = new GetChangesResult({ validError: err });
                output.writeMessageBegin("getChanges", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: GetChangesResult = new GetChangesResult({ error: err });
                output.writeMessageBegin("getChanges", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getChanges", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_applyChanges(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<Diff.Diff>>((resolve, reject): void => {
            try {
                const args: ApplyChangesArgs = ApplyChangesArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.applyChanges(args.token, args.importedPatternId, args.data));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<Diff.Diff>): void => {
            const result: ApplyChangesResult = new ApplyChangesResult({ success: data });
            output.writeMessageBegin("applyChanges", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: ApplyChangesResult = new ApplyChangesResult({ validError: err });
                output.writeMessageBegin("applyChanges", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: ApplyChangesResult = new ApplyChangesResult({ error: err });
                output.writeMessageBegin("applyChanges", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("applyChanges", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_finishImportPattern(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<number>((resolve, reject): void => {
            try {
                const args: FinishImportPatternArgs = FinishImportPatternArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.finishImportPattern(args.token, args.importedPatternId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: number): void => {
            const result: FinishImportPatternResult = new FinishImportPatternResult({ success: data });
            output.writeMessageBegin("finishImportPattern", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: FinishImportPatternResult = new FinishImportPatternResult({ validError: err });
                output.writeMessageBegin("finishImportPattern", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: FinishImportPatternResult = new FinishImportPatternResult({ error: err });
                output.writeMessageBegin("finishImportPattern", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("finishImportPattern", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_removeImportData(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: RemoveImportDataArgs = RemoveImportDataArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.removeImportData(args.token, args.importedPatternId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: RemoveImportDataResult = new RemoveImportDataResult({ success: data });
            output.writeMessageBegin("removeImportData", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: RemoveImportDataResult = new RemoveImportDataResult({ validError: err });
                output.writeMessageBegin("removeImportData", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: RemoveImportDataResult = new RemoveImportDataResult({ error: err });
                output.writeMessageBegin("removeImportData", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("removeImportData", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
}

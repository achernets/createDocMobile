/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as core from "./";
export interface IReportParamsArgs {
    id?: string;
    key?: string;
    value?: string;
    type?: number;
    requared?: boolean;
    oName?: string;
    handbook?: core.HandBook;
    handbookLookupCol?: string;
    handbookSelectColumn?: string;
    row?: core.HBRow;
    user?: core.UserOrGroup;
    department?: core.Department;
    oNameLoc?: Map<string, string>;
}
export class ReportParams {
    public id?: string;
    public key?: string;
    public value?: string;
    public type?: number;
    public requared?: boolean;
    public oName?: string;
    public handbook?: core.HandBook;
    public handbookLookupCol?: string;
    public handbookSelectColumn?: string;
    public row?: core.HBRow;
    public user?: core.UserOrGroup;
    public department?: core.Department;
    public oNameLoc?: Map<string, string>;
    constructor(args?: IReportParamsArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.key != null) {
            this.key = args.key;
        }
        if (args != null && args.value != null) {
            this.value = args.value;
        }
        if (args != null && args.type != null) {
            this.type = args.type;
        }
        if (args != null && args.requared != null) {
            this.requared = args.requared;
        }
        if (args != null && args.oName != null) {
            this.oName = args.oName;
        }
        if (args != null && args.handbook != null) {
            this.handbook = args.handbook;
        }
        if (args != null && args.handbookLookupCol != null) {
            this.handbookLookupCol = args.handbookLookupCol;
        }
        if (args != null && args.handbookSelectColumn != null) {
            this.handbookSelectColumn = args.handbookSelectColumn;
        }
        if (args != null && args.row != null) {
            this.row = args.row;
        }
        if (args != null && args.user != null) {
            this.user = args.user;
        }
        if (args != null && args.department != null) {
            this.department = args.department;
        }
        if (args != null && args.oNameLoc != null) {
            this.oNameLoc = args.oNameLoc;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ReportParams");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.key != null) {
            output.writeFieldBegin("key", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.key);
            output.writeFieldEnd();
        }
        if (this.value != null) {
            output.writeFieldBegin("value", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.value);
            output.writeFieldEnd();
        }
        if (this.type != null) {
            output.writeFieldBegin("type", thrift.Thrift.Type.I32, 4);
            output.writeI32(this.type);
            output.writeFieldEnd();
        }
        if (this.requared != null) {
            output.writeFieldBegin("requared", thrift.Thrift.Type.BOOL, 5);
            output.writeBool(this.requared);
            output.writeFieldEnd();
        }
        if (this.oName != null) {
            output.writeFieldBegin("oName", thrift.Thrift.Type.STRING, 6);
            output.writeString(this.oName);
            output.writeFieldEnd();
        }
        if (this.handbook != null) {
            output.writeFieldBegin("handbook", thrift.Thrift.Type.STRUCT, 7);
            this.handbook.write(output);
            output.writeFieldEnd();
        }
        if (this.handbookLookupCol != null) {
            output.writeFieldBegin("handbookLookupCol", thrift.Thrift.Type.STRING, 8);
            output.writeString(this.handbookLookupCol);
            output.writeFieldEnd();
        }
        if (this.handbookSelectColumn != null) {
            output.writeFieldBegin("handbookSelectColumn", thrift.Thrift.Type.STRING, 9);
            output.writeString(this.handbookSelectColumn);
            output.writeFieldEnd();
        }
        if (this.row != null) {
            output.writeFieldBegin("row", thrift.Thrift.Type.STRUCT, 10);
            this.row.write(output);
            output.writeFieldEnd();
        }
        if (this.user != null) {
            output.writeFieldBegin("user", thrift.Thrift.Type.STRUCT, 11);
            this.user.write(output);
            output.writeFieldEnd();
        }
        if (this.department != null) {
            output.writeFieldBegin("department", thrift.Thrift.Type.STRUCT, 12);
            this.department.write(output);
            output.writeFieldEnd();
        }
        if (this.oNameLoc != null) {
            output.writeFieldBegin("oNameLoc", thrift.Thrift.Type.MAP, 13);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.oNameLoc.size);
            this.oNameLoc.forEach((value_1: string, key_1: string): void => {
                output.writeString(key_1);
                output.writeString(value_1);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ReportParams {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.id = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.key = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.value = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_5: number = input.readI32();
                        _args.type = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_6: boolean = input.readBool();
                        _args.requared = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_7: string = input.readString();
                        _args.oName = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_8: core.HandBook = core.HandBook.read(input);
                        _args.handbook = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_9: string = input.readString();
                        _args.handbookLookupCol = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_10: string = input.readString();
                        _args.handbookSelectColumn = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_11: core.HBRow = core.HBRow.read(input);
                        _args.row = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_12: core.UserOrGroup = core.UserOrGroup.read(input);
                        _args.user = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_13: core.Department = core.Department.read(input);
                        _args.department = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_14: Map<string, string> = new Map<string, string>();
                        const metadata_1: thrift.TMap = input.readMapBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const key_2: string = input.readString();
                            const value_15: string = input.readString();
                            value_14.set(key_2, value_15);
                        }
                        input.readMapEnd();
                        _args.oNameLoc = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ReportParams(_args);
    }
}

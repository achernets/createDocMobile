/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as core from "./";
import * as KnowledgeBase from "./KnowledgeBase";
import * as KnowledgeTree from "./KnowledgeTree";
import * as KnowledgeTreeNode from "./KnowledgeTreeNode";
import * as KnowledgeDocument from "./KnowledgeDocument";
import * as KnowledgeHistoryPage from "./KnowledgeHistoryPage";
import * as KnowledgeColumnPage from "./KnowledgeColumnPage";
import * as KnowledgeColumn from "./KnowledgeColumn";
import * as KnowledgeElementPage from "./KnowledgeElementPage";
import * as KnowledgeDocumentRelation from "./KnowledgeDocumentRelation";
import * as KnowledgeDocumentRelationModel from "./KnowledgeDocumentRelationModel";
export interface IGetAllKnowledgeBaseArgsArgs {
    token: string;
    filter: core.KazFilter;
}
export class GetAllKnowledgeBaseArgs {
    public token: string;
    public filter: core.KazFilter;
    constructor(args: IGetAllKnowledgeBaseArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllKnowledgeBaseArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 2);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllKnowledgeBaseArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.token = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: core.KazFilter = core.KazFilter.read(input);
                        _args.filter = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.filter !== undefined) {
            return new GetAllKnowledgeBaseArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAllKnowledgeBaseArgs from input");
        }
    }
}
export interface IChangeKnowledgeBaseArgsArgs {
    token: string;
    knowledgeBaseToUpdate: KnowledgeBase.KnowledgeBase;
    idToRemove: string;
}
export class ChangeKnowledgeBaseArgs {
    public token: string;
    public knowledgeBaseToUpdate: KnowledgeBase.KnowledgeBase;
    public idToRemove: string;
    constructor(args: IChangeKnowledgeBaseArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.knowledgeBaseToUpdate != null) {
            this.knowledgeBaseToUpdate = args.knowledgeBaseToUpdate;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[knowledgeBaseToUpdate] is unset!");
        }
        if (args != null && args.idToRemove != null) {
            this.idToRemove = args.idToRemove;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[idToRemove] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ChangeKnowledgeBaseArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.knowledgeBaseToUpdate != null) {
            output.writeFieldBegin("knowledgeBaseToUpdate", thrift.Thrift.Type.STRUCT, 2);
            this.knowledgeBaseToUpdate.write(output);
            output.writeFieldEnd();
        }
        if (this.idToRemove != null) {
            output.writeFieldBegin("idToRemove", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.idToRemove);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ChangeKnowledgeBaseArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.token = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_4: KnowledgeBase.KnowledgeBase = KnowledgeBase.KnowledgeBase.read(input);
                        _args.knowledgeBaseToUpdate = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.idToRemove = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.knowledgeBaseToUpdate !== undefined && _args.idToRemove !== undefined) {
            return new ChangeKnowledgeBaseArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read ChangeKnowledgeBaseArgs from input");
        }
    }
}
export interface IGetKnowledgeTreeArgsArgs {
    token: string;
    filter: core.KazFilter;
}
export class GetKnowledgeTreeArgs {
    public token: string;
    public filter: core.KazFilter;
    constructor(args: IGetKnowledgeTreeArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetKnowledgeTreeArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 2);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetKnowledgeTreeArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.token = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_7: core.KazFilter = core.KazFilter.read(input);
                        _args.filter = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.filter !== undefined) {
            return new GetKnowledgeTreeArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetKnowledgeTreeArgs from input");
        }
    }
}
export interface IChangeListenPreferenceArgsArgs {
    token: string;
    treeId: string;
    listenChanges: boolean;
}
export class ChangeListenPreferenceArgs {
    public token: string;
    public treeId: string;
    public listenChanges: boolean;
    constructor(args: IChangeListenPreferenceArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.treeId != null) {
            this.treeId = args.treeId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[treeId] is unset!");
        }
        if (args != null && args.listenChanges != null) {
            this.listenChanges = args.listenChanges;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[listenChanges] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ChangeListenPreferenceArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.treeId != null) {
            output.writeFieldBegin("treeId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.treeId);
            output.writeFieldEnd();
        }
        if (this.listenChanges != null) {
            output.writeFieldBegin("listenChanges", thrift.Thrift.Type.BOOL, 3);
            output.writeBool(this.listenChanges);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ChangeListenPreferenceArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_8: string = input.readString();
                        _args.token = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_9: string = input.readString();
                        _args.treeId = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_10: boolean = input.readBool();
                        _args.listenChanges = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.treeId !== undefined && _args.listenChanges !== undefined) {
            return new ChangeListenPreferenceArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read ChangeListenPreferenceArgs from input");
        }
    }
}
export interface IGetKnowledgeTreeNodeArgsArgs {
    token: string;
    filter: core.KazFilter;
}
export class GetKnowledgeTreeNodeArgs {
    public token: string;
    public filter: core.KazFilter;
    constructor(args: IGetKnowledgeTreeNodeArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetKnowledgeTreeNodeArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 2);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetKnowledgeTreeNodeArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_11: string = input.readString();
                        _args.token = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_12: core.KazFilter = core.KazFilter.read(input);
                        _args.filter = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.filter !== undefined) {
            return new GetKnowledgeTreeNodeArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetKnowledgeTreeNodeArgs from input");
        }
    }
}
export interface ICreateOrUpdateKnowledgeTreeNodeArgsArgs {
    token: string;
    treeNode: KnowledgeTreeNode.KnowledgeTreeNode;
}
export class CreateOrUpdateKnowledgeTreeNodeArgs {
    public token: string;
    public treeNode: KnowledgeTreeNode.KnowledgeTreeNode;
    constructor(args: ICreateOrUpdateKnowledgeTreeNodeArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.treeNode != null) {
            this.treeNode = args.treeNode;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[treeNode] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CreateOrUpdateKnowledgeTreeNodeArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.treeNode != null) {
            output.writeFieldBegin("treeNode", thrift.Thrift.Type.STRUCT, 2);
            this.treeNode.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CreateOrUpdateKnowledgeTreeNodeArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_13: string = input.readString();
                        _args.token = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_14: KnowledgeTreeNode.KnowledgeTreeNode = KnowledgeTreeNode.KnowledgeTreeNode.read(input);
                        _args.treeNode = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.treeNode !== undefined) {
            return new CreateOrUpdateKnowledgeTreeNodeArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read CreateOrUpdateKnowledgeTreeNodeArgs from input");
        }
    }
}
export interface IRemoveKnowledgeTreeNodeArgsArgs {
    token: string;
    nodeTreeId: string;
}
export class RemoveKnowledgeTreeNodeArgs {
    public token: string;
    public nodeTreeId: string;
    constructor(args: IRemoveKnowledgeTreeNodeArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.nodeTreeId != null) {
            this.nodeTreeId = args.nodeTreeId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[nodeTreeId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RemoveKnowledgeTreeNodeArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.nodeTreeId != null) {
            output.writeFieldBegin("nodeTreeId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.nodeTreeId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RemoveKnowledgeTreeNodeArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_15: string = input.readString();
                        _args.token = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_16: string = input.readString();
                        _args.nodeTreeId = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.nodeTreeId !== undefined) {
            return new RemoveKnowledgeTreeNodeArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read RemoveKnowledgeTreeNodeArgs from input");
        }
    }
}
export interface IGetAllKnowledgeDocumentsArgsArgs {
    token: string;
    nodeTreeId: string;
    filter: core.KazFilter;
}
export class GetAllKnowledgeDocumentsArgs {
    public token: string;
    public nodeTreeId: string;
    public filter: core.KazFilter;
    constructor(args: IGetAllKnowledgeDocumentsArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.nodeTreeId != null) {
            this.nodeTreeId = args.nodeTreeId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[nodeTreeId] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllKnowledgeDocumentsArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.nodeTreeId != null) {
            output.writeFieldBegin("nodeTreeId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.nodeTreeId);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 3);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllKnowledgeDocumentsArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_17: string = input.readString();
                        _args.token = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_18: string = input.readString();
                        _args.nodeTreeId = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_19: core.KazFilter = core.KazFilter.read(input);
                        _args.filter = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.nodeTreeId !== undefined && _args.filter !== undefined) {
            return new GetAllKnowledgeDocumentsArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAllKnowledgeDocumentsArgs from input");
        }
    }
}
export interface IGetCountAllKnowledgeDocumentsArgsArgs {
    token: string;
    nodeTreeId: string;
    filter: core.KazFilter;
}
export class GetCountAllKnowledgeDocumentsArgs {
    public token: string;
    public nodeTreeId: string;
    public filter: core.KazFilter;
    constructor(args: IGetCountAllKnowledgeDocumentsArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.nodeTreeId != null) {
            this.nodeTreeId = args.nodeTreeId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[nodeTreeId] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetCountAllKnowledgeDocumentsArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.nodeTreeId != null) {
            output.writeFieldBegin("nodeTreeId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.nodeTreeId);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 3);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetCountAllKnowledgeDocumentsArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_20: string = input.readString();
                        _args.token = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_21: string = input.readString();
                        _args.nodeTreeId = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_22: core.KazFilter = core.KazFilter.read(input);
                        _args.filter = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.nodeTreeId !== undefined && _args.filter !== undefined) {
            return new GetCountAllKnowledgeDocumentsArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetCountAllKnowledgeDocumentsArgs from input");
        }
    }
}
export interface IGetKnowledgeDocumentArgsArgs {
    token: string;
    knowledgeDocumentId: string;
    accessPolicy: core.DocumentAccessPolicy;
}
export class GetKnowledgeDocumentArgs {
    public token: string;
    public knowledgeDocumentId: string;
    public accessPolicy: core.DocumentAccessPolicy;
    constructor(args: IGetKnowledgeDocumentArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.knowledgeDocumentId != null) {
            this.knowledgeDocumentId = args.knowledgeDocumentId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[knowledgeDocumentId] is unset!");
        }
        if (args != null && args.accessPolicy != null) {
            this.accessPolicy = args.accessPolicy;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[accessPolicy] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetKnowledgeDocumentArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.knowledgeDocumentId != null) {
            output.writeFieldBegin("knowledgeDocumentId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.knowledgeDocumentId);
            output.writeFieldEnd();
        }
        if (this.accessPolicy != null) {
            output.writeFieldBegin("accessPolicy", thrift.Thrift.Type.STRUCT, 3);
            this.accessPolicy.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetKnowledgeDocumentArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_23: string = input.readString();
                        _args.token = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_24: string = input.readString();
                        _args.knowledgeDocumentId = value_24;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_25: core.DocumentAccessPolicy = core.DocumentAccessPolicy.read(input);
                        _args.accessPolicy = value_25;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.knowledgeDocumentId !== undefined && _args.accessPolicy !== undefined) {
            return new GetKnowledgeDocumentArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetKnowledgeDocumentArgs from input");
        }
    }
}
export interface IBindDocumentToKnowledgeArgsArgs {
    token: string;
    knowledgeIdsToBind: Set<string>;
    knowledgeDocument: KnowledgeDocument.KnowledgeDocument;
    policyToDocument: core.DocumentAccessPolicy;
}
export class BindDocumentToKnowledgeArgs {
    public token: string;
    public knowledgeIdsToBind: Set<string>;
    public knowledgeDocument: KnowledgeDocument.KnowledgeDocument;
    public policyToDocument: core.DocumentAccessPolicy;
    constructor(args: IBindDocumentToKnowledgeArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.knowledgeIdsToBind != null) {
            this.knowledgeIdsToBind = args.knowledgeIdsToBind;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[knowledgeIdsToBind] is unset!");
        }
        if (args != null && args.knowledgeDocument != null) {
            this.knowledgeDocument = args.knowledgeDocument;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[knowledgeDocument] is unset!");
        }
        if (args != null && args.policyToDocument != null) {
            this.policyToDocument = args.policyToDocument;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[policyToDocument] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("BindDocumentToKnowledgeArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.knowledgeIdsToBind != null) {
            output.writeFieldBegin("knowledgeIdsToBind", thrift.Thrift.Type.SET, 2);
            output.writeSetBegin(thrift.Thrift.Type.STRING, this.knowledgeIdsToBind.size);
            this.knowledgeIdsToBind.forEach((value_26: string): void => {
                output.writeString(value_26);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        if (this.knowledgeDocument != null) {
            output.writeFieldBegin("knowledgeDocument", thrift.Thrift.Type.STRUCT, 3);
            this.knowledgeDocument.write(output);
            output.writeFieldEnd();
        }
        if (this.policyToDocument != null) {
            output.writeFieldBegin("policyToDocument", thrift.Thrift.Type.STRUCT, 4);
            this.policyToDocument.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): BindDocumentToKnowledgeArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_27: string = input.readString();
                        _args.token = value_27;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_28: Set<string> = new Set<string>();
                        const metadata_1: thrift.TSet = input.readSetBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_29: string = input.readString();
                            value_28.add(value_29);
                        }
                        input.readSetEnd();
                        _args.knowledgeIdsToBind = value_28;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_30: KnowledgeDocument.KnowledgeDocument = KnowledgeDocument.KnowledgeDocument.read(input);
                        _args.knowledgeDocument = value_30;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_31: core.DocumentAccessPolicy = core.DocumentAccessPolicy.read(input);
                        _args.policyToDocument = value_31;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.knowledgeIdsToBind !== undefined && _args.knowledgeDocument !== undefined && _args.policyToDocument !== undefined) {
            return new BindDocumentToKnowledgeArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read BindDocumentToKnowledgeArgs from input");
        }
    }
}
export interface IUnbindDocumentFromKnowledgeArgsArgs {
    token: string;
    knowledgeIdsToUnbind: Set<string>;
    documentId: string;
    policyToDocument: core.DocumentAccessPolicy;
}
export class UnbindDocumentFromKnowledgeArgs {
    public token: string;
    public knowledgeIdsToUnbind: Set<string>;
    public documentId: string;
    public policyToDocument: core.DocumentAccessPolicy;
    constructor(args: IUnbindDocumentFromKnowledgeArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.knowledgeIdsToUnbind != null) {
            this.knowledgeIdsToUnbind = args.knowledgeIdsToUnbind;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[knowledgeIdsToUnbind] is unset!");
        }
        if (args != null && args.documentId != null) {
            this.documentId = args.documentId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[documentId] is unset!");
        }
        if (args != null && args.policyToDocument != null) {
            this.policyToDocument = args.policyToDocument;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[policyToDocument] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("UnbindDocumentFromKnowledgeArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.knowledgeIdsToUnbind != null) {
            output.writeFieldBegin("knowledgeIdsToUnbind", thrift.Thrift.Type.SET, 2);
            output.writeSetBegin(thrift.Thrift.Type.STRING, this.knowledgeIdsToUnbind.size);
            this.knowledgeIdsToUnbind.forEach((value_32: string): void => {
                output.writeString(value_32);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        if (this.documentId != null) {
            output.writeFieldBegin("documentId", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.documentId);
            output.writeFieldEnd();
        }
        if (this.policyToDocument != null) {
            output.writeFieldBegin("policyToDocument", thrift.Thrift.Type.STRUCT, 4);
            this.policyToDocument.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): UnbindDocumentFromKnowledgeArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_33: string = input.readString();
                        _args.token = value_33;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_34: Set<string> = new Set<string>();
                        const metadata_2: thrift.TSet = input.readSetBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_35: string = input.readString();
                            value_34.add(value_35);
                        }
                        input.readSetEnd();
                        _args.knowledgeIdsToUnbind = value_34;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_36: string = input.readString();
                        _args.documentId = value_36;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_37: core.DocumentAccessPolicy = core.DocumentAccessPolicy.read(input);
                        _args.policyToDocument = value_37;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.knowledgeIdsToUnbind !== undefined && _args.documentId !== undefined && _args.policyToDocument !== undefined) {
            return new UnbindDocumentFromKnowledgeArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read UnbindDocumentFromKnowledgeArgs from input");
        }
    }
}
export interface IEditKnowledgeDocumentArgsArgs {
    token: string;
    knowledgeDocumentId: string;
    dNameLoc: Map<string, string>;
    contentHoldersToAdd: Set<string>;
    contentHoldersToRemove: Set<string>;
    attachmentsToAdd: Set<string>;
    attachmentsToRemove: Set<string>;
    treeId: string;
    accessPolicy: core.DocumentAccessPolicy;
}
export class EditKnowledgeDocumentArgs {
    public token: string;
    public knowledgeDocumentId: string;
    public dNameLoc: Map<string, string>;
    public contentHoldersToAdd: Set<string>;
    public contentHoldersToRemove: Set<string>;
    public attachmentsToAdd: Set<string>;
    public attachmentsToRemove: Set<string>;
    public treeId: string;
    public accessPolicy: core.DocumentAccessPolicy;
    constructor(args: IEditKnowledgeDocumentArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.knowledgeDocumentId != null) {
            this.knowledgeDocumentId = args.knowledgeDocumentId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[knowledgeDocumentId] is unset!");
        }
        if (args != null && args.dNameLoc != null) {
            this.dNameLoc = args.dNameLoc;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[dNameLoc] is unset!");
        }
        if (args != null && args.contentHoldersToAdd != null) {
            this.contentHoldersToAdd = args.contentHoldersToAdd;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[contentHoldersToAdd] is unset!");
        }
        if (args != null && args.contentHoldersToRemove != null) {
            this.contentHoldersToRemove = args.contentHoldersToRemove;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[contentHoldersToRemove] is unset!");
        }
        if (args != null && args.attachmentsToAdd != null) {
            this.attachmentsToAdd = args.attachmentsToAdd;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[attachmentsToAdd] is unset!");
        }
        if (args != null && args.attachmentsToRemove != null) {
            this.attachmentsToRemove = args.attachmentsToRemove;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[attachmentsToRemove] is unset!");
        }
        if (args != null && args.treeId != null) {
            this.treeId = args.treeId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[treeId] is unset!");
        }
        if (args != null && args.accessPolicy != null) {
            this.accessPolicy = args.accessPolicy;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[accessPolicy] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("EditKnowledgeDocumentArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.knowledgeDocumentId != null) {
            output.writeFieldBegin("knowledgeDocumentId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.knowledgeDocumentId);
            output.writeFieldEnd();
        }
        if (this.dNameLoc != null) {
            output.writeFieldBegin("dNameLoc", thrift.Thrift.Type.MAP, 3);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.dNameLoc.size);
            this.dNameLoc.forEach((value_38: string, key_1: string): void => {
                output.writeString(key_1);
                output.writeString(value_38);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.contentHoldersToAdd != null) {
            output.writeFieldBegin("contentHoldersToAdd", thrift.Thrift.Type.SET, 4);
            output.writeSetBegin(thrift.Thrift.Type.STRING, this.contentHoldersToAdd.size);
            this.contentHoldersToAdd.forEach((value_39: string): void => {
                output.writeString(value_39);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        if (this.contentHoldersToRemove != null) {
            output.writeFieldBegin("contentHoldersToRemove", thrift.Thrift.Type.SET, 5);
            output.writeSetBegin(thrift.Thrift.Type.STRING, this.contentHoldersToRemove.size);
            this.contentHoldersToRemove.forEach((value_40: string): void => {
                output.writeString(value_40);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        if (this.attachmentsToAdd != null) {
            output.writeFieldBegin("attachmentsToAdd", thrift.Thrift.Type.SET, 6);
            output.writeSetBegin(thrift.Thrift.Type.STRING, this.attachmentsToAdd.size);
            this.attachmentsToAdd.forEach((value_41: string): void => {
                output.writeString(value_41);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        if (this.attachmentsToRemove != null) {
            output.writeFieldBegin("attachmentsToRemove", thrift.Thrift.Type.SET, 7);
            output.writeSetBegin(thrift.Thrift.Type.STRING, this.attachmentsToRemove.size);
            this.attachmentsToRemove.forEach((value_42: string): void => {
                output.writeString(value_42);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        if (this.treeId != null) {
            output.writeFieldBegin("treeId", thrift.Thrift.Type.STRING, 8);
            output.writeString(this.treeId);
            output.writeFieldEnd();
        }
        if (this.accessPolicy != null) {
            output.writeFieldBegin("accessPolicy", thrift.Thrift.Type.STRUCT, 9);
            this.accessPolicy.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): EditKnowledgeDocumentArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_43: string = input.readString();
                        _args.token = value_43;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_44: string = input.readString();
                        _args.knowledgeDocumentId = value_44;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_45: Map<string, string> = new Map<string, string>();
                        const metadata_3: thrift.TMap = input.readMapBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const key_2: string = input.readString();
                            const value_46: string = input.readString();
                            value_45.set(key_2, value_46);
                        }
                        input.readMapEnd();
                        _args.dNameLoc = value_45;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_47: Set<string> = new Set<string>();
                        const metadata_4: thrift.TSet = input.readSetBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const value_48: string = input.readString();
                            value_47.add(value_48);
                        }
                        input.readSetEnd();
                        _args.contentHoldersToAdd = value_47;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_49: Set<string> = new Set<string>();
                        const metadata_5: thrift.TSet = input.readSetBegin();
                        const size_5: number = metadata_5.size;
                        for (let i_5: number = 0; i_5 < size_5; i_5++) {
                            const value_50: string = input.readString();
                            value_49.add(value_50);
                        }
                        input.readSetEnd();
                        _args.contentHoldersToRemove = value_49;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_51: Set<string> = new Set<string>();
                        const metadata_6: thrift.TSet = input.readSetBegin();
                        const size_6: number = metadata_6.size;
                        for (let i_6: number = 0; i_6 < size_6; i_6++) {
                            const value_52: string = input.readString();
                            value_51.add(value_52);
                        }
                        input.readSetEnd();
                        _args.attachmentsToAdd = value_51;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_53: Set<string> = new Set<string>();
                        const metadata_7: thrift.TSet = input.readSetBegin();
                        const size_7: number = metadata_7.size;
                        for (let i_7: number = 0; i_7 < size_7; i_7++) {
                            const value_54: string = input.readString();
                            value_53.add(value_54);
                        }
                        input.readSetEnd();
                        _args.attachmentsToRemove = value_53;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_55: string = input.readString();
                        _args.treeId = value_55;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_56: core.DocumentAccessPolicy = core.DocumentAccessPolicy.read(input);
                        _args.accessPolicy = value_56;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.knowledgeDocumentId !== undefined && _args.dNameLoc !== undefined && _args.contentHoldersToAdd !== undefined && _args.contentHoldersToRemove !== undefined && _args.attachmentsToAdd !== undefined && _args.attachmentsToRemove !== undefined && _args.treeId !== undefined && _args.accessPolicy !== undefined) {
            return new EditKnowledgeDocumentArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read EditKnowledgeDocumentArgs from input");
        }
    }
}
export interface IGetKnowledgeHistoryPageArgsArgs {
    token: string;
    filter: core.KazFilter;
}
export class GetKnowledgeHistoryPageArgs {
    public token: string;
    public filter: core.KazFilter;
    constructor(args: IGetKnowledgeHistoryPageArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetKnowledgeHistoryPageArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 2);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetKnowledgeHistoryPageArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_57: string = input.readString();
                        _args.token = value_57;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_58: core.KazFilter = core.KazFilter.read(input);
                        _args.filter = value_58;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.filter !== undefined) {
            return new GetKnowledgeHistoryPageArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetKnowledgeHistoryPageArgs from input");
        }
    }
}
export interface IGetKnowledgeColumnsArgsArgs {
    token: string;
    filter: core.KazFilter;
}
export class GetKnowledgeColumnsArgs {
    public token: string;
    public filter: core.KazFilter;
    constructor(args: IGetKnowledgeColumnsArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetKnowledgeColumnsArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 2);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetKnowledgeColumnsArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_59: string = input.readString();
                        _args.token = value_59;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_60: core.KazFilter = core.KazFilter.read(input);
                        _args.filter = value_60;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.filter !== undefined) {
            return new GetKnowledgeColumnsArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetKnowledgeColumnsArgs from input");
        }
    }
}
export interface IChangeKnowledgeColumnsArgsArgs {
    token: string;
    toUpdate: Array<KnowledgeColumn.KnowledgeColumn>;
}
export class ChangeKnowledgeColumnsArgs {
    public token: string;
    public toUpdate: Array<KnowledgeColumn.KnowledgeColumn>;
    constructor(args: IChangeKnowledgeColumnsArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.toUpdate != null) {
            this.toUpdate = args.toUpdate;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[toUpdate] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ChangeKnowledgeColumnsArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.toUpdate != null) {
            output.writeFieldBegin("toUpdate", thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.toUpdate.length);
            this.toUpdate.forEach((value_61: KnowledgeColumn.KnowledgeColumn): void => {
                value_61.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ChangeKnowledgeColumnsArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_62: string = input.readString();
                        _args.token = value_62;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_63: Array<KnowledgeColumn.KnowledgeColumn> = new Array<KnowledgeColumn.KnowledgeColumn>();
                        const metadata_8: thrift.TList = input.readListBegin();
                        const size_8: number = metadata_8.size;
                        for (let i_8: number = 0; i_8 < size_8; i_8++) {
                            const value_64: KnowledgeColumn.KnowledgeColumn = KnowledgeColumn.KnowledgeColumn.read(input);
                            value_63.push(value_64);
                        }
                        input.readListEnd();
                        _args.toUpdate = value_63;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.toUpdate !== undefined) {
            return new ChangeKnowledgeColumnsArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read ChangeKnowledgeColumnsArgs from input");
        }
    }
}
export interface IGetKnowledgeElementPageArgsArgs {
    token: string;
    filter: core.KazFilter;
}
export class GetKnowledgeElementPageArgs {
    public token: string;
    public filter: core.KazFilter;
    constructor(args: IGetKnowledgeElementPageArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetKnowledgeElementPageArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 2);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetKnowledgeElementPageArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_65: string = input.readString();
                        _args.token = value_65;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_66: core.KazFilter = core.KazFilter.read(input);
                        _args.filter = value_66;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.filter !== undefined) {
            return new GetKnowledgeElementPageArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetKnowledgeElementPageArgs from input");
        }
    }
}
export interface IChangeKnlgDocRelationsArgsArgs {
    token: string;
    toCreate: Array<KnowledgeDocumentRelation.KnowledgeDocumentRelation>;
    toRemove: Array<string>;
}
export class ChangeKnlgDocRelationsArgs {
    public token: string;
    public toCreate: Array<KnowledgeDocumentRelation.KnowledgeDocumentRelation>;
    public toRemove: Array<string>;
    constructor(args: IChangeKnlgDocRelationsArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.toCreate != null) {
            this.toCreate = args.toCreate;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[toCreate] is unset!");
        }
        if (args != null && args.toRemove != null) {
            this.toRemove = args.toRemove;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[toRemove] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ChangeKnlgDocRelationsArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.toCreate != null) {
            output.writeFieldBegin("toCreate", thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.toCreate.length);
            this.toCreate.forEach((value_67: KnowledgeDocumentRelation.KnowledgeDocumentRelation): void => {
                value_67.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.toRemove != null) {
            output.writeFieldBegin("toRemove", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.toRemove.length);
            this.toRemove.forEach((value_68: string): void => {
                output.writeString(value_68);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ChangeKnlgDocRelationsArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_69: string = input.readString();
                        _args.token = value_69;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_70: Array<KnowledgeDocumentRelation.KnowledgeDocumentRelation> = new Array<KnowledgeDocumentRelation.KnowledgeDocumentRelation>();
                        const metadata_9: thrift.TList = input.readListBegin();
                        const size_9: number = metadata_9.size;
                        for (let i_9: number = 0; i_9 < size_9; i_9++) {
                            const value_71: KnowledgeDocumentRelation.KnowledgeDocumentRelation = KnowledgeDocumentRelation.KnowledgeDocumentRelation.read(input);
                            value_70.push(value_71);
                        }
                        input.readListEnd();
                        _args.toCreate = value_70;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_72: Array<string> = new Array<string>();
                        const metadata_10: thrift.TList = input.readListBegin();
                        const size_10: number = metadata_10.size;
                        for (let i_10: number = 0; i_10 < size_10; i_10++) {
                            const value_73: string = input.readString();
                            value_72.push(value_73);
                        }
                        input.readListEnd();
                        _args.toRemove = value_72;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.toCreate !== undefined && _args.toRemove !== undefined) {
            return new ChangeKnlgDocRelationsArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read ChangeKnlgDocRelationsArgs from input");
        }
    }
}
export interface IGetKnlgDocumentRelationModelArgsArgs {
    token: string;
    knowledgeDocumentId: string;
}
export class GetKnlgDocumentRelationModelArgs {
    public token: string;
    public knowledgeDocumentId: string;
    constructor(args: IGetKnlgDocumentRelationModelArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.knowledgeDocumentId != null) {
            this.knowledgeDocumentId = args.knowledgeDocumentId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[knowledgeDocumentId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetKnlgDocumentRelationModelArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.knowledgeDocumentId != null) {
            output.writeFieldBegin("knowledgeDocumentId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.knowledgeDocumentId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetKnlgDocumentRelationModelArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_74: string = input.readString();
                        _args.token = value_74;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_75: string = input.readString();
                        _args.knowledgeDocumentId = value_75;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.knowledgeDocumentId !== undefined) {
            return new GetKnlgDocumentRelationModelArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetKnlgDocumentRelationModelArgs from input");
        }
    }
}
export interface IGetTinyKnlgDocsByFilterNoPermissionArgsArgs {
    token: string;
    filter: core.KazFilter;
}
export class GetTinyKnlgDocsByFilterNoPermissionArgs {
    public token: string;
    public filter: core.KazFilter;
    constructor(args: IGetTinyKnlgDocsByFilterNoPermissionArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetTinyKnlgDocsByFilterNoPermissionArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 2);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetTinyKnlgDocsByFilterNoPermissionArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_76: string = input.readString();
                        _args.token = value_76;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_77: core.KazFilter = core.KazFilter.read(input);
                        _args.filter = value_77;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.filter !== undefined) {
            return new GetTinyKnlgDocsByFilterNoPermissionArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetTinyKnlgDocsByFilterNoPermissionArgs from input");
        }
    }
}
export interface IGetAllKnowledgeBaseResultArgs {
    success?: Array<KnowledgeBase.KnowledgeBase>;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class GetAllKnowledgeBaseResult {
    public success?: Array<KnowledgeBase.KnowledgeBase>;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IGetAllKnowledgeBaseResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllKnowledgeBaseResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_78: KnowledgeBase.KnowledgeBase): void => {
                value_78.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllKnowledgeBaseResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_79: Array<KnowledgeBase.KnowledgeBase> = new Array<KnowledgeBase.KnowledgeBase>();
                        const metadata_11: thrift.TList = input.readListBegin();
                        const size_11: number = metadata_11.size;
                        for (let i_11: number = 0; i_11 < size_11; i_11++) {
                            const value_80: KnowledgeBase.KnowledgeBase = KnowledgeBase.KnowledgeBase.read(input);
                            value_79.push(value_80);
                        }
                        input.readListEnd();
                        _args.success = value_79;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_81: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_81;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_82: core.ServerException = core.ServerException.read(input);
                        _args.error = value_82;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAllKnowledgeBaseResult(_args);
    }
}
export interface IChangeKnowledgeBaseResultArgs {
    success?: KnowledgeBase.KnowledgeBase;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class ChangeKnowledgeBaseResult {
    public success?: KnowledgeBase.KnowledgeBase;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IChangeKnowledgeBaseResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ChangeKnowledgeBaseResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ChangeKnowledgeBaseResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_83: KnowledgeBase.KnowledgeBase = KnowledgeBase.KnowledgeBase.read(input);
                        _args.success = value_83;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_84: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_84;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_85: core.ServerException = core.ServerException.read(input);
                        _args.error = value_85;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ChangeKnowledgeBaseResult(_args);
    }
}
export interface IGetKnowledgeTreeResultArgs {
    success?: Array<KnowledgeTree.KnowledgeTree>;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class GetKnowledgeTreeResult {
    public success?: Array<KnowledgeTree.KnowledgeTree>;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IGetKnowledgeTreeResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetKnowledgeTreeResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_86: KnowledgeTree.KnowledgeTree): void => {
                value_86.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetKnowledgeTreeResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_87: Array<KnowledgeTree.KnowledgeTree> = new Array<KnowledgeTree.KnowledgeTree>();
                        const metadata_12: thrift.TList = input.readListBegin();
                        const size_12: number = metadata_12.size;
                        for (let i_12: number = 0; i_12 < size_12; i_12++) {
                            const value_88: KnowledgeTree.KnowledgeTree = KnowledgeTree.KnowledgeTree.read(input);
                            value_87.push(value_88);
                        }
                        input.readListEnd();
                        _args.success = value_87;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_89: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_89;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_90: core.ServerException = core.ServerException.read(input);
                        _args.error = value_90;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetKnowledgeTreeResult(_args);
    }
}
export interface IChangeListenPreferenceResultArgs {
    success?: boolean;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class ChangeListenPreferenceResult {
    public success?: boolean;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IChangeListenPreferenceResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ChangeListenPreferenceResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ChangeListenPreferenceResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_91: boolean = input.readBool();
                        _args.success = value_91;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_92: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_92;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_93: core.ServerException = core.ServerException.read(input);
                        _args.error = value_93;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ChangeListenPreferenceResult(_args);
    }
}
export interface IGetKnowledgeTreeNodeResultArgs {
    success?: Array<KnowledgeTreeNode.KnowledgeTreeNode>;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class GetKnowledgeTreeNodeResult {
    public success?: Array<KnowledgeTreeNode.KnowledgeTreeNode>;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IGetKnowledgeTreeNodeResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetKnowledgeTreeNodeResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_94: KnowledgeTreeNode.KnowledgeTreeNode): void => {
                value_94.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetKnowledgeTreeNodeResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_95: Array<KnowledgeTreeNode.KnowledgeTreeNode> = new Array<KnowledgeTreeNode.KnowledgeTreeNode>();
                        const metadata_13: thrift.TList = input.readListBegin();
                        const size_13: number = metadata_13.size;
                        for (let i_13: number = 0; i_13 < size_13; i_13++) {
                            const value_96: KnowledgeTreeNode.KnowledgeTreeNode = KnowledgeTreeNode.KnowledgeTreeNode.read(input);
                            value_95.push(value_96);
                        }
                        input.readListEnd();
                        _args.success = value_95;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_97: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_97;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_98: core.ServerException = core.ServerException.read(input);
                        _args.error = value_98;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetKnowledgeTreeNodeResult(_args);
    }
}
export interface ICreateOrUpdateKnowledgeTreeNodeResultArgs {
    success?: KnowledgeTreeNode.KnowledgeTreeNode;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class CreateOrUpdateKnowledgeTreeNodeResult {
    public success?: KnowledgeTreeNode.KnowledgeTreeNode;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: ICreateOrUpdateKnowledgeTreeNodeResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CreateOrUpdateKnowledgeTreeNodeResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CreateOrUpdateKnowledgeTreeNodeResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_99: KnowledgeTreeNode.KnowledgeTreeNode = KnowledgeTreeNode.KnowledgeTreeNode.read(input);
                        _args.success = value_99;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_100: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_100;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_101: core.ServerException = core.ServerException.read(input);
                        _args.error = value_101;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new CreateOrUpdateKnowledgeTreeNodeResult(_args);
    }
}
export interface IRemoveKnowledgeTreeNodeResultArgs {
    success?: boolean;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class RemoveKnowledgeTreeNodeResult {
    public success?: boolean;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IRemoveKnowledgeTreeNodeResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RemoveKnowledgeTreeNodeResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RemoveKnowledgeTreeNodeResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_102: boolean = input.readBool();
                        _args.success = value_102;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_103: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_103;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_104: core.ServerException = core.ServerException.read(input);
                        _args.error = value_104;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new RemoveKnowledgeTreeNodeResult(_args);
    }
}
export interface IGetAllKnowledgeDocumentsResultArgs {
    success?: Array<KnowledgeDocument.KnowledgeDocument>;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class GetAllKnowledgeDocumentsResult {
    public success?: Array<KnowledgeDocument.KnowledgeDocument>;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IGetAllKnowledgeDocumentsResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllKnowledgeDocumentsResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_105: KnowledgeDocument.KnowledgeDocument): void => {
                value_105.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllKnowledgeDocumentsResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_106: Array<KnowledgeDocument.KnowledgeDocument> = new Array<KnowledgeDocument.KnowledgeDocument>();
                        const metadata_14: thrift.TList = input.readListBegin();
                        const size_14: number = metadata_14.size;
                        for (let i_14: number = 0; i_14 < size_14; i_14++) {
                            const value_107: KnowledgeDocument.KnowledgeDocument = KnowledgeDocument.KnowledgeDocument.read(input);
                            value_106.push(value_107);
                        }
                        input.readListEnd();
                        _args.success = value_106;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_108: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_108;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_109: core.ServerException = core.ServerException.read(input);
                        _args.error = value_109;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAllKnowledgeDocumentsResult(_args);
    }
}
export interface IGetCountAllKnowledgeDocumentsResultArgs {
    success?: number;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class GetCountAllKnowledgeDocumentsResult {
    public success?: number;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IGetCountAllKnowledgeDocumentsResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetCountAllKnowledgeDocumentsResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.I32, 0);
            output.writeI32(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetCountAllKnowledgeDocumentsResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_110: number = input.readI32();
                        _args.success = value_110;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_111: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_111;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_112: core.ServerException = core.ServerException.read(input);
                        _args.error = value_112;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetCountAllKnowledgeDocumentsResult(_args);
    }
}
export interface IGetKnowledgeDocumentResultArgs {
    success?: KnowledgeDocument.KnowledgeDocument;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class GetKnowledgeDocumentResult {
    public success?: KnowledgeDocument.KnowledgeDocument;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IGetKnowledgeDocumentResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetKnowledgeDocumentResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetKnowledgeDocumentResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_113: KnowledgeDocument.KnowledgeDocument = KnowledgeDocument.KnowledgeDocument.read(input);
                        _args.success = value_113;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_114: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_114;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_115: core.ServerException = core.ServerException.read(input);
                        _args.error = value_115;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetKnowledgeDocumentResult(_args);
    }
}
export interface IBindDocumentToKnowledgeResultArgs {
    success?: Set<string>;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class BindDocumentToKnowledgeResult {
    public success?: Set<string>;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IBindDocumentToKnowledgeResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("BindDocumentToKnowledgeResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.SET, 0);
            output.writeSetBegin(thrift.Thrift.Type.STRING, this.success.size);
            this.success.forEach((value_116: string): void => {
                output.writeString(value_116);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): BindDocumentToKnowledgeResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_117: Set<string> = new Set<string>();
                        const metadata_15: thrift.TSet = input.readSetBegin();
                        const size_15: number = metadata_15.size;
                        for (let i_15: number = 0; i_15 < size_15; i_15++) {
                            const value_118: string = input.readString();
                            value_117.add(value_118);
                        }
                        input.readSetEnd();
                        _args.success = value_117;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_119: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_119;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_120: core.ServerException = core.ServerException.read(input);
                        _args.error = value_120;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new BindDocumentToKnowledgeResult(_args);
    }
}
export interface IUnbindDocumentFromKnowledgeResultArgs {
    success?: Set<string>;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class UnbindDocumentFromKnowledgeResult {
    public success?: Set<string>;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IUnbindDocumentFromKnowledgeResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("UnbindDocumentFromKnowledgeResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.SET, 0);
            output.writeSetBegin(thrift.Thrift.Type.STRING, this.success.size);
            this.success.forEach((value_121: string): void => {
                output.writeString(value_121);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): UnbindDocumentFromKnowledgeResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_122: Set<string> = new Set<string>();
                        const metadata_16: thrift.TSet = input.readSetBegin();
                        const size_16: number = metadata_16.size;
                        for (let i_16: number = 0; i_16 < size_16; i_16++) {
                            const value_123: string = input.readString();
                            value_122.add(value_123);
                        }
                        input.readSetEnd();
                        _args.success = value_122;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_124: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_124;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_125: core.ServerException = core.ServerException.read(input);
                        _args.error = value_125;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new UnbindDocumentFromKnowledgeResult(_args);
    }
}
export interface IEditKnowledgeDocumentResultArgs {
    success?: KnowledgeDocument.KnowledgeDocument;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class EditKnowledgeDocumentResult {
    public success?: KnowledgeDocument.KnowledgeDocument;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IEditKnowledgeDocumentResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("EditKnowledgeDocumentResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): EditKnowledgeDocumentResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_126: KnowledgeDocument.KnowledgeDocument = KnowledgeDocument.KnowledgeDocument.read(input);
                        _args.success = value_126;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_127: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_127;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_128: core.ServerException = core.ServerException.read(input);
                        _args.error = value_128;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new EditKnowledgeDocumentResult(_args);
    }
}
export interface IGetKnowledgeHistoryPageResultArgs {
    success?: KnowledgeHistoryPage.KnowledgeHistoryPage;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class GetKnowledgeHistoryPageResult {
    public success?: KnowledgeHistoryPage.KnowledgeHistoryPage;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IGetKnowledgeHistoryPageResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetKnowledgeHistoryPageResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetKnowledgeHistoryPageResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_129: KnowledgeHistoryPage.KnowledgeHistoryPage = KnowledgeHistoryPage.KnowledgeHistoryPage.read(input);
                        _args.success = value_129;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_130: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_130;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_131: core.ServerException = core.ServerException.read(input);
                        _args.error = value_131;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetKnowledgeHistoryPageResult(_args);
    }
}
export interface IGetKnowledgeColumnsResultArgs {
    success?: KnowledgeColumnPage.KnowledgeColumnPage;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class GetKnowledgeColumnsResult {
    public success?: KnowledgeColumnPage.KnowledgeColumnPage;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IGetKnowledgeColumnsResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetKnowledgeColumnsResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetKnowledgeColumnsResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_132: KnowledgeColumnPage.KnowledgeColumnPage = KnowledgeColumnPage.KnowledgeColumnPage.read(input);
                        _args.success = value_132;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_133: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_133;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_134: core.ServerException = core.ServerException.read(input);
                        _args.error = value_134;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetKnowledgeColumnsResult(_args);
    }
}
export interface IChangeKnowledgeColumnsResultArgs {
    success?: boolean;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class ChangeKnowledgeColumnsResult {
    public success?: boolean;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IChangeKnowledgeColumnsResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ChangeKnowledgeColumnsResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ChangeKnowledgeColumnsResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_135: boolean = input.readBool();
                        _args.success = value_135;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_136: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_136;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_137: core.ServerException = core.ServerException.read(input);
                        _args.error = value_137;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ChangeKnowledgeColumnsResult(_args);
    }
}
export interface IGetKnowledgeElementPageResultArgs {
    success?: KnowledgeElementPage.KnowledgeElementPage;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class GetKnowledgeElementPageResult {
    public success?: KnowledgeElementPage.KnowledgeElementPage;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IGetKnowledgeElementPageResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetKnowledgeElementPageResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetKnowledgeElementPageResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_138: KnowledgeElementPage.KnowledgeElementPage = KnowledgeElementPage.KnowledgeElementPage.read(input);
                        _args.success = value_138;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_139: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_139;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_140: core.ServerException = core.ServerException.read(input);
                        _args.error = value_140;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetKnowledgeElementPageResult(_args);
    }
}
export interface IChangeKnlgDocRelationsResultArgs {
    success?: Array<KnowledgeDocumentRelation.KnowledgeDocumentRelation>;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class ChangeKnlgDocRelationsResult {
    public success?: Array<KnowledgeDocumentRelation.KnowledgeDocumentRelation>;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IChangeKnlgDocRelationsResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ChangeKnlgDocRelationsResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_141: KnowledgeDocumentRelation.KnowledgeDocumentRelation): void => {
                value_141.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ChangeKnlgDocRelationsResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_142: Array<KnowledgeDocumentRelation.KnowledgeDocumentRelation> = new Array<KnowledgeDocumentRelation.KnowledgeDocumentRelation>();
                        const metadata_17: thrift.TList = input.readListBegin();
                        const size_17: number = metadata_17.size;
                        for (let i_17: number = 0; i_17 < size_17; i_17++) {
                            const value_143: KnowledgeDocumentRelation.KnowledgeDocumentRelation = KnowledgeDocumentRelation.KnowledgeDocumentRelation.read(input);
                            value_142.push(value_143);
                        }
                        input.readListEnd();
                        _args.success = value_142;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_144: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_144;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_145: core.ServerException = core.ServerException.read(input);
                        _args.error = value_145;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ChangeKnlgDocRelationsResult(_args);
    }
}
export interface IGetKnlgDocumentRelationModelResultArgs {
    success?: KnowledgeDocumentRelationModel.KnowledgeDocumentRelationModel;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class GetKnlgDocumentRelationModelResult {
    public success?: KnowledgeDocumentRelationModel.KnowledgeDocumentRelationModel;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IGetKnlgDocumentRelationModelResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetKnlgDocumentRelationModelResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetKnlgDocumentRelationModelResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_146: KnowledgeDocumentRelationModel.KnowledgeDocumentRelationModel = KnowledgeDocumentRelationModel.KnowledgeDocumentRelationModel.read(input);
                        _args.success = value_146;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_147: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_147;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_148: core.ServerException = core.ServerException.read(input);
                        _args.error = value_148;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetKnlgDocumentRelationModelResult(_args);
    }
}
export interface IGetTinyKnlgDocsByFilterNoPermissionResultArgs {
    success?: Array<KnowledgeDocument.KnowledgeDocument>;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class GetTinyKnlgDocsByFilterNoPermissionResult {
    public success?: Array<KnowledgeDocument.KnowledgeDocument>;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IGetTinyKnlgDocsByFilterNoPermissionResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetTinyKnlgDocsByFilterNoPermissionResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_149: KnowledgeDocument.KnowledgeDocument): void => {
                value_149.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetTinyKnlgDocsByFilterNoPermissionResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_150: Array<KnowledgeDocument.KnowledgeDocument> = new Array<KnowledgeDocument.KnowledgeDocument>();
                        const metadata_18: thrift.TList = input.readListBegin();
                        const size_18: number = metadata_18.size;
                        for (let i_18: number = 0; i_18 < size_18; i_18++) {
                            const value_151: KnowledgeDocument.KnowledgeDocument = KnowledgeDocument.KnowledgeDocument.read(input);
                            value_150.push(value_151);
                        }
                        input.readListEnd();
                        _args.success = value_150;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_152: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_152;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_153: core.ServerException = core.ServerException.read(input);
                        _args.error = value_153;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetTinyKnlgDocsByFilterNoPermissionResult(_args);
    }
}
export class Client {
    public _seqid: number;
    public _reqs: {
        [name: number]: (err: Error | object | undefined, val?: any) => void;
    };
    public output: thrift.TTransport;
    public protocol: new (trans: thrift.TTransport) => thrift.TProtocol;
    constructor(output: thrift.TTransport, protocol: new (trans: thrift.TTransport) => thrift.TProtocol) {
        this._seqid = 0;
        this._reqs = {};
        this.output = output;
        this.protocol = protocol;
    }
    public incrementSeqId(): number {
        return this._seqid += 1;
    }
    public getAllKnowledgeBase(token: string, filter: core.KazFilter): Promise<Array<KnowledgeBase.KnowledgeBase>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<KnowledgeBase.KnowledgeBase>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAllKnowledgeBase(token, filter, requestId);
        });
    }
    public changeKnowledgeBase(token: string, knowledgeBaseToUpdate: KnowledgeBase.KnowledgeBase, idToRemove: string): Promise<KnowledgeBase.KnowledgeBase> {
        const requestId: number = this.incrementSeqId();
        return new Promise<KnowledgeBase.KnowledgeBase>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_changeKnowledgeBase(token, knowledgeBaseToUpdate, idToRemove, requestId);
        });
    }
    public getKnowledgeTree(token: string, filter: core.KazFilter): Promise<Array<KnowledgeTree.KnowledgeTree>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<KnowledgeTree.KnowledgeTree>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getKnowledgeTree(token, filter, requestId);
        });
    }
    public changeListenPreference(token: string, treeId: string, listenChanges: boolean): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_changeListenPreference(token, treeId, listenChanges, requestId);
        });
    }
    public getKnowledgeTreeNode(token: string, filter: core.KazFilter): Promise<Array<KnowledgeTreeNode.KnowledgeTreeNode>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<KnowledgeTreeNode.KnowledgeTreeNode>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getKnowledgeTreeNode(token, filter, requestId);
        });
    }
    public createOrUpdateKnowledgeTreeNode(token: string, treeNode: KnowledgeTreeNode.KnowledgeTreeNode): Promise<KnowledgeTreeNode.KnowledgeTreeNode> {
        const requestId: number = this.incrementSeqId();
        return new Promise<KnowledgeTreeNode.KnowledgeTreeNode>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_createOrUpdateKnowledgeTreeNode(token, treeNode, requestId);
        });
    }
    public removeKnowledgeTreeNode(token: string, nodeTreeId: string): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_removeKnowledgeTreeNode(token, nodeTreeId, requestId);
        });
    }
    public getAllKnowledgeDocuments(token: string, nodeTreeId: string, filter: core.KazFilter): Promise<Array<KnowledgeDocument.KnowledgeDocument>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<KnowledgeDocument.KnowledgeDocument>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAllKnowledgeDocuments(token, nodeTreeId, filter, requestId);
        });
    }
    public getCountAllKnowledgeDocuments(token: string, nodeTreeId: string, filter: core.KazFilter): Promise<number> {
        const requestId: number = this.incrementSeqId();
        return new Promise<number>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getCountAllKnowledgeDocuments(token, nodeTreeId, filter, requestId);
        });
    }
    public getKnowledgeDocument(token: string, knowledgeDocumentId: string, accessPolicy: core.DocumentAccessPolicy): Promise<KnowledgeDocument.KnowledgeDocument> {
        const requestId: number = this.incrementSeqId();
        return new Promise<KnowledgeDocument.KnowledgeDocument>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getKnowledgeDocument(token, knowledgeDocumentId, accessPolicy, requestId);
        });
    }
    public bindDocumentToKnowledge(token: string, knowledgeIdsToBind: Set<string>, knowledgeDocument: KnowledgeDocument.KnowledgeDocument, policyToDocument: core.DocumentAccessPolicy): Promise<Set<string>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Set<string>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_bindDocumentToKnowledge(token, knowledgeIdsToBind, knowledgeDocument, policyToDocument, requestId);
        });
    }
    public unbindDocumentFromKnowledge(token: string, knowledgeIdsToUnbind: Set<string>, documentId: string, policyToDocument: core.DocumentAccessPolicy): Promise<Set<string>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Set<string>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_unbindDocumentFromKnowledge(token, knowledgeIdsToUnbind, documentId, policyToDocument, requestId);
        });
    }
    public editKnowledgeDocument(token: string, knowledgeDocumentId: string, dNameLoc: Map<string, string>, contentHoldersToAdd: Set<string>, contentHoldersToRemove: Set<string>, attachmentsToAdd: Set<string>, attachmentsToRemove: Set<string>, treeId: string, accessPolicy: core.DocumentAccessPolicy): Promise<KnowledgeDocument.KnowledgeDocument> {
        const requestId: number = this.incrementSeqId();
        return new Promise<KnowledgeDocument.KnowledgeDocument>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_editKnowledgeDocument(token, knowledgeDocumentId, dNameLoc, contentHoldersToAdd, contentHoldersToRemove, attachmentsToAdd, attachmentsToRemove, treeId, accessPolicy, requestId);
        });
    }
    public getKnowledgeHistoryPage(token: string, filter: core.KazFilter): Promise<KnowledgeHistoryPage.KnowledgeHistoryPage> {
        const requestId: number = this.incrementSeqId();
        return new Promise<KnowledgeHistoryPage.KnowledgeHistoryPage>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getKnowledgeHistoryPage(token, filter, requestId);
        });
    }
    public getKnowledgeColumns(token: string, filter: core.KazFilter): Promise<KnowledgeColumnPage.KnowledgeColumnPage> {
        const requestId: number = this.incrementSeqId();
        return new Promise<KnowledgeColumnPage.KnowledgeColumnPage>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getKnowledgeColumns(token, filter, requestId);
        });
    }
    public changeKnowledgeColumns(token: string, toUpdate: Array<KnowledgeColumn.KnowledgeColumn>): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_changeKnowledgeColumns(token, toUpdate, requestId);
        });
    }
    public getKnowledgeElementPage(token: string, filter: core.KazFilter): Promise<KnowledgeElementPage.KnowledgeElementPage> {
        const requestId: number = this.incrementSeqId();
        return new Promise<KnowledgeElementPage.KnowledgeElementPage>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getKnowledgeElementPage(token, filter, requestId);
        });
    }
    public changeKnlgDocRelations(token: string, toCreate: Array<KnowledgeDocumentRelation.KnowledgeDocumentRelation>, toRemove: Array<string>): Promise<Array<KnowledgeDocumentRelation.KnowledgeDocumentRelation>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<KnowledgeDocumentRelation.KnowledgeDocumentRelation>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_changeKnlgDocRelations(token, toCreate, toRemove, requestId);
        });
    }
    public getKnlgDocumentRelationModel(token: string, knowledgeDocumentId: string): Promise<KnowledgeDocumentRelationModel.KnowledgeDocumentRelationModel> {
        const requestId: number = this.incrementSeqId();
        return new Promise<KnowledgeDocumentRelationModel.KnowledgeDocumentRelationModel>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getKnlgDocumentRelationModel(token, knowledgeDocumentId, requestId);
        });
    }
    public getTinyKnlgDocsByFilterNoPermission(token: string, filter: core.KazFilter): Promise<Array<KnowledgeDocument.KnowledgeDocument>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<KnowledgeDocument.KnowledgeDocument>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getTinyKnlgDocsByFilterNoPermission(token, filter, requestId);
        });
    }
    public send_getAllKnowledgeBase(token: string, filter: core.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAllKnowledgeBase", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAllKnowledgeBaseArgs = new GetAllKnowledgeBaseArgs({ token, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_changeKnowledgeBase(token: string, knowledgeBaseToUpdate: KnowledgeBase.KnowledgeBase, idToRemove: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("changeKnowledgeBase", thrift.Thrift.MessageType.CALL, requestId);
        const args: ChangeKnowledgeBaseArgs = new ChangeKnowledgeBaseArgs({ token, knowledgeBaseToUpdate, idToRemove });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getKnowledgeTree(token: string, filter: core.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getKnowledgeTree", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetKnowledgeTreeArgs = new GetKnowledgeTreeArgs({ token, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_changeListenPreference(token: string, treeId: string, listenChanges: boolean, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("changeListenPreference", thrift.Thrift.MessageType.CALL, requestId);
        const args: ChangeListenPreferenceArgs = new ChangeListenPreferenceArgs({ token, treeId, listenChanges });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getKnowledgeTreeNode(token: string, filter: core.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getKnowledgeTreeNode", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetKnowledgeTreeNodeArgs = new GetKnowledgeTreeNodeArgs({ token, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_createOrUpdateKnowledgeTreeNode(token: string, treeNode: KnowledgeTreeNode.KnowledgeTreeNode, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("createOrUpdateKnowledgeTreeNode", thrift.Thrift.MessageType.CALL, requestId);
        const args: CreateOrUpdateKnowledgeTreeNodeArgs = new CreateOrUpdateKnowledgeTreeNodeArgs({ token, treeNode });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_removeKnowledgeTreeNode(token: string, nodeTreeId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("removeKnowledgeTreeNode", thrift.Thrift.MessageType.CALL, requestId);
        const args: RemoveKnowledgeTreeNodeArgs = new RemoveKnowledgeTreeNodeArgs({ token, nodeTreeId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getAllKnowledgeDocuments(token: string, nodeTreeId: string, filter: core.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAllKnowledgeDocuments", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAllKnowledgeDocumentsArgs = new GetAllKnowledgeDocumentsArgs({ token, nodeTreeId, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getCountAllKnowledgeDocuments(token: string, nodeTreeId: string, filter: core.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getCountAllKnowledgeDocuments", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetCountAllKnowledgeDocumentsArgs = new GetCountAllKnowledgeDocumentsArgs({ token, nodeTreeId, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getKnowledgeDocument(token: string, knowledgeDocumentId: string, accessPolicy: core.DocumentAccessPolicy, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getKnowledgeDocument", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetKnowledgeDocumentArgs = new GetKnowledgeDocumentArgs({ token, knowledgeDocumentId, accessPolicy });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_bindDocumentToKnowledge(token: string, knowledgeIdsToBind: Set<string>, knowledgeDocument: KnowledgeDocument.KnowledgeDocument, policyToDocument: core.DocumentAccessPolicy, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("bindDocumentToKnowledge", thrift.Thrift.MessageType.CALL, requestId);
        const args: BindDocumentToKnowledgeArgs = new BindDocumentToKnowledgeArgs({ token, knowledgeIdsToBind, knowledgeDocument, policyToDocument });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_unbindDocumentFromKnowledge(token: string, knowledgeIdsToUnbind: Set<string>, documentId: string, policyToDocument: core.DocumentAccessPolicy, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("unbindDocumentFromKnowledge", thrift.Thrift.MessageType.CALL, requestId);
        const args: UnbindDocumentFromKnowledgeArgs = new UnbindDocumentFromKnowledgeArgs({ token, knowledgeIdsToUnbind, documentId, policyToDocument });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_editKnowledgeDocument(token: string, knowledgeDocumentId: string, dNameLoc: Map<string, string>, contentHoldersToAdd: Set<string>, contentHoldersToRemove: Set<string>, attachmentsToAdd: Set<string>, attachmentsToRemove: Set<string>, treeId: string, accessPolicy: core.DocumentAccessPolicy, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("editKnowledgeDocument", thrift.Thrift.MessageType.CALL, requestId);
        const args: EditKnowledgeDocumentArgs = new EditKnowledgeDocumentArgs({ token, knowledgeDocumentId, dNameLoc, contentHoldersToAdd, contentHoldersToRemove, attachmentsToAdd, attachmentsToRemove, treeId, accessPolicy });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getKnowledgeHistoryPage(token: string, filter: core.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getKnowledgeHistoryPage", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetKnowledgeHistoryPageArgs = new GetKnowledgeHistoryPageArgs({ token, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getKnowledgeColumns(token: string, filter: core.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getKnowledgeColumns", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetKnowledgeColumnsArgs = new GetKnowledgeColumnsArgs({ token, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_changeKnowledgeColumns(token: string, toUpdate: Array<KnowledgeColumn.KnowledgeColumn>, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("changeKnowledgeColumns", thrift.Thrift.MessageType.CALL, requestId);
        const args: ChangeKnowledgeColumnsArgs = new ChangeKnowledgeColumnsArgs({ token, toUpdate });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getKnowledgeElementPage(token: string, filter: core.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getKnowledgeElementPage", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetKnowledgeElementPageArgs = new GetKnowledgeElementPageArgs({ token, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_changeKnlgDocRelations(token: string, toCreate: Array<KnowledgeDocumentRelation.KnowledgeDocumentRelation>, toRemove: Array<string>, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("changeKnlgDocRelations", thrift.Thrift.MessageType.CALL, requestId);
        const args: ChangeKnlgDocRelationsArgs = new ChangeKnlgDocRelationsArgs({ token, toCreate, toRemove });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getKnlgDocumentRelationModel(token: string, knowledgeDocumentId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getKnlgDocumentRelationModel", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetKnlgDocumentRelationModelArgs = new GetKnlgDocumentRelationModelArgs({ token, knowledgeDocumentId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getTinyKnlgDocsByFilterNoPermission(token: string, filter: core.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getTinyKnlgDocsByFilterNoPermission", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetTinyKnlgDocsByFilterNoPermissionArgs = new GetTinyKnlgDocsByFilterNoPermissionArgs({ token, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public recv_getAllKnowledgeBase(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAllKnowledgeBaseResult = GetAllKnowledgeBaseResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAllKnowledgeBase failed: unknown result"));
                }
            }
        }
    }
    public recv_changeKnowledgeBase(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: ChangeKnowledgeBaseResult = ChangeKnowledgeBaseResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "changeKnowledgeBase failed: unknown result"));
                }
            }
        }
    }
    public recv_getKnowledgeTree(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetKnowledgeTreeResult = GetKnowledgeTreeResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getKnowledgeTree failed: unknown result"));
                }
            }
        }
    }
    public recv_changeListenPreference(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: ChangeListenPreferenceResult = ChangeListenPreferenceResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "changeListenPreference failed: unknown result"));
                }
            }
        }
    }
    public recv_getKnowledgeTreeNode(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetKnowledgeTreeNodeResult = GetKnowledgeTreeNodeResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getKnowledgeTreeNode failed: unknown result"));
                }
            }
        }
    }
    public recv_createOrUpdateKnowledgeTreeNode(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: CreateOrUpdateKnowledgeTreeNodeResult = CreateOrUpdateKnowledgeTreeNodeResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "createOrUpdateKnowledgeTreeNode failed: unknown result"));
                }
            }
        }
    }
    public recv_removeKnowledgeTreeNode(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: RemoveKnowledgeTreeNodeResult = RemoveKnowledgeTreeNodeResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "removeKnowledgeTreeNode failed: unknown result"));
                }
            }
        }
    }
    public recv_getAllKnowledgeDocuments(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAllKnowledgeDocumentsResult = GetAllKnowledgeDocumentsResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAllKnowledgeDocuments failed: unknown result"));
                }
            }
        }
    }
    public recv_getCountAllKnowledgeDocuments(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetCountAllKnowledgeDocumentsResult = GetCountAllKnowledgeDocumentsResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getCountAllKnowledgeDocuments failed: unknown result"));
                }
            }
        }
    }
    public recv_getKnowledgeDocument(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetKnowledgeDocumentResult = GetKnowledgeDocumentResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getKnowledgeDocument failed: unknown result"));
                }
            }
        }
    }
    public recv_bindDocumentToKnowledge(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: BindDocumentToKnowledgeResult = BindDocumentToKnowledgeResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "bindDocumentToKnowledge failed: unknown result"));
                }
            }
        }
    }
    public recv_unbindDocumentFromKnowledge(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: UnbindDocumentFromKnowledgeResult = UnbindDocumentFromKnowledgeResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "unbindDocumentFromKnowledge failed: unknown result"));
                }
            }
        }
    }
    public recv_editKnowledgeDocument(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: EditKnowledgeDocumentResult = EditKnowledgeDocumentResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "editKnowledgeDocument failed: unknown result"));
                }
            }
        }
    }
    public recv_getKnowledgeHistoryPage(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetKnowledgeHistoryPageResult = GetKnowledgeHistoryPageResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getKnowledgeHistoryPage failed: unknown result"));
                }
            }
        }
    }
    public recv_getKnowledgeColumns(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetKnowledgeColumnsResult = GetKnowledgeColumnsResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getKnowledgeColumns failed: unknown result"));
                }
            }
        }
    }
    public recv_changeKnowledgeColumns(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: ChangeKnowledgeColumnsResult = ChangeKnowledgeColumnsResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "changeKnowledgeColumns failed: unknown result"));
                }
            }
        }
    }
    public recv_getKnowledgeElementPage(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetKnowledgeElementPageResult = GetKnowledgeElementPageResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getKnowledgeElementPage failed: unknown result"));
                }
            }
        }
    }
    public recv_changeKnlgDocRelations(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: ChangeKnlgDocRelationsResult = ChangeKnlgDocRelationsResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "changeKnlgDocRelations failed: unknown result"));
                }
            }
        }
    }
    public recv_getKnlgDocumentRelationModel(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetKnlgDocumentRelationModelResult = GetKnlgDocumentRelationModelResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getKnlgDocumentRelationModel failed: unknown result"));
                }
            }
        }
    }
    public recv_getTinyKnlgDocsByFilterNoPermission(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetTinyKnlgDocsByFilterNoPermissionResult = GetTinyKnlgDocsByFilterNoPermissionResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getTinyKnlgDocsByFilterNoPermission failed: unknown result"));
                }
            }
        }
    }
}
export interface IHandler {
    getAllKnowledgeBase(token: string, filter: core.KazFilter): Array<KnowledgeBase.KnowledgeBase> | Promise<Array<KnowledgeBase.KnowledgeBase>>;
    changeKnowledgeBase(token: string, knowledgeBaseToUpdate: KnowledgeBase.KnowledgeBase, idToRemove: string): KnowledgeBase.KnowledgeBase | Promise<KnowledgeBase.KnowledgeBase>;
    getKnowledgeTree(token: string, filter: core.KazFilter): Array<KnowledgeTree.KnowledgeTree> | Promise<Array<KnowledgeTree.KnowledgeTree>>;
    changeListenPreference(token: string, treeId: string, listenChanges: boolean): boolean | Promise<boolean>;
    getKnowledgeTreeNode(token: string, filter: core.KazFilter): Array<KnowledgeTreeNode.KnowledgeTreeNode> | Promise<Array<KnowledgeTreeNode.KnowledgeTreeNode>>;
    createOrUpdateKnowledgeTreeNode(token: string, treeNode: KnowledgeTreeNode.KnowledgeTreeNode): KnowledgeTreeNode.KnowledgeTreeNode | Promise<KnowledgeTreeNode.KnowledgeTreeNode>;
    removeKnowledgeTreeNode(token: string, nodeTreeId: string): boolean | Promise<boolean>;
    getAllKnowledgeDocuments(token: string, nodeTreeId: string, filter: core.KazFilter): Array<KnowledgeDocument.KnowledgeDocument> | Promise<Array<KnowledgeDocument.KnowledgeDocument>>;
    getCountAllKnowledgeDocuments(token: string, nodeTreeId: string, filter: core.KazFilter): number | Promise<number>;
    getKnowledgeDocument(token: string, knowledgeDocumentId: string, accessPolicy: core.DocumentAccessPolicy): KnowledgeDocument.KnowledgeDocument | Promise<KnowledgeDocument.KnowledgeDocument>;
    bindDocumentToKnowledge(token: string, knowledgeIdsToBind: Set<string>, knowledgeDocument: KnowledgeDocument.KnowledgeDocument, policyToDocument: core.DocumentAccessPolicy): Set<string> | Promise<Set<string>>;
    unbindDocumentFromKnowledge(token: string, knowledgeIdsToUnbind: Set<string>, documentId: string, policyToDocument: core.DocumentAccessPolicy): Set<string> | Promise<Set<string>>;
    editKnowledgeDocument(token: string, knowledgeDocumentId: string, dNameLoc: Map<string, string>, contentHoldersToAdd: Set<string>, contentHoldersToRemove: Set<string>, attachmentsToAdd: Set<string>, attachmentsToRemove: Set<string>, treeId: string, accessPolicy: core.DocumentAccessPolicy): KnowledgeDocument.KnowledgeDocument | Promise<KnowledgeDocument.KnowledgeDocument>;
    getKnowledgeHistoryPage(token: string, filter: core.KazFilter): KnowledgeHistoryPage.KnowledgeHistoryPage | Promise<KnowledgeHistoryPage.KnowledgeHistoryPage>;
    getKnowledgeColumns(token: string, filter: core.KazFilter): KnowledgeColumnPage.KnowledgeColumnPage | Promise<KnowledgeColumnPage.KnowledgeColumnPage>;
    changeKnowledgeColumns(token: string, toUpdate: Array<KnowledgeColumn.KnowledgeColumn>): boolean | Promise<boolean>;
    getKnowledgeElementPage(token: string, filter: core.KazFilter): KnowledgeElementPage.KnowledgeElementPage | Promise<KnowledgeElementPage.KnowledgeElementPage>;
    changeKnlgDocRelations(token: string, toCreate: Array<KnowledgeDocumentRelation.KnowledgeDocumentRelation>, toRemove: Array<string>): Array<KnowledgeDocumentRelation.KnowledgeDocumentRelation> | Promise<Array<KnowledgeDocumentRelation.KnowledgeDocumentRelation>>;
    getKnlgDocumentRelationModel(token: string, knowledgeDocumentId: string): KnowledgeDocumentRelationModel.KnowledgeDocumentRelationModel | Promise<KnowledgeDocumentRelationModel.KnowledgeDocumentRelationModel>;
    getTinyKnlgDocsByFilterNoPermission(token: string, filter: core.KazFilter): Array<KnowledgeDocument.KnowledgeDocument> | Promise<Array<KnowledgeDocument.KnowledgeDocument>>;
}
export class Processor {
    public _handler: IHandler;
    constructor(handler: IHandler) {
        this._handler = handler;
    }
    public process(input: thrift.TProtocol, output: thrift.TProtocol): void {
        const metadata: thrift.TMessage = input.readMessageBegin();
        const fname: string = metadata.fname;
        const requestId: number = metadata.rseqid;
        const methodName: string = "process_" + fname;
        switch (methodName) {
            case "process_getAllKnowledgeBase": {
                this.process_getAllKnowledgeBase(requestId, input, output);
                return;
            }
            case "process_changeKnowledgeBase": {
                this.process_changeKnowledgeBase(requestId, input, output);
                return;
            }
            case "process_getKnowledgeTree": {
                this.process_getKnowledgeTree(requestId, input, output);
                return;
            }
            case "process_changeListenPreference": {
                this.process_changeListenPreference(requestId, input, output);
                return;
            }
            case "process_getKnowledgeTreeNode": {
                this.process_getKnowledgeTreeNode(requestId, input, output);
                return;
            }
            case "process_createOrUpdateKnowledgeTreeNode": {
                this.process_createOrUpdateKnowledgeTreeNode(requestId, input, output);
                return;
            }
            case "process_removeKnowledgeTreeNode": {
                this.process_removeKnowledgeTreeNode(requestId, input, output);
                return;
            }
            case "process_getAllKnowledgeDocuments": {
                this.process_getAllKnowledgeDocuments(requestId, input, output);
                return;
            }
            case "process_getCountAllKnowledgeDocuments": {
                this.process_getCountAllKnowledgeDocuments(requestId, input, output);
                return;
            }
            case "process_getKnowledgeDocument": {
                this.process_getKnowledgeDocument(requestId, input, output);
                return;
            }
            case "process_bindDocumentToKnowledge": {
                this.process_bindDocumentToKnowledge(requestId, input, output);
                return;
            }
            case "process_unbindDocumentFromKnowledge": {
                this.process_unbindDocumentFromKnowledge(requestId, input, output);
                return;
            }
            case "process_editKnowledgeDocument": {
                this.process_editKnowledgeDocument(requestId, input, output);
                return;
            }
            case "process_getKnowledgeHistoryPage": {
                this.process_getKnowledgeHistoryPage(requestId, input, output);
                return;
            }
            case "process_getKnowledgeColumns": {
                this.process_getKnowledgeColumns(requestId, input, output);
                return;
            }
            case "process_changeKnowledgeColumns": {
                this.process_changeKnowledgeColumns(requestId, input, output);
                return;
            }
            case "process_getKnowledgeElementPage": {
                this.process_getKnowledgeElementPage(requestId, input, output);
                return;
            }
            case "process_changeKnlgDocRelations": {
                this.process_changeKnlgDocRelations(requestId, input, output);
                return;
            }
            case "process_getKnlgDocumentRelationModel": {
                this.process_getKnlgDocumentRelationModel(requestId, input, output);
                return;
            }
            case "process_getTinyKnlgDocsByFilterNoPermission": {
                this.process_getTinyKnlgDocsByFilterNoPermission(requestId, input, output);
                return;
            }
            default: {
                input.skip(thrift.Thrift.Type.STRUCT);
                input.readMessageEnd();
                const errMessage = "Unknown function " + fname;
                const err = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN_METHOD, errMessage);
                output.writeMessageBegin(fname, thrift.Thrift.MessageType.EXCEPTION, requestId);
                err.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        }
    }
    public process_getAllKnowledgeBase(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<KnowledgeBase.KnowledgeBase>>((resolve, reject): void => {
            try {
                const args: GetAllKnowledgeBaseArgs = GetAllKnowledgeBaseArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAllKnowledgeBase(args.token, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<KnowledgeBase.KnowledgeBase>): void => {
            const result: GetAllKnowledgeBaseResult = new GetAllKnowledgeBaseResult({ success: data });
            output.writeMessageBegin("getAllKnowledgeBase", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: GetAllKnowledgeBaseResult = new GetAllKnowledgeBaseResult({ validError: err });
                output.writeMessageBegin("getAllKnowledgeBase", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: GetAllKnowledgeBaseResult = new GetAllKnowledgeBaseResult({ error: err });
                output.writeMessageBegin("getAllKnowledgeBase", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAllKnowledgeBase", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_changeKnowledgeBase(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<KnowledgeBase.KnowledgeBase>((resolve, reject): void => {
            try {
                const args: ChangeKnowledgeBaseArgs = ChangeKnowledgeBaseArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.changeKnowledgeBase(args.token, args.knowledgeBaseToUpdate, args.idToRemove));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: KnowledgeBase.KnowledgeBase): void => {
            const result: ChangeKnowledgeBaseResult = new ChangeKnowledgeBaseResult({ success: data });
            output.writeMessageBegin("changeKnowledgeBase", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: ChangeKnowledgeBaseResult = new ChangeKnowledgeBaseResult({ validError: err });
                output.writeMessageBegin("changeKnowledgeBase", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: ChangeKnowledgeBaseResult = new ChangeKnowledgeBaseResult({ error: err });
                output.writeMessageBegin("changeKnowledgeBase", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("changeKnowledgeBase", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getKnowledgeTree(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<KnowledgeTree.KnowledgeTree>>((resolve, reject): void => {
            try {
                const args: GetKnowledgeTreeArgs = GetKnowledgeTreeArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getKnowledgeTree(args.token, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<KnowledgeTree.KnowledgeTree>): void => {
            const result: GetKnowledgeTreeResult = new GetKnowledgeTreeResult({ success: data });
            output.writeMessageBegin("getKnowledgeTree", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: GetKnowledgeTreeResult = new GetKnowledgeTreeResult({ validError: err });
                output.writeMessageBegin("getKnowledgeTree", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: GetKnowledgeTreeResult = new GetKnowledgeTreeResult({ error: err });
                output.writeMessageBegin("getKnowledgeTree", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getKnowledgeTree", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_changeListenPreference(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: ChangeListenPreferenceArgs = ChangeListenPreferenceArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.changeListenPreference(args.token, args.treeId, args.listenChanges));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: ChangeListenPreferenceResult = new ChangeListenPreferenceResult({ success: data });
            output.writeMessageBegin("changeListenPreference", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: ChangeListenPreferenceResult = new ChangeListenPreferenceResult({ validError: err });
                output.writeMessageBegin("changeListenPreference", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: ChangeListenPreferenceResult = new ChangeListenPreferenceResult({ error: err });
                output.writeMessageBegin("changeListenPreference", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("changeListenPreference", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getKnowledgeTreeNode(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<KnowledgeTreeNode.KnowledgeTreeNode>>((resolve, reject): void => {
            try {
                const args: GetKnowledgeTreeNodeArgs = GetKnowledgeTreeNodeArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getKnowledgeTreeNode(args.token, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<KnowledgeTreeNode.KnowledgeTreeNode>): void => {
            const result: GetKnowledgeTreeNodeResult = new GetKnowledgeTreeNodeResult({ success: data });
            output.writeMessageBegin("getKnowledgeTreeNode", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: GetKnowledgeTreeNodeResult = new GetKnowledgeTreeNodeResult({ validError: err });
                output.writeMessageBegin("getKnowledgeTreeNode", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: GetKnowledgeTreeNodeResult = new GetKnowledgeTreeNodeResult({ error: err });
                output.writeMessageBegin("getKnowledgeTreeNode", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getKnowledgeTreeNode", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_createOrUpdateKnowledgeTreeNode(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<KnowledgeTreeNode.KnowledgeTreeNode>((resolve, reject): void => {
            try {
                const args: CreateOrUpdateKnowledgeTreeNodeArgs = CreateOrUpdateKnowledgeTreeNodeArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.createOrUpdateKnowledgeTreeNode(args.token, args.treeNode));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: KnowledgeTreeNode.KnowledgeTreeNode): void => {
            const result: CreateOrUpdateKnowledgeTreeNodeResult = new CreateOrUpdateKnowledgeTreeNodeResult({ success: data });
            output.writeMessageBegin("createOrUpdateKnowledgeTreeNode", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: CreateOrUpdateKnowledgeTreeNodeResult = new CreateOrUpdateKnowledgeTreeNodeResult({ validError: err });
                output.writeMessageBegin("createOrUpdateKnowledgeTreeNode", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: CreateOrUpdateKnowledgeTreeNodeResult = new CreateOrUpdateKnowledgeTreeNodeResult({ error: err });
                output.writeMessageBegin("createOrUpdateKnowledgeTreeNode", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("createOrUpdateKnowledgeTreeNode", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_removeKnowledgeTreeNode(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: RemoveKnowledgeTreeNodeArgs = RemoveKnowledgeTreeNodeArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.removeKnowledgeTreeNode(args.token, args.nodeTreeId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: RemoveKnowledgeTreeNodeResult = new RemoveKnowledgeTreeNodeResult({ success: data });
            output.writeMessageBegin("removeKnowledgeTreeNode", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: RemoveKnowledgeTreeNodeResult = new RemoveKnowledgeTreeNodeResult({ validError: err });
                output.writeMessageBegin("removeKnowledgeTreeNode", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: RemoveKnowledgeTreeNodeResult = new RemoveKnowledgeTreeNodeResult({ error: err });
                output.writeMessageBegin("removeKnowledgeTreeNode", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("removeKnowledgeTreeNode", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getAllKnowledgeDocuments(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<KnowledgeDocument.KnowledgeDocument>>((resolve, reject): void => {
            try {
                const args: GetAllKnowledgeDocumentsArgs = GetAllKnowledgeDocumentsArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAllKnowledgeDocuments(args.token, args.nodeTreeId, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<KnowledgeDocument.KnowledgeDocument>): void => {
            const result: GetAllKnowledgeDocumentsResult = new GetAllKnowledgeDocumentsResult({ success: data });
            output.writeMessageBegin("getAllKnowledgeDocuments", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: GetAllKnowledgeDocumentsResult = new GetAllKnowledgeDocumentsResult({ validError: err });
                output.writeMessageBegin("getAllKnowledgeDocuments", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: GetAllKnowledgeDocumentsResult = new GetAllKnowledgeDocumentsResult({ error: err });
                output.writeMessageBegin("getAllKnowledgeDocuments", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAllKnowledgeDocuments", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getCountAllKnowledgeDocuments(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<number>((resolve, reject): void => {
            try {
                const args: GetCountAllKnowledgeDocumentsArgs = GetCountAllKnowledgeDocumentsArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getCountAllKnowledgeDocuments(args.token, args.nodeTreeId, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: number): void => {
            const result: GetCountAllKnowledgeDocumentsResult = new GetCountAllKnowledgeDocumentsResult({ success: data });
            output.writeMessageBegin("getCountAllKnowledgeDocuments", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: GetCountAllKnowledgeDocumentsResult = new GetCountAllKnowledgeDocumentsResult({ validError: err });
                output.writeMessageBegin("getCountAllKnowledgeDocuments", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: GetCountAllKnowledgeDocumentsResult = new GetCountAllKnowledgeDocumentsResult({ error: err });
                output.writeMessageBegin("getCountAllKnowledgeDocuments", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getCountAllKnowledgeDocuments", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getKnowledgeDocument(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<KnowledgeDocument.KnowledgeDocument>((resolve, reject): void => {
            try {
                const args: GetKnowledgeDocumentArgs = GetKnowledgeDocumentArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getKnowledgeDocument(args.token, args.knowledgeDocumentId, args.accessPolicy));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: KnowledgeDocument.KnowledgeDocument): void => {
            const result: GetKnowledgeDocumentResult = new GetKnowledgeDocumentResult({ success: data });
            output.writeMessageBegin("getKnowledgeDocument", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: GetKnowledgeDocumentResult = new GetKnowledgeDocumentResult({ validError: err });
                output.writeMessageBegin("getKnowledgeDocument", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: GetKnowledgeDocumentResult = new GetKnowledgeDocumentResult({ error: err });
                output.writeMessageBegin("getKnowledgeDocument", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getKnowledgeDocument", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_bindDocumentToKnowledge(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Set<string>>((resolve, reject): void => {
            try {
                const args: BindDocumentToKnowledgeArgs = BindDocumentToKnowledgeArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.bindDocumentToKnowledge(args.token, args.knowledgeIdsToBind, args.knowledgeDocument, args.policyToDocument));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Set<string>): void => {
            const result: BindDocumentToKnowledgeResult = new BindDocumentToKnowledgeResult({ success: data });
            output.writeMessageBegin("bindDocumentToKnowledge", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: BindDocumentToKnowledgeResult = new BindDocumentToKnowledgeResult({ validError: err });
                output.writeMessageBegin("bindDocumentToKnowledge", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: BindDocumentToKnowledgeResult = new BindDocumentToKnowledgeResult({ error: err });
                output.writeMessageBegin("bindDocumentToKnowledge", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("bindDocumentToKnowledge", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_unbindDocumentFromKnowledge(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Set<string>>((resolve, reject): void => {
            try {
                const args: UnbindDocumentFromKnowledgeArgs = UnbindDocumentFromKnowledgeArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.unbindDocumentFromKnowledge(args.token, args.knowledgeIdsToUnbind, args.documentId, args.policyToDocument));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Set<string>): void => {
            const result: UnbindDocumentFromKnowledgeResult = new UnbindDocumentFromKnowledgeResult({ success: data });
            output.writeMessageBegin("unbindDocumentFromKnowledge", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: UnbindDocumentFromKnowledgeResult = new UnbindDocumentFromKnowledgeResult({ validError: err });
                output.writeMessageBegin("unbindDocumentFromKnowledge", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: UnbindDocumentFromKnowledgeResult = new UnbindDocumentFromKnowledgeResult({ error: err });
                output.writeMessageBegin("unbindDocumentFromKnowledge", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("unbindDocumentFromKnowledge", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_editKnowledgeDocument(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<KnowledgeDocument.KnowledgeDocument>((resolve, reject): void => {
            try {
                const args: EditKnowledgeDocumentArgs = EditKnowledgeDocumentArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.editKnowledgeDocument(args.token, args.knowledgeDocumentId, args.dNameLoc, args.contentHoldersToAdd, args.contentHoldersToRemove, args.attachmentsToAdd, args.attachmentsToRemove, args.treeId, args.accessPolicy));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: KnowledgeDocument.KnowledgeDocument): void => {
            const result: EditKnowledgeDocumentResult = new EditKnowledgeDocumentResult({ success: data });
            output.writeMessageBegin("editKnowledgeDocument", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: EditKnowledgeDocumentResult = new EditKnowledgeDocumentResult({ validError: err });
                output.writeMessageBegin("editKnowledgeDocument", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: EditKnowledgeDocumentResult = new EditKnowledgeDocumentResult({ error: err });
                output.writeMessageBegin("editKnowledgeDocument", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("editKnowledgeDocument", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getKnowledgeHistoryPage(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<KnowledgeHistoryPage.KnowledgeHistoryPage>((resolve, reject): void => {
            try {
                const args: GetKnowledgeHistoryPageArgs = GetKnowledgeHistoryPageArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getKnowledgeHistoryPage(args.token, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: KnowledgeHistoryPage.KnowledgeHistoryPage): void => {
            const result: GetKnowledgeHistoryPageResult = new GetKnowledgeHistoryPageResult({ success: data });
            output.writeMessageBegin("getKnowledgeHistoryPage", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: GetKnowledgeHistoryPageResult = new GetKnowledgeHistoryPageResult({ validError: err });
                output.writeMessageBegin("getKnowledgeHistoryPage", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: GetKnowledgeHistoryPageResult = new GetKnowledgeHistoryPageResult({ error: err });
                output.writeMessageBegin("getKnowledgeHistoryPage", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getKnowledgeHistoryPage", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getKnowledgeColumns(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<KnowledgeColumnPage.KnowledgeColumnPage>((resolve, reject): void => {
            try {
                const args: GetKnowledgeColumnsArgs = GetKnowledgeColumnsArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getKnowledgeColumns(args.token, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: KnowledgeColumnPage.KnowledgeColumnPage): void => {
            const result: GetKnowledgeColumnsResult = new GetKnowledgeColumnsResult({ success: data });
            output.writeMessageBegin("getKnowledgeColumns", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: GetKnowledgeColumnsResult = new GetKnowledgeColumnsResult({ validError: err });
                output.writeMessageBegin("getKnowledgeColumns", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: GetKnowledgeColumnsResult = new GetKnowledgeColumnsResult({ error: err });
                output.writeMessageBegin("getKnowledgeColumns", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getKnowledgeColumns", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_changeKnowledgeColumns(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: ChangeKnowledgeColumnsArgs = ChangeKnowledgeColumnsArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.changeKnowledgeColumns(args.token, args.toUpdate));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: ChangeKnowledgeColumnsResult = new ChangeKnowledgeColumnsResult({ success: data });
            output.writeMessageBegin("changeKnowledgeColumns", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: ChangeKnowledgeColumnsResult = new ChangeKnowledgeColumnsResult({ validError: err });
                output.writeMessageBegin("changeKnowledgeColumns", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: ChangeKnowledgeColumnsResult = new ChangeKnowledgeColumnsResult({ error: err });
                output.writeMessageBegin("changeKnowledgeColumns", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("changeKnowledgeColumns", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getKnowledgeElementPage(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<KnowledgeElementPage.KnowledgeElementPage>((resolve, reject): void => {
            try {
                const args: GetKnowledgeElementPageArgs = GetKnowledgeElementPageArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getKnowledgeElementPage(args.token, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: KnowledgeElementPage.KnowledgeElementPage): void => {
            const result: GetKnowledgeElementPageResult = new GetKnowledgeElementPageResult({ success: data });
            output.writeMessageBegin("getKnowledgeElementPage", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: GetKnowledgeElementPageResult = new GetKnowledgeElementPageResult({ validError: err });
                output.writeMessageBegin("getKnowledgeElementPage", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: GetKnowledgeElementPageResult = new GetKnowledgeElementPageResult({ error: err });
                output.writeMessageBegin("getKnowledgeElementPage", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getKnowledgeElementPage", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_changeKnlgDocRelations(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<KnowledgeDocumentRelation.KnowledgeDocumentRelation>>((resolve, reject): void => {
            try {
                const args: ChangeKnlgDocRelationsArgs = ChangeKnlgDocRelationsArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.changeKnlgDocRelations(args.token, args.toCreate, args.toRemove));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<KnowledgeDocumentRelation.KnowledgeDocumentRelation>): void => {
            const result: ChangeKnlgDocRelationsResult = new ChangeKnlgDocRelationsResult({ success: data });
            output.writeMessageBegin("changeKnlgDocRelations", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: ChangeKnlgDocRelationsResult = new ChangeKnlgDocRelationsResult({ validError: err });
                output.writeMessageBegin("changeKnlgDocRelations", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: ChangeKnlgDocRelationsResult = new ChangeKnlgDocRelationsResult({ error: err });
                output.writeMessageBegin("changeKnlgDocRelations", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("changeKnlgDocRelations", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getKnlgDocumentRelationModel(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<KnowledgeDocumentRelationModel.KnowledgeDocumentRelationModel>((resolve, reject): void => {
            try {
                const args: GetKnlgDocumentRelationModelArgs = GetKnlgDocumentRelationModelArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getKnlgDocumentRelationModel(args.token, args.knowledgeDocumentId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: KnowledgeDocumentRelationModel.KnowledgeDocumentRelationModel): void => {
            const result: GetKnlgDocumentRelationModelResult = new GetKnlgDocumentRelationModelResult({ success: data });
            output.writeMessageBegin("getKnlgDocumentRelationModel", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: GetKnlgDocumentRelationModelResult = new GetKnlgDocumentRelationModelResult({ validError: err });
                output.writeMessageBegin("getKnlgDocumentRelationModel", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: GetKnlgDocumentRelationModelResult = new GetKnlgDocumentRelationModelResult({ error: err });
                output.writeMessageBegin("getKnlgDocumentRelationModel", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getKnlgDocumentRelationModel", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getTinyKnlgDocsByFilterNoPermission(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<KnowledgeDocument.KnowledgeDocument>>((resolve, reject): void => {
            try {
                const args: GetTinyKnlgDocsByFilterNoPermissionArgs = GetTinyKnlgDocsByFilterNoPermissionArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getTinyKnlgDocsByFilterNoPermission(args.token, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<KnowledgeDocument.KnowledgeDocument>): void => {
            const result: GetTinyKnlgDocsByFilterNoPermissionResult = new GetTinyKnlgDocsByFilterNoPermissionResult({ success: data });
            output.writeMessageBegin("getTinyKnlgDocsByFilterNoPermission", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: GetTinyKnlgDocsByFilterNoPermissionResult = new GetTinyKnlgDocsByFilterNoPermissionResult({ validError: err });
                output.writeMessageBegin("getTinyKnlgDocsByFilterNoPermission", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: GetTinyKnlgDocsByFilterNoPermissionResult = new GetTinyKnlgDocsByFilterNoPermissionResult({ error: err });
                output.writeMessageBegin("getTinyKnlgDocsByFilterNoPermission", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getTinyKnlgDocsByFilterNoPermission", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
}

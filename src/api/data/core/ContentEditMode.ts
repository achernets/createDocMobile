/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface IContentEditModeArgs {
    canAddRows?: boolean;
    canAddRowsViaDrools?: boolean;
    canRemoveRows?: boolean;
    canRemoveRowsViaDrools?: boolean;
}
export class ContentEditMode {
    public canAddRows?: boolean;
    public canAddRowsViaDrools?: boolean;
    public canRemoveRows?: boolean;
    public canRemoveRowsViaDrools?: boolean;
    constructor(args?: IContentEditModeArgs) {
        if (args != null && args.canAddRows != null) {
            this.canAddRows = args.canAddRows;
        }
        if (args != null && args.canAddRowsViaDrools != null) {
            this.canAddRowsViaDrools = args.canAddRowsViaDrools;
        }
        if (args != null && args.canRemoveRows != null) {
            this.canRemoveRows = args.canRemoveRows;
        }
        if (args != null && args.canRemoveRowsViaDrools != null) {
            this.canRemoveRowsViaDrools = args.canRemoveRowsViaDrools;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ContentEditMode");
        if (this.canAddRows != null) {
            output.writeFieldBegin("canAddRows", thrift.Thrift.Type.BOOL, 1);
            output.writeBool(this.canAddRows);
            output.writeFieldEnd();
        }
        if (this.canAddRowsViaDrools != null) {
            output.writeFieldBegin("canAddRowsViaDrools", thrift.Thrift.Type.BOOL, 2);
            output.writeBool(this.canAddRowsViaDrools);
            output.writeFieldEnd();
        }
        if (this.canRemoveRows != null) {
            output.writeFieldBegin("canRemoveRows", thrift.Thrift.Type.BOOL, 3);
            output.writeBool(this.canRemoveRows);
            output.writeFieldEnd();
        }
        if (this.canRemoveRowsViaDrools != null) {
            output.writeFieldBegin("canRemoveRowsViaDrools", thrift.Thrift.Type.BOOL, 4);
            output.writeBool(this.canRemoveRowsViaDrools);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ContentEditMode {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_1: boolean = input.readBool();
                        _args.canAddRows = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_2: boolean = input.readBool();
                        _args.canAddRowsViaDrools = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_3: boolean = input.readBool();
                        _args.canRemoveRows = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_4: boolean = input.readBool();
                        _args.canRemoveRowsViaDrools = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ContentEditMode(_args);
    }
}

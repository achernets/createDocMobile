/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as core from "./";
import * as PatternAttachmentTemplate from "./PatternAttachmentTemplate";
export interface IInfoForCreateDocArgs {
    stages?: Array<core.DocumentPatternStage>;
    scGrifs?: Array<core.SecurityClassification>;
    templates?: Array<PatternAttachmentTemplate.PatternAttachmentTemplate>;
    holders?: Array<core.ContentHolder>;
    permissions?: core.DocPermissions;
}
export class InfoForCreateDoc {
    public stages?: Array<core.DocumentPatternStage>;
    public scGrifs?: Array<core.SecurityClassification>;
    public templates?: Array<PatternAttachmentTemplate.PatternAttachmentTemplate>;
    public holders?: Array<core.ContentHolder>;
    public permissions?: core.DocPermissions;
    constructor(args?: IInfoForCreateDocArgs) {
        if (args != null && args.stages != null) {
            this.stages = args.stages;
        }
        if (args != null && args.scGrifs != null) {
            this.scGrifs = args.scGrifs;
        }
        if (args != null && args.templates != null) {
            this.templates = args.templates;
        }
        if (args != null && args.holders != null) {
            this.holders = args.holders;
        }
        if (args != null && args.permissions != null) {
            this.permissions = args.permissions;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("InfoForCreateDoc");
        if (this.stages != null) {
            output.writeFieldBegin("stages", thrift.Thrift.Type.LIST, 1);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.stages.length);
            this.stages.forEach((value_1: core.DocumentPatternStage): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.scGrifs != null) {
            output.writeFieldBegin("scGrifs", thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.scGrifs.length);
            this.scGrifs.forEach((value_2: core.SecurityClassification): void => {
                value_2.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.templates != null) {
            output.writeFieldBegin("templates", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.templates.length);
            this.templates.forEach((value_3: PatternAttachmentTemplate.PatternAttachmentTemplate): void => {
                value_3.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.holders != null) {
            output.writeFieldBegin("holders", thrift.Thrift.Type.LIST, 4);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.holders.length);
            this.holders.forEach((value_4: core.ContentHolder): void => {
                value_4.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.permissions != null) {
            output.writeFieldBegin("permissions", thrift.Thrift.Type.STRUCT, 5);
            this.permissions.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): InfoForCreateDoc {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_5: Array<core.DocumentPatternStage> = new Array<core.DocumentPatternStage>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_6: core.DocumentPatternStage = core.DocumentPatternStage.read(input);
                            value_5.push(value_6);
                        }
                        input.readListEnd();
                        _args.stages = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_7: Array<core.SecurityClassification> = new Array<core.SecurityClassification>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_8: core.SecurityClassification = core.SecurityClassification.read(input);
                            value_7.push(value_8);
                        }
                        input.readListEnd();
                        _args.scGrifs = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_9: Array<PatternAttachmentTemplate.PatternAttachmentTemplate> = new Array<PatternAttachmentTemplate.PatternAttachmentTemplate>();
                        const metadata_3: thrift.TList = input.readListBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_10: PatternAttachmentTemplate.PatternAttachmentTemplate = PatternAttachmentTemplate.PatternAttachmentTemplate.read(input);
                            value_9.push(value_10);
                        }
                        input.readListEnd();
                        _args.templates = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_11: Array<core.ContentHolder> = new Array<core.ContentHolder>();
                        const metadata_4: thrift.TList = input.readListBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const value_12: core.ContentHolder = core.ContentHolder.read(input);
                            value_11.push(value_12);
                        }
                        input.readListEnd();
                        _args.holders = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_13: core.DocPermissions = core.DocPermissions.read(input);
                        _args.permissions = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new InfoForCreateDoc(_args);
    }
}

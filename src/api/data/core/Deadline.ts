/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 from "node-int64";
import * as thrift from "thrift";
import * as core from "./";
export interface IDeadlineArgs {
    id?: string;
    documentId?: string;
    numberDocument?: string;
    documentName?: string;
    documentPatternId?: string;
    authorName?: string;
    actionType?: core.DocPatternStageActionType;
    assignedDate?: number | Int64;
    reassignedDate?: number | Int64;
    deadlineDate?: number | Int64;
    control?: boolean;
    informedAboutDeadline?: boolean;
    documentSystemNumber?: string;
    documentStatus?: core.DocPatternStageStatus;
    icon?: core.DocumentIconType;
}
export class Deadline {
    public id?: string;
    public documentId?: string;
    public numberDocument?: string;
    public documentName?: string;
    public documentPatternId?: string;
    public authorName?: string;
    public actionType?: core.DocPatternStageActionType;
    public assignedDate?: Int64;
    public reassignedDate?: Int64;
    public deadlineDate?: Int64;
    public control?: boolean;
    public informedAboutDeadline?: boolean;
    public documentSystemNumber?: string;
    public documentStatus?: core.DocPatternStageStatus;
    public icon?: core.DocumentIconType;
    constructor(args?: IDeadlineArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.documentId != null) {
            this.documentId = args.documentId;
        }
        if (args != null && args.numberDocument != null) {
            this.numberDocument = args.numberDocument;
        }
        if (args != null && args.documentName != null) {
            this.documentName = args.documentName;
        }
        if (args != null && args.documentPatternId != null) {
            this.documentPatternId = args.documentPatternId;
        }
        if (args != null && args.authorName != null) {
            this.authorName = args.authorName;
        }
        if (args != null && args.actionType != null) {
            this.actionType = args.actionType;
        }
        if (args != null && args.assignedDate != null) {
            if (typeof args.assignedDate === "number") {
                this.assignedDate = new Int64(args.assignedDate);
            }
            else {
                this.assignedDate = args.assignedDate;
            }
        }
        if (args != null && args.reassignedDate != null) {
            if (typeof args.reassignedDate === "number") {
                this.reassignedDate = new Int64(args.reassignedDate);
            }
            else {
                this.reassignedDate = args.reassignedDate;
            }
        }
        if (args != null && args.deadlineDate != null) {
            if (typeof args.deadlineDate === "number") {
                this.deadlineDate = new Int64(args.deadlineDate);
            }
            else {
                this.deadlineDate = args.deadlineDate;
            }
        }
        if (args != null && args.control != null) {
            this.control = args.control;
        }
        if (args != null && args.informedAboutDeadline != null) {
            this.informedAboutDeadline = args.informedAboutDeadline;
        }
        if (args != null && args.documentSystemNumber != null) {
            this.documentSystemNumber = args.documentSystemNumber;
        }
        if (args != null && args.documentStatus != null) {
            this.documentStatus = args.documentStatus;
        }
        if (args != null && args.icon != null) {
            this.icon = args.icon;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("Deadline");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.documentId != null) {
            output.writeFieldBegin("documentId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.documentId);
            output.writeFieldEnd();
        }
        if (this.numberDocument != null) {
            output.writeFieldBegin("numberDocument", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.numberDocument);
            output.writeFieldEnd();
        }
        if (this.documentName != null) {
            output.writeFieldBegin("documentName", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.documentName);
            output.writeFieldEnd();
        }
        if (this.documentPatternId != null) {
            output.writeFieldBegin("documentPatternId", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.documentPatternId);
            output.writeFieldEnd();
        }
        if (this.authorName != null) {
            output.writeFieldBegin("authorName", thrift.Thrift.Type.STRING, 6);
            output.writeString(this.authorName);
            output.writeFieldEnd();
        }
        if (this.actionType != null) {
            output.writeFieldBegin("actionType", thrift.Thrift.Type.I32, 7);
            output.writeI32(this.actionType);
            output.writeFieldEnd();
        }
        if (this.assignedDate != null) {
            output.writeFieldBegin("assignedDate", thrift.Thrift.Type.I64, 8);
            output.writeI64(this.assignedDate);
            output.writeFieldEnd();
        }
        if (this.reassignedDate != null) {
            output.writeFieldBegin("reassignedDate", thrift.Thrift.Type.I64, 9);
            output.writeI64(this.reassignedDate);
            output.writeFieldEnd();
        }
        if (this.deadlineDate != null) {
            output.writeFieldBegin("deadlineDate", thrift.Thrift.Type.I64, 10);
            output.writeI64(this.deadlineDate);
            output.writeFieldEnd();
        }
        if (this.control != null) {
            output.writeFieldBegin("control", thrift.Thrift.Type.BOOL, 11);
            output.writeBool(this.control);
            output.writeFieldEnd();
        }
        if (this.informedAboutDeadline != null) {
            output.writeFieldBegin("informedAboutDeadline", thrift.Thrift.Type.BOOL, 12);
            output.writeBool(this.informedAboutDeadline);
            output.writeFieldEnd();
        }
        if (this.documentSystemNumber != null) {
            output.writeFieldBegin("documentSystemNumber", thrift.Thrift.Type.STRING, 13);
            output.writeString(this.documentSystemNumber);
            output.writeFieldEnd();
        }
        if (this.documentStatus != null) {
            output.writeFieldBegin("documentStatus", thrift.Thrift.Type.I32, 14);
            output.writeI32(this.documentStatus);
            output.writeFieldEnd();
        }
        if (this.icon != null) {
            output.writeFieldBegin("icon", thrift.Thrift.Type.I32, 15);
            output.writeI32(this.icon);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): Deadline {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.id = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.documentId = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.numberDocument = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.documentName = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.documentPatternId = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.authorName = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_7: core.DocPatternStageActionType = input.readI32();
                        _args.actionType = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_8: Int64 = input.readI64();
                        _args.assignedDate = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_9: Int64 = input.readI64();
                        _args.reassignedDate = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_10: Int64 = input.readI64();
                        _args.deadlineDate = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_11: boolean = input.readBool();
                        _args.control = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_12: boolean = input.readBool();
                        _args.informedAboutDeadline = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_13: string = input.readString();
                        _args.documentSystemNumber = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_14: core.DocPatternStageStatus = input.readI32();
                        _args.documentStatus = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_15: core.DocumentIconType = input.readI32();
                        _args.icon = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new Deadline(_args);
    }
}

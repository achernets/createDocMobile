/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 from "node-int64";
import * as thrift from "thrift";
import * as HistoryLevel from "./HistoryLevel";
import * as core from "./";
import * as HistoryParam from "./HistoryParam";
export interface IHistoryDataArgs {
    id?: string;
    createDate?: number | Int64;
    documentId?: string;
    level?: HistoryLevel.HistoryLevel;
    key?: string;
    parameters?: Array<string>;
    user?: core.UserOrGroup;
    authorOriginal?: core.UserOrGroup;
    docNumber?: string;
    docSysNumber?: string;
    attachmentId?: string;
    attachmentFileName?: string;
    ip1?: string;
    ip2?: string;
    patternId?: string;
    hasDetailData?: boolean;
    nomenclatureNumberId?: string;
    additionalParams?: Map<string, Array<string>>;
    author?: core.UserOrGroup;
    historyParamList?: Array<HistoryParam.HistoryParam>;
    historyVersion?: number;
}
export class HistoryData {
    public id?: string;
    public createDate?: Int64;
    public documentId?: string;
    public level?: HistoryLevel.HistoryLevel;
    public key?: string;
    public parameters?: Array<string>;
    public user?: core.UserOrGroup;
    public authorOriginal?: core.UserOrGroup;
    public docNumber?: string;
    public docSysNumber?: string;
    public attachmentId?: string;
    public attachmentFileName?: string;
    public ip1?: string;
    public ip2?: string;
    public patternId?: string;
    public hasDetailData?: boolean;
    public nomenclatureNumberId?: string;
    public additionalParams?: Map<string, Array<string>>;
    public author?: core.UserOrGroup;
    public historyParamList?: Array<HistoryParam.HistoryParam>;
    public historyVersion?: number;
    constructor(args?: IHistoryDataArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.createDate != null) {
            if (typeof args.createDate === "number") {
                this.createDate = new Int64(args.createDate);
            }
            else {
                this.createDate = args.createDate;
            }
        }
        if (args != null && args.documentId != null) {
            this.documentId = args.documentId;
        }
        if (args != null && args.level != null) {
            this.level = args.level;
        }
        if (args != null && args.key != null) {
            this.key = args.key;
        }
        if (args != null && args.parameters != null) {
            this.parameters = args.parameters;
        }
        if (args != null && args.user != null) {
            this.user = args.user;
        }
        if (args != null && args.authorOriginal != null) {
            this.authorOriginal = args.authorOriginal;
        }
        if (args != null && args.docNumber != null) {
            this.docNumber = args.docNumber;
        }
        if (args != null && args.docSysNumber != null) {
            this.docSysNumber = args.docSysNumber;
        }
        if (args != null && args.attachmentId != null) {
            this.attachmentId = args.attachmentId;
        }
        if (args != null && args.attachmentFileName != null) {
            this.attachmentFileName = args.attachmentFileName;
        }
        if (args != null && args.ip1 != null) {
            this.ip1 = args.ip1;
        }
        if (args != null && args.ip2 != null) {
            this.ip2 = args.ip2;
        }
        if (args != null && args.patternId != null) {
            this.patternId = args.patternId;
        }
        if (args != null && args.hasDetailData != null) {
            this.hasDetailData = args.hasDetailData;
        }
        if (args != null && args.nomenclatureNumberId != null) {
            this.nomenclatureNumberId = args.nomenclatureNumberId;
        }
        if (args != null && args.additionalParams != null) {
            this.additionalParams = args.additionalParams;
        }
        if (args != null && args.author != null) {
            this.author = args.author;
        }
        if (args != null && args.historyParamList != null) {
            this.historyParamList = args.historyParamList;
        }
        if (args != null && args.historyVersion != null) {
            this.historyVersion = args.historyVersion;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("HistoryData");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.createDate != null) {
            output.writeFieldBegin("createDate", thrift.Thrift.Type.I64, 2);
            output.writeI64(this.createDate);
            output.writeFieldEnd();
        }
        if (this.documentId != null) {
            output.writeFieldBegin("documentId", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.documentId);
            output.writeFieldEnd();
        }
        if (this.level != null) {
            output.writeFieldBegin("level", thrift.Thrift.Type.I32, 4);
            output.writeI32(this.level);
            output.writeFieldEnd();
        }
        if (this.key != null) {
            output.writeFieldBegin("key", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.key);
            output.writeFieldEnd();
        }
        if (this.parameters != null) {
            output.writeFieldBegin("parameters", thrift.Thrift.Type.LIST, 6);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.parameters.length);
            this.parameters.forEach((value_1: string): void => {
                output.writeString(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.user != null) {
            output.writeFieldBegin("user", thrift.Thrift.Type.STRUCT, 7);
            this.user.write(output);
            output.writeFieldEnd();
        }
        if (this.authorOriginal != null) {
            output.writeFieldBegin("authorOriginal", thrift.Thrift.Type.STRUCT, 8);
            this.authorOriginal.write(output);
            output.writeFieldEnd();
        }
        if (this.docNumber != null) {
            output.writeFieldBegin("docNumber", thrift.Thrift.Type.STRING, 9);
            output.writeString(this.docNumber);
            output.writeFieldEnd();
        }
        if (this.docSysNumber != null) {
            output.writeFieldBegin("docSysNumber", thrift.Thrift.Type.STRING, 10);
            output.writeString(this.docSysNumber);
            output.writeFieldEnd();
        }
        if (this.attachmentId != null) {
            output.writeFieldBegin("attachmentId", thrift.Thrift.Type.STRING, 11);
            output.writeString(this.attachmentId);
            output.writeFieldEnd();
        }
        if (this.attachmentFileName != null) {
            output.writeFieldBegin("attachmentFileName", thrift.Thrift.Type.STRING, 12);
            output.writeString(this.attachmentFileName);
            output.writeFieldEnd();
        }
        if (this.ip1 != null) {
            output.writeFieldBegin("ip1", thrift.Thrift.Type.STRING, 13);
            output.writeString(this.ip1);
            output.writeFieldEnd();
        }
        if (this.ip2 != null) {
            output.writeFieldBegin("ip2", thrift.Thrift.Type.STRING, 14);
            output.writeString(this.ip2);
            output.writeFieldEnd();
        }
        if (this.patternId != null) {
            output.writeFieldBegin("patternId", thrift.Thrift.Type.STRING, 15);
            output.writeString(this.patternId);
            output.writeFieldEnd();
        }
        if (this.hasDetailData != null) {
            output.writeFieldBegin("hasDetailData", thrift.Thrift.Type.BOOL, 16);
            output.writeBool(this.hasDetailData);
            output.writeFieldEnd();
        }
        if (this.nomenclatureNumberId != null) {
            output.writeFieldBegin("nomenclatureNumberId", thrift.Thrift.Type.STRING, 17);
            output.writeString(this.nomenclatureNumberId);
            output.writeFieldEnd();
        }
        if (this.additionalParams != null) {
            output.writeFieldBegin("additionalParams", thrift.Thrift.Type.MAP, 18);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.LIST, this.additionalParams.size);
            this.additionalParams.forEach((value_2: Array<string>, key_1: string): void => {
                output.writeString(key_1);
                output.writeListBegin(thrift.Thrift.Type.STRING, value_2.length);
                value_2.forEach((value_3: string): void => {
                    output.writeString(value_3);
                });
                output.writeListEnd();
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.author != null) {
            output.writeFieldBegin("author", thrift.Thrift.Type.STRUCT, 19);
            this.author.write(output);
            output.writeFieldEnd();
        }
        if (this.historyParamList != null) {
            output.writeFieldBegin("historyParamList", thrift.Thrift.Type.LIST, 20);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.historyParamList.length);
            this.historyParamList.forEach((value_4: HistoryParam.HistoryParam): void => {
                value_4.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.historyVersion != null) {
            output.writeFieldBegin("historyVersion", thrift.Thrift.Type.I32, 21);
            output.writeI32(this.historyVersion);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): HistoryData {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.id = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_6: Int64 = input.readI64();
                        _args.createDate = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_7: string = input.readString();
                        _args.documentId = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_8: HistoryLevel.HistoryLevel = input.readI32();
                        _args.level = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_9: string = input.readString();
                        _args.key = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_10: Array<string> = new Array<string>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_11: string = input.readString();
                            value_10.push(value_11);
                        }
                        input.readListEnd();
                        _args.parameters = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_12: core.UserOrGroup = core.UserOrGroup.read(input);
                        _args.user = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_13: core.UserOrGroup = core.UserOrGroup.read(input);
                        _args.authorOriginal = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_14: string = input.readString();
                        _args.docNumber = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_15: string = input.readString();
                        _args.docSysNumber = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_16: string = input.readString();
                        _args.attachmentId = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_17: string = input.readString();
                        _args.attachmentFileName = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_18: string = input.readString();
                        _args.ip1 = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_19: string = input.readString();
                        _args.ip2 = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_20: string = input.readString();
                        _args.patternId = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_21: boolean = input.readBool();
                        _args.hasDetailData = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 17:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_22: string = input.readString();
                        _args.nomenclatureNumberId = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 18:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_23: Map<string, Array<string>> = new Map<string, Array<string>>();
                        const metadata_2: thrift.TMap = input.readMapBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const key_2: string = input.readString();
                            const value_24: Array<string> = new Array<string>();
                            const metadata_3: thrift.TList = input.readListBegin();
                            const size_3: number = metadata_3.size;
                            for (let i_3: number = 0; i_3 < size_3; i_3++) {
                                const value_25: string = input.readString();
                                value_24.push(value_25);
                            }
                            input.readListEnd();
                            value_23.set(key_2, value_24);
                        }
                        input.readMapEnd();
                        _args.additionalParams = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 19:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_26: core.UserOrGroup = core.UserOrGroup.read(input);
                        _args.author = value_26;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 20:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_27: Array<HistoryParam.HistoryParam> = new Array<HistoryParam.HistoryParam>();
                        const metadata_4: thrift.TList = input.readListBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const value_28: HistoryParam.HistoryParam = HistoryParam.HistoryParam.read(input);
                            value_27.push(value_28);
                        }
                        input.readListEnd();
                        _args.historyParamList = value_27;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 21:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_29: number = input.readI32();
                        _args.historyVersion = value_29;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new HistoryData(_args);
    }
}

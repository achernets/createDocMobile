/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 from "node-int64";
import * as thrift from "thrift";
export interface IAskQuestionActionArgs {
    docId?: string;
    docSystemNumber?: string;
    docRegNumber?: string;
    docRegDate?: number | Int64;
    docName?: string;
}
export class AskQuestionAction {
    public docId?: string;
    public docSystemNumber?: string;
    public docRegNumber?: string;
    public docRegDate?: Int64;
    public docName?: string;
    constructor(args?: IAskQuestionActionArgs) {
        if (args != null && args.docId != null) {
            this.docId = args.docId;
        }
        if (args != null && args.docSystemNumber != null) {
            this.docSystemNumber = args.docSystemNumber;
        }
        if (args != null && args.docRegNumber != null) {
            this.docRegNumber = args.docRegNumber;
        }
        if (args != null && args.docRegDate != null) {
            if (typeof args.docRegDate === "number") {
                this.docRegDate = new Int64(args.docRegDate);
            }
            else {
                this.docRegDate = args.docRegDate;
            }
        }
        if (args != null && args.docName != null) {
            this.docName = args.docName;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("AskQuestionAction");
        if (this.docId != null) {
            output.writeFieldBegin("docId", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.docId);
            output.writeFieldEnd();
        }
        if (this.docSystemNumber != null) {
            output.writeFieldBegin("docSystemNumber", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.docSystemNumber);
            output.writeFieldEnd();
        }
        if (this.docRegNumber != null) {
            output.writeFieldBegin("docRegNumber", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.docRegNumber);
            output.writeFieldEnd();
        }
        if (this.docRegDate != null) {
            output.writeFieldBegin("docRegDate", thrift.Thrift.Type.I64, 4);
            output.writeI64(this.docRegDate);
            output.writeFieldEnd();
        }
        if (this.docName != null) {
            output.writeFieldBegin("docName", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.docName);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): AskQuestionAction {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.docId = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.docSystemNumber = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.docRegNumber = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_4: Int64 = input.readI64();
                        _args.docRegDate = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.docName = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new AskQuestionAction(_args);
    }
}

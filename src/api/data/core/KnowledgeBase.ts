/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as core from "./";
export interface IKnowledgeBaseArgs {
    id?: string;
    account?: core.Account;
    kName?: string;
    kNameLoc?: Map<string, string>;
}
export class KnowledgeBase {
    public id?: string;
    public account?: core.Account;
    public kName?: string;
    public kNameLoc?: Map<string, string>;
    constructor(args?: IKnowledgeBaseArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.account != null) {
            this.account = args.account;
        }
        if (args != null && args.kName != null) {
            this.kName = args.kName;
        }
        if (args != null && args.kNameLoc != null) {
            this.kNameLoc = args.kNameLoc;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("KnowledgeBase");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.account != null) {
            output.writeFieldBegin("account", thrift.Thrift.Type.STRUCT, 2);
            this.account.write(output);
            output.writeFieldEnd();
        }
        if (this.kName != null) {
            output.writeFieldBegin("kName", thrift.Thrift.Type.STRING, 6);
            output.writeString(this.kName);
            output.writeFieldEnd();
        }
        if (this.kNameLoc != null) {
            output.writeFieldBegin("kNameLoc", thrift.Thrift.Type.MAP, 7);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.kNameLoc.size);
            this.kNameLoc.forEach((value_1: string, key_1: string): void => {
                output.writeString(key_1);
                output.writeString(value_1);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): KnowledgeBase {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.id = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_3: core.Account = core.Account.read(input);
                        _args.account = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.kName = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_5: Map<string, string> = new Map<string, string>();
                        const metadata_1: thrift.TMap = input.readMapBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const key_2: string = input.readString();
                            const value_6: string = input.readString();
                            value_5.set(key_2, value_6);
                        }
                        input.readMapEnd();
                        _args.kNameLoc = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new KnowledgeBase(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 from "node-int64";
import * as thrift from "thrift";
import * as AggregationRequiredType from "./AggregationRequiredType";
export interface IDocumentExtShareArgs {
    id?: string;
    documentId?: string;
    shareType?: string;
    userId?: string;
    guestId?: string;
    secretCode?: string;
    ruleSet?: Set<AggregationRequiredType.AggregationRequiredType>;
    validTillDate?: number | Int64;
    creatorId?: string;
    createDate?: number | Int64;
    extId?: string;
}
export class DocumentExtShare {
    public id?: string;
    public documentId?: string;
    public shareType?: string;
    public userId?: string;
    public guestId?: string;
    public secretCode?: string;
    public ruleSet?: Set<AggregationRequiredType.AggregationRequiredType>;
    public validTillDate?: Int64;
    public creatorId?: string;
    public createDate?: Int64;
    public extId?: string;
    constructor(args?: IDocumentExtShareArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.documentId != null) {
            this.documentId = args.documentId;
        }
        if (args != null && args.shareType != null) {
            this.shareType = args.shareType;
        }
        if (args != null && args.userId != null) {
            this.userId = args.userId;
        }
        if (args != null && args.guestId != null) {
            this.guestId = args.guestId;
        }
        if (args != null && args.secretCode != null) {
            this.secretCode = args.secretCode;
        }
        if (args != null && args.ruleSet != null) {
            this.ruleSet = args.ruleSet;
        }
        if (args != null && args.validTillDate != null) {
            if (typeof args.validTillDate === "number") {
                this.validTillDate = new Int64(args.validTillDate);
            }
            else {
                this.validTillDate = args.validTillDate;
            }
        }
        if (args != null && args.creatorId != null) {
            this.creatorId = args.creatorId;
        }
        if (args != null && args.createDate != null) {
            if (typeof args.createDate === "number") {
                this.createDate = new Int64(args.createDate);
            }
            else {
                this.createDate = args.createDate;
            }
        }
        if (args != null && args.extId != null) {
            this.extId = args.extId;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("DocumentExtShare");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.documentId != null) {
            output.writeFieldBegin("documentId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.documentId);
            output.writeFieldEnd();
        }
        if (this.shareType != null) {
            output.writeFieldBegin("shareType", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.shareType);
            output.writeFieldEnd();
        }
        if (this.userId != null) {
            output.writeFieldBegin("userId", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.userId);
            output.writeFieldEnd();
        }
        if (this.guestId != null) {
            output.writeFieldBegin("guestId", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.guestId);
            output.writeFieldEnd();
        }
        if (this.secretCode != null) {
            output.writeFieldBegin("secretCode", thrift.Thrift.Type.STRING, 6);
            output.writeString(this.secretCode);
            output.writeFieldEnd();
        }
        if (this.ruleSet != null) {
            output.writeFieldBegin("ruleSet", thrift.Thrift.Type.SET, 7);
            output.writeSetBegin(thrift.Thrift.Type.I32, this.ruleSet.size);
            this.ruleSet.forEach((value_1: AggregationRequiredType.AggregationRequiredType): void => {
                output.writeI32(value_1);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        if (this.validTillDate != null) {
            output.writeFieldBegin("validTillDate", thrift.Thrift.Type.I64, 8);
            output.writeI64(this.validTillDate);
            output.writeFieldEnd();
        }
        if (this.creatorId != null) {
            output.writeFieldBegin("creatorId", thrift.Thrift.Type.STRING, 9);
            output.writeString(this.creatorId);
            output.writeFieldEnd();
        }
        if (this.createDate != null) {
            output.writeFieldBegin("createDate", thrift.Thrift.Type.I64, 10);
            output.writeI64(this.createDate);
            output.writeFieldEnd();
        }
        if (this.extId != null) {
            output.writeFieldBegin("extId", thrift.Thrift.Type.STRING, 11);
            output.writeString(this.extId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): DocumentExtShare {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.id = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.documentId = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.shareType = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.userId = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.guestId = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_7: string = input.readString();
                        _args.secretCode = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_8: Set<AggregationRequiredType.AggregationRequiredType> = new Set<AggregationRequiredType.AggregationRequiredType>();
                        const metadata_1: thrift.TSet = input.readSetBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_9: AggregationRequiredType.AggregationRequiredType = input.readI32();
                            value_8.add(value_9);
                        }
                        input.readSetEnd();
                        _args.ruleSet = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_10: Int64 = input.readI64();
                        _args.validTillDate = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_11: string = input.readString();
                        _args.creatorId = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_12: Int64 = input.readI64();
                        _args.createDate = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_13: string = input.readString();
                        _args.extId = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new DocumentExtShare(_args);
    }
}

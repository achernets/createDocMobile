/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as PatternRelationInfo from "./PatternRelationInfo";
import * as PatternRelationLink from "./PatternRelationLink";
export interface IPatternRelationModelArgs {
    patternId?: string;
    relationInfoList?: Array<PatternRelationInfo.PatternRelationInfo>;
    relationLinkList?: Array<PatternRelationLink.PatternRelationLink>;
}
export class PatternRelationModel {
    public patternId?: string;
    public relationInfoList?: Array<PatternRelationInfo.PatternRelationInfo>;
    public relationLinkList?: Array<PatternRelationLink.PatternRelationLink>;
    constructor(args?: IPatternRelationModelArgs) {
        if (args != null && args.patternId != null) {
            this.patternId = args.patternId;
        }
        if (args != null && args.relationInfoList != null) {
            this.relationInfoList = args.relationInfoList;
        }
        if (args != null && args.relationLinkList != null) {
            this.relationLinkList = args.relationLinkList;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("PatternRelationModel");
        if (this.patternId != null) {
            output.writeFieldBegin("patternId", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.patternId);
            output.writeFieldEnd();
        }
        if (this.relationInfoList != null) {
            output.writeFieldBegin("relationInfoList", thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.relationInfoList.length);
            this.relationInfoList.forEach((value_1: PatternRelationInfo.PatternRelationInfo): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.relationLinkList != null) {
            output.writeFieldBegin("relationLinkList", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.relationLinkList.length);
            this.relationLinkList.forEach((value_2: PatternRelationLink.PatternRelationLink): void => {
                value_2.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): PatternRelationModel {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.patternId = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_4: Array<PatternRelationInfo.PatternRelationInfo> = new Array<PatternRelationInfo.PatternRelationInfo>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_5: PatternRelationInfo.PatternRelationInfo = PatternRelationInfo.PatternRelationInfo.read(input);
                            value_4.push(value_5);
                        }
                        input.readListEnd();
                        _args.relationInfoList = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_6: Array<PatternRelationLink.PatternRelationLink> = new Array<PatternRelationLink.PatternRelationLink>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_7: PatternRelationLink.PatternRelationLink = PatternRelationLink.PatternRelationLink.read(input);
                            value_6.push(value_7);
                        }
                        input.readListEnd();
                        _args.relationLinkList = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new PatternRelationModel(_args);
    }
}

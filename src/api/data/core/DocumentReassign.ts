/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 from "node-int64";
import * as thrift from "thrift";
import * as core from "./";
import * as ExecutionReassignType from "./ExecutionReassignType";
export interface IDocumentReassignArgs {
    id?: string;
    dateStart?: number | Int64;
    dateEnd?: number | Int64;
    userOrGroup?: core.UserOrGroup;
    deadLineTime?: number | Int64;
    reassignType?: ExecutionReassignType.ExecutionReassignType;
    comment?: string;
    periodical?: boolean;
    startPeriod?: number | Int64;
    nextStartPeriod?: string;
    periodicEndDate?: number | Int64;
    cardActivityPeriod?: string;
}
export class DocumentReassign {
    public id?: string;
    public dateStart?: Int64;
    public dateEnd?: Int64;
    public userOrGroup?: core.UserOrGroup;
    public deadLineTime?: Int64;
    public reassignType?: ExecutionReassignType.ExecutionReassignType;
    public comment?: string;
    public periodical?: boolean;
    public startPeriod?: Int64;
    public nextStartPeriod?: string;
    public periodicEndDate?: Int64;
    public cardActivityPeriod?: string;
    constructor(args?: IDocumentReassignArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.dateStart != null) {
            if (typeof args.dateStart === "number") {
                this.dateStart = new Int64(args.dateStart);
            }
            else {
                this.dateStart = args.dateStart;
            }
        }
        if (args != null && args.dateEnd != null) {
            if (typeof args.dateEnd === "number") {
                this.dateEnd = new Int64(args.dateEnd);
            }
            else {
                this.dateEnd = args.dateEnd;
            }
        }
        if (args != null && args.userOrGroup != null) {
            this.userOrGroup = args.userOrGroup;
        }
        if (args != null && args.deadLineTime != null) {
            if (typeof args.deadLineTime === "number") {
                this.deadLineTime = new Int64(args.deadLineTime);
            }
            else {
                this.deadLineTime = args.deadLineTime;
            }
        }
        if (args != null && args.reassignType != null) {
            this.reassignType = args.reassignType;
        }
        if (args != null && args.comment != null) {
            this.comment = args.comment;
        }
        if (args != null && args.periodical != null) {
            this.periodical = args.periodical;
        }
        if (args != null && args.startPeriod != null) {
            if (typeof args.startPeriod === "number") {
                this.startPeriod = new Int64(args.startPeriod);
            }
            else {
                this.startPeriod = args.startPeriod;
            }
        }
        if (args != null && args.nextStartPeriod != null) {
            this.nextStartPeriod = args.nextStartPeriod;
        }
        if (args != null && args.periodicEndDate != null) {
            if (typeof args.periodicEndDate === "number") {
                this.periodicEndDate = new Int64(args.periodicEndDate);
            }
            else {
                this.periodicEndDate = args.periodicEndDate;
            }
        }
        if (args != null && args.cardActivityPeriod != null) {
            this.cardActivityPeriod = args.cardActivityPeriod;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("DocumentReassign");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.dateStart != null) {
            output.writeFieldBegin("dateStart", thrift.Thrift.Type.I64, 2);
            output.writeI64(this.dateStart);
            output.writeFieldEnd();
        }
        if (this.dateEnd != null) {
            output.writeFieldBegin("dateEnd", thrift.Thrift.Type.I64, 3);
            output.writeI64(this.dateEnd);
            output.writeFieldEnd();
        }
        if (this.userOrGroup != null) {
            output.writeFieldBegin("userOrGroup", thrift.Thrift.Type.STRUCT, 4);
            this.userOrGroup.write(output);
            output.writeFieldEnd();
        }
        if (this.deadLineTime != null) {
            output.writeFieldBegin("deadLineTime", thrift.Thrift.Type.I64, 5);
            output.writeI64(this.deadLineTime);
            output.writeFieldEnd();
        }
        if (this.reassignType != null) {
            output.writeFieldBegin("reassignType", thrift.Thrift.Type.I32, 6);
            output.writeI32(this.reassignType);
            output.writeFieldEnd();
        }
        if (this.comment != null) {
            output.writeFieldBegin("comment", thrift.Thrift.Type.STRING, 7);
            output.writeString(this.comment);
            output.writeFieldEnd();
        }
        if (this.periodical != null) {
            output.writeFieldBegin("periodical", thrift.Thrift.Type.BOOL, 8);
            output.writeBool(this.periodical);
            output.writeFieldEnd();
        }
        if (this.startPeriod != null) {
            output.writeFieldBegin("startPeriod", thrift.Thrift.Type.I64, 9);
            output.writeI64(this.startPeriod);
            output.writeFieldEnd();
        }
        if (this.nextStartPeriod != null) {
            output.writeFieldBegin("nextStartPeriod", thrift.Thrift.Type.STRING, 10);
            output.writeString(this.nextStartPeriod);
            output.writeFieldEnd();
        }
        if (this.periodicEndDate != null) {
            output.writeFieldBegin("periodicEndDate", thrift.Thrift.Type.I64, 11);
            output.writeI64(this.periodicEndDate);
            output.writeFieldEnd();
        }
        if (this.cardActivityPeriod != null) {
            output.writeFieldBegin("cardActivityPeriod", thrift.Thrift.Type.STRING, 12);
            output.writeString(this.cardActivityPeriod);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): DocumentReassign {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.id = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_2: Int64 = input.readI64();
                        _args.dateStart = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_3: Int64 = input.readI64();
                        _args.dateEnd = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_4: core.UserOrGroup = core.UserOrGroup.read(input);
                        _args.userOrGroup = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_5: Int64 = input.readI64();
                        _args.deadLineTime = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_6: ExecutionReassignType.ExecutionReassignType = input.readI32();
                        _args.reassignType = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_7: string = input.readString();
                        _args.comment = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_8: boolean = input.readBool();
                        _args.periodical = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_9: Int64 = input.readI64();
                        _args.startPeriod = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_10: string = input.readString();
                        _args.nextStartPeriod = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_11: Int64 = input.readI64();
                        _args.periodicEndDate = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_12: string = input.readString();
                        _args.cardActivityPeriod = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new DocumentReassign(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 from "node-int64";
import * as thrift from "thrift";
import * as core from "./";
import * as DocumentPatternStagesLink from "./DocumentPatternStagesLink";
export interface IStageLinkActionArgs {
    type?: core.UserOrGroupType;
    userOrGroupId?: string;
    execId?: string;
    additionConfirmation?: boolean;
    cancelDecision?: boolean;
    link?: DocumentPatternStagesLink.DocumentPatternStagesLink;
    transfer?: boolean;
    cardCreateDate?: number | Int64;
    cartTask?: string;
    answerQuestion?: boolean;
    requestQuestion?: boolean;
    canSetDecision?: boolean;
    canStartWork?: boolean;
    canLogWork?: boolean;
    canStopWork?: boolean;
}
export class StageLinkAction {
    public type?: core.UserOrGroupType;
    public userOrGroupId?: string;
    public execId?: string;
    public additionConfirmation?: boolean;
    public cancelDecision?: boolean;
    public link?: DocumentPatternStagesLink.DocumentPatternStagesLink;
    public transfer?: boolean;
    public cardCreateDate?: Int64;
    public cartTask?: string;
    public answerQuestion?: boolean;
    public requestQuestion?: boolean;
    public canSetDecision?: boolean;
    public canStartWork?: boolean;
    public canLogWork?: boolean;
    public canStopWork?: boolean;
    constructor(args?: IStageLinkActionArgs) {
        if (args != null && args.type != null) {
            this.type = args.type;
        }
        if (args != null && args.userOrGroupId != null) {
            this.userOrGroupId = args.userOrGroupId;
        }
        if (args != null && args.execId != null) {
            this.execId = args.execId;
        }
        if (args != null && args.additionConfirmation != null) {
            this.additionConfirmation = args.additionConfirmation;
        }
        if (args != null && args.cancelDecision != null) {
            this.cancelDecision = args.cancelDecision;
        }
        if (args != null && args.link != null) {
            this.link = args.link;
        }
        if (args != null && args.transfer != null) {
            this.transfer = args.transfer;
        }
        if (args != null && args.cardCreateDate != null) {
            if (typeof args.cardCreateDate === "number") {
                this.cardCreateDate = new Int64(args.cardCreateDate);
            }
            else {
                this.cardCreateDate = args.cardCreateDate;
            }
        }
        if (args != null && args.cartTask != null) {
            this.cartTask = args.cartTask;
        }
        if (args != null && args.answerQuestion != null) {
            this.answerQuestion = args.answerQuestion;
        }
        if (args != null && args.requestQuestion != null) {
            this.requestQuestion = args.requestQuestion;
        }
        if (args != null && args.canSetDecision != null) {
            this.canSetDecision = args.canSetDecision;
        }
        if (args != null && args.canStartWork != null) {
            this.canStartWork = args.canStartWork;
        }
        if (args != null && args.canLogWork != null) {
            this.canLogWork = args.canLogWork;
        }
        if (args != null && args.canStopWork != null) {
            this.canStopWork = args.canStopWork;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("StageLinkAction");
        if (this.type != null) {
            output.writeFieldBegin("type", thrift.Thrift.Type.I32, 1);
            output.writeI32(this.type);
            output.writeFieldEnd();
        }
        if (this.userOrGroupId != null) {
            output.writeFieldBegin("userOrGroupId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.userOrGroupId);
            output.writeFieldEnd();
        }
        if (this.execId != null) {
            output.writeFieldBegin("execId", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.execId);
            output.writeFieldEnd();
        }
        if (this.additionConfirmation != null) {
            output.writeFieldBegin("additionConfirmation", thrift.Thrift.Type.BOOL, 4);
            output.writeBool(this.additionConfirmation);
            output.writeFieldEnd();
        }
        if (this.cancelDecision != null) {
            output.writeFieldBegin("cancelDecision", thrift.Thrift.Type.BOOL, 5);
            output.writeBool(this.cancelDecision);
            output.writeFieldEnd();
        }
        if (this.link != null) {
            output.writeFieldBegin("link", thrift.Thrift.Type.STRUCT, 6);
            this.link.write(output);
            output.writeFieldEnd();
        }
        if (this.transfer != null) {
            output.writeFieldBegin("transfer", thrift.Thrift.Type.BOOL, 7);
            output.writeBool(this.transfer);
            output.writeFieldEnd();
        }
        if (this.cardCreateDate != null) {
            output.writeFieldBegin("cardCreateDate", thrift.Thrift.Type.I64, 8);
            output.writeI64(this.cardCreateDate);
            output.writeFieldEnd();
        }
        if (this.cartTask != null) {
            output.writeFieldBegin("cartTask", thrift.Thrift.Type.STRING, 9);
            output.writeString(this.cartTask);
            output.writeFieldEnd();
        }
        if (this.answerQuestion != null) {
            output.writeFieldBegin("answerQuestion", thrift.Thrift.Type.BOOL, 10);
            output.writeBool(this.answerQuestion);
            output.writeFieldEnd();
        }
        if (this.requestQuestion != null) {
            output.writeFieldBegin("requestQuestion", thrift.Thrift.Type.BOOL, 11);
            output.writeBool(this.requestQuestion);
            output.writeFieldEnd();
        }
        if (this.canSetDecision != null) {
            output.writeFieldBegin("canSetDecision", thrift.Thrift.Type.BOOL, 12);
            output.writeBool(this.canSetDecision);
            output.writeFieldEnd();
        }
        if (this.canStartWork != null) {
            output.writeFieldBegin("canStartWork", thrift.Thrift.Type.BOOL, 13);
            output.writeBool(this.canStartWork);
            output.writeFieldEnd();
        }
        if (this.canLogWork != null) {
            output.writeFieldBegin("canLogWork", thrift.Thrift.Type.BOOL, 14);
            output.writeBool(this.canLogWork);
            output.writeFieldEnd();
        }
        if (this.canStopWork != null) {
            output.writeFieldBegin("canStopWork", thrift.Thrift.Type.BOOL, 15);
            output.writeBool(this.canStopWork);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): StageLinkAction {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_1: core.UserOrGroupType = input.readI32();
                        _args.type = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.userOrGroupId = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.execId = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_4: boolean = input.readBool();
                        _args.additionConfirmation = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_5: boolean = input.readBool();
                        _args.cancelDecision = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_6: DocumentPatternStagesLink.DocumentPatternStagesLink = DocumentPatternStagesLink.DocumentPatternStagesLink.read(input);
                        _args.link = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_7: boolean = input.readBool();
                        _args.transfer = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_8: Int64 = input.readI64();
                        _args.cardCreateDate = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_9: string = input.readString();
                        _args.cartTask = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_10: boolean = input.readBool();
                        _args.answerQuestion = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_11: boolean = input.readBool();
                        _args.requestQuestion = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_12: boolean = input.readBool();
                        _args.canSetDecision = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_13: boolean = input.readBool();
                        _args.canStartWork = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_14: boolean = input.readBool();
                        _args.canLogWork = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_15: boolean = input.readBool();
                        _args.canStopWork = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new StageLinkAction(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface IAttachmentPermissionsArgs {
    onlineEdit?: boolean;
    onlineComment?: boolean;
    changeEditMode?: boolean;
    canSign?: boolean;
    canDownloadOriginal?: boolean;
    canDownloadPdf?: boolean;
    canDelete?: boolean;
    canDownloadPdfSignedAttachment?: boolean;
    addedToBulkSign?: boolean;
    canCompare?: boolean;
    canEditPreview?: boolean;
}
export class AttachmentPermissions {
    public onlineEdit?: boolean;
    public onlineComment?: boolean;
    public changeEditMode?: boolean;
    public canSign?: boolean;
    public canDownloadOriginal?: boolean;
    public canDownloadPdf?: boolean;
    public canDelete?: boolean;
    public canDownloadPdfSignedAttachment?: boolean;
    public addedToBulkSign?: boolean;
    public canCompare?: boolean;
    public canEditPreview?: boolean;
    constructor(args?: IAttachmentPermissionsArgs) {
        if (args != null && args.onlineEdit != null) {
            this.onlineEdit = args.onlineEdit;
        }
        if (args != null && args.onlineComment != null) {
            this.onlineComment = args.onlineComment;
        }
        if (args != null && args.changeEditMode != null) {
            this.changeEditMode = args.changeEditMode;
        }
        if (args != null && args.canSign != null) {
            this.canSign = args.canSign;
        }
        if (args != null && args.canDownloadOriginal != null) {
            this.canDownloadOriginal = args.canDownloadOriginal;
        }
        if (args != null && args.canDownloadPdf != null) {
            this.canDownloadPdf = args.canDownloadPdf;
        }
        if (args != null && args.canDelete != null) {
            this.canDelete = args.canDelete;
        }
        if (args != null && args.canDownloadPdfSignedAttachment != null) {
            this.canDownloadPdfSignedAttachment = args.canDownloadPdfSignedAttachment;
        }
        if (args != null && args.addedToBulkSign != null) {
            this.addedToBulkSign = args.addedToBulkSign;
        }
        if (args != null && args.canCompare != null) {
            this.canCompare = args.canCompare;
        }
        if (args != null && args.canEditPreview != null) {
            this.canEditPreview = args.canEditPreview;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("AttachmentPermissions");
        if (this.onlineEdit != null) {
            output.writeFieldBegin("onlineEdit", thrift.Thrift.Type.BOOL, 1);
            output.writeBool(this.onlineEdit);
            output.writeFieldEnd();
        }
        if (this.onlineComment != null) {
            output.writeFieldBegin("onlineComment", thrift.Thrift.Type.BOOL, 2);
            output.writeBool(this.onlineComment);
            output.writeFieldEnd();
        }
        if (this.changeEditMode != null) {
            output.writeFieldBegin("changeEditMode", thrift.Thrift.Type.BOOL, 3);
            output.writeBool(this.changeEditMode);
            output.writeFieldEnd();
        }
        if (this.canSign != null) {
            output.writeFieldBegin("canSign", thrift.Thrift.Type.BOOL, 4);
            output.writeBool(this.canSign);
            output.writeFieldEnd();
        }
        if (this.canDownloadOriginal != null) {
            output.writeFieldBegin("canDownloadOriginal", thrift.Thrift.Type.BOOL, 5);
            output.writeBool(this.canDownloadOriginal);
            output.writeFieldEnd();
        }
        if (this.canDownloadPdf != null) {
            output.writeFieldBegin("canDownloadPdf", thrift.Thrift.Type.BOOL, 6);
            output.writeBool(this.canDownloadPdf);
            output.writeFieldEnd();
        }
        if (this.canDelete != null) {
            output.writeFieldBegin("canDelete", thrift.Thrift.Type.BOOL, 7);
            output.writeBool(this.canDelete);
            output.writeFieldEnd();
        }
        if (this.canDownloadPdfSignedAttachment != null) {
            output.writeFieldBegin("canDownloadPdfSignedAttachment", thrift.Thrift.Type.BOOL, 8);
            output.writeBool(this.canDownloadPdfSignedAttachment);
            output.writeFieldEnd();
        }
        if (this.addedToBulkSign != null) {
            output.writeFieldBegin("addedToBulkSign", thrift.Thrift.Type.BOOL, 9);
            output.writeBool(this.addedToBulkSign);
            output.writeFieldEnd();
        }
        if (this.canCompare != null) {
            output.writeFieldBegin("canCompare", thrift.Thrift.Type.BOOL, 10);
            output.writeBool(this.canCompare);
            output.writeFieldEnd();
        }
        if (this.canEditPreview != null) {
            output.writeFieldBegin("canEditPreview", thrift.Thrift.Type.BOOL, 11);
            output.writeBool(this.canEditPreview);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): AttachmentPermissions {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_1: boolean = input.readBool();
                        _args.onlineEdit = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_2: boolean = input.readBool();
                        _args.onlineComment = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_3: boolean = input.readBool();
                        _args.changeEditMode = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_4: boolean = input.readBool();
                        _args.canSign = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_5: boolean = input.readBool();
                        _args.canDownloadOriginal = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_6: boolean = input.readBool();
                        _args.canDownloadPdf = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_7: boolean = input.readBool();
                        _args.canDelete = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_8: boolean = input.readBool();
                        _args.canDownloadPdfSignedAttachment = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_9: boolean = input.readBool();
                        _args.addedToBulkSign = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_10: boolean = input.readBool();
                        _args.canCompare = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_11: boolean = input.readBool();
                        _args.canEditPreview = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new AttachmentPermissions(_args);
    }
}

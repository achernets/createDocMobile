/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as ContentTableViewMode from "./ContentTableViewMode";
import * as ContentTableSelectMode from "./ContentTableSelectMode";
import * as ContentItem from "./ContentItem";
import * as ContentEditMode from "./ContentEditMode";
export interface IContentTableDefinitionArgs {
    id?: string;
    viewMode?: ContentTableViewMode.ContentTableViewMode;
    selectMode?: ContentTableSelectMode.ContentTableSelectMode;
    height?: string;
    rowHeight?: string;
    columnDefenition?: Array<ContentItem.ContentItem>;
    editMode?: ContentEditMode.ContentEditMode;
}
export class ContentTableDefinition {
    public id?: string;
    public viewMode?: ContentTableViewMode.ContentTableViewMode;
    public selectMode?: ContentTableSelectMode.ContentTableSelectMode;
    public height?: string;
    public rowHeight?: string;
    public columnDefenition?: Array<ContentItem.ContentItem>;
    public editMode?: ContentEditMode.ContentEditMode;
    constructor(args?: IContentTableDefinitionArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.viewMode != null) {
            this.viewMode = args.viewMode;
        }
        if (args != null && args.selectMode != null) {
            this.selectMode = args.selectMode;
        }
        if (args != null && args.height != null) {
            this.height = args.height;
        }
        if (args != null && args.rowHeight != null) {
            this.rowHeight = args.rowHeight;
        }
        if (args != null && args.columnDefenition != null) {
            this.columnDefenition = args.columnDefenition;
        }
        if (args != null && args.editMode != null) {
            this.editMode = args.editMode;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ContentTableDefinition");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.viewMode != null) {
            output.writeFieldBegin("viewMode", thrift.Thrift.Type.I32, 2);
            output.writeI32(this.viewMode);
            output.writeFieldEnd();
        }
        if (this.selectMode != null) {
            output.writeFieldBegin("selectMode", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.selectMode);
            output.writeFieldEnd();
        }
        if (this.height != null) {
            output.writeFieldBegin("height", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.height);
            output.writeFieldEnd();
        }
        if (this.rowHeight != null) {
            output.writeFieldBegin("rowHeight", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.rowHeight);
            output.writeFieldEnd();
        }
        if (this.columnDefenition != null) {
            output.writeFieldBegin("columnDefenition", thrift.Thrift.Type.LIST, 6);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.columnDefenition.length);
            this.columnDefenition.forEach((value_1: ContentItem.ContentItem): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.editMode != null) {
            output.writeFieldBegin("editMode", thrift.Thrift.Type.STRUCT, 7);
            this.editMode.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ContentTableDefinition {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.id = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_3: ContentTableViewMode.ContentTableViewMode = input.readI32();
                        _args.viewMode = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_4: ContentTableSelectMode.ContentTableSelectMode = input.readI32();
                        _args.selectMode = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.height = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.rowHeight = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_7: Array<ContentItem.ContentItem> = new Array<ContentItem.ContentItem>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_8: ContentItem.ContentItem = ContentItem.ContentItem.read(input);
                            value_7.push(value_8);
                        }
                        input.readListEnd();
                        _args.columnDefenition = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_9: ContentEditMode.ContentEditMode = ContentEditMode.ContentEditMode.read(input);
                        _args.editMode = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ContentTableDefinition(_args);
    }
}

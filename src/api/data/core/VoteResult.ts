/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as VoteResultType from "./VoteResultType";
import * as VoteAnswerParams from "./VoteAnswerParams";
export interface IVoteResultArgs {
    resultType?: VoteResultType.VoteResultType;
    voteAnswer?: VoteAnswerParams.VoteAnswerParams;
    voted?: number;
    totalVoted?: number;
}
export class VoteResult {
    public resultType?: VoteResultType.VoteResultType;
    public voteAnswer?: VoteAnswerParams.VoteAnswerParams;
    public voted?: number;
    public totalVoted?: number;
    constructor(args?: IVoteResultArgs) {
        if (args != null && args.resultType != null) {
            this.resultType = args.resultType;
        }
        if (args != null && args.voteAnswer != null) {
            this.voteAnswer = args.voteAnswer;
        }
        if (args != null && args.voted != null) {
            this.voted = args.voted;
        }
        if (args != null && args.totalVoted != null) {
            this.totalVoted = args.totalVoted;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("VoteResult");
        if (this.resultType != null) {
            output.writeFieldBegin("resultType", thrift.Thrift.Type.I32, 1);
            output.writeI32(this.resultType);
            output.writeFieldEnd();
        }
        if (this.voteAnswer != null) {
            output.writeFieldBegin("voteAnswer", thrift.Thrift.Type.STRUCT, 2);
            this.voteAnswer.write(output);
            output.writeFieldEnd();
        }
        if (this.voted != null) {
            output.writeFieldBegin("voted", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.voted);
            output.writeFieldEnd();
        }
        if (this.totalVoted != null) {
            output.writeFieldBegin("totalVoted", thrift.Thrift.Type.I32, 4);
            output.writeI32(this.totalVoted);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): VoteResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_1: VoteResultType.VoteResultType = input.readI32();
                        _args.resultType = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: VoteAnswerParams.VoteAnswerParams = VoteAnswerParams.VoteAnswerParams.read(input);
                        _args.voteAnswer = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_3: number = input.readI32();
                        _args.voted = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_4: number = input.readI32();
                        _args.totalVoted = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new VoteResult(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 from "node-int64";
import * as thrift from "thrift";
import * as core from "./";
export interface IExternalModuleArgs {
    id?: string;
    createDate?: number | Int64;
    url?: string;
    nameExternalModule?: string;
    descriptionExternalModule?: string;
    user?: core.UserOrGroup;
    error?: string;
    accounts?: Array<core.Account>;
    nameExternalModuleLoc?: Map<string, string>;
    descriptionExternalModuleLoc?: Map<string, string>;
    transportType?: core.ThriftTransportType;
    protocolType?: core.ThriftProtocolType;
    availableStageList?: Array<core.AvailablePatternStage>;
    availableActionList?: Array<core.AvailableAction>;
}
export class ExternalModule {
    public id?: string;
    public createDate?: Int64;
    public url?: string;
    public nameExternalModule?: string;
    public descriptionExternalModule?: string;
    public user?: core.UserOrGroup;
    public error?: string;
    public accounts?: Array<core.Account>;
    public nameExternalModuleLoc?: Map<string, string>;
    public descriptionExternalModuleLoc?: Map<string, string>;
    public transportType?: core.ThriftTransportType;
    public protocolType?: core.ThriftProtocolType;
    public availableStageList?: Array<core.AvailablePatternStage>;
    public availableActionList?: Array<core.AvailableAction>;
    constructor(args?: IExternalModuleArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.createDate != null) {
            if (typeof args.createDate === "number") {
                this.createDate = new Int64(args.createDate);
            }
            else {
                this.createDate = args.createDate;
            }
        }
        if (args != null && args.url != null) {
            this.url = args.url;
        }
        if (args != null && args.nameExternalModule != null) {
            this.nameExternalModule = args.nameExternalModule;
        }
        if (args != null && args.descriptionExternalModule != null) {
            this.descriptionExternalModule = args.descriptionExternalModule;
        }
        if (args != null && args.user != null) {
            this.user = args.user;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
        if (args != null && args.accounts != null) {
            this.accounts = args.accounts;
        }
        if (args != null && args.nameExternalModuleLoc != null) {
            this.nameExternalModuleLoc = args.nameExternalModuleLoc;
        }
        if (args != null && args.descriptionExternalModuleLoc != null) {
            this.descriptionExternalModuleLoc = args.descriptionExternalModuleLoc;
        }
        if (args != null && args.transportType != null) {
            this.transportType = args.transportType;
        }
        if (args != null && args.protocolType != null) {
            this.protocolType = args.protocolType;
        }
        if (args != null && args.availableStageList != null) {
            this.availableStageList = args.availableStageList;
        }
        if (args != null && args.availableActionList != null) {
            this.availableActionList = args.availableActionList;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ExternalModule");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.createDate != null) {
            output.writeFieldBegin("createDate", thrift.Thrift.Type.I64, 2);
            output.writeI64(this.createDate);
            output.writeFieldEnd();
        }
        if (this.url != null) {
            output.writeFieldBegin("url", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.url);
            output.writeFieldEnd();
        }
        if (this.nameExternalModule != null) {
            output.writeFieldBegin("nameExternalModule", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.nameExternalModule);
            output.writeFieldEnd();
        }
        if (this.descriptionExternalModule != null) {
            output.writeFieldBegin("descriptionExternalModule", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.descriptionExternalModule);
            output.writeFieldEnd();
        }
        if (this.user != null) {
            output.writeFieldBegin("user", thrift.Thrift.Type.STRUCT, 6);
            this.user.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRING, 7);
            output.writeString(this.error);
            output.writeFieldEnd();
        }
        if (this.accounts != null) {
            output.writeFieldBegin("accounts", thrift.Thrift.Type.LIST, 9);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.accounts.length);
            this.accounts.forEach((value_1: core.Account): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.nameExternalModuleLoc != null) {
            output.writeFieldBegin("nameExternalModuleLoc", thrift.Thrift.Type.MAP, 10);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.nameExternalModuleLoc.size);
            this.nameExternalModuleLoc.forEach((value_2: string, key_1: string): void => {
                output.writeString(key_1);
                output.writeString(value_2);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.descriptionExternalModuleLoc != null) {
            output.writeFieldBegin("descriptionExternalModuleLoc", thrift.Thrift.Type.MAP, 11);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.descriptionExternalModuleLoc.size);
            this.descriptionExternalModuleLoc.forEach((value_3: string, key_2: string): void => {
                output.writeString(key_2);
                output.writeString(value_3);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.transportType != null) {
            output.writeFieldBegin("transportType", thrift.Thrift.Type.I32, 12);
            output.writeI32(this.transportType);
            output.writeFieldEnd();
        }
        if (this.protocolType != null) {
            output.writeFieldBegin("protocolType", thrift.Thrift.Type.I32, 13);
            output.writeI32(this.protocolType);
            output.writeFieldEnd();
        }
        if (this.availableStageList != null) {
            output.writeFieldBegin("availableStageList", thrift.Thrift.Type.LIST, 14);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.availableStageList.length);
            this.availableStageList.forEach((value_4: core.AvailablePatternStage): void => {
                value_4.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.availableActionList != null) {
            output.writeFieldBegin("availableActionList", thrift.Thrift.Type.LIST, 15);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.availableActionList.length);
            this.availableActionList.forEach((value_5: core.AvailableAction): void => {
                value_5.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ExternalModule {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.id = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_7: Int64 = input.readI64();
                        _args.createDate = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_8: string = input.readString();
                        _args.url = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_9: string = input.readString();
                        _args.nameExternalModule = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_10: string = input.readString();
                        _args.descriptionExternalModule = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_11: core.UserOrGroup = core.UserOrGroup.read(input);
                        _args.user = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_12: string = input.readString();
                        _args.error = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_13: Array<core.Account> = new Array<core.Account>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_14: core.Account = core.Account.read(input);
                            value_13.push(value_14);
                        }
                        input.readListEnd();
                        _args.accounts = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_15: Map<string, string> = new Map<string, string>();
                        const metadata_2: thrift.TMap = input.readMapBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const key_3: string = input.readString();
                            const value_16: string = input.readString();
                            value_15.set(key_3, value_16);
                        }
                        input.readMapEnd();
                        _args.nameExternalModuleLoc = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_17: Map<string, string> = new Map<string, string>();
                        const metadata_3: thrift.TMap = input.readMapBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const key_4: string = input.readString();
                            const value_18: string = input.readString();
                            value_17.set(key_4, value_18);
                        }
                        input.readMapEnd();
                        _args.descriptionExternalModuleLoc = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_19: core.ThriftTransportType = input.readI32();
                        _args.transportType = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_20: core.ThriftProtocolType = input.readI32();
                        _args.protocolType = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_21: Array<core.AvailablePatternStage> = new Array<core.AvailablePatternStage>();
                        const metadata_4: thrift.TList = input.readListBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const value_22: core.AvailablePatternStage = core.AvailablePatternStage.read(input);
                            value_21.push(value_22);
                        }
                        input.readListEnd();
                        _args.availableStageList = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_23: Array<core.AvailableAction> = new Array<core.AvailableAction>();
                        const metadata_5: thrift.TList = input.readListBegin();
                        const size_5: number = metadata_5.size;
                        for (let i_5: number = 0; i_5 < size_5; i_5++) {
                            const value_24: core.AvailableAction = core.AvailableAction.read(input);
                            value_23.push(value_24);
                        }
                        input.readListEnd();
                        _args.availableActionList = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ExternalModule(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 from "node-int64";
import * as thrift from "thrift";
import * as KnowledgeDocumentStatus from "./KnowledgeDocumentStatus";
import * as KnowledgeDocRelationType from "./KnowledgeDocRelationType";
export interface IKnowledgeDocumentRelationArgs {
    id?: string;
    createDate?: number | Int64;
    knlgDocId1?: string;
    knlgDocId2?: string;
    doc2Name?: string;
    doc2Path?: string;
    doc2Status?: KnowledgeDocumentStatus.KnowledgeDocumentStatus;
    comment?: string;
    relationType?: KnowledgeDocRelationType.KnowledgeDocRelationType;
    knlgDocNodeTreeId2?: string;
}
export class KnowledgeDocumentRelation {
    public id?: string;
    public createDate?: Int64;
    public knlgDocId1?: string;
    public knlgDocId2?: string;
    public doc2Name?: string;
    public doc2Path?: string;
    public doc2Status?: KnowledgeDocumentStatus.KnowledgeDocumentStatus;
    public comment?: string;
    public relationType?: KnowledgeDocRelationType.KnowledgeDocRelationType;
    public knlgDocNodeTreeId2?: string;
    constructor(args?: IKnowledgeDocumentRelationArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.createDate != null) {
            if (typeof args.createDate === "number") {
                this.createDate = new Int64(args.createDate);
            }
            else {
                this.createDate = args.createDate;
            }
        }
        if (args != null && args.knlgDocId1 != null) {
            this.knlgDocId1 = args.knlgDocId1;
        }
        if (args != null && args.knlgDocId2 != null) {
            this.knlgDocId2 = args.knlgDocId2;
        }
        if (args != null && args.doc2Name != null) {
            this.doc2Name = args.doc2Name;
        }
        if (args != null && args.doc2Path != null) {
            this.doc2Path = args.doc2Path;
        }
        if (args != null && args.doc2Status != null) {
            this.doc2Status = args.doc2Status;
        }
        if (args != null && args.comment != null) {
            this.comment = args.comment;
        }
        if (args != null && args.relationType != null) {
            this.relationType = args.relationType;
        }
        if (args != null && args.knlgDocNodeTreeId2 != null) {
            this.knlgDocNodeTreeId2 = args.knlgDocNodeTreeId2;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("KnowledgeDocumentRelation");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.createDate != null) {
            output.writeFieldBegin("createDate", thrift.Thrift.Type.I64, 2);
            output.writeI64(this.createDate);
            output.writeFieldEnd();
        }
        if (this.knlgDocId1 != null) {
            output.writeFieldBegin("knlgDocId1", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.knlgDocId1);
            output.writeFieldEnd();
        }
        if (this.knlgDocId2 != null) {
            output.writeFieldBegin("knlgDocId2", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.knlgDocId2);
            output.writeFieldEnd();
        }
        if (this.doc2Name != null) {
            output.writeFieldBegin("doc2Name", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.doc2Name);
            output.writeFieldEnd();
        }
        if (this.doc2Path != null) {
            output.writeFieldBegin("doc2Path", thrift.Thrift.Type.STRING, 6);
            output.writeString(this.doc2Path);
            output.writeFieldEnd();
        }
        if (this.doc2Status != null) {
            output.writeFieldBegin("doc2Status", thrift.Thrift.Type.I32, 7);
            output.writeI32(this.doc2Status);
            output.writeFieldEnd();
        }
        if (this.comment != null) {
            output.writeFieldBegin("comment", thrift.Thrift.Type.STRING, 8);
            output.writeString(this.comment);
            output.writeFieldEnd();
        }
        if (this.relationType != null) {
            output.writeFieldBegin("relationType", thrift.Thrift.Type.I32, 9);
            output.writeI32(this.relationType);
            output.writeFieldEnd();
        }
        if (this.knlgDocNodeTreeId2 != null) {
            output.writeFieldBegin("knlgDocNodeTreeId2", thrift.Thrift.Type.STRING, 10);
            output.writeString(this.knlgDocNodeTreeId2);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): KnowledgeDocumentRelation {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.id = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_2: Int64 = input.readI64();
                        _args.createDate = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.knlgDocId1 = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.knlgDocId2 = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.doc2Name = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.doc2Path = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_7: KnowledgeDocumentStatus.KnowledgeDocumentStatus = input.readI32();
                        _args.doc2Status = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_8: string = input.readString();
                        _args.comment = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_9: KnowledgeDocRelationType.KnowledgeDocRelationType = input.readI32();
                        _args.relationType = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_10: string = input.readString();
                        _args.knlgDocNodeTreeId2 = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new KnowledgeDocumentRelation(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as core from "./";
export interface ISignDataArgs {
    attachmentIdIn?: string;
    stringIn?: string;
    stringBase64In?: string;
    digitHashOut?: string;
    signatureOut?: string;
    errorOut?: core.PreconditionException;
    actionName?: string;
}
export class SignData {
    public attachmentIdIn?: string;
    public stringIn?: string;
    public stringBase64In?: string;
    public digitHashOut?: string;
    public signatureOut?: string;
    public errorOut?: core.PreconditionException;
    public actionName?: string;
    constructor(args?: ISignDataArgs) {
        if (args != null && args.attachmentIdIn != null) {
            this.attachmentIdIn = args.attachmentIdIn;
        }
        if (args != null && args.stringIn != null) {
            this.stringIn = args.stringIn;
        }
        if (args != null && args.stringBase64In != null) {
            this.stringBase64In = args.stringBase64In;
        }
        if (args != null && args.digitHashOut != null) {
            this.digitHashOut = args.digitHashOut;
        }
        if (args != null && args.signatureOut != null) {
            this.signatureOut = args.signatureOut;
        }
        if (args != null && args.errorOut != null) {
            this.errorOut = args.errorOut;
        }
        if (args != null && args.actionName != null) {
            this.actionName = args.actionName;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("SignData");
        if (this.attachmentIdIn != null) {
            output.writeFieldBegin("attachmentIdIn", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.attachmentIdIn);
            output.writeFieldEnd();
        }
        if (this.stringIn != null) {
            output.writeFieldBegin("stringIn", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.stringIn);
            output.writeFieldEnd();
        }
        if (this.stringBase64In != null) {
            output.writeFieldBegin("stringBase64In", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.stringBase64In);
            output.writeFieldEnd();
        }
        if (this.digitHashOut != null) {
            output.writeFieldBegin("digitHashOut", thrift.Thrift.Type.STRING, 6);
            output.writeString(this.digitHashOut);
            output.writeFieldEnd();
        }
        if (this.signatureOut != null) {
            output.writeFieldBegin("signatureOut", thrift.Thrift.Type.STRING, 9);
            output.writeString(this.signatureOut);
            output.writeFieldEnd();
        }
        if (this.errorOut != null) {
            output.writeFieldBegin("errorOut", thrift.Thrift.Type.STRUCT, 10);
            this.errorOut.write(output);
            output.writeFieldEnd();
        }
        if (this.actionName != null) {
            output.writeFieldBegin("actionName", thrift.Thrift.Type.STRING, 11);
            output.writeString(this.actionName);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): SignData {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.attachmentIdIn = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.stringIn = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.stringBase64In = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.digitHashOut = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.signatureOut = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_6: core.PreconditionException = core.PreconditionException.read(input);
                        _args.errorOut = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_7: string = input.readString();
                        _args.actionName = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new SignData(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as AnaliticsAvailableTileParam from "./AnaliticsAvailableTileParam";
import * as AnaliticsAvailableTileViewConfig from "./AnaliticsAvailableTileViewConfig";
export interface IAnaliticsAvailableTileArgs {
    id?: string;
    key?: string;
    iconUrl?: string;
    params?: Array<AnaliticsAvailableTileParam.AnaliticsAvailableTileParam>;
    viewConfig?: AnaliticsAvailableTileViewConfig.AnaliticsAvailableTileViewConfig;
    name?: string;
    nameLoc?: Map<string, string>;
}
export class AnaliticsAvailableTile {
    public id?: string;
    public key?: string;
    public iconUrl?: string;
    public params?: Array<AnaliticsAvailableTileParam.AnaliticsAvailableTileParam>;
    public viewConfig?: AnaliticsAvailableTileViewConfig.AnaliticsAvailableTileViewConfig;
    public name?: string;
    public nameLoc?: Map<string, string>;
    constructor(args?: IAnaliticsAvailableTileArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.key != null) {
            this.key = args.key;
        }
        if (args != null && args.iconUrl != null) {
            this.iconUrl = args.iconUrl;
        }
        if (args != null && args.params != null) {
            this.params = args.params;
        }
        if (args != null && args.viewConfig != null) {
            this.viewConfig = args.viewConfig;
        }
        if (args != null && args.name != null) {
            this.name = args.name;
        }
        if (args != null && args.nameLoc != null) {
            this.nameLoc = args.nameLoc;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("AnaliticsAvailableTile");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.key != null) {
            output.writeFieldBegin("key", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.key);
            output.writeFieldEnd();
        }
        if (this.iconUrl != null) {
            output.writeFieldBegin("iconUrl", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.iconUrl);
            output.writeFieldEnd();
        }
        if (this.params != null) {
            output.writeFieldBegin("params", thrift.Thrift.Type.LIST, 4);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.params.length);
            this.params.forEach((value_1: AnaliticsAvailableTileParam.AnaliticsAvailableTileParam): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.viewConfig != null) {
            output.writeFieldBegin("viewConfig", thrift.Thrift.Type.STRUCT, 5);
            this.viewConfig.write(output);
            output.writeFieldEnd();
        }
        if (this.name != null) {
            output.writeFieldBegin("name", thrift.Thrift.Type.STRING, 6);
            output.writeString(this.name);
            output.writeFieldEnd();
        }
        if (this.nameLoc != null) {
            output.writeFieldBegin("nameLoc", thrift.Thrift.Type.MAP, 7);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.nameLoc.size);
            this.nameLoc.forEach((value_2: string, key_1: string): void => {
                output.writeString(key_1);
                output.writeString(value_2);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): AnaliticsAvailableTile {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.id = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.key = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.iconUrl = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_6: Array<AnaliticsAvailableTileParam.AnaliticsAvailableTileParam> = new Array<AnaliticsAvailableTileParam.AnaliticsAvailableTileParam>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_7: AnaliticsAvailableTileParam.AnaliticsAvailableTileParam = AnaliticsAvailableTileParam.AnaliticsAvailableTileParam.read(input);
                            value_6.push(value_7);
                        }
                        input.readListEnd();
                        _args.params = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_8: AnaliticsAvailableTileViewConfig.AnaliticsAvailableTileViewConfig = AnaliticsAvailableTileViewConfig.AnaliticsAvailableTileViewConfig.read(input);
                        _args.viewConfig = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_9: string = input.readString();
                        _args.name = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_10: Map<string, string> = new Map<string, string>();
                        const metadata_2: thrift.TMap = input.readMapBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const key_2: string = input.readString();
                            const value_11: string = input.readString();
                            value_10.set(key_2, value_11);
                        }
                        input.readMapEnd();
                        _args.nameLoc = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new AnaliticsAvailableTile(_args);
    }
}

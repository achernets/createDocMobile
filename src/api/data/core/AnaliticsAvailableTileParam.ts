/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as AnaliticsAvailableTileParamType from "./AnaliticsAvailableTileParamType";
import * as core from "./";
export interface IAnaliticsAvailableTileParamArgs {
    type?: AnaliticsAvailableTileParamType.AnaliticsAvailableTileParamType;
    key?: string;
    name?: string;
    value?: string;
    items?: Array<core.FilterItem>;
}
export class AnaliticsAvailableTileParam {
    public type?: AnaliticsAvailableTileParamType.AnaliticsAvailableTileParamType;
    public key?: string;
    public name?: string;
    public value?: string;
    public items?: Array<core.FilterItem>;
    constructor(args?: IAnaliticsAvailableTileParamArgs) {
        if (args != null && args.type != null) {
            this.type = args.type;
        }
        if (args != null && args.key != null) {
            this.key = args.key;
        }
        if (args != null && args.name != null) {
            this.name = args.name;
        }
        if (args != null && args.value != null) {
            this.value = args.value;
        }
        if (args != null && args.items != null) {
            this.items = args.items;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("AnaliticsAvailableTileParam");
        if (this.type != null) {
            output.writeFieldBegin("type", thrift.Thrift.Type.I32, 1);
            output.writeI32(this.type);
            output.writeFieldEnd();
        }
        if (this.key != null) {
            output.writeFieldBegin("key", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.key);
            output.writeFieldEnd();
        }
        if (this.name != null) {
            output.writeFieldBegin("name", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.name);
            output.writeFieldEnd();
        }
        if (this.value != null) {
            output.writeFieldBegin("value", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.value);
            output.writeFieldEnd();
        }
        if (this.items != null) {
            output.writeFieldBegin("items", thrift.Thrift.Type.LIST, 5);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.items.length);
            this.items.forEach((value_1: core.FilterItem): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): AnaliticsAvailableTileParam {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_2: AnaliticsAvailableTileParamType.AnaliticsAvailableTileParamType = input.readI32();
                        _args.type = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.key = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.name = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.value = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_6: Array<core.FilterItem> = new Array<core.FilterItem>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_7: core.FilterItem = core.FilterItem.read(input);
                            value_6.push(value_7);
                        }
                        input.readListEnd();
                        _args.items = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new AnaliticsAvailableTileParam(_args);
    }
}

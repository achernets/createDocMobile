/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 from "node-int64";
import * as thrift from "thrift";
import * as ObserverDocument from "./ObserverDocument";
import * as core from "./";
export interface IObserverCardCommentArgs {
    id?: string;
    parentId?: string;
    cardId?: string;
    createDate?: number | Int64;
    relatedDocument?: ObserverDocument.ObserverDocument;
    author?: core.UserOrGroup;
    cardComment?: string;
}
export class ObserverCardComment {
    public id?: string;
    public parentId?: string;
    public cardId?: string;
    public createDate?: Int64;
    public relatedDocument?: ObserverDocument.ObserverDocument;
    public author?: core.UserOrGroup;
    public cardComment?: string;
    constructor(args?: IObserverCardCommentArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.parentId != null) {
            this.parentId = args.parentId;
        }
        if (args != null && args.cardId != null) {
            this.cardId = args.cardId;
        }
        if (args != null && args.createDate != null) {
            if (typeof args.createDate === "number") {
                this.createDate = new Int64(args.createDate);
            }
            else {
                this.createDate = args.createDate;
            }
        }
        if (args != null && args.relatedDocument != null) {
            this.relatedDocument = args.relatedDocument;
        }
        if (args != null && args.author != null) {
            this.author = args.author;
        }
        if (args != null && args.cardComment != null) {
            this.cardComment = args.cardComment;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ObserverCardComment");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.parentId != null) {
            output.writeFieldBegin("parentId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.parentId);
            output.writeFieldEnd();
        }
        if (this.cardId != null) {
            output.writeFieldBegin("cardId", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.cardId);
            output.writeFieldEnd();
        }
        if (this.createDate != null) {
            output.writeFieldBegin("createDate", thrift.Thrift.Type.I64, 4);
            output.writeI64(this.createDate);
            output.writeFieldEnd();
        }
        if (this.relatedDocument != null) {
            output.writeFieldBegin("relatedDocument", thrift.Thrift.Type.STRUCT, 5);
            this.relatedDocument.write(output);
            output.writeFieldEnd();
        }
        if (this.author != null) {
            output.writeFieldBegin("author", thrift.Thrift.Type.STRUCT, 6);
            this.author.write(output);
            output.writeFieldEnd();
        }
        if (this.cardComment != null) {
            output.writeFieldBegin("cardComment", thrift.Thrift.Type.STRING, 7);
            output.writeString(this.cardComment);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ObserverCardComment {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.id = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.parentId = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.cardId = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_4: Int64 = input.readI64();
                        _args.createDate = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_5: ObserverDocument.ObserverDocument = ObserverDocument.ObserverDocument.read(input);
                        _args.relatedDocument = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_6: core.UserOrGroup = core.UserOrGroup.read(input);
                        _args.author = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_7: string = input.readString();
                        _args.cardComment = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ObserverCardComment(_args);
    }
}

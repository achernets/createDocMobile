/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as core from "./";
export interface IRegistryArgs {
    id?: string;
    regName?: string;
    regDescription?: string;
    viewRule?: string;
    userOrGrList?: Array<core.UserOrGroup>;
    accountList?: Array<core.Account>;
    autoDownload?: boolean;
    position?: number;
    regNameLoc?: Map<string, string>;
    regDescriptionLoc?: Map<string, string>;
    showDefaultColumns?: boolean;
    columns?: Array<core.DocColumn>;
    defaultSortColumn?: string;
}
export class Registry {
    public id?: string;
    public regName?: string;
    public regDescription?: string;
    public viewRule?: string;
    public userOrGrList?: Array<core.UserOrGroup>;
    public accountList?: Array<core.Account>;
    public autoDownload?: boolean;
    public position?: number;
    public regNameLoc?: Map<string, string>;
    public regDescriptionLoc?: Map<string, string>;
    public showDefaultColumns?: boolean;
    public columns?: Array<core.DocColumn>;
    public defaultSortColumn?: string;
    constructor(args?: IRegistryArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.regName != null) {
            this.regName = args.regName;
        }
        if (args != null && args.regDescription != null) {
            this.regDescription = args.regDescription;
        }
        if (args != null && args.viewRule != null) {
            this.viewRule = args.viewRule;
        }
        if (args != null && args.userOrGrList != null) {
            this.userOrGrList = args.userOrGrList;
        }
        if (args != null && args.accountList != null) {
            this.accountList = args.accountList;
        }
        if (args != null && args.autoDownload != null) {
            this.autoDownload = args.autoDownload;
        }
        if (args != null && args.position != null) {
            this.position = args.position;
        }
        if (args != null && args.regNameLoc != null) {
            this.regNameLoc = args.regNameLoc;
        }
        if (args != null && args.regDescriptionLoc != null) {
            this.regDescriptionLoc = args.regDescriptionLoc;
        }
        if (args != null && args.showDefaultColumns != null) {
            this.showDefaultColumns = args.showDefaultColumns;
        }
        if (args != null && args.columns != null) {
            this.columns = args.columns;
        }
        if (args != null && args.defaultSortColumn != null) {
            this.defaultSortColumn = args.defaultSortColumn;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("Registry");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.regName != null) {
            output.writeFieldBegin("regName", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.regName);
            output.writeFieldEnd();
        }
        if (this.regDescription != null) {
            output.writeFieldBegin("regDescription", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.regDescription);
            output.writeFieldEnd();
        }
        if (this.viewRule != null) {
            output.writeFieldBegin("viewRule", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.viewRule);
            output.writeFieldEnd();
        }
        if (this.userOrGrList != null) {
            output.writeFieldBegin("userOrGrList", thrift.Thrift.Type.LIST, 5);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.userOrGrList.length);
            this.userOrGrList.forEach((value_1: core.UserOrGroup): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.accountList != null) {
            output.writeFieldBegin("accountList", thrift.Thrift.Type.LIST, 6);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.accountList.length);
            this.accountList.forEach((value_2: core.Account): void => {
                value_2.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.autoDownload != null) {
            output.writeFieldBegin("autoDownload", thrift.Thrift.Type.BOOL, 7);
            output.writeBool(this.autoDownload);
            output.writeFieldEnd();
        }
        if (this.position != null) {
            output.writeFieldBegin("position", thrift.Thrift.Type.I32, 8);
            output.writeI32(this.position);
            output.writeFieldEnd();
        }
        if (this.regNameLoc != null) {
            output.writeFieldBegin("regNameLoc", thrift.Thrift.Type.MAP, 9);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.regNameLoc.size);
            this.regNameLoc.forEach((value_3: string, key_1: string): void => {
                output.writeString(key_1);
                output.writeString(value_3);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.regDescriptionLoc != null) {
            output.writeFieldBegin("regDescriptionLoc", thrift.Thrift.Type.MAP, 10);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.regDescriptionLoc.size);
            this.regDescriptionLoc.forEach((value_4: string, key_2: string): void => {
                output.writeString(key_2);
                output.writeString(value_4);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.showDefaultColumns != null) {
            output.writeFieldBegin("showDefaultColumns", thrift.Thrift.Type.BOOL, 11);
            output.writeBool(this.showDefaultColumns);
            output.writeFieldEnd();
        }
        if (this.columns != null) {
            output.writeFieldBegin("columns", thrift.Thrift.Type.LIST, 12);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.columns.length);
            this.columns.forEach((value_5: core.DocColumn): void => {
                value_5.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.defaultSortColumn != null) {
            output.writeFieldBegin("defaultSortColumn", thrift.Thrift.Type.STRING, 13);
            output.writeString(this.defaultSortColumn);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): Registry {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.id = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_7: string = input.readString();
                        _args.regName = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_8: string = input.readString();
                        _args.regDescription = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_9: string = input.readString();
                        _args.viewRule = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_10: Array<core.UserOrGroup> = new Array<core.UserOrGroup>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_11: core.UserOrGroup = core.UserOrGroup.read(input);
                            value_10.push(value_11);
                        }
                        input.readListEnd();
                        _args.userOrGrList = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_12: Array<core.Account> = new Array<core.Account>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_13: core.Account = core.Account.read(input);
                            value_12.push(value_13);
                        }
                        input.readListEnd();
                        _args.accountList = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_14: boolean = input.readBool();
                        _args.autoDownload = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_15: number = input.readI32();
                        _args.position = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_16: Map<string, string> = new Map<string, string>();
                        const metadata_3: thrift.TMap = input.readMapBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const key_3: string = input.readString();
                            const value_17: string = input.readString();
                            value_16.set(key_3, value_17);
                        }
                        input.readMapEnd();
                        _args.regNameLoc = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_18: Map<string, string> = new Map<string, string>();
                        const metadata_4: thrift.TMap = input.readMapBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const key_4: string = input.readString();
                            const value_19: string = input.readString();
                            value_18.set(key_4, value_19);
                        }
                        input.readMapEnd();
                        _args.regDescriptionLoc = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_20: boolean = input.readBool();
                        _args.showDefaultColumns = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_21: Array<core.DocColumn> = new Array<core.DocColumn>();
                        const metadata_5: thrift.TList = input.readListBegin();
                        const size_5: number = metadata_5.size;
                        for (let i_5: number = 0; i_5 < size_5; i_5++) {
                            const value_22: core.DocColumn = core.DocColumn.read(input);
                            value_21.push(value_22);
                        }
                        input.readListEnd();
                        _args.columns = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_23: string = input.readString();
                        _args.defaultSortColumn = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new Registry(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as core from "./";
import * as AnaliticsAvailableTile from "./AnaliticsAvailableTile";
import * as AnaliticsPreparedAvailableTilePage from "./AnaliticsPreparedAvailableTilePage";
import * as AnaliticsDashboardPage from "./AnaliticsDashboardPage";
import * as AnaliticsDashboard from "./AnaliticsDashboard";
export interface IGetAnaliticsAvailableTileListArgsArgs {
    token: string;
    filter: core.KazFilter;
}
export class GetAnaliticsAvailableTileListArgs {
    public token: string;
    public filter: core.KazFilter;
    constructor(args: IGetAnaliticsAvailableTileListArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAnaliticsAvailableTileListArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 2);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAnaliticsAvailableTileListArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.token = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: core.KazFilter = core.KazFilter.read(input);
                        _args.filter = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.filter !== undefined) {
            return new GetAnaliticsAvailableTileListArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAnaliticsAvailableTileListArgs from input");
        }
    }
}
export interface IGetAnaliticsPreparedAvailableTilePageArgsArgs {
    token: string;
    filter: core.KazFilter;
}
export class GetAnaliticsPreparedAvailableTilePageArgs {
    public token: string;
    public filter: core.KazFilter;
    constructor(args: IGetAnaliticsPreparedAvailableTilePageArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAnaliticsPreparedAvailableTilePageArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 2);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAnaliticsPreparedAvailableTilePageArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.token = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_4: core.KazFilter = core.KazFilter.read(input);
                        _args.filter = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.filter !== undefined) {
            return new GetAnaliticsPreparedAvailableTilePageArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAnaliticsPreparedAvailableTilePageArgs from input");
        }
    }
}
export interface IChangeAnaliticsPreparedAvailableTileArgsArgs {
    token: string;
    analiticsAvailableTile: AnaliticsAvailableTile.AnaliticsAvailableTile;
    toDelete: string;
}
export class ChangeAnaliticsPreparedAvailableTileArgs {
    public token: string;
    public analiticsAvailableTile: AnaliticsAvailableTile.AnaliticsAvailableTile;
    public toDelete: string;
    constructor(args: IChangeAnaliticsPreparedAvailableTileArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.analiticsAvailableTile != null) {
            this.analiticsAvailableTile = args.analiticsAvailableTile;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[analiticsAvailableTile] is unset!");
        }
        if (args != null && args.toDelete != null) {
            this.toDelete = args.toDelete;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[toDelete] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ChangeAnaliticsPreparedAvailableTileArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.analiticsAvailableTile != null) {
            output.writeFieldBegin("analiticsAvailableTile", thrift.Thrift.Type.STRUCT, 2);
            this.analiticsAvailableTile.write(output);
            output.writeFieldEnd();
        }
        if (this.toDelete != null) {
            output.writeFieldBegin("toDelete", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.toDelete);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ChangeAnaliticsPreparedAvailableTileArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.token = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_6: AnaliticsAvailableTile.AnaliticsAvailableTile = AnaliticsAvailableTile.AnaliticsAvailableTile.read(input);
                        _args.analiticsAvailableTile = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_7: string = input.readString();
                        _args.toDelete = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.analiticsAvailableTile !== undefined && _args.toDelete !== undefined) {
            return new ChangeAnaliticsPreparedAvailableTileArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read ChangeAnaliticsPreparedAvailableTileArgs from input");
        }
    }
}
export interface IGetAnaliticsDashboardPageArgsArgs {
    token: string;
    filter: core.KazFilter;
}
export class GetAnaliticsDashboardPageArgs {
    public token: string;
    public filter: core.KazFilter;
    constructor(args: IGetAnaliticsDashboardPageArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAnaliticsDashboardPageArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 2);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAnaliticsDashboardPageArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_8: string = input.readString();
                        _args.token = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_9: core.KazFilter = core.KazFilter.read(input);
                        _args.filter = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.filter !== undefined) {
            return new GetAnaliticsDashboardPageArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAnaliticsDashboardPageArgs from input");
        }
    }
}
export interface IChangeAnaliticsDashboardArgsArgs {
    token: string;
    analiticsDashboard: AnaliticsDashboard.AnaliticsDashboard;
    toDelete: string;
}
export class ChangeAnaliticsDashboardArgs {
    public token: string;
    public analiticsDashboard: AnaliticsDashboard.AnaliticsDashboard;
    public toDelete: string;
    constructor(args: IChangeAnaliticsDashboardArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.analiticsDashboard != null) {
            this.analiticsDashboard = args.analiticsDashboard;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[analiticsDashboard] is unset!");
        }
        if (args != null && args.toDelete != null) {
            this.toDelete = args.toDelete;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[toDelete] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ChangeAnaliticsDashboardArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.analiticsDashboard != null) {
            output.writeFieldBegin("analiticsDashboard", thrift.Thrift.Type.STRUCT, 2);
            this.analiticsDashboard.write(output);
            output.writeFieldEnd();
        }
        if (this.toDelete != null) {
            output.writeFieldBegin("toDelete", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.toDelete);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ChangeAnaliticsDashboardArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_10: string = input.readString();
                        _args.token = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_11: AnaliticsDashboard.AnaliticsDashboard = AnaliticsDashboard.AnaliticsDashboard.read(input);
                        _args.analiticsDashboard = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_12: string = input.readString();
                        _args.toDelete = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.analiticsDashboard !== undefined && _args.toDelete !== undefined) {
            return new ChangeAnaliticsDashboardArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read ChangeAnaliticsDashboardArgs from input");
        }
    }
}
export interface IGetUserAnaliticsDashboardListArgsArgs {
    token: string;
    filter: core.KazFilter;
}
export class GetUserAnaliticsDashboardListArgs {
    public token: string;
    public filter: core.KazFilter;
    constructor(args: IGetUserAnaliticsDashboardListArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetUserAnaliticsDashboardListArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 2);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetUserAnaliticsDashboardListArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_13: string = input.readString();
                        _args.token = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_14: core.KazFilter = core.KazFilter.read(input);
                        _args.filter = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.filter !== undefined) {
            return new GetUserAnaliticsDashboardListArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetUserAnaliticsDashboardListArgs from input");
        }
    }
}
export interface IGetAnaliticsAvailableTileListResultArgs {
    success?: Array<AnaliticsAvailableTile.AnaliticsAvailableTile>;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class GetAnaliticsAvailableTileListResult {
    public success?: Array<AnaliticsAvailableTile.AnaliticsAvailableTile>;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IGetAnaliticsAvailableTileListResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAnaliticsAvailableTileListResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_15: AnaliticsAvailableTile.AnaliticsAvailableTile): void => {
                value_15.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAnaliticsAvailableTileListResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_16: Array<AnaliticsAvailableTile.AnaliticsAvailableTile> = new Array<AnaliticsAvailableTile.AnaliticsAvailableTile>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_17: AnaliticsAvailableTile.AnaliticsAvailableTile = AnaliticsAvailableTile.AnaliticsAvailableTile.read(input);
                            value_16.push(value_17);
                        }
                        input.readListEnd();
                        _args.success = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_18: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_19: core.ServerException = core.ServerException.read(input);
                        _args.error = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAnaliticsAvailableTileListResult(_args);
    }
}
export interface IGetAnaliticsPreparedAvailableTilePageResultArgs {
    success?: AnaliticsPreparedAvailableTilePage.AnaliticsPreparedAvailableTilePage;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class GetAnaliticsPreparedAvailableTilePageResult {
    public success?: AnaliticsPreparedAvailableTilePage.AnaliticsPreparedAvailableTilePage;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IGetAnaliticsPreparedAvailableTilePageResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAnaliticsPreparedAvailableTilePageResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAnaliticsPreparedAvailableTilePageResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_20: AnaliticsPreparedAvailableTilePage.AnaliticsPreparedAvailableTilePage = AnaliticsPreparedAvailableTilePage.AnaliticsPreparedAvailableTilePage.read(input);
                        _args.success = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_21: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_22: core.ServerException = core.ServerException.read(input);
                        _args.error = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAnaliticsPreparedAvailableTilePageResult(_args);
    }
}
export interface IChangeAnaliticsPreparedAvailableTileResultArgs {
    success?: AnaliticsAvailableTile.AnaliticsAvailableTile;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class ChangeAnaliticsPreparedAvailableTileResult {
    public success?: AnaliticsAvailableTile.AnaliticsAvailableTile;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IChangeAnaliticsPreparedAvailableTileResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ChangeAnaliticsPreparedAvailableTileResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ChangeAnaliticsPreparedAvailableTileResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_23: AnaliticsAvailableTile.AnaliticsAvailableTile = AnaliticsAvailableTile.AnaliticsAvailableTile.read(input);
                        _args.success = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_24: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_24;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_25: core.ServerException = core.ServerException.read(input);
                        _args.error = value_25;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ChangeAnaliticsPreparedAvailableTileResult(_args);
    }
}
export interface IGetAnaliticsDashboardPageResultArgs {
    success?: AnaliticsDashboardPage.AnaliticsDashboardPage;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class GetAnaliticsDashboardPageResult {
    public success?: AnaliticsDashboardPage.AnaliticsDashboardPage;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IGetAnaliticsDashboardPageResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAnaliticsDashboardPageResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAnaliticsDashboardPageResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_26: AnaliticsDashboardPage.AnaliticsDashboardPage = AnaliticsDashboardPage.AnaliticsDashboardPage.read(input);
                        _args.success = value_26;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_27: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_27;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_28: core.ServerException = core.ServerException.read(input);
                        _args.error = value_28;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAnaliticsDashboardPageResult(_args);
    }
}
export interface IChangeAnaliticsDashboardResultArgs {
    success?: AnaliticsDashboard.AnaliticsDashboard;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class ChangeAnaliticsDashboardResult {
    public success?: AnaliticsDashboard.AnaliticsDashboard;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IChangeAnaliticsDashboardResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ChangeAnaliticsDashboardResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ChangeAnaliticsDashboardResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_29: AnaliticsDashboard.AnaliticsDashboard = AnaliticsDashboard.AnaliticsDashboard.read(input);
                        _args.success = value_29;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_30: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_30;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_31: core.ServerException = core.ServerException.read(input);
                        _args.error = value_31;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ChangeAnaliticsDashboardResult(_args);
    }
}
export interface IGetUserAnaliticsDashboardListResultArgs {
    success?: Array<AnaliticsDashboard.AnaliticsDashboard>;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class GetUserAnaliticsDashboardListResult {
    public success?: Array<AnaliticsDashboard.AnaliticsDashboard>;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IGetUserAnaliticsDashboardListResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetUserAnaliticsDashboardListResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_32: AnaliticsDashboard.AnaliticsDashboard): void => {
                value_32.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetUserAnaliticsDashboardListResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_33: Array<AnaliticsDashboard.AnaliticsDashboard> = new Array<AnaliticsDashboard.AnaliticsDashboard>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_34: AnaliticsDashboard.AnaliticsDashboard = AnaliticsDashboard.AnaliticsDashboard.read(input);
                            value_33.push(value_34);
                        }
                        input.readListEnd();
                        _args.success = value_33;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_35: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_35;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_36: core.ServerException = core.ServerException.read(input);
                        _args.error = value_36;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetUserAnaliticsDashboardListResult(_args);
    }
}
export class Client {
    public _seqid: number;
    public _reqs: {
        [name: number]: (err: Error | object | undefined, val?: any) => void;
    };
    public output: thrift.TTransport;
    public protocol: new (trans: thrift.TTransport) => thrift.TProtocol;
    constructor(output: thrift.TTransport, protocol: new (trans: thrift.TTransport) => thrift.TProtocol) {
        this._seqid = 0;
        this._reqs = {};
        this.output = output;
        this.protocol = protocol;
    }
    public incrementSeqId(): number {
        return this._seqid += 1;
    }
    public getAnaliticsAvailableTileList(token: string, filter: core.KazFilter): Promise<Array<AnaliticsAvailableTile.AnaliticsAvailableTile>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<AnaliticsAvailableTile.AnaliticsAvailableTile>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAnaliticsAvailableTileList(token, filter, requestId);
        });
    }
    public getAnaliticsPreparedAvailableTilePage(token: string, filter: core.KazFilter): Promise<AnaliticsPreparedAvailableTilePage.AnaliticsPreparedAvailableTilePage> {
        const requestId: number = this.incrementSeqId();
        return new Promise<AnaliticsPreparedAvailableTilePage.AnaliticsPreparedAvailableTilePage>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAnaliticsPreparedAvailableTilePage(token, filter, requestId);
        });
    }
    public changeAnaliticsPreparedAvailableTile(token: string, analiticsAvailableTile: AnaliticsAvailableTile.AnaliticsAvailableTile, toDelete: string): Promise<AnaliticsAvailableTile.AnaliticsAvailableTile> {
        const requestId: number = this.incrementSeqId();
        return new Promise<AnaliticsAvailableTile.AnaliticsAvailableTile>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_changeAnaliticsPreparedAvailableTile(token, analiticsAvailableTile, toDelete, requestId);
        });
    }
    public getAnaliticsDashboardPage(token: string, filter: core.KazFilter): Promise<AnaliticsDashboardPage.AnaliticsDashboardPage> {
        const requestId: number = this.incrementSeqId();
        return new Promise<AnaliticsDashboardPage.AnaliticsDashboardPage>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAnaliticsDashboardPage(token, filter, requestId);
        });
    }
    public changeAnaliticsDashboard(token: string, analiticsDashboard: AnaliticsDashboard.AnaliticsDashboard, toDelete: string): Promise<AnaliticsDashboard.AnaliticsDashboard> {
        const requestId: number = this.incrementSeqId();
        return new Promise<AnaliticsDashboard.AnaliticsDashboard>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_changeAnaliticsDashboard(token, analiticsDashboard, toDelete, requestId);
        });
    }
    public getUserAnaliticsDashboardList(token: string, filter: core.KazFilter): Promise<Array<AnaliticsDashboard.AnaliticsDashboard>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<AnaliticsDashboard.AnaliticsDashboard>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getUserAnaliticsDashboardList(token, filter, requestId);
        });
    }
    public send_getAnaliticsAvailableTileList(token: string, filter: core.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAnaliticsAvailableTileList", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAnaliticsAvailableTileListArgs = new GetAnaliticsAvailableTileListArgs({ token, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getAnaliticsPreparedAvailableTilePage(token: string, filter: core.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAnaliticsPreparedAvailableTilePage", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAnaliticsPreparedAvailableTilePageArgs = new GetAnaliticsPreparedAvailableTilePageArgs({ token, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_changeAnaliticsPreparedAvailableTile(token: string, analiticsAvailableTile: AnaliticsAvailableTile.AnaliticsAvailableTile, toDelete: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("changeAnaliticsPreparedAvailableTile", thrift.Thrift.MessageType.CALL, requestId);
        const args: ChangeAnaliticsPreparedAvailableTileArgs = new ChangeAnaliticsPreparedAvailableTileArgs({ token, analiticsAvailableTile, toDelete });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getAnaliticsDashboardPage(token: string, filter: core.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAnaliticsDashboardPage", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAnaliticsDashboardPageArgs = new GetAnaliticsDashboardPageArgs({ token, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_changeAnaliticsDashboard(token: string, analiticsDashboard: AnaliticsDashboard.AnaliticsDashboard, toDelete: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("changeAnaliticsDashboard", thrift.Thrift.MessageType.CALL, requestId);
        const args: ChangeAnaliticsDashboardArgs = new ChangeAnaliticsDashboardArgs({ token, analiticsDashboard, toDelete });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getUserAnaliticsDashboardList(token: string, filter: core.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getUserAnaliticsDashboardList", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetUserAnaliticsDashboardListArgs = new GetUserAnaliticsDashboardListArgs({ token, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public recv_getAnaliticsAvailableTileList(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAnaliticsAvailableTileListResult = GetAnaliticsAvailableTileListResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAnaliticsAvailableTileList failed: unknown result"));
                }
            }
        }
    }
    public recv_getAnaliticsPreparedAvailableTilePage(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAnaliticsPreparedAvailableTilePageResult = GetAnaliticsPreparedAvailableTilePageResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAnaliticsPreparedAvailableTilePage failed: unknown result"));
                }
            }
        }
    }
    public recv_changeAnaliticsPreparedAvailableTile(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: ChangeAnaliticsPreparedAvailableTileResult = ChangeAnaliticsPreparedAvailableTileResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "changeAnaliticsPreparedAvailableTile failed: unknown result"));
                }
            }
        }
    }
    public recv_getAnaliticsDashboardPage(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAnaliticsDashboardPageResult = GetAnaliticsDashboardPageResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAnaliticsDashboardPage failed: unknown result"));
                }
            }
        }
    }
    public recv_changeAnaliticsDashboard(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: ChangeAnaliticsDashboardResult = ChangeAnaliticsDashboardResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "changeAnaliticsDashboard failed: unknown result"));
                }
            }
        }
    }
    public recv_getUserAnaliticsDashboardList(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetUserAnaliticsDashboardListResult = GetUserAnaliticsDashboardListResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getUserAnaliticsDashboardList failed: unknown result"));
                }
            }
        }
    }
}
export interface IHandler {
    getAnaliticsAvailableTileList(token: string, filter: core.KazFilter): Array<AnaliticsAvailableTile.AnaliticsAvailableTile> | Promise<Array<AnaliticsAvailableTile.AnaliticsAvailableTile>>;
    getAnaliticsPreparedAvailableTilePage(token: string, filter: core.KazFilter): AnaliticsPreparedAvailableTilePage.AnaliticsPreparedAvailableTilePage | Promise<AnaliticsPreparedAvailableTilePage.AnaliticsPreparedAvailableTilePage>;
    changeAnaliticsPreparedAvailableTile(token: string, analiticsAvailableTile: AnaliticsAvailableTile.AnaliticsAvailableTile, toDelete: string): AnaliticsAvailableTile.AnaliticsAvailableTile | Promise<AnaliticsAvailableTile.AnaliticsAvailableTile>;
    getAnaliticsDashboardPage(token: string, filter: core.KazFilter): AnaliticsDashboardPage.AnaliticsDashboardPage | Promise<AnaliticsDashboardPage.AnaliticsDashboardPage>;
    changeAnaliticsDashboard(token: string, analiticsDashboard: AnaliticsDashboard.AnaliticsDashboard, toDelete: string): AnaliticsDashboard.AnaliticsDashboard | Promise<AnaliticsDashboard.AnaliticsDashboard>;
    getUserAnaliticsDashboardList(token: string, filter: core.KazFilter): Array<AnaliticsDashboard.AnaliticsDashboard> | Promise<Array<AnaliticsDashboard.AnaliticsDashboard>>;
}
export class Processor {
    public _handler: IHandler;
    constructor(handler: IHandler) {
        this._handler = handler;
    }
    public process(input: thrift.TProtocol, output: thrift.TProtocol): void {
        const metadata: thrift.TMessage = input.readMessageBegin();
        const fname: string = metadata.fname;
        const requestId: number = metadata.rseqid;
        const methodName: string = "process_" + fname;
        switch (methodName) {
            case "process_getAnaliticsAvailableTileList": {
                this.process_getAnaliticsAvailableTileList(requestId, input, output);
                return;
            }
            case "process_getAnaliticsPreparedAvailableTilePage": {
                this.process_getAnaliticsPreparedAvailableTilePage(requestId, input, output);
                return;
            }
            case "process_changeAnaliticsPreparedAvailableTile": {
                this.process_changeAnaliticsPreparedAvailableTile(requestId, input, output);
                return;
            }
            case "process_getAnaliticsDashboardPage": {
                this.process_getAnaliticsDashboardPage(requestId, input, output);
                return;
            }
            case "process_changeAnaliticsDashboard": {
                this.process_changeAnaliticsDashboard(requestId, input, output);
                return;
            }
            case "process_getUserAnaliticsDashboardList": {
                this.process_getUserAnaliticsDashboardList(requestId, input, output);
                return;
            }
            default: {
                input.skip(thrift.Thrift.Type.STRUCT);
                input.readMessageEnd();
                const errMessage = "Unknown function " + fname;
                const err = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN_METHOD, errMessage);
                output.writeMessageBegin(fname, thrift.Thrift.MessageType.EXCEPTION, requestId);
                err.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        }
    }
    public process_getAnaliticsAvailableTileList(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<AnaliticsAvailableTile.AnaliticsAvailableTile>>((resolve, reject): void => {
            try {
                const args: GetAnaliticsAvailableTileListArgs = GetAnaliticsAvailableTileListArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAnaliticsAvailableTileList(args.token, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<AnaliticsAvailableTile.AnaliticsAvailableTile>): void => {
            const result: GetAnaliticsAvailableTileListResult = new GetAnaliticsAvailableTileListResult({ success: data });
            output.writeMessageBegin("getAnaliticsAvailableTileList", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: GetAnaliticsAvailableTileListResult = new GetAnaliticsAvailableTileListResult({ validError: err });
                output.writeMessageBegin("getAnaliticsAvailableTileList", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: GetAnaliticsAvailableTileListResult = new GetAnaliticsAvailableTileListResult({ error: err });
                output.writeMessageBegin("getAnaliticsAvailableTileList", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAnaliticsAvailableTileList", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getAnaliticsPreparedAvailableTilePage(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<AnaliticsPreparedAvailableTilePage.AnaliticsPreparedAvailableTilePage>((resolve, reject): void => {
            try {
                const args: GetAnaliticsPreparedAvailableTilePageArgs = GetAnaliticsPreparedAvailableTilePageArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAnaliticsPreparedAvailableTilePage(args.token, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: AnaliticsPreparedAvailableTilePage.AnaliticsPreparedAvailableTilePage): void => {
            const result: GetAnaliticsPreparedAvailableTilePageResult = new GetAnaliticsPreparedAvailableTilePageResult({ success: data });
            output.writeMessageBegin("getAnaliticsPreparedAvailableTilePage", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: GetAnaliticsPreparedAvailableTilePageResult = new GetAnaliticsPreparedAvailableTilePageResult({ validError: err });
                output.writeMessageBegin("getAnaliticsPreparedAvailableTilePage", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: GetAnaliticsPreparedAvailableTilePageResult = new GetAnaliticsPreparedAvailableTilePageResult({ error: err });
                output.writeMessageBegin("getAnaliticsPreparedAvailableTilePage", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAnaliticsPreparedAvailableTilePage", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_changeAnaliticsPreparedAvailableTile(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<AnaliticsAvailableTile.AnaliticsAvailableTile>((resolve, reject): void => {
            try {
                const args: ChangeAnaliticsPreparedAvailableTileArgs = ChangeAnaliticsPreparedAvailableTileArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.changeAnaliticsPreparedAvailableTile(args.token, args.analiticsAvailableTile, args.toDelete));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: AnaliticsAvailableTile.AnaliticsAvailableTile): void => {
            const result: ChangeAnaliticsPreparedAvailableTileResult = new ChangeAnaliticsPreparedAvailableTileResult({ success: data });
            output.writeMessageBegin("changeAnaliticsPreparedAvailableTile", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: ChangeAnaliticsPreparedAvailableTileResult = new ChangeAnaliticsPreparedAvailableTileResult({ validError: err });
                output.writeMessageBegin("changeAnaliticsPreparedAvailableTile", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: ChangeAnaliticsPreparedAvailableTileResult = new ChangeAnaliticsPreparedAvailableTileResult({ error: err });
                output.writeMessageBegin("changeAnaliticsPreparedAvailableTile", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("changeAnaliticsPreparedAvailableTile", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getAnaliticsDashboardPage(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<AnaliticsDashboardPage.AnaliticsDashboardPage>((resolve, reject): void => {
            try {
                const args: GetAnaliticsDashboardPageArgs = GetAnaliticsDashboardPageArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAnaliticsDashboardPage(args.token, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: AnaliticsDashboardPage.AnaliticsDashboardPage): void => {
            const result: GetAnaliticsDashboardPageResult = new GetAnaliticsDashboardPageResult({ success: data });
            output.writeMessageBegin("getAnaliticsDashboardPage", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: GetAnaliticsDashboardPageResult = new GetAnaliticsDashboardPageResult({ validError: err });
                output.writeMessageBegin("getAnaliticsDashboardPage", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: GetAnaliticsDashboardPageResult = new GetAnaliticsDashboardPageResult({ error: err });
                output.writeMessageBegin("getAnaliticsDashboardPage", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAnaliticsDashboardPage", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_changeAnaliticsDashboard(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<AnaliticsDashboard.AnaliticsDashboard>((resolve, reject): void => {
            try {
                const args: ChangeAnaliticsDashboardArgs = ChangeAnaliticsDashboardArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.changeAnaliticsDashboard(args.token, args.analiticsDashboard, args.toDelete));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: AnaliticsDashboard.AnaliticsDashboard): void => {
            const result: ChangeAnaliticsDashboardResult = new ChangeAnaliticsDashboardResult({ success: data });
            output.writeMessageBegin("changeAnaliticsDashboard", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: ChangeAnaliticsDashboardResult = new ChangeAnaliticsDashboardResult({ validError: err });
                output.writeMessageBegin("changeAnaliticsDashboard", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: ChangeAnaliticsDashboardResult = new ChangeAnaliticsDashboardResult({ error: err });
                output.writeMessageBegin("changeAnaliticsDashboard", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("changeAnaliticsDashboard", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getUserAnaliticsDashboardList(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<AnaliticsDashboard.AnaliticsDashboard>>((resolve, reject): void => {
            try {
                const args: GetUserAnaliticsDashboardListArgs = GetUserAnaliticsDashboardListArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getUserAnaliticsDashboardList(args.token, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<AnaliticsDashboard.AnaliticsDashboard>): void => {
            const result: GetUserAnaliticsDashboardListResult = new GetUserAnaliticsDashboardListResult({ success: data });
            output.writeMessageBegin("getUserAnaliticsDashboardList", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: GetUserAnaliticsDashboardListResult = new GetUserAnaliticsDashboardListResult({ validError: err });
                output.writeMessageBegin("getUserAnaliticsDashboardList", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: GetUserAnaliticsDashboardListResult = new GetUserAnaliticsDashboardListResult({ error: err });
                output.writeMessageBegin("getUserAnaliticsDashboardList", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getUserAnaliticsDashboardList", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
}

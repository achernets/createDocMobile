/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 from "node-int64";
import * as thrift from "thrift";
import * as core from "./";
import * as BulkSignAttachment from "./BulkSignAttachment";
import * as BulkStatus from "./BulkStatus";
export interface IBulkSignDocumentArgs {
    id?: string;
    documentId?: string;
    documentSystemNumber?: string;
    documentNumber?: string;
    documentIcon?: core.DocumentIconType;
    documentName?: string;
    documentCreateDate?: number | Int64;
    documentAuthor?: core.UserOrGroup;
    documentGroup?: core.DocumentPatternGroup;
    docAttachmentList?: Array<BulkSignAttachment.BulkSignAttachment>;
    bulkDocStatus?: BulkStatus.BulkStatus;
    bulkError?: string;
}
export class BulkSignDocument {
    public id?: string;
    public documentId?: string;
    public documentSystemNumber?: string;
    public documentNumber?: string;
    public documentIcon?: core.DocumentIconType;
    public documentName?: string;
    public documentCreateDate?: Int64;
    public documentAuthor?: core.UserOrGroup;
    public documentGroup?: core.DocumentPatternGroup;
    public docAttachmentList?: Array<BulkSignAttachment.BulkSignAttachment>;
    public bulkDocStatus?: BulkStatus.BulkStatus;
    public bulkError?: string;
    constructor(args?: IBulkSignDocumentArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.documentId != null) {
            this.documentId = args.documentId;
        }
        if (args != null && args.documentSystemNumber != null) {
            this.documentSystemNumber = args.documentSystemNumber;
        }
        if (args != null && args.documentNumber != null) {
            this.documentNumber = args.documentNumber;
        }
        if (args != null && args.documentIcon != null) {
            this.documentIcon = args.documentIcon;
        }
        if (args != null && args.documentName != null) {
            this.documentName = args.documentName;
        }
        if (args != null && args.documentCreateDate != null) {
            if (typeof args.documentCreateDate === "number") {
                this.documentCreateDate = new Int64(args.documentCreateDate);
            }
            else {
                this.documentCreateDate = args.documentCreateDate;
            }
        }
        if (args != null && args.documentAuthor != null) {
            this.documentAuthor = args.documentAuthor;
        }
        if (args != null && args.documentGroup != null) {
            this.documentGroup = args.documentGroup;
        }
        if (args != null && args.docAttachmentList != null) {
            this.docAttachmentList = args.docAttachmentList;
        }
        if (args != null && args.bulkDocStatus != null) {
            this.bulkDocStatus = args.bulkDocStatus;
        }
        if (args != null && args.bulkError != null) {
            this.bulkError = args.bulkError;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("BulkSignDocument");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.documentId != null) {
            output.writeFieldBegin("documentId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.documentId);
            output.writeFieldEnd();
        }
        if (this.documentSystemNumber != null) {
            output.writeFieldBegin("documentSystemNumber", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.documentSystemNumber);
            output.writeFieldEnd();
        }
        if (this.documentNumber != null) {
            output.writeFieldBegin("documentNumber", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.documentNumber);
            output.writeFieldEnd();
        }
        if (this.documentIcon != null) {
            output.writeFieldBegin("documentIcon", thrift.Thrift.Type.I32, 5);
            output.writeI32(this.documentIcon);
            output.writeFieldEnd();
        }
        if (this.documentName != null) {
            output.writeFieldBegin("documentName", thrift.Thrift.Type.STRING, 6);
            output.writeString(this.documentName);
            output.writeFieldEnd();
        }
        if (this.documentCreateDate != null) {
            output.writeFieldBegin("documentCreateDate", thrift.Thrift.Type.I64, 7);
            output.writeI64(this.documentCreateDate);
            output.writeFieldEnd();
        }
        if (this.documentAuthor != null) {
            output.writeFieldBegin("documentAuthor", thrift.Thrift.Type.STRUCT, 8);
            this.documentAuthor.write(output);
            output.writeFieldEnd();
        }
        if (this.documentGroup != null) {
            output.writeFieldBegin("documentGroup", thrift.Thrift.Type.STRUCT, 9);
            this.documentGroup.write(output);
            output.writeFieldEnd();
        }
        if (this.docAttachmentList != null) {
            output.writeFieldBegin("docAttachmentList", thrift.Thrift.Type.LIST, 10);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.docAttachmentList.length);
            this.docAttachmentList.forEach((value_1: BulkSignAttachment.BulkSignAttachment): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.bulkDocStatus != null) {
            output.writeFieldBegin("bulkDocStatus", thrift.Thrift.Type.I32, 11);
            output.writeI32(this.bulkDocStatus);
            output.writeFieldEnd();
        }
        if (this.bulkError != null) {
            output.writeFieldBegin("bulkError", thrift.Thrift.Type.STRING, 12);
            output.writeString(this.bulkError);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): BulkSignDocument {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.id = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.documentId = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.documentSystemNumber = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.documentNumber = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_6: core.DocumentIconType = input.readI32();
                        _args.documentIcon = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_7: string = input.readString();
                        _args.documentName = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_8: Int64 = input.readI64();
                        _args.documentCreateDate = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_9: core.UserOrGroup = core.UserOrGroup.read(input);
                        _args.documentAuthor = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_10: core.DocumentPatternGroup = core.DocumentPatternGroup.read(input);
                        _args.documentGroup = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_11: Array<BulkSignAttachment.BulkSignAttachment> = new Array<BulkSignAttachment.BulkSignAttachment>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_12: BulkSignAttachment.BulkSignAttachment = BulkSignAttachment.BulkSignAttachment.read(input);
                            value_11.push(value_12);
                        }
                        input.readListEnd();
                        _args.docAttachmentList = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_13: BulkStatus.BulkStatus = input.readI32();
                        _args.bulkDocStatus = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_14: string = input.readString();
                        _args.bulkError = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new BulkSignDocument(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 from "node-int64";
import * as thrift from "thrift";
import * as core from "./";
import * as NotificationStatus from "./NotificationStatus";
import * as RecipientTypeEnum from "./RecipientTypeEnum";
export interface INotificationRecipientArgs {
    id?: string;
    createDate?: number | Int64;
    recipient?: core.UserOrGroup;
    originalClient?: core.UserOrGroup;
    processedDate?: number | Int64;
    status?: NotificationStatus.NotificationStatus;
    readed?: boolean;
    type?: RecipientTypeEnum.RecipientTypeEnum;
}
export class NotificationRecipient {
    public id?: string;
    public createDate?: Int64;
    public recipient?: core.UserOrGroup;
    public originalClient?: core.UserOrGroup;
    public processedDate?: Int64;
    public status?: NotificationStatus.NotificationStatus;
    public readed?: boolean;
    public type?: RecipientTypeEnum.RecipientTypeEnum;
    constructor(args?: INotificationRecipientArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.createDate != null) {
            if (typeof args.createDate === "number") {
                this.createDate = new Int64(args.createDate);
            }
            else {
                this.createDate = args.createDate;
            }
        }
        if (args != null && args.recipient != null) {
            this.recipient = args.recipient;
        }
        if (args != null && args.originalClient != null) {
            this.originalClient = args.originalClient;
        }
        if (args != null && args.processedDate != null) {
            if (typeof args.processedDate === "number") {
                this.processedDate = new Int64(args.processedDate);
            }
            else {
                this.processedDate = args.processedDate;
            }
        }
        if (args != null && args.status != null) {
            this.status = args.status;
        }
        if (args != null && args.readed != null) {
            this.readed = args.readed;
        }
        if (args != null && args.type != null) {
            this.type = args.type;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("NotificationRecipient");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.createDate != null) {
            output.writeFieldBegin("createDate", thrift.Thrift.Type.I64, 2);
            output.writeI64(this.createDate);
            output.writeFieldEnd();
        }
        if (this.recipient != null) {
            output.writeFieldBegin("recipient", thrift.Thrift.Type.STRUCT, 3);
            this.recipient.write(output);
            output.writeFieldEnd();
        }
        if (this.originalClient != null) {
            output.writeFieldBegin("originalClient", thrift.Thrift.Type.STRUCT, 5);
            this.originalClient.write(output);
            output.writeFieldEnd();
        }
        if (this.processedDate != null) {
            output.writeFieldBegin("processedDate", thrift.Thrift.Type.I64, 6);
            output.writeI64(this.processedDate);
            output.writeFieldEnd();
        }
        if (this.status != null) {
            output.writeFieldBegin("status", thrift.Thrift.Type.I32, 7);
            output.writeI32(this.status);
            output.writeFieldEnd();
        }
        if (this.readed != null) {
            output.writeFieldBegin("readed", thrift.Thrift.Type.BOOL, 8);
            output.writeBool(this.readed);
            output.writeFieldEnd();
        }
        if (this.type != null) {
            output.writeFieldBegin("type", thrift.Thrift.Type.I32, 9);
            output.writeI32(this.type);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): NotificationRecipient {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.id = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_2: Int64 = input.readI64();
                        _args.createDate = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_3: core.UserOrGroup = core.UserOrGroup.read(input);
                        _args.recipient = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_4: core.UserOrGroup = core.UserOrGroup.read(input);
                        _args.originalClient = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_5: Int64 = input.readI64();
                        _args.processedDate = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_6: NotificationStatus.NotificationStatus = input.readI32();
                        _args.status = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_7: boolean = input.readBool();
                        _args.readed = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_8: RecipientTypeEnum.RecipientTypeEnum = input.readI32();
                        _args.type = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new NotificationRecipient(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as ExecutionType from "./ExecutionType";
import * as core from "./";
import * as AccessRule from "./AccessRule";
import * as AttachmentAction from "./AttachmentAction";
import * as CloseWindowType from "./CloseWindowType";
import * as ContentHolder from "./ContentHolder";
import * as AvailableAction from "./AvailableAction";
export interface IDocumentPatternStagesLinkArgs {
    id?: string;
    parentStageId?: string;
    childStageId?: string;
    nameDocPatStageLink?: string;
    descriptionDocPatStageLink?: string;
    decision?: string;
    graphicalParams?: string;
    execType?: ExecutionType.ExecutionType;
    movePriority?: number;
    informUsers?: Array<core.UserOrGroup>;
    accessRule?: AccessRule.AccessRule;
    allowForCurUser?: boolean;
    useByDefault?: boolean;
    resolution?: core.DocPatternStageRequirement;
    signature?: core.DocPatternStageRequirement;
    autoExecute?: boolean;
    jiraPeriod?: string;
    comment?: string;
    allowRepeatDecision?: boolean;
    attachmentAction?: AttachmentAction.AttachmentAction;
    orderLink?: number;
    preFunctionId?: core.CompositeId;
    closeWindowType?: CloseWindowType.CloseWindowType;
    updateWindowInterval?: number;
    attachmentForceConver?: boolean;
    contentHolder?: ContentHolder.ContentHolder;
    attachmentRequirement?: core.DocPatternStageRequirement;
    handBook?: core.HandBook;
    hbColumnId?: string;
    hbResolution?: boolean;
    nameDocPatStageLinkLoc?: Map<string, string>;
    descriptionDocPatStageLinkLoc?: Map<string, string>;
    fastDecision?: boolean;
    requiredDocAttachment?: boolean;
    requiredSignAttachment?: core.DocPatternStageRequirement;
    availableAction?: AvailableAction.AvailableAction;
}
export class DocumentPatternStagesLink {
    public id?: string;
    public parentStageId?: string;
    public childStageId?: string;
    public nameDocPatStageLink?: string;
    public descriptionDocPatStageLink?: string;
    public decision?: string;
    public graphicalParams?: string;
    public execType?: ExecutionType.ExecutionType;
    public movePriority?: number;
    public informUsers?: Array<core.UserOrGroup>;
    public accessRule?: AccessRule.AccessRule;
    public allowForCurUser?: boolean;
    public useByDefault?: boolean;
    public resolution?: core.DocPatternStageRequirement;
    public signature?: core.DocPatternStageRequirement;
    public autoExecute?: boolean;
    public jiraPeriod?: string;
    public comment?: string;
    public allowRepeatDecision?: boolean;
    public attachmentAction?: AttachmentAction.AttachmentAction;
    public orderLink?: number;
    public preFunctionId?: core.CompositeId;
    public closeWindowType?: CloseWindowType.CloseWindowType;
    public updateWindowInterval?: number;
    public attachmentForceConver?: boolean;
    public contentHolder?: ContentHolder.ContentHolder;
    public attachmentRequirement?: core.DocPatternStageRequirement;
    public handBook?: core.HandBook;
    public hbColumnId?: string;
    public hbResolution?: boolean;
    public nameDocPatStageLinkLoc?: Map<string, string>;
    public descriptionDocPatStageLinkLoc?: Map<string, string>;
    public fastDecision?: boolean;
    public requiredDocAttachment?: boolean;
    public requiredSignAttachment?: core.DocPatternStageRequirement;
    public availableAction?: AvailableAction.AvailableAction;
    constructor(args?: IDocumentPatternStagesLinkArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.parentStageId != null) {
            this.parentStageId = args.parentStageId;
        }
        if (args != null && args.childStageId != null) {
            this.childStageId = args.childStageId;
        }
        if (args != null && args.nameDocPatStageLink != null) {
            this.nameDocPatStageLink = args.nameDocPatStageLink;
        }
        if (args != null && args.descriptionDocPatStageLink != null) {
            this.descriptionDocPatStageLink = args.descriptionDocPatStageLink;
        }
        if (args != null && args.decision != null) {
            this.decision = args.decision;
        }
        if (args != null && args.graphicalParams != null) {
            this.graphicalParams = args.graphicalParams;
        }
        if (args != null && args.execType != null) {
            this.execType = args.execType;
        }
        if (args != null && args.movePriority != null) {
            this.movePriority = args.movePriority;
        }
        if (args != null && args.informUsers != null) {
            this.informUsers = args.informUsers;
        }
        if (args != null && args.accessRule != null) {
            this.accessRule = args.accessRule;
        }
        if (args != null && args.allowForCurUser != null) {
            this.allowForCurUser = args.allowForCurUser;
        }
        if (args != null && args.useByDefault != null) {
            this.useByDefault = args.useByDefault;
        }
        if (args != null && args.resolution != null) {
            this.resolution = args.resolution;
        }
        if (args != null && args.signature != null) {
            this.signature = args.signature;
        }
        if (args != null && args.autoExecute != null) {
            this.autoExecute = args.autoExecute;
        }
        if (args != null && args.jiraPeriod != null) {
            this.jiraPeriod = args.jiraPeriod;
        }
        if (args != null && args.comment != null) {
            this.comment = args.comment;
        }
        if (args != null && args.allowRepeatDecision != null) {
            this.allowRepeatDecision = args.allowRepeatDecision;
        }
        if (args != null && args.attachmentAction != null) {
            this.attachmentAction = args.attachmentAction;
        }
        if (args != null && args.orderLink != null) {
            this.orderLink = args.orderLink;
        }
        if (args != null && args.preFunctionId != null) {
            this.preFunctionId = args.preFunctionId;
        }
        if (args != null && args.closeWindowType != null) {
            this.closeWindowType = args.closeWindowType;
        }
        if (args != null && args.updateWindowInterval != null) {
            this.updateWindowInterval = args.updateWindowInterval;
        }
        if (args != null && args.attachmentForceConver != null) {
            this.attachmentForceConver = args.attachmentForceConver;
        }
        if (args != null && args.contentHolder != null) {
            this.contentHolder = args.contentHolder;
        }
        if (args != null && args.attachmentRequirement != null) {
            this.attachmentRequirement = args.attachmentRequirement;
        }
        if (args != null && args.handBook != null) {
            this.handBook = args.handBook;
        }
        if (args != null && args.hbColumnId != null) {
            this.hbColumnId = args.hbColumnId;
        }
        if (args != null && args.hbResolution != null) {
            this.hbResolution = args.hbResolution;
        }
        if (args != null && args.nameDocPatStageLinkLoc != null) {
            this.nameDocPatStageLinkLoc = args.nameDocPatStageLinkLoc;
        }
        if (args != null && args.descriptionDocPatStageLinkLoc != null) {
            this.descriptionDocPatStageLinkLoc = args.descriptionDocPatStageLinkLoc;
        }
        if (args != null && args.fastDecision != null) {
            this.fastDecision = args.fastDecision;
        }
        if (args != null && args.requiredDocAttachment != null) {
            this.requiredDocAttachment = args.requiredDocAttachment;
        }
        if (args != null && args.requiredSignAttachment != null) {
            this.requiredSignAttachment = args.requiredSignAttachment;
        }
        if (args != null && args.availableAction != null) {
            this.availableAction = args.availableAction;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("DocumentPatternStagesLink");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.parentStageId != null) {
            output.writeFieldBegin("parentStageId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.parentStageId);
            output.writeFieldEnd();
        }
        if (this.childStageId != null) {
            output.writeFieldBegin("childStageId", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.childStageId);
            output.writeFieldEnd();
        }
        if (this.nameDocPatStageLink != null) {
            output.writeFieldBegin("nameDocPatStageLink", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.nameDocPatStageLink);
            output.writeFieldEnd();
        }
        if (this.descriptionDocPatStageLink != null) {
            output.writeFieldBegin("descriptionDocPatStageLink", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.descriptionDocPatStageLink);
            output.writeFieldEnd();
        }
        if (this.decision != null) {
            output.writeFieldBegin("decision", thrift.Thrift.Type.STRING, 6);
            output.writeString(this.decision);
            output.writeFieldEnd();
        }
        if (this.graphicalParams != null) {
            output.writeFieldBegin("graphicalParams", thrift.Thrift.Type.STRING, 7);
            output.writeString(this.graphicalParams);
            output.writeFieldEnd();
        }
        if (this.execType != null) {
            output.writeFieldBegin("execType", thrift.Thrift.Type.I32, 8);
            output.writeI32(this.execType);
            output.writeFieldEnd();
        }
        if (this.movePriority != null) {
            output.writeFieldBegin("movePriority", thrift.Thrift.Type.I32, 9);
            output.writeI32(this.movePriority);
            output.writeFieldEnd();
        }
        if (this.informUsers != null) {
            output.writeFieldBegin("informUsers", thrift.Thrift.Type.LIST, 10);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.informUsers.length);
            this.informUsers.forEach((value_1: core.UserOrGroup): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.accessRule != null) {
            output.writeFieldBegin("accessRule", thrift.Thrift.Type.STRUCT, 11);
            this.accessRule.write(output);
            output.writeFieldEnd();
        }
        if (this.allowForCurUser != null) {
            output.writeFieldBegin("allowForCurUser", thrift.Thrift.Type.BOOL, 12);
            output.writeBool(this.allowForCurUser);
            output.writeFieldEnd();
        }
        if (this.useByDefault != null) {
            output.writeFieldBegin("useByDefault", thrift.Thrift.Type.BOOL, 13);
            output.writeBool(this.useByDefault);
            output.writeFieldEnd();
        }
        if (this.resolution != null) {
            output.writeFieldBegin("resolution", thrift.Thrift.Type.I32, 14);
            output.writeI32(this.resolution);
            output.writeFieldEnd();
        }
        if (this.signature != null) {
            output.writeFieldBegin("signature", thrift.Thrift.Type.I32, 15);
            output.writeI32(this.signature);
            output.writeFieldEnd();
        }
        if (this.autoExecute != null) {
            output.writeFieldBegin("autoExecute", thrift.Thrift.Type.BOOL, 16);
            output.writeBool(this.autoExecute);
            output.writeFieldEnd();
        }
        if (this.jiraPeriod != null) {
            output.writeFieldBegin("jiraPeriod", thrift.Thrift.Type.STRING, 17);
            output.writeString(this.jiraPeriod);
            output.writeFieldEnd();
        }
        if (this.comment != null) {
            output.writeFieldBegin("comment", thrift.Thrift.Type.STRING, 18);
            output.writeString(this.comment);
            output.writeFieldEnd();
        }
        if (this.allowRepeatDecision != null) {
            output.writeFieldBegin("allowRepeatDecision", thrift.Thrift.Type.BOOL, 19);
            output.writeBool(this.allowRepeatDecision);
            output.writeFieldEnd();
        }
        if (this.attachmentAction != null) {
            output.writeFieldBegin("attachmentAction", thrift.Thrift.Type.I32, 20);
            output.writeI32(this.attachmentAction);
            output.writeFieldEnd();
        }
        if (this.orderLink != null) {
            output.writeFieldBegin("orderLink", thrift.Thrift.Type.I32, 21);
            output.writeI32(this.orderLink);
            output.writeFieldEnd();
        }
        if (this.preFunctionId != null) {
            output.writeFieldBegin("preFunctionId", thrift.Thrift.Type.STRUCT, 22);
            this.preFunctionId.write(output);
            output.writeFieldEnd();
        }
        if (this.closeWindowType != null) {
            output.writeFieldBegin("closeWindowType", thrift.Thrift.Type.I32, 23);
            output.writeI32(this.closeWindowType);
            output.writeFieldEnd();
        }
        if (this.updateWindowInterval != null) {
            output.writeFieldBegin("updateWindowInterval", thrift.Thrift.Type.I32, 24);
            output.writeI32(this.updateWindowInterval);
            output.writeFieldEnd();
        }
        if (this.attachmentForceConver != null) {
            output.writeFieldBegin("attachmentForceConver", thrift.Thrift.Type.BOOL, 25);
            output.writeBool(this.attachmentForceConver);
            output.writeFieldEnd();
        }
        if (this.contentHolder != null) {
            output.writeFieldBegin("contentHolder", thrift.Thrift.Type.STRUCT, 26);
            this.contentHolder.write(output);
            output.writeFieldEnd();
        }
        if (this.attachmentRequirement != null) {
            output.writeFieldBegin("attachmentRequirement", thrift.Thrift.Type.I32, 27);
            output.writeI32(this.attachmentRequirement);
            output.writeFieldEnd();
        }
        if (this.handBook != null) {
            output.writeFieldBegin("handBook", thrift.Thrift.Type.STRUCT, 28);
            this.handBook.write(output);
            output.writeFieldEnd();
        }
        if (this.hbColumnId != null) {
            output.writeFieldBegin("hbColumnId", thrift.Thrift.Type.STRING, 29);
            output.writeString(this.hbColumnId);
            output.writeFieldEnd();
        }
        if (this.hbResolution != null) {
            output.writeFieldBegin("hbResolution", thrift.Thrift.Type.BOOL, 30);
            output.writeBool(this.hbResolution);
            output.writeFieldEnd();
        }
        if (this.nameDocPatStageLinkLoc != null) {
            output.writeFieldBegin("nameDocPatStageLinkLoc", thrift.Thrift.Type.MAP, 31);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.nameDocPatStageLinkLoc.size);
            this.nameDocPatStageLinkLoc.forEach((value_2: string, key_1: string): void => {
                output.writeString(key_1);
                output.writeString(value_2);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.descriptionDocPatStageLinkLoc != null) {
            output.writeFieldBegin("descriptionDocPatStageLinkLoc", thrift.Thrift.Type.MAP, 32);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.descriptionDocPatStageLinkLoc.size);
            this.descriptionDocPatStageLinkLoc.forEach((value_3: string, key_2: string): void => {
                output.writeString(key_2);
                output.writeString(value_3);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.fastDecision != null) {
            output.writeFieldBegin("fastDecision", thrift.Thrift.Type.BOOL, 33);
            output.writeBool(this.fastDecision);
            output.writeFieldEnd();
        }
        if (this.requiredDocAttachment != null) {
            output.writeFieldBegin("requiredDocAttachment", thrift.Thrift.Type.BOOL, 34);
            output.writeBool(this.requiredDocAttachment);
            output.writeFieldEnd();
        }
        if (this.requiredSignAttachment != null) {
            output.writeFieldBegin("requiredSignAttachment", thrift.Thrift.Type.I32, 35);
            output.writeI32(this.requiredSignAttachment);
            output.writeFieldEnd();
        }
        if (this.availableAction != null) {
            output.writeFieldBegin("availableAction", thrift.Thrift.Type.STRUCT, 36);
            this.availableAction.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): DocumentPatternStagesLink {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.id = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.parentStageId = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.childStageId = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_7: string = input.readString();
                        _args.nameDocPatStageLink = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_8: string = input.readString();
                        _args.descriptionDocPatStageLink = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_9: string = input.readString();
                        _args.decision = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_10: string = input.readString();
                        _args.graphicalParams = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_11: ExecutionType.ExecutionType = input.readI32();
                        _args.execType = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_12: number = input.readI32();
                        _args.movePriority = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_13: Array<core.UserOrGroup> = new Array<core.UserOrGroup>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_14: core.UserOrGroup = core.UserOrGroup.read(input);
                            value_13.push(value_14);
                        }
                        input.readListEnd();
                        _args.informUsers = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_15: AccessRule.AccessRule = AccessRule.AccessRule.read(input);
                        _args.accessRule = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_16: boolean = input.readBool();
                        _args.allowForCurUser = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_17: boolean = input.readBool();
                        _args.useByDefault = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_18: core.DocPatternStageRequirement = input.readI32();
                        _args.resolution = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_19: core.DocPatternStageRequirement = input.readI32();
                        _args.signature = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_20: boolean = input.readBool();
                        _args.autoExecute = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 17:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_21: string = input.readString();
                        _args.jiraPeriod = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 18:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_22: string = input.readString();
                        _args.comment = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 19:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_23: boolean = input.readBool();
                        _args.allowRepeatDecision = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 20:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_24: AttachmentAction.AttachmentAction = input.readI32();
                        _args.attachmentAction = value_24;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 21:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_25: number = input.readI32();
                        _args.orderLink = value_25;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 22:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_26: core.CompositeId = core.CompositeId.read(input);
                        _args.preFunctionId = value_26;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 23:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_27: CloseWindowType.CloseWindowType = input.readI32();
                        _args.closeWindowType = value_27;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 24:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_28: number = input.readI32();
                        _args.updateWindowInterval = value_28;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 25:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_29: boolean = input.readBool();
                        _args.attachmentForceConver = value_29;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 26:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_30: ContentHolder.ContentHolder = ContentHolder.ContentHolder.read(input);
                        _args.contentHolder = value_30;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 27:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_31: core.DocPatternStageRequirement = input.readI32();
                        _args.attachmentRequirement = value_31;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 28:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_32: core.HandBook = core.HandBook.read(input);
                        _args.handBook = value_32;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 29:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_33: string = input.readString();
                        _args.hbColumnId = value_33;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 30:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_34: boolean = input.readBool();
                        _args.hbResolution = value_34;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 31:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_35: Map<string, string> = new Map<string, string>();
                        const metadata_2: thrift.TMap = input.readMapBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const key_3: string = input.readString();
                            const value_36: string = input.readString();
                            value_35.set(key_3, value_36);
                        }
                        input.readMapEnd();
                        _args.nameDocPatStageLinkLoc = value_35;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 32:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_37: Map<string, string> = new Map<string, string>();
                        const metadata_3: thrift.TMap = input.readMapBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const key_4: string = input.readString();
                            const value_38: string = input.readString();
                            value_37.set(key_4, value_38);
                        }
                        input.readMapEnd();
                        _args.descriptionDocPatStageLinkLoc = value_37;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 33:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_39: boolean = input.readBool();
                        _args.fastDecision = value_39;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 34:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_40: boolean = input.readBool();
                        _args.requiredDocAttachment = value_40;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 35:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_41: core.DocPatternStageRequirement = input.readI32();
                        _args.requiredSignAttachment = value_41;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 36:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_42: AvailableAction.AvailableAction = AvailableAction.AvailableAction.read(input);
                        _args.availableAction = value_42;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new DocumentPatternStagesLink(_args);
    }
}

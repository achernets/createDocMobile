/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 from "node-int64";
import * as thrift from "thrift";
import * as core from "./";
import * as KnowledgeHistoryParam from "./KnowledgeHistoryParam";
export interface IKnowledgeHistoryArgs {
    id?: string;
    createDate?: number | Int64;
    authorOriginal?: core.UserOrGroup;
    author?: core.UserOrGroup;
    historyKey?: string;
    historyParamList?: Array<KnowledgeHistoryParam.KnowledgeHistoryParam>;
}
export class KnowledgeHistory {
    public id?: string;
    public createDate?: Int64;
    public authorOriginal?: core.UserOrGroup;
    public author?: core.UserOrGroup;
    public historyKey?: string;
    public historyParamList?: Array<KnowledgeHistoryParam.KnowledgeHistoryParam>;
    constructor(args?: IKnowledgeHistoryArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.createDate != null) {
            if (typeof args.createDate === "number") {
                this.createDate = new Int64(args.createDate);
            }
            else {
                this.createDate = args.createDate;
            }
        }
        if (args != null && args.authorOriginal != null) {
            this.authorOriginal = args.authorOriginal;
        }
        if (args != null && args.author != null) {
            this.author = args.author;
        }
        if (args != null && args.historyKey != null) {
            this.historyKey = args.historyKey;
        }
        if (args != null && args.historyParamList != null) {
            this.historyParamList = args.historyParamList;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("KnowledgeHistory");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.createDate != null) {
            output.writeFieldBegin("createDate", thrift.Thrift.Type.I64, 2);
            output.writeI64(this.createDate);
            output.writeFieldEnd();
        }
        if (this.authorOriginal != null) {
            output.writeFieldBegin("authorOriginal", thrift.Thrift.Type.STRUCT, 3);
            this.authorOriginal.write(output);
            output.writeFieldEnd();
        }
        if (this.author != null) {
            output.writeFieldBegin("author", thrift.Thrift.Type.STRUCT, 4);
            this.author.write(output);
            output.writeFieldEnd();
        }
        if (this.historyKey != null) {
            output.writeFieldBegin("historyKey", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.historyKey);
            output.writeFieldEnd();
        }
        if (this.historyParamList != null) {
            output.writeFieldBegin("historyParamList", thrift.Thrift.Type.LIST, 6);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.historyParamList.length);
            this.historyParamList.forEach((value_1: KnowledgeHistoryParam.KnowledgeHistoryParam): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): KnowledgeHistory {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.id = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_3: Int64 = input.readI64();
                        _args.createDate = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_4: core.UserOrGroup = core.UserOrGroup.read(input);
                        _args.authorOriginal = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_5: core.UserOrGroup = core.UserOrGroup.read(input);
                        _args.author = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.historyKey = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_7: Array<KnowledgeHistoryParam.KnowledgeHistoryParam> = new Array<KnowledgeHistoryParam.KnowledgeHistoryParam>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_8: KnowledgeHistoryParam.KnowledgeHistoryParam = KnowledgeHistoryParam.KnowledgeHistoryParam.read(input);
                            value_7.push(value_8);
                        }
                        input.readListEnd();
                        _args.historyParamList = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new KnowledgeHistory(_args);
    }
}

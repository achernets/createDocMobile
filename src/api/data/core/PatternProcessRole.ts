/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as PatternProcessRoleExec from "./PatternProcessRoleExec";
export interface IPatternProcessRoleArgs {
    id?: string;
    key?: string;
    oName?: string;
    fixed?: boolean;
    single?: boolean;
    roleExecList?: Array<PatternProcessRoleExec.PatternProcessRoleExec>;
    oNameLoc?: Map<string, string>;
    canRemove?: boolean;
}
export class PatternProcessRole {
    public id?: string;
    public key?: string;
    public oName?: string;
    public fixed?: boolean;
    public single?: boolean;
    public roleExecList?: Array<PatternProcessRoleExec.PatternProcessRoleExec>;
    public oNameLoc?: Map<string, string>;
    public canRemove?: boolean;
    constructor(args?: IPatternProcessRoleArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.key != null) {
            this.key = args.key;
        }
        if (args != null && args.oName != null) {
            this.oName = args.oName;
        }
        if (args != null && args.fixed != null) {
            this.fixed = args.fixed;
        }
        if (args != null && args.single != null) {
            this.single = args.single;
        }
        if (args != null && args.roleExecList != null) {
            this.roleExecList = args.roleExecList;
        }
        if (args != null && args.oNameLoc != null) {
            this.oNameLoc = args.oNameLoc;
        }
        if (args != null && args.canRemove != null) {
            this.canRemove = args.canRemove;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("PatternProcessRole");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.key != null) {
            output.writeFieldBegin("key", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.key);
            output.writeFieldEnd();
        }
        if (this.oName != null) {
            output.writeFieldBegin("oName", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.oName);
            output.writeFieldEnd();
        }
        if (this.fixed != null) {
            output.writeFieldBegin("fixed", thrift.Thrift.Type.BOOL, 4);
            output.writeBool(this.fixed);
            output.writeFieldEnd();
        }
        if (this.single != null) {
            output.writeFieldBegin("single", thrift.Thrift.Type.BOOL, 5);
            output.writeBool(this.single);
            output.writeFieldEnd();
        }
        if (this.roleExecList != null) {
            output.writeFieldBegin("roleExecList", thrift.Thrift.Type.LIST, 6);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.roleExecList.length);
            this.roleExecList.forEach((value_1: PatternProcessRoleExec.PatternProcessRoleExec): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.oNameLoc != null) {
            output.writeFieldBegin("oNameLoc", thrift.Thrift.Type.MAP, 7);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.oNameLoc.size);
            this.oNameLoc.forEach((value_2: string, key_1: string): void => {
                output.writeString(key_1);
                output.writeString(value_2);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.canRemove != null) {
            output.writeFieldBegin("canRemove", thrift.Thrift.Type.BOOL, 8);
            output.writeBool(this.canRemove);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): PatternProcessRole {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.id = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.key = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.oName = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_6: boolean = input.readBool();
                        _args.fixed = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_7: boolean = input.readBool();
                        _args.single = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_8: Array<PatternProcessRoleExec.PatternProcessRoleExec> = new Array<PatternProcessRoleExec.PatternProcessRoleExec>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_9: PatternProcessRoleExec.PatternProcessRoleExec = PatternProcessRoleExec.PatternProcessRoleExec.read(input);
                            value_8.push(value_9);
                        }
                        input.readListEnd();
                        _args.roleExecList = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_10: Map<string, string> = new Map<string, string>();
                        const metadata_2: thrift.TMap = input.readMapBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const key_2: string = input.readString();
                            const value_11: string = input.readString();
                            value_10.set(key_2, value_11);
                        }
                        input.readMapEnd();
                        _args.oNameLoc = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_12: boolean = input.readBool();
                        _args.canRemove = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new PatternProcessRole(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 from "node-int64";
import * as thrift from "thrift";
import * as ObserverDocStatus from "./ObserverDocStatus";
import * as ObserverCard from "./ObserverCard";
export interface IObserverDocumentArgs {
    id?: string;
    docStatus?: ObserverDocStatus.ObserverDocStatus;
    regNumber?: string;
    regDate?: number | Int64;
    docType?: string;
    docName?: string;
    executors?: string;
    missionCount?: number;
    systemNumber?: string;
    createDate?: number | Int64;
    cards?: Array<ObserverCard.ObserverCard>;
}
export class ObserverDocument {
    public id?: string;
    public docStatus?: ObserverDocStatus.ObserverDocStatus;
    public regNumber?: string;
    public regDate?: Int64;
    public docType?: string;
    public docName?: string;
    public executors?: string;
    public missionCount?: number;
    public systemNumber?: string;
    public createDate?: Int64;
    public cards?: Array<ObserverCard.ObserverCard>;
    constructor(args?: IObserverDocumentArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.docStatus != null) {
            this.docStatus = args.docStatus;
        }
        if (args != null && args.regNumber != null) {
            this.regNumber = args.regNumber;
        }
        if (args != null && args.regDate != null) {
            if (typeof args.regDate === "number") {
                this.regDate = new Int64(args.regDate);
            }
            else {
                this.regDate = args.regDate;
            }
        }
        if (args != null && args.docType != null) {
            this.docType = args.docType;
        }
        if (args != null && args.docName != null) {
            this.docName = args.docName;
        }
        if (args != null && args.executors != null) {
            this.executors = args.executors;
        }
        if (args != null && args.missionCount != null) {
            this.missionCount = args.missionCount;
        }
        if (args != null && args.systemNumber != null) {
            this.systemNumber = args.systemNumber;
        }
        if (args != null && args.createDate != null) {
            if (typeof args.createDate === "number") {
                this.createDate = new Int64(args.createDate);
            }
            else {
                this.createDate = args.createDate;
            }
        }
        if (args != null && args.cards != null) {
            this.cards = args.cards;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ObserverDocument");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.docStatus != null) {
            output.writeFieldBegin("docStatus", thrift.Thrift.Type.I32, 2);
            output.writeI32(this.docStatus);
            output.writeFieldEnd();
        }
        if (this.regNumber != null) {
            output.writeFieldBegin("regNumber", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.regNumber);
            output.writeFieldEnd();
        }
        if (this.regDate != null) {
            output.writeFieldBegin("regDate", thrift.Thrift.Type.I64, 4);
            output.writeI64(this.regDate);
            output.writeFieldEnd();
        }
        if (this.docType != null) {
            output.writeFieldBegin("docType", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.docType);
            output.writeFieldEnd();
        }
        if (this.docName != null) {
            output.writeFieldBegin("docName", thrift.Thrift.Type.STRING, 6);
            output.writeString(this.docName);
            output.writeFieldEnd();
        }
        if (this.executors != null) {
            output.writeFieldBegin("executors", thrift.Thrift.Type.STRING, 7);
            output.writeString(this.executors);
            output.writeFieldEnd();
        }
        if (this.missionCount != null) {
            output.writeFieldBegin("missionCount", thrift.Thrift.Type.I32, 8);
            output.writeI32(this.missionCount);
            output.writeFieldEnd();
        }
        if (this.systemNumber != null) {
            output.writeFieldBegin("systemNumber", thrift.Thrift.Type.STRING, 9);
            output.writeString(this.systemNumber);
            output.writeFieldEnd();
        }
        if (this.createDate != null) {
            output.writeFieldBegin("createDate", thrift.Thrift.Type.I64, 10);
            output.writeI64(this.createDate);
            output.writeFieldEnd();
        }
        if (this.cards != null) {
            output.writeFieldBegin("cards", thrift.Thrift.Type.LIST, 11);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.cards.length);
            this.cards.forEach((value_1: ObserverCard.ObserverCard): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ObserverDocument {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.id = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_3: ObserverDocStatus.ObserverDocStatus = input.readI32();
                        _args.docStatus = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.regNumber = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_5: Int64 = input.readI64();
                        _args.regDate = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.docType = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_7: string = input.readString();
                        _args.docName = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_8: string = input.readString();
                        _args.executors = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_9: number = input.readI32();
                        _args.missionCount = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_10: string = input.readString();
                        _args.systemNumber = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_11: Int64 = input.readI64();
                        _args.createDate = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_12: Array<ObserverCard.ObserverCard> = new Array<ObserverCard.ObserverCard>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_13: ObserverCard.ObserverCard = ObserverCard.ObserverCard.read(input);
                            value_12.push(value_13);
                        }
                        input.readListEnd();
                        _args.cards = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ObserverDocument(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as AnaliticsAvailableTile from "./AnaliticsAvailableTile";
export interface IAnaliticsDashboardTileArgs {
    preparedAvailableTile?: AnaliticsAvailableTile.AnaliticsAvailableTile;
    x?: number;
    y?: number;
    w?: number;
    h?: number;
}
export class AnaliticsDashboardTile {
    public preparedAvailableTile?: AnaliticsAvailableTile.AnaliticsAvailableTile;
    public x?: number;
    public y?: number;
    public w?: number;
    public h?: number;
    constructor(args?: IAnaliticsDashboardTileArgs) {
        if (args != null && args.preparedAvailableTile != null) {
            this.preparedAvailableTile = args.preparedAvailableTile;
        }
        if (args != null && args.x != null) {
            this.x = args.x;
        }
        if (args != null && args.y != null) {
            this.y = args.y;
        }
        if (args != null && args.w != null) {
            this.w = args.w;
        }
        if (args != null && args.h != null) {
            this.h = args.h;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("AnaliticsDashboardTile");
        if (this.preparedAvailableTile != null) {
            output.writeFieldBegin("preparedAvailableTile", thrift.Thrift.Type.STRUCT, 1);
            this.preparedAvailableTile.write(output);
            output.writeFieldEnd();
        }
        if (this.x != null) {
            output.writeFieldBegin("x", thrift.Thrift.Type.I32, 2);
            output.writeI32(this.x);
            output.writeFieldEnd();
        }
        if (this.y != null) {
            output.writeFieldBegin("y", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.y);
            output.writeFieldEnd();
        }
        if (this.w != null) {
            output.writeFieldBegin("w", thrift.Thrift.Type.I32, 4);
            output.writeI32(this.w);
            output.writeFieldEnd();
        }
        if (this.h != null) {
            output.writeFieldBegin("h", thrift.Thrift.Type.I32, 5);
            output.writeI32(this.h);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): AnaliticsDashboardTile {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_1: AnaliticsAvailableTile.AnaliticsAvailableTile = AnaliticsAvailableTile.AnaliticsAvailableTile.read(input);
                        _args.preparedAvailableTile = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_2: number = input.readI32();
                        _args.x = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_3: number = input.readI32();
                        _args.y = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_4: number = input.readI32();
                        _args.w = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_5: number = input.readI32();
                        _args.h = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new AnaliticsDashboardTile(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as SubStatusGroup from "./SubStatusGroup";
import * as DocPatternStageSubStatus from "./DocPatternStageSubStatus";
import * as DocPatternStageStatus from "./DocPatternStageStatus";
export interface IAvailableSubStatusArgs {
    sgroup?: SubStatusGroup.SubStatusGroup;
    subStatus?: DocPatternStageSubStatus.DocPatternStageSubStatus;
    stageStatuses?: Set<DocPatternStageStatus.DocPatternStageStatus>;
    canAdd?: boolean;
    canRemove?: boolean;
}
export class AvailableSubStatus {
    public sgroup?: SubStatusGroup.SubStatusGroup;
    public subStatus?: DocPatternStageSubStatus.DocPatternStageSubStatus;
    public stageStatuses?: Set<DocPatternStageStatus.DocPatternStageStatus>;
    public canAdd?: boolean;
    public canRemove?: boolean;
    constructor(args?: IAvailableSubStatusArgs) {
        if (args != null && args.sgroup != null) {
            this.sgroup = args.sgroup;
        }
        if (args != null && args.subStatus != null) {
            this.subStatus = args.subStatus;
        }
        if (args != null && args.stageStatuses != null) {
            this.stageStatuses = args.stageStatuses;
        }
        if (args != null && args.canAdd != null) {
            this.canAdd = args.canAdd;
        }
        if (args != null && args.canRemove != null) {
            this.canRemove = args.canRemove;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("AvailableSubStatus");
        if (this.sgroup != null) {
            output.writeFieldBegin("sgroup", thrift.Thrift.Type.I32, 1);
            output.writeI32(this.sgroup);
            output.writeFieldEnd();
        }
        if (this.subStatus != null) {
            output.writeFieldBegin("subStatus", thrift.Thrift.Type.I32, 2);
            output.writeI32(this.subStatus);
            output.writeFieldEnd();
        }
        if (this.stageStatuses != null) {
            output.writeFieldBegin("stageStatuses", thrift.Thrift.Type.SET, 3);
            output.writeSetBegin(thrift.Thrift.Type.I32, this.stageStatuses.size);
            this.stageStatuses.forEach((value_1: DocPatternStageStatus.DocPatternStageStatus): void => {
                output.writeI32(value_1);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        if (this.canAdd != null) {
            output.writeFieldBegin("canAdd", thrift.Thrift.Type.BOOL, 4);
            output.writeBool(this.canAdd);
            output.writeFieldEnd();
        }
        if (this.canRemove != null) {
            output.writeFieldBegin("canRemove", thrift.Thrift.Type.BOOL, 5);
            output.writeBool(this.canRemove);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): AvailableSubStatus {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_2: SubStatusGroup.SubStatusGroup = input.readI32();
                        _args.sgroup = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_3: DocPatternStageSubStatus.DocPatternStageSubStatus = input.readI32();
                        _args.subStatus = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_4: Set<DocPatternStageStatus.DocPatternStageStatus> = new Set<DocPatternStageStatus.DocPatternStageStatus>();
                        const metadata_1: thrift.TSet = input.readSetBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_5: DocPatternStageStatus.DocPatternStageStatus = input.readI32();
                            value_4.add(value_5);
                        }
                        input.readSetEnd();
                        _args.stageStatuses = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_6: boolean = input.readBool();
                        _args.canAdd = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_7: boolean = input.readBool();
                        _args.canRemove = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new AvailableSubStatus(_args);
    }
}

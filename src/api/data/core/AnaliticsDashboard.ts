/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as AnaliticsDashboardTile from "./AnaliticsDashboardTile";
import * as core from "./";
export interface IAnaliticsDashboardArgs {
    id?: string;
    useByDefault?: boolean;
    orderNum?: number;
    analiticsDashboardTileList?: Array<AnaliticsDashboardTile.AnaliticsDashboardTile>;
    allowList?: Array<core.UserOrGroup>;
    denyList?: Array<core.UserOrGroup>;
    name?: string;
    nameLoc?: Map<string, string>;
    allowRoleList?: Set<string>;
}
export class AnaliticsDashboard {
    public id?: string;
    public useByDefault?: boolean;
    public orderNum?: number;
    public analiticsDashboardTileList?: Array<AnaliticsDashboardTile.AnaliticsDashboardTile>;
    public allowList?: Array<core.UserOrGroup>;
    public denyList?: Array<core.UserOrGroup>;
    public name?: string;
    public nameLoc?: Map<string, string>;
    public allowRoleList?: Set<string>;
    constructor(args?: IAnaliticsDashboardArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.useByDefault != null) {
            this.useByDefault = args.useByDefault;
        }
        if (args != null && args.orderNum != null) {
            this.orderNum = args.orderNum;
        }
        if (args != null && args.analiticsDashboardTileList != null) {
            this.analiticsDashboardTileList = args.analiticsDashboardTileList;
        }
        if (args != null && args.allowList != null) {
            this.allowList = args.allowList;
        }
        if (args != null && args.denyList != null) {
            this.denyList = args.denyList;
        }
        if (args != null && args.name != null) {
            this.name = args.name;
        }
        if (args != null && args.nameLoc != null) {
            this.nameLoc = args.nameLoc;
        }
        if (args != null && args.allowRoleList != null) {
            this.allowRoleList = args.allowRoleList;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("AnaliticsDashboard");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.useByDefault != null) {
            output.writeFieldBegin("useByDefault", thrift.Thrift.Type.BOOL, 2);
            output.writeBool(this.useByDefault);
            output.writeFieldEnd();
        }
        if (this.orderNum != null) {
            output.writeFieldBegin("orderNum", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.orderNum);
            output.writeFieldEnd();
        }
        if (this.analiticsDashboardTileList != null) {
            output.writeFieldBegin("analiticsDashboardTileList", thrift.Thrift.Type.LIST, 4);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.analiticsDashboardTileList.length);
            this.analiticsDashboardTileList.forEach((value_1: AnaliticsDashboardTile.AnaliticsDashboardTile): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.allowList != null) {
            output.writeFieldBegin("allowList", thrift.Thrift.Type.LIST, 5);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.allowList.length);
            this.allowList.forEach((value_2: core.UserOrGroup): void => {
                value_2.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.denyList != null) {
            output.writeFieldBegin("denyList", thrift.Thrift.Type.LIST, 6);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.denyList.length);
            this.denyList.forEach((value_3: core.UserOrGroup): void => {
                value_3.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.name != null) {
            output.writeFieldBegin("name", thrift.Thrift.Type.STRING, 7);
            output.writeString(this.name);
            output.writeFieldEnd();
        }
        if (this.nameLoc != null) {
            output.writeFieldBegin("nameLoc", thrift.Thrift.Type.MAP, 8);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.nameLoc.size);
            this.nameLoc.forEach((value_4: string, key_1: string): void => {
                output.writeString(key_1);
                output.writeString(value_4);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.allowRoleList != null) {
            output.writeFieldBegin("allowRoleList", thrift.Thrift.Type.SET, 9);
            output.writeSetBegin(thrift.Thrift.Type.STRING, this.allowRoleList.size);
            this.allowRoleList.forEach((value_5: string): void => {
                output.writeString(value_5);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): AnaliticsDashboard {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.id = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_7: boolean = input.readBool();
                        _args.useByDefault = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_8: number = input.readI32();
                        _args.orderNum = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_9: Array<AnaliticsDashboardTile.AnaliticsDashboardTile> = new Array<AnaliticsDashboardTile.AnaliticsDashboardTile>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_10: AnaliticsDashboardTile.AnaliticsDashboardTile = AnaliticsDashboardTile.AnaliticsDashboardTile.read(input);
                            value_9.push(value_10);
                        }
                        input.readListEnd();
                        _args.analiticsDashboardTileList = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_11: Array<core.UserOrGroup> = new Array<core.UserOrGroup>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_12: core.UserOrGroup = core.UserOrGroup.read(input);
                            value_11.push(value_12);
                        }
                        input.readListEnd();
                        _args.allowList = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_13: Array<core.UserOrGroup> = new Array<core.UserOrGroup>();
                        const metadata_3: thrift.TList = input.readListBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_14: core.UserOrGroup = core.UserOrGroup.read(input);
                            value_13.push(value_14);
                        }
                        input.readListEnd();
                        _args.denyList = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_15: string = input.readString();
                        _args.name = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_16: Map<string, string> = new Map<string, string>();
                        const metadata_4: thrift.TMap = input.readMapBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const key_2: string = input.readString();
                            const value_17: string = input.readString();
                            value_16.set(key_2, value_17);
                        }
                        input.readMapEnd();
                        _args.nameLoc = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_18: Set<string> = new Set<string>();
                        const metadata_5: thrift.TSet = input.readSetBegin();
                        const size_5: number = metadata_5.size;
                        for (let i_5: number = 0; i_5 < size_5; i_5++) {
                            const value_19: string = input.readString();
                            value_18.add(value_19);
                        }
                        input.readSetEnd();
                        _args.allowRoleList = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new AnaliticsDashboard(_args);
    }
}

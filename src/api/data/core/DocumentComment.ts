/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 from "node-int64";
import * as thrift from "thrift";
import * as core from "./";
import * as CommentType from "./CommentType";
export interface IDocumentCommentArgs {
    id?: string;
    creatorId?: string;
    creator?: core.UserOrGroup;
    createDate?: number | Int64;
    comment?: string;
    documentId?: string;
    executionId?: string;
    theNewCommentId?: string;
    oldCommentId?: string;
    parentId?: string;
    docSubStatusHistId?: string;
    commentType?: CommentType.CommentType;
    rootCreateDate?: number | Int64;
    rootCreatorId?: string;
    rootCreator?: core.UserOrGroup;
    originalUser?: core.UserOrGroup;
}
export class DocumentComment {
    public id?: string;
    public creatorId?: string;
    public creator?: core.UserOrGroup;
    public createDate?: Int64;
    public comment?: string;
    public documentId?: string;
    public executionId?: string;
    public theNewCommentId?: string;
    public oldCommentId?: string;
    public parentId?: string;
    public docSubStatusHistId?: string;
    public commentType?: CommentType.CommentType;
    public rootCreateDate?: Int64;
    public rootCreatorId?: string;
    public rootCreator?: core.UserOrGroup;
    public originalUser?: core.UserOrGroup;
    constructor(args?: IDocumentCommentArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.creatorId != null) {
            this.creatorId = args.creatorId;
        }
        if (args != null && args.creator != null) {
            this.creator = args.creator;
        }
        if (args != null && args.createDate != null) {
            if (typeof args.createDate === "number") {
                this.createDate = new Int64(args.createDate);
            }
            else {
                this.createDate = args.createDate;
            }
        }
        if (args != null && args.comment != null) {
            this.comment = args.comment;
        }
        if (args != null && args.documentId != null) {
            this.documentId = args.documentId;
        }
        if (args != null && args.executionId != null) {
            this.executionId = args.executionId;
        }
        if (args != null && args.theNewCommentId != null) {
            this.theNewCommentId = args.theNewCommentId;
        }
        if (args != null && args.oldCommentId != null) {
            this.oldCommentId = args.oldCommentId;
        }
        if (args != null && args.parentId != null) {
            this.parentId = args.parentId;
        }
        if (args != null && args.docSubStatusHistId != null) {
            this.docSubStatusHistId = args.docSubStatusHistId;
        }
        if (args != null && args.commentType != null) {
            this.commentType = args.commentType;
        }
        if (args != null && args.rootCreateDate != null) {
            if (typeof args.rootCreateDate === "number") {
                this.rootCreateDate = new Int64(args.rootCreateDate);
            }
            else {
                this.rootCreateDate = args.rootCreateDate;
            }
        }
        if (args != null && args.rootCreatorId != null) {
            this.rootCreatorId = args.rootCreatorId;
        }
        if (args != null && args.rootCreator != null) {
            this.rootCreator = args.rootCreator;
        }
        if (args != null && args.originalUser != null) {
            this.originalUser = args.originalUser;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("DocumentComment");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.creatorId != null) {
            output.writeFieldBegin("creatorId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.creatorId);
            output.writeFieldEnd();
        }
        if (this.creator != null) {
            output.writeFieldBegin("creator", thrift.Thrift.Type.STRUCT, 3);
            this.creator.write(output);
            output.writeFieldEnd();
        }
        if (this.createDate != null) {
            output.writeFieldBegin("createDate", thrift.Thrift.Type.I64, 4);
            output.writeI64(this.createDate);
            output.writeFieldEnd();
        }
        if (this.comment != null) {
            output.writeFieldBegin("comment", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.comment);
            output.writeFieldEnd();
        }
        if (this.documentId != null) {
            output.writeFieldBegin("documentId", thrift.Thrift.Type.STRING, 6);
            output.writeString(this.documentId);
            output.writeFieldEnd();
        }
        if (this.executionId != null) {
            output.writeFieldBegin("executionId", thrift.Thrift.Type.STRING, 7);
            output.writeString(this.executionId);
            output.writeFieldEnd();
        }
        if (this.theNewCommentId != null) {
            output.writeFieldBegin("theNewCommentId", thrift.Thrift.Type.STRING, 8);
            output.writeString(this.theNewCommentId);
            output.writeFieldEnd();
        }
        if (this.oldCommentId != null) {
            output.writeFieldBegin("oldCommentId", thrift.Thrift.Type.STRING, 9);
            output.writeString(this.oldCommentId);
            output.writeFieldEnd();
        }
        if (this.parentId != null) {
            output.writeFieldBegin("parentId", thrift.Thrift.Type.STRING, 10);
            output.writeString(this.parentId);
            output.writeFieldEnd();
        }
        if (this.docSubStatusHistId != null) {
            output.writeFieldBegin("docSubStatusHistId", thrift.Thrift.Type.STRING, 11);
            output.writeString(this.docSubStatusHistId);
            output.writeFieldEnd();
        }
        if (this.commentType != null) {
            output.writeFieldBegin("commentType", thrift.Thrift.Type.I32, 12);
            output.writeI32(this.commentType);
            output.writeFieldEnd();
        }
        if (this.rootCreateDate != null) {
            output.writeFieldBegin("rootCreateDate", thrift.Thrift.Type.I64, 13);
            output.writeI64(this.rootCreateDate);
            output.writeFieldEnd();
        }
        if (this.rootCreatorId != null) {
            output.writeFieldBegin("rootCreatorId", thrift.Thrift.Type.STRING, 14);
            output.writeString(this.rootCreatorId);
            output.writeFieldEnd();
        }
        if (this.rootCreator != null) {
            output.writeFieldBegin("rootCreator", thrift.Thrift.Type.STRUCT, 15);
            this.rootCreator.write(output);
            output.writeFieldEnd();
        }
        if (this.originalUser != null) {
            output.writeFieldBegin("originalUser", thrift.Thrift.Type.STRUCT, 16);
            this.originalUser.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): DocumentComment {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.id = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.creatorId = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_3: core.UserOrGroup = core.UserOrGroup.read(input);
                        _args.creator = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_4: Int64 = input.readI64();
                        _args.createDate = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.comment = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.documentId = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_7: string = input.readString();
                        _args.executionId = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_8: string = input.readString();
                        _args.theNewCommentId = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_9: string = input.readString();
                        _args.oldCommentId = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_10: string = input.readString();
                        _args.parentId = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_11: string = input.readString();
                        _args.docSubStatusHistId = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_12: CommentType.CommentType = input.readI32();
                        _args.commentType = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_13: Int64 = input.readI64();
                        _args.rootCreateDate = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_14: string = input.readString();
                        _args.rootCreatorId = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_15: core.UserOrGroup = core.UserOrGroup.read(input);
                        _args.rootCreator = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_16: core.UserOrGroup = core.UserOrGroup.read(input);
                        _args.originalUser = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new DocumentComment(_args);
    }
}

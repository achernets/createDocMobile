/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as CustomFilterItem from "./CustomFilterItem";
export interface IDocFilterArgs {
    id?: string;
    oName?: string;
    value?: string;
    key?: string;
    filters?: Array<CustomFilterItem.CustomFilterItem>;
    fieldsDeprecated?: string;
    positionMobile?: number;
    forMobile?: boolean;
    positionRegistry?: number;
    forRegistry?: boolean;
    positionDocument?: number;
    forDocument?: boolean;
    fixed?: boolean;
    visible?: boolean;
    sortingFieldInRegistry?: string;
    sortingDirection?: string;
    fDescription?: string;
    regId?: string;
    oNameLoc?: Map<string, string>;
}
export class DocFilter {
    public id?: string;
    public oName?: string;
    public value?: string;
    public key?: string;
    public filters?: Array<CustomFilterItem.CustomFilterItem>;
    public fieldsDeprecated?: string;
    public positionMobile?: number;
    public forMobile?: boolean;
    public positionRegistry?: number;
    public forRegistry?: boolean;
    public positionDocument?: number;
    public forDocument?: boolean;
    public fixed?: boolean;
    public visible?: boolean;
    public sortingFieldInRegistry?: string;
    public sortingDirection?: string;
    public fDescription?: string;
    public regId?: string;
    public oNameLoc?: Map<string, string>;
    constructor(args?: IDocFilterArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.oName != null) {
            this.oName = args.oName;
        }
        if (args != null && args.value != null) {
            this.value = args.value;
        }
        if (args != null && args.key != null) {
            this.key = args.key;
        }
        if (args != null && args.filters != null) {
            this.filters = args.filters;
        }
        if (args != null && args.fieldsDeprecated != null) {
            this.fieldsDeprecated = args.fieldsDeprecated;
        }
        if (args != null && args.positionMobile != null) {
            this.positionMobile = args.positionMobile;
        }
        if (args != null && args.forMobile != null) {
            this.forMobile = args.forMobile;
        }
        if (args != null && args.positionRegistry != null) {
            this.positionRegistry = args.positionRegistry;
        }
        if (args != null && args.forRegistry != null) {
            this.forRegistry = args.forRegistry;
        }
        if (args != null && args.positionDocument != null) {
            this.positionDocument = args.positionDocument;
        }
        if (args != null && args.forDocument != null) {
            this.forDocument = args.forDocument;
        }
        if (args != null && args.fixed != null) {
            this.fixed = args.fixed;
        }
        if (args != null && args.visible != null) {
            this.visible = args.visible;
        }
        if (args != null && args.sortingFieldInRegistry != null) {
            this.sortingFieldInRegistry = args.sortingFieldInRegistry;
        }
        if (args != null && args.sortingDirection != null) {
            this.sortingDirection = args.sortingDirection;
        }
        if (args != null && args.fDescription != null) {
            this.fDescription = args.fDescription;
        }
        if (args != null && args.regId != null) {
            this.regId = args.regId;
        }
        if (args != null && args.oNameLoc != null) {
            this.oNameLoc = args.oNameLoc;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("DocFilter");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.oName != null) {
            output.writeFieldBegin("oName", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.oName);
            output.writeFieldEnd();
        }
        if (this.value != null) {
            output.writeFieldBegin("value", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.value);
            output.writeFieldEnd();
        }
        if (this.key != null) {
            output.writeFieldBegin("key", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.key);
            output.writeFieldEnd();
        }
        if (this.filters != null) {
            output.writeFieldBegin("filters", thrift.Thrift.Type.LIST, 5);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.filters.length);
            this.filters.forEach((value_1: CustomFilterItem.CustomFilterItem): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.fieldsDeprecated != null) {
            output.writeFieldBegin("fieldsDeprecated", thrift.Thrift.Type.STRING, 6);
            output.writeString(this.fieldsDeprecated);
            output.writeFieldEnd();
        }
        if (this.positionMobile != null) {
            output.writeFieldBegin("positionMobile", thrift.Thrift.Type.I32, 7);
            output.writeI32(this.positionMobile);
            output.writeFieldEnd();
        }
        if (this.forMobile != null) {
            output.writeFieldBegin("forMobile", thrift.Thrift.Type.BOOL, 8);
            output.writeBool(this.forMobile);
            output.writeFieldEnd();
        }
        if (this.positionRegistry != null) {
            output.writeFieldBegin("positionRegistry", thrift.Thrift.Type.I32, 9);
            output.writeI32(this.positionRegistry);
            output.writeFieldEnd();
        }
        if (this.forRegistry != null) {
            output.writeFieldBegin("forRegistry", thrift.Thrift.Type.BOOL, 10);
            output.writeBool(this.forRegistry);
            output.writeFieldEnd();
        }
        if (this.positionDocument != null) {
            output.writeFieldBegin("positionDocument", thrift.Thrift.Type.I32, 11);
            output.writeI32(this.positionDocument);
            output.writeFieldEnd();
        }
        if (this.forDocument != null) {
            output.writeFieldBegin("forDocument", thrift.Thrift.Type.BOOL, 12);
            output.writeBool(this.forDocument);
            output.writeFieldEnd();
        }
        if (this.fixed != null) {
            output.writeFieldBegin("fixed", thrift.Thrift.Type.BOOL, 13);
            output.writeBool(this.fixed);
            output.writeFieldEnd();
        }
        if (this.visible != null) {
            output.writeFieldBegin("visible", thrift.Thrift.Type.BOOL, 14);
            output.writeBool(this.visible);
            output.writeFieldEnd();
        }
        if (this.sortingFieldInRegistry != null) {
            output.writeFieldBegin("sortingFieldInRegistry", thrift.Thrift.Type.STRING, 15);
            output.writeString(this.sortingFieldInRegistry);
            output.writeFieldEnd();
        }
        if (this.sortingDirection != null) {
            output.writeFieldBegin("sortingDirection", thrift.Thrift.Type.STRING, 16);
            output.writeString(this.sortingDirection);
            output.writeFieldEnd();
        }
        if (this.fDescription != null) {
            output.writeFieldBegin("fDescription", thrift.Thrift.Type.STRING, 17);
            output.writeString(this.fDescription);
            output.writeFieldEnd();
        }
        if (this.regId != null) {
            output.writeFieldBegin("regId", thrift.Thrift.Type.STRING, 18);
            output.writeString(this.regId);
            output.writeFieldEnd();
        }
        if (this.oNameLoc != null) {
            output.writeFieldBegin("oNameLoc", thrift.Thrift.Type.MAP, 19);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.oNameLoc.size);
            this.oNameLoc.forEach((value_2: string, key_1: string): void => {
                output.writeString(key_1);
                output.writeString(value_2);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): DocFilter {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.id = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.oName = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.value = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.key = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_7: Array<CustomFilterItem.CustomFilterItem> = new Array<CustomFilterItem.CustomFilterItem>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_8: CustomFilterItem.CustomFilterItem = CustomFilterItem.CustomFilterItem.read(input);
                            value_7.push(value_8);
                        }
                        input.readListEnd();
                        _args.filters = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_9: string = input.readString();
                        _args.fieldsDeprecated = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_10: number = input.readI32();
                        _args.positionMobile = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_11: boolean = input.readBool();
                        _args.forMobile = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_12: number = input.readI32();
                        _args.positionRegistry = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_13: boolean = input.readBool();
                        _args.forRegistry = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_14: number = input.readI32();
                        _args.positionDocument = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_15: boolean = input.readBool();
                        _args.forDocument = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_16: boolean = input.readBool();
                        _args.fixed = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_17: boolean = input.readBool();
                        _args.visible = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_18: string = input.readString();
                        _args.sortingFieldInRegistry = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_19: string = input.readString();
                        _args.sortingDirection = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 17:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_20: string = input.readString();
                        _args.fDescription = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 18:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_21: string = input.readString();
                        _args.regId = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 19:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_22: Map<string, string> = new Map<string, string>();
                        const metadata_2: thrift.TMap = input.readMapBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const key_2: string = input.readString();
                            const value_23: string = input.readString();
                            value_22.set(key_2, value_23);
                        }
                        input.readMapEnd();
                        _args.oNameLoc = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new DocFilter(_args);
    }
}

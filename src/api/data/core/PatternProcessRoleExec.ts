/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 from "node-int64";
import * as thrift from "thrift";
import * as core from "./";
export interface IPatternProcessRoleExecArgs {
    userOrGroup?: core.UserOrGroup;
    childUser?: core.UserOrGroup;
    comment?: string;
    commentDescription?: string;
    deadlineDate?: number | Int64;
}
export class PatternProcessRoleExec {
    public userOrGroup?: core.UserOrGroup;
    public childUser?: core.UserOrGroup;
    public comment?: string;
    public commentDescription?: string;
    public deadlineDate?: Int64;
    constructor(args?: IPatternProcessRoleExecArgs) {
        if (args != null && args.userOrGroup != null) {
            this.userOrGroup = args.userOrGroup;
        }
        if (args != null && args.childUser != null) {
            this.childUser = args.childUser;
        }
        if (args != null && args.comment != null) {
            this.comment = args.comment;
        }
        if (args != null && args.commentDescription != null) {
            this.commentDescription = args.commentDescription;
        }
        if (args != null && args.deadlineDate != null) {
            if (typeof args.deadlineDate === "number") {
                this.deadlineDate = new Int64(args.deadlineDate);
            }
            else {
                this.deadlineDate = args.deadlineDate;
            }
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("PatternProcessRoleExec");
        if (this.userOrGroup != null) {
            output.writeFieldBegin("userOrGroup", thrift.Thrift.Type.STRUCT, 1);
            this.userOrGroup.write(output);
            output.writeFieldEnd();
        }
        if (this.childUser != null) {
            output.writeFieldBegin("childUser", thrift.Thrift.Type.STRUCT, 2);
            this.childUser.write(output);
            output.writeFieldEnd();
        }
        if (this.comment != null) {
            output.writeFieldBegin("comment", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.comment);
            output.writeFieldEnd();
        }
        if (this.commentDescription != null) {
            output.writeFieldBegin("commentDescription", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.commentDescription);
            output.writeFieldEnd();
        }
        if (this.deadlineDate != null) {
            output.writeFieldBegin("deadlineDate", thrift.Thrift.Type.I64, 5);
            output.writeI64(this.deadlineDate);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): PatternProcessRoleExec {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_1: core.UserOrGroup = core.UserOrGroup.read(input);
                        _args.userOrGroup = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: core.UserOrGroup = core.UserOrGroup.read(input);
                        _args.childUser = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.comment = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.commentDescription = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_5: Int64 = input.readI64();
                        _args.deadlineDate = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new PatternProcessRoleExec(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as KnowledgeDocumentRelationInfo from "./KnowledgeDocumentRelationInfo";
import * as KnowledgeDocumentRelationLink from "./KnowledgeDocumentRelationLink";
export interface IKnowledgeDocumentRelationModelArgs {
    knlgDocId?: string;
    knlgDocRelInfoList?: Array<KnowledgeDocumentRelationInfo.KnowledgeDocumentRelationInfo>;
    knlgDocRelLinkList?: Array<KnowledgeDocumentRelationLink.KnowledgeDocumentRelationLink>;
}
export class KnowledgeDocumentRelationModel {
    public knlgDocId?: string;
    public knlgDocRelInfoList?: Array<KnowledgeDocumentRelationInfo.KnowledgeDocumentRelationInfo>;
    public knlgDocRelLinkList?: Array<KnowledgeDocumentRelationLink.KnowledgeDocumentRelationLink>;
    constructor(args?: IKnowledgeDocumentRelationModelArgs) {
        if (args != null && args.knlgDocId != null) {
            this.knlgDocId = args.knlgDocId;
        }
        if (args != null && args.knlgDocRelInfoList != null) {
            this.knlgDocRelInfoList = args.knlgDocRelInfoList;
        }
        if (args != null && args.knlgDocRelLinkList != null) {
            this.knlgDocRelLinkList = args.knlgDocRelLinkList;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("KnowledgeDocumentRelationModel");
        if (this.knlgDocId != null) {
            output.writeFieldBegin("knlgDocId", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.knlgDocId);
            output.writeFieldEnd();
        }
        if (this.knlgDocRelInfoList != null) {
            output.writeFieldBegin("knlgDocRelInfoList", thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.knlgDocRelInfoList.length);
            this.knlgDocRelInfoList.forEach((value_1: KnowledgeDocumentRelationInfo.KnowledgeDocumentRelationInfo): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.knlgDocRelLinkList != null) {
            output.writeFieldBegin("knlgDocRelLinkList", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.knlgDocRelLinkList.length);
            this.knlgDocRelLinkList.forEach((value_2: KnowledgeDocumentRelationLink.KnowledgeDocumentRelationLink): void => {
                value_2.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): KnowledgeDocumentRelationModel {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.knlgDocId = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_4: Array<KnowledgeDocumentRelationInfo.KnowledgeDocumentRelationInfo> = new Array<KnowledgeDocumentRelationInfo.KnowledgeDocumentRelationInfo>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_5: KnowledgeDocumentRelationInfo.KnowledgeDocumentRelationInfo = KnowledgeDocumentRelationInfo.KnowledgeDocumentRelationInfo.read(input);
                            value_4.push(value_5);
                        }
                        input.readListEnd();
                        _args.knlgDocRelInfoList = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_6: Array<KnowledgeDocumentRelationLink.KnowledgeDocumentRelationLink> = new Array<KnowledgeDocumentRelationLink.KnowledgeDocumentRelationLink>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_7: KnowledgeDocumentRelationLink.KnowledgeDocumentRelationLink = KnowledgeDocumentRelationLink.KnowledgeDocumentRelationLink.read(input);
                            value_6.push(value_7);
                        }
                        input.readListEnd();
                        _args.knlgDocRelLinkList = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new KnowledgeDocumentRelationModel(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as HBValue from "./HBValue";
export interface IHBColumnValueArgs {
    value?: HBValue.HBValue;
    depColumnId?: string;
    depValue?: HBValue.HBValue;
}
export class HBColumnValue {
    public value?: HBValue.HBValue;
    public depColumnId?: string;
    public depValue?: HBValue.HBValue;
    constructor(args?: IHBColumnValueArgs) {
        if (args != null && args.value != null) {
            this.value = args.value;
        }
        if (args != null && args.depColumnId != null) {
            this.depColumnId = args.depColumnId;
        }
        if (args != null && args.depValue != null) {
            this.depValue = args.depValue;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("HBColumnValue");
        if (this.value != null) {
            output.writeFieldBegin("value", thrift.Thrift.Type.STRUCT, 1);
            this.value.write(output);
            output.writeFieldEnd();
        }
        if (this.depColumnId != null) {
            output.writeFieldBegin("depColumnId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.depColumnId);
            output.writeFieldEnd();
        }
        if (this.depValue != null) {
            output.writeFieldBegin("depValue", thrift.Thrift.Type.STRUCT, 3);
            this.depValue.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): HBColumnValue {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_1: HBValue.HBValue = HBValue.HBValue.read(input);
                        _args.value = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.depColumnId = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_3: HBValue.HBValue = HBValue.HBValue.read(input);
                        _args.depValue = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new HBColumnValue(_args);
    }
}

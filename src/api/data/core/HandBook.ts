/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 from "node-int64";
import * as thrift from "thrift";
import * as HBColumn from "./HBColumn";
import * as core from "./";
import * as HandBookType from "./HandBookType";
export interface IHandBookArgs {
    id?: string;
    hBookName?: string;
    guiId?: number | Int64;
    accountIds?: Set<string>;
    columns?: Array<HBColumn.HBColumn>;
    hbContentAdmins?: Array<core.UserOrGroup>;
    allowEdit?: boolean;
    thriftURL?: string;
    copyValue?: boolean;
    transportType?: core.ThriftTransportType;
    protocolType?: core.ThriftProtocolType;
    hBookNameLoc?: Map<string, string>;
    handBookType?: HandBookType.HandBookType;
    canEditUuid?: boolean;
    uuid?: string;
}
export class HandBook {
    public id?: string;
    public hBookName?: string;
    public guiId?: Int64;
    public accountIds?: Set<string>;
    public columns?: Array<HBColumn.HBColumn>;
    public hbContentAdmins?: Array<core.UserOrGroup>;
    public allowEdit?: boolean;
    public thriftURL?: string;
    public copyValue?: boolean;
    public transportType?: core.ThriftTransportType;
    public protocolType?: core.ThriftProtocolType;
    public hBookNameLoc?: Map<string, string>;
    public handBookType?: HandBookType.HandBookType;
    public canEditUuid?: boolean;
    public uuid?: string;
    constructor(args?: IHandBookArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.hBookName != null) {
            this.hBookName = args.hBookName;
        }
        if (args != null && args.guiId != null) {
            if (typeof args.guiId === "number") {
                this.guiId = new Int64(args.guiId);
            }
            else {
                this.guiId = args.guiId;
            }
        }
        if (args != null && args.accountIds != null) {
            this.accountIds = args.accountIds;
        }
        if (args != null && args.columns != null) {
            this.columns = args.columns;
        }
        if (args != null && args.hbContentAdmins != null) {
            this.hbContentAdmins = args.hbContentAdmins;
        }
        if (args != null && args.allowEdit != null) {
            this.allowEdit = args.allowEdit;
        }
        if (args != null && args.thriftURL != null) {
            this.thriftURL = args.thriftURL;
        }
        if (args != null && args.copyValue != null) {
            this.copyValue = args.copyValue;
        }
        if (args != null && args.transportType != null) {
            this.transportType = args.transportType;
        }
        if (args != null && args.protocolType != null) {
            this.protocolType = args.protocolType;
        }
        if (args != null && args.hBookNameLoc != null) {
            this.hBookNameLoc = args.hBookNameLoc;
        }
        if (args != null && args.handBookType != null) {
            this.handBookType = args.handBookType;
        }
        if (args != null && args.canEditUuid != null) {
            this.canEditUuid = args.canEditUuid;
        }
        if (args != null && args.uuid != null) {
            this.uuid = args.uuid;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("HandBook");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.hBookName != null) {
            output.writeFieldBegin("hBookName", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.hBookName);
            output.writeFieldEnd();
        }
        if (this.guiId != null) {
            output.writeFieldBegin("guiId", thrift.Thrift.Type.I64, 3);
            output.writeI64(this.guiId);
            output.writeFieldEnd();
        }
        if (this.accountIds != null) {
            output.writeFieldBegin("accountIds", thrift.Thrift.Type.SET, 5);
            output.writeSetBegin(thrift.Thrift.Type.STRING, this.accountIds.size);
            this.accountIds.forEach((value_1: string): void => {
                output.writeString(value_1);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        if (this.columns != null) {
            output.writeFieldBegin("columns", thrift.Thrift.Type.LIST, 6);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.columns.length);
            this.columns.forEach((value_2: HBColumn.HBColumn): void => {
                value_2.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.hbContentAdmins != null) {
            output.writeFieldBegin("hbContentAdmins", thrift.Thrift.Type.LIST, 7);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.hbContentAdmins.length);
            this.hbContentAdmins.forEach((value_3: core.UserOrGroup): void => {
                value_3.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.allowEdit != null) {
            output.writeFieldBegin("allowEdit", thrift.Thrift.Type.BOOL, 8);
            output.writeBool(this.allowEdit);
            output.writeFieldEnd();
        }
        if (this.thriftURL != null) {
            output.writeFieldBegin("thriftURL", thrift.Thrift.Type.STRING, 9);
            output.writeString(this.thriftURL);
            output.writeFieldEnd();
        }
        if (this.copyValue != null) {
            output.writeFieldBegin("copyValue", thrift.Thrift.Type.BOOL, 10);
            output.writeBool(this.copyValue);
            output.writeFieldEnd();
        }
        if (this.transportType != null) {
            output.writeFieldBegin("transportType", thrift.Thrift.Type.I32, 11);
            output.writeI32(this.transportType);
            output.writeFieldEnd();
        }
        if (this.protocolType != null) {
            output.writeFieldBegin("protocolType", thrift.Thrift.Type.I32, 12);
            output.writeI32(this.protocolType);
            output.writeFieldEnd();
        }
        if (this.hBookNameLoc != null) {
            output.writeFieldBegin("hBookNameLoc", thrift.Thrift.Type.MAP, 13);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.hBookNameLoc.size);
            this.hBookNameLoc.forEach((value_4: string, key_1: string): void => {
                output.writeString(key_1);
                output.writeString(value_4);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.handBookType != null) {
            output.writeFieldBegin("handBookType", thrift.Thrift.Type.I32, 14);
            output.writeI32(this.handBookType);
            output.writeFieldEnd();
        }
        if (this.canEditUuid != null) {
            output.writeFieldBegin("canEditUuid", thrift.Thrift.Type.BOOL, 15);
            output.writeBool(this.canEditUuid);
            output.writeFieldEnd();
        }
        if (this.uuid != null) {
            output.writeFieldBegin("uuid", thrift.Thrift.Type.STRING, 16);
            output.writeString(this.uuid);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): HandBook {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.id = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.hBookName = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_7: Int64 = input.readI64();
                        _args.guiId = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_8: Set<string> = new Set<string>();
                        const metadata_1: thrift.TSet = input.readSetBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_9: string = input.readString();
                            value_8.add(value_9);
                        }
                        input.readSetEnd();
                        _args.accountIds = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_10: Array<HBColumn.HBColumn> = new Array<HBColumn.HBColumn>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_11: HBColumn.HBColumn = HBColumn.HBColumn.read(input);
                            value_10.push(value_11);
                        }
                        input.readListEnd();
                        _args.columns = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_12: Array<core.UserOrGroup> = new Array<core.UserOrGroup>();
                        const metadata_3: thrift.TList = input.readListBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_13: core.UserOrGroup = core.UserOrGroup.read(input);
                            value_12.push(value_13);
                        }
                        input.readListEnd();
                        _args.hbContentAdmins = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_14: boolean = input.readBool();
                        _args.allowEdit = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_15: string = input.readString();
                        _args.thriftURL = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_16: boolean = input.readBool();
                        _args.copyValue = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_17: core.ThriftTransportType = input.readI32();
                        _args.transportType = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_18: core.ThriftProtocolType = input.readI32();
                        _args.protocolType = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_19: Map<string, string> = new Map<string, string>();
                        const metadata_4: thrift.TMap = input.readMapBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const key_2: string = input.readString();
                            const value_20: string = input.readString();
                            value_19.set(key_2, value_20);
                        }
                        input.readMapEnd();
                        _args.hBookNameLoc = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_21: HandBookType.HandBookType = input.readI32();
                        _args.handBookType = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_22: boolean = input.readBool();
                        _args.canEditUuid = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_23: string = input.readString();
                        _args.uuid = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new HandBook(_args);
    }
}

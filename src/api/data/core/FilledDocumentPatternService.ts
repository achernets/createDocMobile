/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as core from "./";
import * as FreezePatternValidation from "./FreezePatternValidation";
export interface IGetFilledDocumentPatternArgsArgs {
    token: string;
    filledDocumentPatternId: string;
}
export class GetFilledDocumentPatternArgs {
    public token: string;
    public filledDocumentPatternId: string;
    constructor(args: IGetFilledDocumentPatternArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.filledDocumentPatternId != null) {
            this.filledDocumentPatternId = args.filledDocumentPatternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filledDocumentPatternId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetFilledDocumentPatternArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.filledDocumentPatternId != null) {
            output.writeFieldBegin("filledDocumentPatternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.filledDocumentPatternId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetFilledDocumentPatternArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.token = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.filledDocumentPatternId = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.filledDocumentPatternId !== undefined) {
            return new GetFilledDocumentPatternArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetFilledDocumentPatternArgs from input");
        }
    }
}
export interface ICreateAndCheckFilledDocumentPatternArgsArgs {
    token: string;
    freezeDocumentPattern: core.FreezeDocumentPattern;
    stages: Array<core.DocumentPatternStage>;
    toUpdate: Array<core.PatternProcessRole>;
}
export class CreateAndCheckFilledDocumentPatternArgs {
    public token: string;
    public freezeDocumentPattern: core.FreezeDocumentPattern;
    public stages: Array<core.DocumentPatternStage>;
    public toUpdate: Array<core.PatternProcessRole>;
    constructor(args: ICreateAndCheckFilledDocumentPatternArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.freezeDocumentPattern != null) {
            this.freezeDocumentPattern = args.freezeDocumentPattern;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[freezeDocumentPattern] is unset!");
        }
        if (args != null && args.stages != null) {
            this.stages = args.stages;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[stages] is unset!");
        }
        if (args != null && args.toUpdate != null) {
            this.toUpdate = args.toUpdate;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[toUpdate] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CreateAndCheckFilledDocumentPatternArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.freezeDocumentPattern != null) {
            output.writeFieldBegin("freezeDocumentPattern", thrift.Thrift.Type.STRUCT, 2);
            this.freezeDocumentPattern.write(output);
            output.writeFieldEnd();
        }
        if (this.stages != null) {
            output.writeFieldBegin("stages", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.stages.length);
            this.stages.forEach((value_3: core.DocumentPatternStage): void => {
                value_3.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.toUpdate != null) {
            output.writeFieldBegin("toUpdate", thrift.Thrift.Type.LIST, 4);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.toUpdate.length);
            this.toUpdate.forEach((value_4: core.PatternProcessRole): void => {
                value_4.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CreateAndCheckFilledDocumentPatternArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.token = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_6: core.FreezeDocumentPattern = core.FreezeDocumentPattern.read(input);
                        _args.freezeDocumentPattern = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_7: Array<core.DocumentPatternStage> = new Array<core.DocumentPatternStage>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_8: core.DocumentPatternStage = core.DocumentPatternStage.read(input);
                            value_7.push(value_8);
                        }
                        input.readListEnd();
                        _args.stages = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_9: Array<core.PatternProcessRole> = new Array<core.PatternProcessRole>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_10: core.PatternProcessRole = core.PatternProcessRole.read(input);
                            value_9.push(value_10);
                        }
                        input.readListEnd();
                        _args.toUpdate = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.freezeDocumentPattern !== undefined && _args.stages !== undefined && _args.toUpdate !== undefined) {
            return new CreateAndCheckFilledDocumentPatternArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read CreateAndCheckFilledDocumentPatternArgs from input");
        }
    }
}
export interface IDeleteFilledDocumentPatternArgsArgs {
    token: string;
    filledDocumentPatternId: string;
}
export class DeleteFilledDocumentPatternArgs {
    public token: string;
    public filledDocumentPatternId: string;
    constructor(args: IDeleteFilledDocumentPatternArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.filledDocumentPatternId != null) {
            this.filledDocumentPatternId = args.filledDocumentPatternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filledDocumentPatternId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("DeleteFilledDocumentPatternArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.filledDocumentPatternId != null) {
            output.writeFieldBegin("filledDocumentPatternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.filledDocumentPatternId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): DeleteFilledDocumentPatternArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_11: string = input.readString();
                        _args.token = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_12: string = input.readString();
                        _args.filledDocumentPatternId = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.filledDocumentPatternId !== undefined) {
            return new DeleteFilledDocumentPatternArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read DeleteFilledDocumentPatternArgs from input");
        }
    }
}
export interface IGetAllFilledDocumentPatternStagesArgsArgs {
    token: string;
    fillDocPatternId: string;
    filter: core.KazFilter;
    selector: core.RuleSelector;
}
export class GetAllFilledDocumentPatternStagesArgs {
    public token: string;
    public fillDocPatternId: string;
    public filter: core.KazFilter;
    public selector: core.RuleSelector;
    constructor(args: IGetAllFilledDocumentPatternStagesArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.fillDocPatternId != null) {
            this.fillDocPatternId = args.fillDocPatternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[fillDocPatternId] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
        if (args != null && args.selector != null) {
            this.selector = args.selector;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[selector] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllFilledDocumentPatternStagesArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.fillDocPatternId != null) {
            output.writeFieldBegin("fillDocPatternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.fillDocPatternId);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 3);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        if (this.selector != null) {
            output.writeFieldBegin("selector", thrift.Thrift.Type.I32, 4);
            output.writeI32(this.selector);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllFilledDocumentPatternStagesArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_13: string = input.readString();
                        _args.token = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_14: string = input.readString();
                        _args.fillDocPatternId = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_15: core.KazFilter = core.KazFilter.read(input);
                        _args.filter = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_16: core.RuleSelector = input.readI32();
                        _args.selector = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.fillDocPatternId !== undefined && _args.filter !== undefined && _args.selector !== undefined) {
            return new GetAllFilledDocumentPatternStagesArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAllFilledDocumentPatternStagesArgs from input");
        }
    }
}
export interface IGetFilledDocumentPatternStageArgsArgs {
    token: string;
    fillDocPatternId: string;
    stageId: string;
    selector: core.RuleSelector;
    policy: core.DocumentAccessPolicy;
}
export class GetFilledDocumentPatternStageArgs {
    public token: string;
    public fillDocPatternId: string;
    public stageId: string;
    public selector: core.RuleSelector;
    public policy: core.DocumentAccessPolicy;
    constructor(args: IGetFilledDocumentPatternStageArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.fillDocPatternId != null) {
            this.fillDocPatternId = args.fillDocPatternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[fillDocPatternId] is unset!");
        }
        if (args != null && args.stageId != null) {
            this.stageId = args.stageId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[stageId] is unset!");
        }
        if (args != null && args.selector != null) {
            this.selector = args.selector;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[selector] is unset!");
        }
        if (args != null && args.policy != null) {
            this.policy = args.policy;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[policy] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetFilledDocumentPatternStageArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.fillDocPatternId != null) {
            output.writeFieldBegin("fillDocPatternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.fillDocPatternId);
            output.writeFieldEnd();
        }
        if (this.stageId != null) {
            output.writeFieldBegin("stageId", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.stageId);
            output.writeFieldEnd();
        }
        if (this.selector != null) {
            output.writeFieldBegin("selector", thrift.Thrift.Type.I32, 4);
            output.writeI32(this.selector);
            output.writeFieldEnd();
        }
        if (this.policy != null) {
            output.writeFieldBegin("policy", thrift.Thrift.Type.STRUCT, 5);
            this.policy.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetFilledDocumentPatternStageArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_17: string = input.readString();
                        _args.token = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_18: string = input.readString();
                        _args.fillDocPatternId = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_19: string = input.readString();
                        _args.stageId = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_20: core.RuleSelector = input.readI32();
                        _args.selector = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_21: core.DocumentAccessPolicy = core.DocumentAccessPolicy.read(input);
                        _args.policy = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.fillDocPatternId !== undefined && _args.stageId !== undefined && _args.selector !== undefined && _args.policy !== undefined) {
            return new GetFilledDocumentPatternStageArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetFilledDocumentPatternStageArgs from input");
        }
    }
}
export interface IGetSetDecisionInfoArgsArgs {
    token: string;
    fillDocPatternId: string;
    freezeLinkId: string;
    selector: core.RuleSelector;
    policy: core.DocumentAccessPolicy;
}
export class GetSetDecisionInfoArgs {
    public token: string;
    public fillDocPatternId: string;
    public freezeLinkId: string;
    public selector: core.RuleSelector;
    public policy: core.DocumentAccessPolicy;
    constructor(args: IGetSetDecisionInfoArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.fillDocPatternId != null) {
            this.fillDocPatternId = args.fillDocPatternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[fillDocPatternId] is unset!");
        }
        if (args != null && args.freezeLinkId != null) {
            this.freezeLinkId = args.freezeLinkId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[freezeLinkId] is unset!");
        }
        if (args != null && args.selector != null) {
            this.selector = args.selector;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[selector] is unset!");
        }
        if (args != null && args.policy != null) {
            this.policy = args.policy;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[policy] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetSetDecisionInfoArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.fillDocPatternId != null) {
            output.writeFieldBegin("fillDocPatternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.fillDocPatternId);
            output.writeFieldEnd();
        }
        if (this.freezeLinkId != null) {
            output.writeFieldBegin("freezeLinkId", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.freezeLinkId);
            output.writeFieldEnd();
        }
        if (this.selector != null) {
            output.writeFieldBegin("selector", thrift.Thrift.Type.I32, 4);
            output.writeI32(this.selector);
            output.writeFieldEnd();
        }
        if (this.policy != null) {
            output.writeFieldBegin("policy", thrift.Thrift.Type.STRUCT, 5);
            this.policy.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetSetDecisionInfoArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_22: string = input.readString();
                        _args.token = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_23: string = input.readString();
                        _args.fillDocPatternId = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_24: string = input.readString();
                        _args.freezeLinkId = value_24;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_25: core.RuleSelector = input.readI32();
                        _args.selector = value_25;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_26: core.DocumentAccessPolicy = core.DocumentAccessPolicy.read(input);
                        _args.policy = value_26;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.fillDocPatternId !== undefined && _args.freezeLinkId !== undefined && _args.selector !== undefined && _args.policy !== undefined) {
            return new GetSetDecisionInfoArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetSetDecisionInfoArgs from input");
        }
    }
}
export interface IGetAllChildFilledDocumentPatternStagesArgsArgs {
    token: string;
    fillDocPatternId: string;
    stageId: string;
}
export class GetAllChildFilledDocumentPatternStagesArgs {
    public token: string;
    public fillDocPatternId: string;
    public stageId: string;
    constructor(args: IGetAllChildFilledDocumentPatternStagesArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.fillDocPatternId != null) {
            this.fillDocPatternId = args.fillDocPatternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[fillDocPatternId] is unset!");
        }
        if (args != null && args.stageId != null) {
            this.stageId = args.stageId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[stageId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllChildFilledDocumentPatternStagesArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.fillDocPatternId != null) {
            output.writeFieldBegin("fillDocPatternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.fillDocPatternId);
            output.writeFieldEnd();
        }
        if (this.stageId != null) {
            output.writeFieldBegin("stageId", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.stageId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllChildFilledDocumentPatternStagesArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_27: string = input.readString();
                        _args.token = value_27;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_28: string = input.readString();
                        _args.fillDocPatternId = value_28;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_29: string = input.readString();
                        _args.stageId = value_29;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.fillDocPatternId !== undefined && _args.stageId !== undefined) {
            return new GetAllChildFilledDocumentPatternStagesArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAllChildFilledDocumentPatternStagesArgs from input");
        }
    }
}
export interface IUpdateFilledDocumentPatternStageListArgsArgs {
    token: string;
    fillDocPatternId: string;
    documentPatternStage: Array<core.DocumentPatternStage>;
    enEditCurrent: boolean;
}
export class UpdateFilledDocumentPatternStageListArgs {
    public token: string;
    public fillDocPatternId: string;
    public documentPatternStage: Array<core.DocumentPatternStage>;
    public enEditCurrent: boolean;
    constructor(args: IUpdateFilledDocumentPatternStageListArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.fillDocPatternId != null) {
            this.fillDocPatternId = args.fillDocPatternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[fillDocPatternId] is unset!");
        }
        if (args != null && args.documentPatternStage != null) {
            this.documentPatternStage = args.documentPatternStage;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[documentPatternStage] is unset!");
        }
        if (args != null && args.enEditCurrent != null) {
            this.enEditCurrent = args.enEditCurrent;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[enEditCurrent] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("UpdateFilledDocumentPatternStageListArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.fillDocPatternId != null) {
            output.writeFieldBegin("fillDocPatternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.fillDocPatternId);
            output.writeFieldEnd();
        }
        if (this.documentPatternStage != null) {
            output.writeFieldBegin("documentPatternStage", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.documentPatternStage.length);
            this.documentPatternStage.forEach((value_30: core.DocumentPatternStage): void => {
                value_30.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.enEditCurrent != null) {
            output.writeFieldBegin("enEditCurrent", thrift.Thrift.Type.BOOL, 4);
            output.writeBool(this.enEditCurrent);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): UpdateFilledDocumentPatternStageListArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_31: string = input.readString();
                        _args.token = value_31;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_32: string = input.readString();
                        _args.fillDocPatternId = value_32;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_33: Array<core.DocumentPatternStage> = new Array<core.DocumentPatternStage>();
                        const metadata_3: thrift.TList = input.readListBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_34: core.DocumentPatternStage = core.DocumentPatternStage.read(input);
                            value_33.push(value_34);
                        }
                        input.readListEnd();
                        _args.documentPatternStage = value_33;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_35: boolean = input.readBool();
                        _args.enEditCurrent = value_35;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.fillDocPatternId !== undefined && _args.documentPatternStage !== undefined && _args.enEditCurrent !== undefined) {
            return new UpdateFilledDocumentPatternStageListArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read UpdateFilledDocumentPatternStageListArgs from input");
        }
    }
}
export interface IUpdateFilledDocumentPatternStagesLinkArgsArgs {
    token: string;
    fillDocPatternId: string;
    links: Array<core.DocumentPatternStagesLink>;
}
export class UpdateFilledDocumentPatternStagesLinkArgs {
    public token: string;
    public fillDocPatternId: string;
    public links: Array<core.DocumentPatternStagesLink>;
    constructor(args: IUpdateFilledDocumentPatternStagesLinkArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.fillDocPatternId != null) {
            this.fillDocPatternId = args.fillDocPatternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[fillDocPatternId] is unset!");
        }
        if (args != null && args.links != null) {
            this.links = args.links;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[links] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("UpdateFilledDocumentPatternStagesLinkArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.fillDocPatternId != null) {
            output.writeFieldBegin("fillDocPatternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.fillDocPatternId);
            output.writeFieldEnd();
        }
        if (this.links != null) {
            output.writeFieldBegin("links", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.links.length);
            this.links.forEach((value_36: core.DocumentPatternStagesLink): void => {
                value_36.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): UpdateFilledDocumentPatternStagesLinkArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_37: string = input.readString();
                        _args.token = value_37;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_38: string = input.readString();
                        _args.fillDocPatternId = value_38;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_39: Array<core.DocumentPatternStagesLink> = new Array<core.DocumentPatternStagesLink>();
                        const metadata_4: thrift.TList = input.readListBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const value_40: core.DocumentPatternStagesLink = core.DocumentPatternStagesLink.read(input);
                            value_39.push(value_40);
                        }
                        input.readListEnd();
                        _args.links = value_39;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.fillDocPatternId !== undefined && _args.links !== undefined) {
            return new UpdateFilledDocumentPatternStagesLinkArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read UpdateFilledDocumentPatternStagesLinkArgs from input");
        }
    }
}
export interface IGetAllFilledDocumentPatternStagesLinkArgsArgs {
    token: string;
    fillDocPatternId: string;
    filter: core.KazFilter;
}
export class GetAllFilledDocumentPatternStagesLinkArgs {
    public token: string;
    public fillDocPatternId: string;
    public filter: core.KazFilter;
    constructor(args: IGetAllFilledDocumentPatternStagesLinkArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.fillDocPatternId != null) {
            this.fillDocPatternId = args.fillDocPatternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[fillDocPatternId] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllFilledDocumentPatternStagesLinkArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.fillDocPatternId != null) {
            output.writeFieldBegin("fillDocPatternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.fillDocPatternId);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 3);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllFilledDocumentPatternStagesLinkArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_41: string = input.readString();
                        _args.token = value_41;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_42: string = input.readString();
                        _args.fillDocPatternId = value_42;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_43: core.KazFilter = core.KazFilter.read(input);
                        _args.filter = value_43;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.fillDocPatternId !== undefined && _args.filter !== undefined) {
            return new GetAllFilledDocumentPatternStagesLinkArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAllFilledDocumentPatternStagesLinkArgs from input");
        }
    }
}
export interface IGetAllFilledDocumentPatternStageExecutorsArgsArgs {
    token: string;
    fillDocPatternId: string;
    stageId: string;
    filter: core.KazFilter;
}
export class GetAllFilledDocumentPatternStageExecutorsArgs {
    public token: string;
    public fillDocPatternId: string;
    public stageId: string;
    public filter: core.KazFilter;
    constructor(args: IGetAllFilledDocumentPatternStageExecutorsArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.fillDocPatternId != null) {
            this.fillDocPatternId = args.fillDocPatternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[fillDocPatternId] is unset!");
        }
        if (args != null && args.stageId != null) {
            this.stageId = args.stageId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[stageId] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllFilledDocumentPatternStageExecutorsArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.fillDocPatternId != null) {
            output.writeFieldBegin("fillDocPatternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.fillDocPatternId);
            output.writeFieldEnd();
        }
        if (this.stageId != null) {
            output.writeFieldBegin("stageId", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.stageId);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 4);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllFilledDocumentPatternStageExecutorsArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_44: string = input.readString();
                        _args.token = value_44;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_45: string = input.readString();
                        _args.fillDocPatternId = value_45;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_46: string = input.readString();
                        _args.stageId = value_46;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_47: core.KazFilter = core.KazFilter.read(input);
                        _args.filter = value_47;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.fillDocPatternId !== undefined && _args.stageId !== undefined && _args.filter !== undefined) {
            return new GetAllFilledDocumentPatternStageExecutorsArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAllFilledDocumentPatternStageExecutorsArgs from input");
        }
    }
}
export interface IGetFilledDocumentPatternStagesExecutorsArgsArgs {
    token: string;
    fillDocPatternId: string;
    stageIds: Array<string>;
    filter: core.KazFilter;
}
export class GetFilledDocumentPatternStagesExecutorsArgs {
    public token: string;
    public fillDocPatternId: string;
    public stageIds: Array<string>;
    public filter: core.KazFilter;
    constructor(args: IGetFilledDocumentPatternStagesExecutorsArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.fillDocPatternId != null) {
            this.fillDocPatternId = args.fillDocPatternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[fillDocPatternId] is unset!");
        }
        if (args != null && args.stageIds != null) {
            this.stageIds = args.stageIds;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[stageIds] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetFilledDocumentPatternStagesExecutorsArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.fillDocPatternId != null) {
            output.writeFieldBegin("fillDocPatternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.fillDocPatternId);
            output.writeFieldEnd();
        }
        if (this.stageIds != null) {
            output.writeFieldBegin("stageIds", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.stageIds.length);
            this.stageIds.forEach((value_48: string): void => {
                output.writeString(value_48);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 4);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetFilledDocumentPatternStagesExecutorsArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_49: string = input.readString();
                        _args.token = value_49;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_50: string = input.readString();
                        _args.fillDocPatternId = value_50;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_51: Array<string> = new Array<string>();
                        const metadata_5: thrift.TList = input.readListBegin();
                        const size_5: number = metadata_5.size;
                        for (let i_5: number = 0; i_5 < size_5; i_5++) {
                            const value_52: string = input.readString();
                            value_51.push(value_52);
                        }
                        input.readListEnd();
                        _args.stageIds = value_51;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_53: core.KazFilter = core.KazFilter.read(input);
                        _args.filter = value_53;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.fillDocPatternId !== undefined && _args.stageIds !== undefined && _args.filter !== undefined) {
            return new GetFilledDocumentPatternStagesExecutorsArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetFilledDocumentPatternStagesExecutorsArgs from input");
        }
    }
}
export interface IChangeFilledDocumentPatternStagesArgsArgs {
    token: string;
    fillDocPatternId: string;
    stages: Array<core.DocumentPatternStage>;
}
export class ChangeFilledDocumentPatternStagesArgs {
    public token: string;
    public fillDocPatternId: string;
    public stages: Array<core.DocumentPatternStage>;
    constructor(args: IChangeFilledDocumentPatternStagesArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.fillDocPatternId != null) {
            this.fillDocPatternId = args.fillDocPatternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[fillDocPatternId] is unset!");
        }
        if (args != null && args.stages != null) {
            this.stages = args.stages;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[stages] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ChangeFilledDocumentPatternStagesArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.fillDocPatternId != null) {
            output.writeFieldBegin("fillDocPatternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.fillDocPatternId);
            output.writeFieldEnd();
        }
        if (this.stages != null) {
            output.writeFieldBegin("stages", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.stages.length);
            this.stages.forEach((value_54: core.DocumentPatternStage): void => {
                value_54.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ChangeFilledDocumentPatternStagesArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_55: string = input.readString();
                        _args.token = value_55;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_56: string = input.readString();
                        _args.fillDocPatternId = value_56;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_57: Array<core.DocumentPatternStage> = new Array<core.DocumentPatternStage>();
                        const metadata_6: thrift.TList = input.readListBegin();
                        const size_6: number = metadata_6.size;
                        for (let i_6: number = 0; i_6 < size_6; i_6++) {
                            const value_58: core.DocumentPatternStage = core.DocumentPatternStage.read(input);
                            value_57.push(value_58);
                        }
                        input.readListEnd();
                        _args.stages = value_57;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.fillDocPatternId !== undefined && _args.stages !== undefined) {
            return new ChangeFilledDocumentPatternStagesArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read ChangeFilledDocumentPatternStagesArgs from input");
        }
    }
}
export interface ICheckFilledDocumentPatternArgsArgs {
    token: string;
    fillDocPatternId: string;
    filter: core.KazFilter;
}
export class CheckFilledDocumentPatternArgs {
    public token: string;
    public fillDocPatternId: string;
    public filter: core.KazFilter;
    constructor(args: ICheckFilledDocumentPatternArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.fillDocPatternId != null) {
            this.fillDocPatternId = args.fillDocPatternId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[fillDocPatternId] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CheckFilledDocumentPatternArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.fillDocPatternId != null) {
            output.writeFieldBegin("fillDocPatternId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.fillDocPatternId);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 3);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CheckFilledDocumentPatternArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_59: string = input.readString();
                        _args.token = value_59;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_60: string = input.readString();
                        _args.fillDocPatternId = value_60;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_61: core.KazFilter = core.KazFilter.read(input);
                        _args.filter = value_61;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.fillDocPatternId !== undefined && _args.filter !== undefined) {
            return new CheckFilledDocumentPatternArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read CheckFilledDocumentPatternArgs from input");
        }
    }
}
export interface IGetFreezeProcessRolesArgsArgs {
    token: string;
    docId: string;
    policy: core.DocumentAccessPolicy;
    filter: core.KazFilter;
}
export class GetFreezeProcessRolesArgs {
    public token: string;
    public docId: string;
    public policy: core.DocumentAccessPolicy;
    public filter: core.KazFilter;
    constructor(args: IGetFreezeProcessRolesArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.docId != null) {
            this.docId = args.docId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[docId] is unset!");
        }
        if (args != null && args.policy != null) {
            this.policy = args.policy;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[policy] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetFreezeProcessRolesArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.docId != null) {
            output.writeFieldBegin("docId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.docId);
            output.writeFieldEnd();
        }
        if (this.policy != null) {
            output.writeFieldBegin("policy", thrift.Thrift.Type.STRUCT, 3);
            this.policy.write(output);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 4);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetFreezeProcessRolesArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_62: string = input.readString();
                        _args.token = value_62;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_63: string = input.readString();
                        _args.docId = value_63;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_64: core.DocumentAccessPolicy = core.DocumentAccessPolicy.read(input);
                        _args.policy = value_64;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_65: core.KazFilter = core.KazFilter.read(input);
                        _args.filter = value_65;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.docId !== undefined && _args.policy !== undefined && _args.filter !== undefined) {
            return new GetFreezeProcessRolesArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetFreezeProcessRolesArgs from input");
        }
    }
}
export interface IChangeFreezeProcessRolesArgsArgs {
    token: string;
    docId: string;
    policy: core.DocumentAccessPolicy;
    patternRolesToAdd: Array<core.PatternProcessRole>;
    keyIdToRemove: Set<string>;
}
export class ChangeFreezeProcessRolesArgs {
    public token: string;
    public docId: string;
    public policy: core.DocumentAccessPolicy;
    public patternRolesToAdd: Array<core.PatternProcessRole>;
    public keyIdToRemove: Set<string>;
    constructor(args: IChangeFreezeProcessRolesArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.docId != null) {
            this.docId = args.docId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[docId] is unset!");
        }
        if (args != null && args.policy != null) {
            this.policy = args.policy;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[policy] is unset!");
        }
        if (args != null && args.patternRolesToAdd != null) {
            this.patternRolesToAdd = args.patternRolesToAdd;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[patternRolesToAdd] is unset!");
        }
        if (args != null && args.keyIdToRemove != null) {
            this.keyIdToRemove = args.keyIdToRemove;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[keyIdToRemove] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ChangeFreezeProcessRolesArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.docId != null) {
            output.writeFieldBegin("docId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.docId);
            output.writeFieldEnd();
        }
        if (this.policy != null) {
            output.writeFieldBegin("policy", thrift.Thrift.Type.STRUCT, 3);
            this.policy.write(output);
            output.writeFieldEnd();
        }
        if (this.patternRolesToAdd != null) {
            output.writeFieldBegin("patternRolesToAdd", thrift.Thrift.Type.LIST, 4);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.patternRolesToAdd.length);
            this.patternRolesToAdd.forEach((value_66: core.PatternProcessRole): void => {
                value_66.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.keyIdToRemove != null) {
            output.writeFieldBegin("keyIdToRemove", thrift.Thrift.Type.SET, 5);
            output.writeSetBegin(thrift.Thrift.Type.STRING, this.keyIdToRemove.size);
            this.keyIdToRemove.forEach((value_67: string): void => {
                output.writeString(value_67);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ChangeFreezeProcessRolesArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_68: string = input.readString();
                        _args.token = value_68;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_69: string = input.readString();
                        _args.docId = value_69;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_70: core.DocumentAccessPolicy = core.DocumentAccessPolicy.read(input);
                        _args.policy = value_70;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_71: Array<core.PatternProcessRole> = new Array<core.PatternProcessRole>();
                        const metadata_7: thrift.TList = input.readListBegin();
                        const size_7: number = metadata_7.size;
                        for (let i_7: number = 0; i_7 < size_7; i_7++) {
                            const value_72: core.PatternProcessRole = core.PatternProcessRole.read(input);
                            value_71.push(value_72);
                        }
                        input.readListEnd();
                        _args.patternRolesToAdd = value_71;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_73: Set<string> = new Set<string>();
                        const metadata_8: thrift.TSet = input.readSetBegin();
                        const size_8: number = metadata_8.size;
                        for (let i_8: number = 0; i_8 < size_8; i_8++) {
                            const value_74: string = input.readString();
                            value_73.add(value_74);
                        }
                        input.readSetEnd();
                        _args.keyIdToRemove = value_73;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.docId !== undefined && _args.policy !== undefined && _args.patternRolesToAdd !== undefined && _args.keyIdToRemove !== undefined) {
            return new ChangeFreezeProcessRolesArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read ChangeFreezeProcessRolesArgs from input");
        }
    }
}
export interface IGetFreezeProcessVariablesArgsArgs {
    token: string;
    docId: string;
    policy: core.DocumentAccessPolicy;
    filter: core.KazFilter;
}
export class GetFreezeProcessVariablesArgs {
    public token: string;
    public docId: string;
    public policy: core.DocumentAccessPolicy;
    public filter: core.KazFilter;
    constructor(args: IGetFreezeProcessVariablesArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.docId != null) {
            this.docId = args.docId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[docId] is unset!");
        }
        if (args != null && args.policy != null) {
            this.policy = args.policy;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[policy] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetFreezeProcessVariablesArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.docId != null) {
            output.writeFieldBegin("docId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.docId);
            output.writeFieldEnd();
        }
        if (this.policy != null) {
            output.writeFieldBegin("policy", thrift.Thrift.Type.STRUCT, 3);
            this.policy.write(output);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 4);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetFreezeProcessVariablesArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_75: string = input.readString();
                        _args.token = value_75;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_76: string = input.readString();
                        _args.docId = value_76;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_77: core.DocumentAccessPolicy = core.DocumentAccessPolicy.read(input);
                        _args.policy = value_77;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_78: core.KazFilter = core.KazFilter.read(input);
                        _args.filter = value_78;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.docId !== undefined && _args.policy !== undefined && _args.filter !== undefined) {
            return new GetFreezeProcessVariablesArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetFreezeProcessVariablesArgs from input");
        }
    }
}
export interface IChangeFreezePatternVariablesArgsArgs {
    token: string;
    docId: string;
    policy: core.DocumentAccessPolicy;
    patternVariablesToAdd: Array<core.PatternVariable>;
    keyIdToRemove: Set<string>;
}
export class ChangeFreezePatternVariablesArgs {
    public token: string;
    public docId: string;
    public policy: core.DocumentAccessPolicy;
    public patternVariablesToAdd: Array<core.PatternVariable>;
    public keyIdToRemove: Set<string>;
    constructor(args: IChangeFreezePatternVariablesArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.docId != null) {
            this.docId = args.docId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[docId] is unset!");
        }
        if (args != null && args.policy != null) {
            this.policy = args.policy;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[policy] is unset!");
        }
        if (args != null && args.patternVariablesToAdd != null) {
            this.patternVariablesToAdd = args.patternVariablesToAdd;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[patternVariablesToAdd] is unset!");
        }
        if (args != null && args.keyIdToRemove != null) {
            this.keyIdToRemove = args.keyIdToRemove;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[keyIdToRemove] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ChangeFreezePatternVariablesArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.docId != null) {
            output.writeFieldBegin("docId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.docId);
            output.writeFieldEnd();
        }
        if (this.policy != null) {
            output.writeFieldBegin("policy", thrift.Thrift.Type.STRUCT, 3);
            this.policy.write(output);
            output.writeFieldEnd();
        }
        if (this.patternVariablesToAdd != null) {
            output.writeFieldBegin("patternVariablesToAdd", thrift.Thrift.Type.LIST, 4);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.patternVariablesToAdd.length);
            this.patternVariablesToAdd.forEach((value_79: core.PatternVariable): void => {
                value_79.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.keyIdToRemove != null) {
            output.writeFieldBegin("keyIdToRemove", thrift.Thrift.Type.SET, 5);
            output.writeSetBegin(thrift.Thrift.Type.STRING, this.keyIdToRemove.size);
            this.keyIdToRemove.forEach((value_80: string): void => {
                output.writeString(value_80);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ChangeFreezePatternVariablesArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_81: string = input.readString();
                        _args.token = value_81;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_82: string = input.readString();
                        _args.docId = value_82;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_83: core.DocumentAccessPolicy = core.DocumentAccessPolicy.read(input);
                        _args.policy = value_83;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_84: Array<core.PatternVariable> = new Array<core.PatternVariable>();
                        const metadata_9: thrift.TList = input.readListBegin();
                        const size_9: number = metadata_9.size;
                        for (let i_9: number = 0; i_9 < size_9; i_9++) {
                            const value_85: core.PatternVariable = core.PatternVariable.read(input);
                            value_84.push(value_85);
                        }
                        input.readListEnd();
                        _args.patternVariablesToAdd = value_84;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_86: Set<string> = new Set<string>();
                        const metadata_10: thrift.TSet = input.readSetBegin();
                        const size_10: number = metadata_10.size;
                        for (let i_10: number = 0; i_10 < size_10; i_10++) {
                            const value_87: string = input.readString();
                            value_86.add(value_87);
                        }
                        input.readSetEnd();
                        _args.keyIdToRemove = value_86;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.docId !== undefined && _args.policy !== undefined && _args.patternVariablesToAdd !== undefined && _args.keyIdToRemove !== undefined) {
            return new ChangeFreezePatternVariablesArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read ChangeFreezePatternVariablesArgs from input");
        }
    }
}
export interface IGetFilledDocumentPatternResultArgs {
    success?: core.FreezeDocumentPattern;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class GetFilledDocumentPatternResult {
    public success?: core.FreezeDocumentPattern;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IGetFilledDocumentPatternResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetFilledDocumentPatternResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetFilledDocumentPatternResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_88: core.FreezeDocumentPattern = core.FreezeDocumentPattern.read(input);
                        _args.success = value_88;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_89: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_89;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_90: core.ServerException = core.ServerException.read(input);
                        _args.error = value_90;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetFilledDocumentPatternResult(_args);
    }
}
export interface ICreateAndCheckFilledDocumentPatternResultArgs {
    success?: FreezePatternValidation.FreezePatternValidation;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class CreateAndCheckFilledDocumentPatternResult {
    public success?: FreezePatternValidation.FreezePatternValidation;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: ICreateAndCheckFilledDocumentPatternResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CreateAndCheckFilledDocumentPatternResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CreateAndCheckFilledDocumentPatternResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_91: FreezePatternValidation.FreezePatternValidation = FreezePatternValidation.FreezePatternValidation.read(input);
                        _args.success = value_91;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_92: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_92;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_93: core.ServerException = core.ServerException.read(input);
                        _args.error = value_93;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new CreateAndCheckFilledDocumentPatternResult(_args);
    }
}
export interface IDeleteFilledDocumentPatternResultArgs {
    success?: boolean;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class DeleteFilledDocumentPatternResult {
    public success?: boolean;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IDeleteFilledDocumentPatternResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("DeleteFilledDocumentPatternResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): DeleteFilledDocumentPatternResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_94: boolean = input.readBool();
                        _args.success = value_94;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_95: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_95;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_96: core.ServerException = core.ServerException.read(input);
                        _args.error = value_96;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new DeleteFilledDocumentPatternResult(_args);
    }
}
export interface IGetAllFilledDocumentPatternStagesResultArgs {
    success?: Array<core.DocumentPatternStage>;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class GetAllFilledDocumentPatternStagesResult {
    public success?: Array<core.DocumentPatternStage>;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IGetAllFilledDocumentPatternStagesResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllFilledDocumentPatternStagesResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_97: core.DocumentPatternStage): void => {
                value_97.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllFilledDocumentPatternStagesResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_98: Array<core.DocumentPatternStage> = new Array<core.DocumentPatternStage>();
                        const metadata_11: thrift.TList = input.readListBegin();
                        const size_11: number = metadata_11.size;
                        for (let i_11: number = 0; i_11 < size_11; i_11++) {
                            const value_99: core.DocumentPatternStage = core.DocumentPatternStage.read(input);
                            value_98.push(value_99);
                        }
                        input.readListEnd();
                        _args.success = value_98;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_100: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_100;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_101: core.ServerException = core.ServerException.read(input);
                        _args.error = value_101;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAllFilledDocumentPatternStagesResult(_args);
    }
}
export interface IGetFilledDocumentPatternStageResultArgs {
    success?: core.DocumentPatternStage;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class GetFilledDocumentPatternStageResult {
    public success?: core.DocumentPatternStage;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IGetFilledDocumentPatternStageResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetFilledDocumentPatternStageResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetFilledDocumentPatternStageResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_102: core.DocumentPatternStage = core.DocumentPatternStage.read(input);
                        _args.success = value_102;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_103: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_103;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_104: core.ServerException = core.ServerException.read(input);
                        _args.error = value_104;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetFilledDocumentPatternStageResult(_args);
    }
}
export interface IGetSetDecisionInfoResultArgs {
    success?: core.DesicionInfo;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class GetSetDecisionInfoResult {
    public success?: core.DesicionInfo;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IGetSetDecisionInfoResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetSetDecisionInfoResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetSetDecisionInfoResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_105: core.DesicionInfo = core.DesicionInfo.read(input);
                        _args.success = value_105;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_106: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_106;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_107: core.ServerException = core.ServerException.read(input);
                        _args.error = value_107;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetSetDecisionInfoResult(_args);
    }
}
export interface IGetAllChildFilledDocumentPatternStagesResultArgs {
    success?: Array<core.DocumentPatternStage>;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class GetAllChildFilledDocumentPatternStagesResult {
    public success?: Array<core.DocumentPatternStage>;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IGetAllChildFilledDocumentPatternStagesResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllChildFilledDocumentPatternStagesResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_108: core.DocumentPatternStage): void => {
                value_108.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllChildFilledDocumentPatternStagesResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_109: Array<core.DocumentPatternStage> = new Array<core.DocumentPatternStage>();
                        const metadata_12: thrift.TList = input.readListBegin();
                        const size_12: number = metadata_12.size;
                        for (let i_12: number = 0; i_12 < size_12; i_12++) {
                            const value_110: core.DocumentPatternStage = core.DocumentPatternStage.read(input);
                            value_109.push(value_110);
                        }
                        input.readListEnd();
                        _args.success = value_109;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_111: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_111;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_112: core.ServerException = core.ServerException.read(input);
                        _args.error = value_112;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAllChildFilledDocumentPatternStagesResult(_args);
    }
}
export interface IUpdateFilledDocumentPatternStageListResultArgs {
    success?: Array<core.DocumentPatternStage>;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class UpdateFilledDocumentPatternStageListResult {
    public success?: Array<core.DocumentPatternStage>;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IUpdateFilledDocumentPatternStageListResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("UpdateFilledDocumentPatternStageListResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_113: core.DocumentPatternStage): void => {
                value_113.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): UpdateFilledDocumentPatternStageListResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_114: Array<core.DocumentPatternStage> = new Array<core.DocumentPatternStage>();
                        const metadata_13: thrift.TList = input.readListBegin();
                        const size_13: number = metadata_13.size;
                        for (let i_13: number = 0; i_13 < size_13; i_13++) {
                            const value_115: core.DocumentPatternStage = core.DocumentPatternStage.read(input);
                            value_114.push(value_115);
                        }
                        input.readListEnd();
                        _args.success = value_114;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_116: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_116;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_117: core.ServerException = core.ServerException.read(input);
                        _args.error = value_117;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new UpdateFilledDocumentPatternStageListResult(_args);
    }
}
export interface IUpdateFilledDocumentPatternStagesLinkResultArgs {
    success?: Array<core.DocumentPatternStagesLink>;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class UpdateFilledDocumentPatternStagesLinkResult {
    public success?: Array<core.DocumentPatternStagesLink>;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IUpdateFilledDocumentPatternStagesLinkResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("UpdateFilledDocumentPatternStagesLinkResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_118: core.DocumentPatternStagesLink): void => {
                value_118.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): UpdateFilledDocumentPatternStagesLinkResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_119: Array<core.DocumentPatternStagesLink> = new Array<core.DocumentPatternStagesLink>();
                        const metadata_14: thrift.TList = input.readListBegin();
                        const size_14: number = metadata_14.size;
                        for (let i_14: number = 0; i_14 < size_14; i_14++) {
                            const value_120: core.DocumentPatternStagesLink = core.DocumentPatternStagesLink.read(input);
                            value_119.push(value_120);
                        }
                        input.readListEnd();
                        _args.success = value_119;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_121: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_121;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_122: core.ServerException = core.ServerException.read(input);
                        _args.error = value_122;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new UpdateFilledDocumentPatternStagesLinkResult(_args);
    }
}
export interface IGetAllFilledDocumentPatternStagesLinkResultArgs {
    success?: Array<core.DocumentPatternStagesLink>;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class GetAllFilledDocumentPatternStagesLinkResult {
    public success?: Array<core.DocumentPatternStagesLink>;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IGetAllFilledDocumentPatternStagesLinkResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllFilledDocumentPatternStagesLinkResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_123: core.DocumentPatternStagesLink): void => {
                value_123.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllFilledDocumentPatternStagesLinkResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_124: Array<core.DocumentPatternStagesLink> = new Array<core.DocumentPatternStagesLink>();
                        const metadata_15: thrift.TList = input.readListBegin();
                        const size_15: number = metadata_15.size;
                        for (let i_15: number = 0; i_15 < size_15; i_15++) {
                            const value_125: core.DocumentPatternStagesLink = core.DocumentPatternStagesLink.read(input);
                            value_124.push(value_125);
                        }
                        input.readListEnd();
                        _args.success = value_124;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_126: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_126;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_127: core.ServerException = core.ServerException.read(input);
                        _args.error = value_127;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAllFilledDocumentPatternStagesLinkResult(_args);
    }
}
export interface IGetAllFilledDocumentPatternStageExecutorsResultArgs {
    success?: Array<core.DocumentPatternStagesExecutor>;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class GetAllFilledDocumentPatternStageExecutorsResult {
    public success?: Array<core.DocumentPatternStagesExecutor>;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IGetAllFilledDocumentPatternStageExecutorsResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllFilledDocumentPatternStageExecutorsResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_128: core.DocumentPatternStagesExecutor): void => {
                value_128.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllFilledDocumentPatternStageExecutorsResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_129: Array<core.DocumentPatternStagesExecutor> = new Array<core.DocumentPatternStagesExecutor>();
                        const metadata_16: thrift.TList = input.readListBegin();
                        const size_16: number = metadata_16.size;
                        for (let i_16: number = 0; i_16 < size_16; i_16++) {
                            const value_130: core.DocumentPatternStagesExecutor = core.DocumentPatternStagesExecutor.read(input);
                            value_129.push(value_130);
                        }
                        input.readListEnd();
                        _args.success = value_129;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_131: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_131;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_132: core.ServerException = core.ServerException.read(input);
                        _args.error = value_132;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAllFilledDocumentPatternStageExecutorsResult(_args);
    }
}
export interface IGetFilledDocumentPatternStagesExecutorsResultArgs {
    success?: Map<string, Array<core.DocumentPatternStagesExecutor>>;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class GetFilledDocumentPatternStagesExecutorsResult {
    public success?: Map<string, Array<core.DocumentPatternStagesExecutor>>;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IGetFilledDocumentPatternStagesExecutorsResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetFilledDocumentPatternStagesExecutorsResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.MAP, 0);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.LIST, this.success.size);
            this.success.forEach((value_133: Array<core.DocumentPatternStagesExecutor>, key_1: string): void => {
                output.writeString(key_1);
                output.writeListBegin(thrift.Thrift.Type.STRUCT, value_133.length);
                value_133.forEach((value_134: core.DocumentPatternStagesExecutor): void => {
                    value_134.write(output);
                });
                output.writeListEnd();
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetFilledDocumentPatternStagesExecutorsResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_135: Map<string, Array<core.DocumentPatternStagesExecutor>> = new Map<string, Array<core.DocumentPatternStagesExecutor>>();
                        const metadata_17: thrift.TMap = input.readMapBegin();
                        const size_17: number = metadata_17.size;
                        for (let i_17: number = 0; i_17 < size_17; i_17++) {
                            const key_2: string = input.readString();
                            const value_136: Array<core.DocumentPatternStagesExecutor> = new Array<core.DocumentPatternStagesExecutor>();
                            const metadata_18: thrift.TList = input.readListBegin();
                            const size_18: number = metadata_18.size;
                            for (let i_18: number = 0; i_18 < size_18; i_18++) {
                                const value_137: core.DocumentPatternStagesExecutor = core.DocumentPatternStagesExecutor.read(input);
                                value_136.push(value_137);
                            }
                            input.readListEnd();
                            value_135.set(key_2, value_136);
                        }
                        input.readMapEnd();
                        _args.success = value_135;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_138: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_138;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_139: core.ServerException = core.ServerException.read(input);
                        _args.error = value_139;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetFilledDocumentPatternStagesExecutorsResult(_args);
    }
}
export interface IChangeFilledDocumentPatternStagesResultArgs {
    success?: boolean;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class ChangeFilledDocumentPatternStagesResult {
    public success?: boolean;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IChangeFilledDocumentPatternStagesResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ChangeFilledDocumentPatternStagesResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ChangeFilledDocumentPatternStagesResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_140: boolean = input.readBool();
                        _args.success = value_140;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_141: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_141;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_142: core.ServerException = core.ServerException.read(input);
                        _args.error = value_142;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ChangeFilledDocumentPatternStagesResult(_args);
    }
}
export interface ICheckFilledDocumentPatternResultArgs {
    success?: Array<core.PreconditionException>;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class CheckFilledDocumentPatternResult {
    public success?: Array<core.PreconditionException>;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: ICheckFilledDocumentPatternResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CheckFilledDocumentPatternResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_143: core.PreconditionException): void => {
                value_143.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CheckFilledDocumentPatternResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_144: Array<core.PreconditionException> = new Array<core.PreconditionException>();
                        const metadata_19: thrift.TList = input.readListBegin();
                        const size_19: number = metadata_19.size;
                        for (let i_19: number = 0; i_19 < size_19; i_19++) {
                            const value_145: core.PreconditionException = core.PreconditionException.read(input);
                            value_144.push(value_145);
                        }
                        input.readListEnd();
                        _args.success = value_144;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_146: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_146;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_147: core.ServerException = core.ServerException.read(input);
                        _args.error = value_147;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new CheckFilledDocumentPatternResult(_args);
    }
}
export interface IGetFreezeProcessRolesResultArgs {
    success?: Array<core.PatternProcessRole>;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class GetFreezeProcessRolesResult {
    public success?: Array<core.PatternProcessRole>;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IGetFreezeProcessRolesResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetFreezeProcessRolesResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_148: core.PatternProcessRole): void => {
                value_148.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetFreezeProcessRolesResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_149: Array<core.PatternProcessRole> = new Array<core.PatternProcessRole>();
                        const metadata_20: thrift.TList = input.readListBegin();
                        const size_20: number = metadata_20.size;
                        for (let i_20: number = 0; i_20 < size_20; i_20++) {
                            const value_150: core.PatternProcessRole = core.PatternProcessRole.read(input);
                            value_149.push(value_150);
                        }
                        input.readListEnd();
                        _args.success = value_149;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_151: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_151;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_152: core.ServerException = core.ServerException.read(input);
                        _args.error = value_152;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetFreezeProcessRolesResult(_args);
    }
}
export interface IChangeFreezeProcessRolesResultArgs {
    success?: Array<core.PatternProcessRole>;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class ChangeFreezeProcessRolesResult {
    public success?: Array<core.PatternProcessRole>;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IChangeFreezeProcessRolesResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ChangeFreezeProcessRolesResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_153: core.PatternProcessRole): void => {
                value_153.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ChangeFreezeProcessRolesResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_154: Array<core.PatternProcessRole> = new Array<core.PatternProcessRole>();
                        const metadata_21: thrift.TList = input.readListBegin();
                        const size_21: number = metadata_21.size;
                        for (let i_21: number = 0; i_21 < size_21; i_21++) {
                            const value_155: core.PatternProcessRole = core.PatternProcessRole.read(input);
                            value_154.push(value_155);
                        }
                        input.readListEnd();
                        _args.success = value_154;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_156: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_156;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_157: core.ServerException = core.ServerException.read(input);
                        _args.error = value_157;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ChangeFreezeProcessRolesResult(_args);
    }
}
export interface IGetFreezeProcessVariablesResultArgs {
    success?: Array<core.PatternVariable>;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class GetFreezeProcessVariablesResult {
    public success?: Array<core.PatternVariable>;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IGetFreezeProcessVariablesResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetFreezeProcessVariablesResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_158: core.PatternVariable): void => {
                value_158.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetFreezeProcessVariablesResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_159: Array<core.PatternVariable> = new Array<core.PatternVariable>();
                        const metadata_22: thrift.TList = input.readListBegin();
                        const size_22: number = metadata_22.size;
                        for (let i_22: number = 0; i_22 < size_22; i_22++) {
                            const value_160: core.PatternVariable = core.PatternVariable.read(input);
                            value_159.push(value_160);
                        }
                        input.readListEnd();
                        _args.success = value_159;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_161: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_161;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_162: core.ServerException = core.ServerException.read(input);
                        _args.error = value_162;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetFreezeProcessVariablesResult(_args);
    }
}
export interface IChangeFreezePatternVariablesResultArgs {
    success?: Array<core.PatternVariable>;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class ChangeFreezePatternVariablesResult {
    public success?: Array<core.PatternVariable>;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IChangeFreezePatternVariablesResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ChangeFreezePatternVariablesResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_163: core.PatternVariable): void => {
                value_163.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ChangeFreezePatternVariablesResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_164: Array<core.PatternVariable> = new Array<core.PatternVariable>();
                        const metadata_23: thrift.TList = input.readListBegin();
                        const size_23: number = metadata_23.size;
                        for (let i_23: number = 0; i_23 < size_23; i_23++) {
                            const value_165: core.PatternVariable = core.PatternVariable.read(input);
                            value_164.push(value_165);
                        }
                        input.readListEnd();
                        _args.success = value_164;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_166: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_166;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_167: core.ServerException = core.ServerException.read(input);
                        _args.error = value_167;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ChangeFreezePatternVariablesResult(_args);
    }
}
export class Client {
    public _seqid: number;
    public _reqs: {
        [name: number]: (err: Error | object | undefined, val?: any) => void;
    };
    public output: thrift.TTransport;
    public protocol: new (trans: thrift.TTransport) => thrift.TProtocol;
    constructor(output: thrift.TTransport, protocol: new (trans: thrift.TTransport) => thrift.TProtocol) {
        this._seqid = 0;
        this._reqs = {};
        this.output = output;
        this.protocol = protocol;
    }
    public incrementSeqId(): number {
        return this._seqid += 1;
    }
    public getFilledDocumentPattern(token: string, filledDocumentPatternId: string): Promise<core.FreezeDocumentPattern> {
        const requestId: number = this.incrementSeqId();
        return new Promise<core.FreezeDocumentPattern>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getFilledDocumentPattern(token, filledDocumentPatternId, requestId);
        });
    }
    public createAndCheckFilledDocumentPattern(token: string, freezeDocumentPattern: core.FreezeDocumentPattern, stages: Array<core.DocumentPatternStage>, toUpdate: Array<core.PatternProcessRole>): Promise<FreezePatternValidation.FreezePatternValidation> {
        const requestId: number = this.incrementSeqId();
        return new Promise<FreezePatternValidation.FreezePatternValidation>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_createAndCheckFilledDocumentPattern(token, freezeDocumentPattern, stages, toUpdate, requestId);
        });
    }
    public deleteFilledDocumentPattern(token: string, filledDocumentPatternId: string): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_deleteFilledDocumentPattern(token, filledDocumentPatternId, requestId);
        });
    }
    public getAllFilledDocumentPatternStages(token: string, fillDocPatternId: string, filter: core.KazFilter, selector: core.RuleSelector): Promise<Array<core.DocumentPatternStage>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<core.DocumentPatternStage>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAllFilledDocumentPatternStages(token, fillDocPatternId, filter, selector, requestId);
        });
    }
    public getFilledDocumentPatternStage(token: string, fillDocPatternId: string, stageId: string, selector: core.RuleSelector, policy: core.DocumentAccessPolicy): Promise<core.DocumentPatternStage> {
        const requestId: number = this.incrementSeqId();
        return new Promise<core.DocumentPatternStage>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getFilledDocumentPatternStage(token, fillDocPatternId, stageId, selector, policy, requestId);
        });
    }
    public getSetDecisionInfo(token: string, fillDocPatternId: string, freezeLinkId: string, selector: core.RuleSelector, policy: core.DocumentAccessPolicy): Promise<core.DesicionInfo> {
        const requestId: number = this.incrementSeqId();
        return new Promise<core.DesicionInfo>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getSetDecisionInfo(token, fillDocPatternId, freezeLinkId, selector, policy, requestId);
        });
    }
    public getAllChildFilledDocumentPatternStages(token: string, fillDocPatternId: string, stageId: string): Promise<Array<core.DocumentPatternStage>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<core.DocumentPatternStage>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAllChildFilledDocumentPatternStages(token, fillDocPatternId, stageId, requestId);
        });
    }
    public updateFilledDocumentPatternStageList(token: string, fillDocPatternId: string, documentPatternStage: Array<core.DocumentPatternStage>, enEditCurrent: boolean): Promise<Array<core.DocumentPatternStage>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<core.DocumentPatternStage>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_updateFilledDocumentPatternStageList(token, fillDocPatternId, documentPatternStage, enEditCurrent, requestId);
        });
    }
    public updateFilledDocumentPatternStagesLink(token: string, fillDocPatternId: string, links: Array<core.DocumentPatternStagesLink>): Promise<Array<core.DocumentPatternStagesLink>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<core.DocumentPatternStagesLink>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_updateFilledDocumentPatternStagesLink(token, fillDocPatternId, links, requestId);
        });
    }
    public getAllFilledDocumentPatternStagesLink(token: string, fillDocPatternId: string, filter: core.KazFilter): Promise<Array<core.DocumentPatternStagesLink>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<core.DocumentPatternStagesLink>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAllFilledDocumentPatternStagesLink(token, fillDocPatternId, filter, requestId);
        });
    }
    public getAllFilledDocumentPatternStageExecutors(token: string, fillDocPatternId: string, stageId: string, filter: core.KazFilter): Promise<Array<core.DocumentPatternStagesExecutor>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<core.DocumentPatternStagesExecutor>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAllFilledDocumentPatternStageExecutors(token, fillDocPatternId, stageId, filter, requestId);
        });
    }
    public getFilledDocumentPatternStagesExecutors(token: string, fillDocPatternId: string, stageIds: Array<string>, filter: core.KazFilter): Promise<Map<string, Array<core.DocumentPatternStagesExecutor>>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Map<string, Array<core.DocumentPatternStagesExecutor>>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getFilledDocumentPatternStagesExecutors(token, fillDocPatternId, stageIds, filter, requestId);
        });
    }
    public changeFilledDocumentPatternStages(token: string, fillDocPatternId: string, stages: Array<core.DocumentPatternStage>): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_changeFilledDocumentPatternStages(token, fillDocPatternId, stages, requestId);
        });
    }
    public checkFilledDocumentPattern(token: string, fillDocPatternId: string, filter: core.KazFilter): Promise<Array<core.PreconditionException>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<core.PreconditionException>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_checkFilledDocumentPattern(token, fillDocPatternId, filter, requestId);
        });
    }
    public getFreezeProcessRoles(token: string, docId: string, policy: core.DocumentAccessPolicy, filter: core.KazFilter): Promise<Array<core.PatternProcessRole>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<core.PatternProcessRole>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getFreezeProcessRoles(token, docId, policy, filter, requestId);
        });
    }
    public changeFreezeProcessRoles(token: string, docId: string, policy: core.DocumentAccessPolicy, patternRolesToAdd: Array<core.PatternProcessRole>, keyIdToRemove: Set<string>): Promise<Array<core.PatternProcessRole>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<core.PatternProcessRole>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_changeFreezeProcessRoles(token, docId, policy, patternRolesToAdd, keyIdToRemove, requestId);
        });
    }
    public getFreezeProcessVariables(token: string, docId: string, policy: core.DocumentAccessPolicy, filter: core.KazFilter): Promise<Array<core.PatternVariable>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<core.PatternVariable>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getFreezeProcessVariables(token, docId, policy, filter, requestId);
        });
    }
    public changeFreezePatternVariables(token: string, docId: string, policy: core.DocumentAccessPolicy, patternVariablesToAdd: Array<core.PatternVariable>, keyIdToRemove: Set<string>): Promise<Array<core.PatternVariable>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<core.PatternVariable>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_changeFreezePatternVariables(token, docId, policy, patternVariablesToAdd, keyIdToRemove, requestId);
        });
    }
    public send_getFilledDocumentPattern(token: string, filledDocumentPatternId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getFilledDocumentPattern", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetFilledDocumentPatternArgs = new GetFilledDocumentPatternArgs({ token, filledDocumentPatternId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_createAndCheckFilledDocumentPattern(token: string, freezeDocumentPattern: core.FreezeDocumentPattern, stages: Array<core.DocumentPatternStage>, toUpdate: Array<core.PatternProcessRole>, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("createAndCheckFilledDocumentPattern", thrift.Thrift.MessageType.CALL, requestId);
        const args: CreateAndCheckFilledDocumentPatternArgs = new CreateAndCheckFilledDocumentPatternArgs({ token, freezeDocumentPattern, stages, toUpdate });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_deleteFilledDocumentPattern(token: string, filledDocumentPatternId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("deleteFilledDocumentPattern", thrift.Thrift.MessageType.CALL, requestId);
        const args: DeleteFilledDocumentPatternArgs = new DeleteFilledDocumentPatternArgs({ token, filledDocumentPatternId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getAllFilledDocumentPatternStages(token: string, fillDocPatternId: string, filter: core.KazFilter, selector: core.RuleSelector, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAllFilledDocumentPatternStages", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAllFilledDocumentPatternStagesArgs = new GetAllFilledDocumentPatternStagesArgs({ token, fillDocPatternId, filter, selector });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getFilledDocumentPatternStage(token: string, fillDocPatternId: string, stageId: string, selector: core.RuleSelector, policy: core.DocumentAccessPolicy, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getFilledDocumentPatternStage", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetFilledDocumentPatternStageArgs = new GetFilledDocumentPatternStageArgs({ token, fillDocPatternId, stageId, selector, policy });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getSetDecisionInfo(token: string, fillDocPatternId: string, freezeLinkId: string, selector: core.RuleSelector, policy: core.DocumentAccessPolicy, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getSetDecisionInfo", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetSetDecisionInfoArgs = new GetSetDecisionInfoArgs({ token, fillDocPatternId, freezeLinkId, selector, policy });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getAllChildFilledDocumentPatternStages(token: string, fillDocPatternId: string, stageId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAllChildFilledDocumentPatternStages", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAllChildFilledDocumentPatternStagesArgs = new GetAllChildFilledDocumentPatternStagesArgs({ token, fillDocPatternId, stageId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_updateFilledDocumentPatternStageList(token: string, fillDocPatternId: string, documentPatternStage: Array<core.DocumentPatternStage>, enEditCurrent: boolean, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("updateFilledDocumentPatternStageList", thrift.Thrift.MessageType.CALL, requestId);
        const args: UpdateFilledDocumentPatternStageListArgs = new UpdateFilledDocumentPatternStageListArgs({ token, fillDocPatternId, documentPatternStage, enEditCurrent });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_updateFilledDocumentPatternStagesLink(token: string, fillDocPatternId: string, links: Array<core.DocumentPatternStagesLink>, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("updateFilledDocumentPatternStagesLink", thrift.Thrift.MessageType.CALL, requestId);
        const args: UpdateFilledDocumentPatternStagesLinkArgs = new UpdateFilledDocumentPatternStagesLinkArgs({ token, fillDocPatternId, links });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getAllFilledDocumentPatternStagesLink(token: string, fillDocPatternId: string, filter: core.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAllFilledDocumentPatternStagesLink", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAllFilledDocumentPatternStagesLinkArgs = new GetAllFilledDocumentPatternStagesLinkArgs({ token, fillDocPatternId, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getAllFilledDocumentPatternStageExecutors(token: string, fillDocPatternId: string, stageId: string, filter: core.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAllFilledDocumentPatternStageExecutors", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAllFilledDocumentPatternStageExecutorsArgs = new GetAllFilledDocumentPatternStageExecutorsArgs({ token, fillDocPatternId, stageId, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getFilledDocumentPatternStagesExecutors(token: string, fillDocPatternId: string, stageIds: Array<string>, filter: core.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getFilledDocumentPatternStagesExecutors", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetFilledDocumentPatternStagesExecutorsArgs = new GetFilledDocumentPatternStagesExecutorsArgs({ token, fillDocPatternId, stageIds, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_changeFilledDocumentPatternStages(token: string, fillDocPatternId: string, stages: Array<core.DocumentPatternStage>, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("changeFilledDocumentPatternStages", thrift.Thrift.MessageType.CALL, requestId);
        const args: ChangeFilledDocumentPatternStagesArgs = new ChangeFilledDocumentPatternStagesArgs({ token, fillDocPatternId, stages });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_checkFilledDocumentPattern(token: string, fillDocPatternId: string, filter: core.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("checkFilledDocumentPattern", thrift.Thrift.MessageType.CALL, requestId);
        const args: CheckFilledDocumentPatternArgs = new CheckFilledDocumentPatternArgs({ token, fillDocPatternId, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getFreezeProcessRoles(token: string, docId: string, policy: core.DocumentAccessPolicy, filter: core.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getFreezeProcessRoles", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetFreezeProcessRolesArgs = new GetFreezeProcessRolesArgs({ token, docId, policy, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_changeFreezeProcessRoles(token: string, docId: string, policy: core.DocumentAccessPolicy, patternRolesToAdd: Array<core.PatternProcessRole>, keyIdToRemove: Set<string>, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("changeFreezeProcessRoles", thrift.Thrift.MessageType.CALL, requestId);
        const args: ChangeFreezeProcessRolesArgs = new ChangeFreezeProcessRolesArgs({ token, docId, policy, patternRolesToAdd, keyIdToRemove });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getFreezeProcessVariables(token: string, docId: string, policy: core.DocumentAccessPolicy, filter: core.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getFreezeProcessVariables", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetFreezeProcessVariablesArgs = new GetFreezeProcessVariablesArgs({ token, docId, policy, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_changeFreezePatternVariables(token: string, docId: string, policy: core.DocumentAccessPolicy, patternVariablesToAdd: Array<core.PatternVariable>, keyIdToRemove: Set<string>, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("changeFreezePatternVariables", thrift.Thrift.MessageType.CALL, requestId);
        const args: ChangeFreezePatternVariablesArgs = new ChangeFreezePatternVariablesArgs({ token, docId, policy, patternVariablesToAdd, keyIdToRemove });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public recv_getFilledDocumentPattern(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetFilledDocumentPatternResult = GetFilledDocumentPatternResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getFilledDocumentPattern failed: unknown result"));
                }
            }
        }
    }
    public recv_createAndCheckFilledDocumentPattern(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: CreateAndCheckFilledDocumentPatternResult = CreateAndCheckFilledDocumentPatternResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "createAndCheckFilledDocumentPattern failed: unknown result"));
                }
            }
        }
    }
    public recv_deleteFilledDocumentPattern(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: DeleteFilledDocumentPatternResult = DeleteFilledDocumentPatternResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "deleteFilledDocumentPattern failed: unknown result"));
                }
            }
        }
    }
    public recv_getAllFilledDocumentPatternStages(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAllFilledDocumentPatternStagesResult = GetAllFilledDocumentPatternStagesResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAllFilledDocumentPatternStages failed: unknown result"));
                }
            }
        }
    }
    public recv_getFilledDocumentPatternStage(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetFilledDocumentPatternStageResult = GetFilledDocumentPatternStageResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getFilledDocumentPatternStage failed: unknown result"));
                }
            }
        }
    }
    public recv_getSetDecisionInfo(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetSetDecisionInfoResult = GetSetDecisionInfoResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getSetDecisionInfo failed: unknown result"));
                }
            }
        }
    }
    public recv_getAllChildFilledDocumentPatternStages(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAllChildFilledDocumentPatternStagesResult = GetAllChildFilledDocumentPatternStagesResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAllChildFilledDocumentPatternStages failed: unknown result"));
                }
            }
        }
    }
    public recv_updateFilledDocumentPatternStageList(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: UpdateFilledDocumentPatternStageListResult = UpdateFilledDocumentPatternStageListResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "updateFilledDocumentPatternStageList failed: unknown result"));
                }
            }
        }
    }
    public recv_updateFilledDocumentPatternStagesLink(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: UpdateFilledDocumentPatternStagesLinkResult = UpdateFilledDocumentPatternStagesLinkResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "updateFilledDocumentPatternStagesLink failed: unknown result"));
                }
            }
        }
    }
    public recv_getAllFilledDocumentPatternStagesLink(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAllFilledDocumentPatternStagesLinkResult = GetAllFilledDocumentPatternStagesLinkResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAllFilledDocumentPatternStagesLink failed: unknown result"));
                }
            }
        }
    }
    public recv_getAllFilledDocumentPatternStageExecutors(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAllFilledDocumentPatternStageExecutorsResult = GetAllFilledDocumentPatternStageExecutorsResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAllFilledDocumentPatternStageExecutors failed: unknown result"));
                }
            }
        }
    }
    public recv_getFilledDocumentPatternStagesExecutors(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetFilledDocumentPatternStagesExecutorsResult = GetFilledDocumentPatternStagesExecutorsResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getFilledDocumentPatternStagesExecutors failed: unknown result"));
                }
            }
        }
    }
    public recv_changeFilledDocumentPatternStages(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: ChangeFilledDocumentPatternStagesResult = ChangeFilledDocumentPatternStagesResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "changeFilledDocumentPatternStages failed: unknown result"));
                }
            }
        }
    }
    public recv_checkFilledDocumentPattern(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: CheckFilledDocumentPatternResult = CheckFilledDocumentPatternResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "checkFilledDocumentPattern failed: unknown result"));
                }
            }
        }
    }
    public recv_getFreezeProcessRoles(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetFreezeProcessRolesResult = GetFreezeProcessRolesResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getFreezeProcessRoles failed: unknown result"));
                }
            }
        }
    }
    public recv_changeFreezeProcessRoles(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: ChangeFreezeProcessRolesResult = ChangeFreezeProcessRolesResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "changeFreezeProcessRoles failed: unknown result"));
                }
            }
        }
    }
    public recv_getFreezeProcessVariables(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetFreezeProcessVariablesResult = GetFreezeProcessVariablesResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getFreezeProcessVariables failed: unknown result"));
                }
            }
        }
    }
    public recv_changeFreezePatternVariables(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: ChangeFreezePatternVariablesResult = ChangeFreezePatternVariablesResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "changeFreezePatternVariables failed: unknown result"));
                }
            }
        }
    }
}
export interface IHandler {
    getFilledDocumentPattern(token: string, filledDocumentPatternId: string): core.FreezeDocumentPattern | Promise<core.FreezeDocumentPattern>;
    createAndCheckFilledDocumentPattern(token: string, freezeDocumentPattern: core.FreezeDocumentPattern, stages: Array<core.DocumentPatternStage>, toUpdate: Array<core.PatternProcessRole>): FreezePatternValidation.FreezePatternValidation | Promise<FreezePatternValidation.FreezePatternValidation>;
    deleteFilledDocumentPattern(token: string, filledDocumentPatternId: string): boolean | Promise<boolean>;
    getAllFilledDocumentPatternStages(token: string, fillDocPatternId: string, filter: core.KazFilter, selector: core.RuleSelector): Array<core.DocumentPatternStage> | Promise<Array<core.DocumentPatternStage>>;
    getFilledDocumentPatternStage(token: string, fillDocPatternId: string, stageId: string, selector: core.RuleSelector, policy: core.DocumentAccessPolicy): core.DocumentPatternStage | Promise<core.DocumentPatternStage>;
    getSetDecisionInfo(token: string, fillDocPatternId: string, freezeLinkId: string, selector: core.RuleSelector, policy: core.DocumentAccessPolicy): core.DesicionInfo | Promise<core.DesicionInfo>;
    getAllChildFilledDocumentPatternStages(token: string, fillDocPatternId: string, stageId: string): Array<core.DocumentPatternStage> | Promise<Array<core.DocumentPatternStage>>;
    updateFilledDocumentPatternStageList(token: string, fillDocPatternId: string, documentPatternStage: Array<core.DocumentPatternStage>, enEditCurrent: boolean): Array<core.DocumentPatternStage> | Promise<Array<core.DocumentPatternStage>>;
    updateFilledDocumentPatternStagesLink(token: string, fillDocPatternId: string, links: Array<core.DocumentPatternStagesLink>): Array<core.DocumentPatternStagesLink> | Promise<Array<core.DocumentPatternStagesLink>>;
    getAllFilledDocumentPatternStagesLink(token: string, fillDocPatternId: string, filter: core.KazFilter): Array<core.DocumentPatternStagesLink> | Promise<Array<core.DocumentPatternStagesLink>>;
    getAllFilledDocumentPatternStageExecutors(token: string, fillDocPatternId: string, stageId: string, filter: core.KazFilter): Array<core.DocumentPatternStagesExecutor> | Promise<Array<core.DocumentPatternStagesExecutor>>;
    getFilledDocumentPatternStagesExecutors(token: string, fillDocPatternId: string, stageIds: Array<string>, filter: core.KazFilter): Map<string, Array<core.DocumentPatternStagesExecutor>> | Promise<Map<string, Array<core.DocumentPatternStagesExecutor>>>;
    changeFilledDocumentPatternStages(token: string, fillDocPatternId: string, stages: Array<core.DocumentPatternStage>): boolean | Promise<boolean>;
    checkFilledDocumentPattern(token: string, fillDocPatternId: string, filter: core.KazFilter): Array<core.PreconditionException> | Promise<Array<core.PreconditionException>>;
    getFreezeProcessRoles(token: string, docId: string, policy: core.DocumentAccessPolicy, filter: core.KazFilter): Array<core.PatternProcessRole> | Promise<Array<core.PatternProcessRole>>;
    changeFreezeProcessRoles(token: string, docId: string, policy: core.DocumentAccessPolicy, patternRolesToAdd: Array<core.PatternProcessRole>, keyIdToRemove: Set<string>): Array<core.PatternProcessRole> | Promise<Array<core.PatternProcessRole>>;
    getFreezeProcessVariables(token: string, docId: string, policy: core.DocumentAccessPolicy, filter: core.KazFilter): Array<core.PatternVariable> | Promise<Array<core.PatternVariable>>;
    changeFreezePatternVariables(token: string, docId: string, policy: core.DocumentAccessPolicy, patternVariablesToAdd: Array<core.PatternVariable>, keyIdToRemove: Set<string>): Array<core.PatternVariable> | Promise<Array<core.PatternVariable>>;
}
export class Processor {
    public _handler: IHandler;
    constructor(handler: IHandler) {
        this._handler = handler;
    }
    public process(input: thrift.TProtocol, output: thrift.TProtocol): void {
        const metadata: thrift.TMessage = input.readMessageBegin();
        const fname: string = metadata.fname;
        const requestId: number = metadata.rseqid;
        const methodName: string = "process_" + fname;
        switch (methodName) {
            case "process_getFilledDocumentPattern": {
                this.process_getFilledDocumentPattern(requestId, input, output);
                return;
            }
            case "process_createAndCheckFilledDocumentPattern": {
                this.process_createAndCheckFilledDocumentPattern(requestId, input, output);
                return;
            }
            case "process_deleteFilledDocumentPattern": {
                this.process_deleteFilledDocumentPattern(requestId, input, output);
                return;
            }
            case "process_getAllFilledDocumentPatternStages": {
                this.process_getAllFilledDocumentPatternStages(requestId, input, output);
                return;
            }
            case "process_getFilledDocumentPatternStage": {
                this.process_getFilledDocumentPatternStage(requestId, input, output);
                return;
            }
            case "process_getSetDecisionInfo": {
                this.process_getSetDecisionInfo(requestId, input, output);
                return;
            }
            case "process_getAllChildFilledDocumentPatternStages": {
                this.process_getAllChildFilledDocumentPatternStages(requestId, input, output);
                return;
            }
            case "process_updateFilledDocumentPatternStageList": {
                this.process_updateFilledDocumentPatternStageList(requestId, input, output);
                return;
            }
            case "process_updateFilledDocumentPatternStagesLink": {
                this.process_updateFilledDocumentPatternStagesLink(requestId, input, output);
                return;
            }
            case "process_getAllFilledDocumentPatternStagesLink": {
                this.process_getAllFilledDocumentPatternStagesLink(requestId, input, output);
                return;
            }
            case "process_getAllFilledDocumentPatternStageExecutors": {
                this.process_getAllFilledDocumentPatternStageExecutors(requestId, input, output);
                return;
            }
            case "process_getFilledDocumentPatternStagesExecutors": {
                this.process_getFilledDocumentPatternStagesExecutors(requestId, input, output);
                return;
            }
            case "process_changeFilledDocumentPatternStages": {
                this.process_changeFilledDocumentPatternStages(requestId, input, output);
                return;
            }
            case "process_checkFilledDocumentPattern": {
                this.process_checkFilledDocumentPattern(requestId, input, output);
                return;
            }
            case "process_getFreezeProcessRoles": {
                this.process_getFreezeProcessRoles(requestId, input, output);
                return;
            }
            case "process_changeFreezeProcessRoles": {
                this.process_changeFreezeProcessRoles(requestId, input, output);
                return;
            }
            case "process_getFreezeProcessVariables": {
                this.process_getFreezeProcessVariables(requestId, input, output);
                return;
            }
            case "process_changeFreezePatternVariables": {
                this.process_changeFreezePatternVariables(requestId, input, output);
                return;
            }
            default: {
                input.skip(thrift.Thrift.Type.STRUCT);
                input.readMessageEnd();
                const errMessage = "Unknown function " + fname;
                const err = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN_METHOD, errMessage);
                output.writeMessageBegin(fname, thrift.Thrift.MessageType.EXCEPTION, requestId);
                err.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        }
    }
    public process_getFilledDocumentPattern(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<core.FreezeDocumentPattern>((resolve, reject): void => {
            try {
                const args: GetFilledDocumentPatternArgs = GetFilledDocumentPatternArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getFilledDocumentPattern(args.token, args.filledDocumentPatternId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: core.FreezeDocumentPattern): void => {
            const result: GetFilledDocumentPatternResult = new GetFilledDocumentPatternResult({ success: data });
            output.writeMessageBegin("getFilledDocumentPattern", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: GetFilledDocumentPatternResult = new GetFilledDocumentPatternResult({ validError: err });
                output.writeMessageBegin("getFilledDocumentPattern", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: GetFilledDocumentPatternResult = new GetFilledDocumentPatternResult({ error: err });
                output.writeMessageBegin("getFilledDocumentPattern", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getFilledDocumentPattern", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_createAndCheckFilledDocumentPattern(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<FreezePatternValidation.FreezePatternValidation>((resolve, reject): void => {
            try {
                const args: CreateAndCheckFilledDocumentPatternArgs = CreateAndCheckFilledDocumentPatternArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.createAndCheckFilledDocumentPattern(args.token, args.freezeDocumentPattern, args.stages, args.toUpdate));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: FreezePatternValidation.FreezePatternValidation): void => {
            const result: CreateAndCheckFilledDocumentPatternResult = new CreateAndCheckFilledDocumentPatternResult({ success: data });
            output.writeMessageBegin("createAndCheckFilledDocumentPattern", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: CreateAndCheckFilledDocumentPatternResult = new CreateAndCheckFilledDocumentPatternResult({ validError: err });
                output.writeMessageBegin("createAndCheckFilledDocumentPattern", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: CreateAndCheckFilledDocumentPatternResult = new CreateAndCheckFilledDocumentPatternResult({ error: err });
                output.writeMessageBegin("createAndCheckFilledDocumentPattern", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("createAndCheckFilledDocumentPattern", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_deleteFilledDocumentPattern(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: DeleteFilledDocumentPatternArgs = DeleteFilledDocumentPatternArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.deleteFilledDocumentPattern(args.token, args.filledDocumentPatternId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: DeleteFilledDocumentPatternResult = new DeleteFilledDocumentPatternResult({ success: data });
            output.writeMessageBegin("deleteFilledDocumentPattern", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: DeleteFilledDocumentPatternResult = new DeleteFilledDocumentPatternResult({ validError: err });
                output.writeMessageBegin("deleteFilledDocumentPattern", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: DeleteFilledDocumentPatternResult = new DeleteFilledDocumentPatternResult({ error: err });
                output.writeMessageBegin("deleteFilledDocumentPattern", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("deleteFilledDocumentPattern", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getAllFilledDocumentPatternStages(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<core.DocumentPatternStage>>((resolve, reject): void => {
            try {
                const args: GetAllFilledDocumentPatternStagesArgs = GetAllFilledDocumentPatternStagesArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAllFilledDocumentPatternStages(args.token, args.fillDocPatternId, args.filter, args.selector));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<core.DocumentPatternStage>): void => {
            const result: GetAllFilledDocumentPatternStagesResult = new GetAllFilledDocumentPatternStagesResult({ success: data });
            output.writeMessageBegin("getAllFilledDocumentPatternStages", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: GetAllFilledDocumentPatternStagesResult = new GetAllFilledDocumentPatternStagesResult({ validError: err });
                output.writeMessageBegin("getAllFilledDocumentPatternStages", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: GetAllFilledDocumentPatternStagesResult = new GetAllFilledDocumentPatternStagesResult({ error: err });
                output.writeMessageBegin("getAllFilledDocumentPatternStages", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAllFilledDocumentPatternStages", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getFilledDocumentPatternStage(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<core.DocumentPatternStage>((resolve, reject): void => {
            try {
                const args: GetFilledDocumentPatternStageArgs = GetFilledDocumentPatternStageArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getFilledDocumentPatternStage(args.token, args.fillDocPatternId, args.stageId, args.selector, args.policy));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: core.DocumentPatternStage): void => {
            const result: GetFilledDocumentPatternStageResult = new GetFilledDocumentPatternStageResult({ success: data });
            output.writeMessageBegin("getFilledDocumentPatternStage", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: GetFilledDocumentPatternStageResult = new GetFilledDocumentPatternStageResult({ validError: err });
                output.writeMessageBegin("getFilledDocumentPatternStage", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: GetFilledDocumentPatternStageResult = new GetFilledDocumentPatternStageResult({ error: err });
                output.writeMessageBegin("getFilledDocumentPatternStage", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getFilledDocumentPatternStage", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getSetDecisionInfo(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<core.DesicionInfo>((resolve, reject): void => {
            try {
                const args: GetSetDecisionInfoArgs = GetSetDecisionInfoArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getSetDecisionInfo(args.token, args.fillDocPatternId, args.freezeLinkId, args.selector, args.policy));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: core.DesicionInfo): void => {
            const result: GetSetDecisionInfoResult = new GetSetDecisionInfoResult({ success: data });
            output.writeMessageBegin("getSetDecisionInfo", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: GetSetDecisionInfoResult = new GetSetDecisionInfoResult({ validError: err });
                output.writeMessageBegin("getSetDecisionInfo", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: GetSetDecisionInfoResult = new GetSetDecisionInfoResult({ error: err });
                output.writeMessageBegin("getSetDecisionInfo", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getSetDecisionInfo", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getAllChildFilledDocumentPatternStages(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<core.DocumentPatternStage>>((resolve, reject): void => {
            try {
                const args: GetAllChildFilledDocumentPatternStagesArgs = GetAllChildFilledDocumentPatternStagesArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAllChildFilledDocumentPatternStages(args.token, args.fillDocPatternId, args.stageId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<core.DocumentPatternStage>): void => {
            const result: GetAllChildFilledDocumentPatternStagesResult = new GetAllChildFilledDocumentPatternStagesResult({ success: data });
            output.writeMessageBegin("getAllChildFilledDocumentPatternStages", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: GetAllChildFilledDocumentPatternStagesResult = new GetAllChildFilledDocumentPatternStagesResult({ validError: err });
                output.writeMessageBegin("getAllChildFilledDocumentPatternStages", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: GetAllChildFilledDocumentPatternStagesResult = new GetAllChildFilledDocumentPatternStagesResult({ error: err });
                output.writeMessageBegin("getAllChildFilledDocumentPatternStages", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAllChildFilledDocumentPatternStages", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_updateFilledDocumentPatternStageList(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<core.DocumentPatternStage>>((resolve, reject): void => {
            try {
                const args: UpdateFilledDocumentPatternStageListArgs = UpdateFilledDocumentPatternStageListArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.updateFilledDocumentPatternStageList(args.token, args.fillDocPatternId, args.documentPatternStage, args.enEditCurrent));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<core.DocumentPatternStage>): void => {
            const result: UpdateFilledDocumentPatternStageListResult = new UpdateFilledDocumentPatternStageListResult({ success: data });
            output.writeMessageBegin("updateFilledDocumentPatternStageList", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: UpdateFilledDocumentPatternStageListResult = new UpdateFilledDocumentPatternStageListResult({ validError: err });
                output.writeMessageBegin("updateFilledDocumentPatternStageList", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: UpdateFilledDocumentPatternStageListResult = new UpdateFilledDocumentPatternStageListResult({ error: err });
                output.writeMessageBegin("updateFilledDocumentPatternStageList", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("updateFilledDocumentPatternStageList", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_updateFilledDocumentPatternStagesLink(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<core.DocumentPatternStagesLink>>((resolve, reject): void => {
            try {
                const args: UpdateFilledDocumentPatternStagesLinkArgs = UpdateFilledDocumentPatternStagesLinkArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.updateFilledDocumentPatternStagesLink(args.token, args.fillDocPatternId, args.links));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<core.DocumentPatternStagesLink>): void => {
            const result: UpdateFilledDocumentPatternStagesLinkResult = new UpdateFilledDocumentPatternStagesLinkResult({ success: data });
            output.writeMessageBegin("updateFilledDocumentPatternStagesLink", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: UpdateFilledDocumentPatternStagesLinkResult = new UpdateFilledDocumentPatternStagesLinkResult({ validError: err });
                output.writeMessageBegin("updateFilledDocumentPatternStagesLink", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: UpdateFilledDocumentPatternStagesLinkResult = new UpdateFilledDocumentPatternStagesLinkResult({ error: err });
                output.writeMessageBegin("updateFilledDocumentPatternStagesLink", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("updateFilledDocumentPatternStagesLink", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getAllFilledDocumentPatternStagesLink(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<core.DocumentPatternStagesLink>>((resolve, reject): void => {
            try {
                const args: GetAllFilledDocumentPatternStagesLinkArgs = GetAllFilledDocumentPatternStagesLinkArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAllFilledDocumentPatternStagesLink(args.token, args.fillDocPatternId, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<core.DocumentPatternStagesLink>): void => {
            const result: GetAllFilledDocumentPatternStagesLinkResult = new GetAllFilledDocumentPatternStagesLinkResult({ success: data });
            output.writeMessageBegin("getAllFilledDocumentPatternStagesLink", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: GetAllFilledDocumentPatternStagesLinkResult = new GetAllFilledDocumentPatternStagesLinkResult({ validError: err });
                output.writeMessageBegin("getAllFilledDocumentPatternStagesLink", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: GetAllFilledDocumentPatternStagesLinkResult = new GetAllFilledDocumentPatternStagesLinkResult({ error: err });
                output.writeMessageBegin("getAllFilledDocumentPatternStagesLink", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAllFilledDocumentPatternStagesLink", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getAllFilledDocumentPatternStageExecutors(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<core.DocumentPatternStagesExecutor>>((resolve, reject): void => {
            try {
                const args: GetAllFilledDocumentPatternStageExecutorsArgs = GetAllFilledDocumentPatternStageExecutorsArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAllFilledDocumentPatternStageExecutors(args.token, args.fillDocPatternId, args.stageId, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<core.DocumentPatternStagesExecutor>): void => {
            const result: GetAllFilledDocumentPatternStageExecutorsResult = new GetAllFilledDocumentPatternStageExecutorsResult({ success: data });
            output.writeMessageBegin("getAllFilledDocumentPatternStageExecutors", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: GetAllFilledDocumentPatternStageExecutorsResult = new GetAllFilledDocumentPatternStageExecutorsResult({ validError: err });
                output.writeMessageBegin("getAllFilledDocumentPatternStageExecutors", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: GetAllFilledDocumentPatternStageExecutorsResult = new GetAllFilledDocumentPatternStageExecutorsResult({ error: err });
                output.writeMessageBegin("getAllFilledDocumentPatternStageExecutors", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAllFilledDocumentPatternStageExecutors", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getFilledDocumentPatternStagesExecutors(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Map<string, Array<core.DocumentPatternStagesExecutor>>>((resolve, reject): void => {
            try {
                const args: GetFilledDocumentPatternStagesExecutorsArgs = GetFilledDocumentPatternStagesExecutorsArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getFilledDocumentPatternStagesExecutors(args.token, args.fillDocPatternId, args.stageIds, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Map<string, Array<core.DocumentPatternStagesExecutor>>): void => {
            const result: GetFilledDocumentPatternStagesExecutorsResult = new GetFilledDocumentPatternStagesExecutorsResult({ success: data });
            output.writeMessageBegin("getFilledDocumentPatternStagesExecutors", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: GetFilledDocumentPatternStagesExecutorsResult = new GetFilledDocumentPatternStagesExecutorsResult({ validError: err });
                output.writeMessageBegin("getFilledDocumentPatternStagesExecutors", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: GetFilledDocumentPatternStagesExecutorsResult = new GetFilledDocumentPatternStagesExecutorsResult({ error: err });
                output.writeMessageBegin("getFilledDocumentPatternStagesExecutors", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getFilledDocumentPatternStagesExecutors", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_changeFilledDocumentPatternStages(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: ChangeFilledDocumentPatternStagesArgs = ChangeFilledDocumentPatternStagesArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.changeFilledDocumentPatternStages(args.token, args.fillDocPatternId, args.stages));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: ChangeFilledDocumentPatternStagesResult = new ChangeFilledDocumentPatternStagesResult({ success: data });
            output.writeMessageBegin("changeFilledDocumentPatternStages", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: ChangeFilledDocumentPatternStagesResult = new ChangeFilledDocumentPatternStagesResult({ validError: err });
                output.writeMessageBegin("changeFilledDocumentPatternStages", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: ChangeFilledDocumentPatternStagesResult = new ChangeFilledDocumentPatternStagesResult({ error: err });
                output.writeMessageBegin("changeFilledDocumentPatternStages", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("changeFilledDocumentPatternStages", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_checkFilledDocumentPattern(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<core.PreconditionException>>((resolve, reject): void => {
            try {
                const args: CheckFilledDocumentPatternArgs = CheckFilledDocumentPatternArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.checkFilledDocumentPattern(args.token, args.fillDocPatternId, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<core.PreconditionException>): void => {
            const result: CheckFilledDocumentPatternResult = new CheckFilledDocumentPatternResult({ success: data });
            output.writeMessageBegin("checkFilledDocumentPattern", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: CheckFilledDocumentPatternResult = new CheckFilledDocumentPatternResult({ validError: err });
                output.writeMessageBegin("checkFilledDocumentPattern", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: CheckFilledDocumentPatternResult = new CheckFilledDocumentPatternResult({ error: err });
                output.writeMessageBegin("checkFilledDocumentPattern", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("checkFilledDocumentPattern", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getFreezeProcessRoles(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<core.PatternProcessRole>>((resolve, reject): void => {
            try {
                const args: GetFreezeProcessRolesArgs = GetFreezeProcessRolesArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getFreezeProcessRoles(args.token, args.docId, args.policy, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<core.PatternProcessRole>): void => {
            const result: GetFreezeProcessRolesResult = new GetFreezeProcessRolesResult({ success: data });
            output.writeMessageBegin("getFreezeProcessRoles", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: GetFreezeProcessRolesResult = new GetFreezeProcessRolesResult({ validError: err });
                output.writeMessageBegin("getFreezeProcessRoles", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: GetFreezeProcessRolesResult = new GetFreezeProcessRolesResult({ error: err });
                output.writeMessageBegin("getFreezeProcessRoles", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getFreezeProcessRoles", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_changeFreezeProcessRoles(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<core.PatternProcessRole>>((resolve, reject): void => {
            try {
                const args: ChangeFreezeProcessRolesArgs = ChangeFreezeProcessRolesArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.changeFreezeProcessRoles(args.token, args.docId, args.policy, args.patternRolesToAdd, args.keyIdToRemove));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<core.PatternProcessRole>): void => {
            const result: ChangeFreezeProcessRolesResult = new ChangeFreezeProcessRolesResult({ success: data });
            output.writeMessageBegin("changeFreezeProcessRoles", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: ChangeFreezeProcessRolesResult = new ChangeFreezeProcessRolesResult({ validError: err });
                output.writeMessageBegin("changeFreezeProcessRoles", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: ChangeFreezeProcessRolesResult = new ChangeFreezeProcessRolesResult({ error: err });
                output.writeMessageBegin("changeFreezeProcessRoles", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("changeFreezeProcessRoles", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getFreezeProcessVariables(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<core.PatternVariable>>((resolve, reject): void => {
            try {
                const args: GetFreezeProcessVariablesArgs = GetFreezeProcessVariablesArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getFreezeProcessVariables(args.token, args.docId, args.policy, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<core.PatternVariable>): void => {
            const result: GetFreezeProcessVariablesResult = new GetFreezeProcessVariablesResult({ success: data });
            output.writeMessageBegin("getFreezeProcessVariables", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: GetFreezeProcessVariablesResult = new GetFreezeProcessVariablesResult({ validError: err });
                output.writeMessageBegin("getFreezeProcessVariables", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: GetFreezeProcessVariablesResult = new GetFreezeProcessVariablesResult({ error: err });
                output.writeMessageBegin("getFreezeProcessVariables", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getFreezeProcessVariables", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_changeFreezePatternVariables(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<core.PatternVariable>>((resolve, reject): void => {
            try {
                const args: ChangeFreezePatternVariablesArgs = ChangeFreezePatternVariablesArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.changeFreezePatternVariables(args.token, args.docId, args.policy, args.patternVariablesToAdd, args.keyIdToRemove));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<core.PatternVariable>): void => {
            const result: ChangeFreezePatternVariablesResult = new ChangeFreezePatternVariablesResult({ success: data });
            output.writeMessageBegin("changeFreezePatternVariables", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: ChangeFreezePatternVariablesResult = new ChangeFreezePatternVariablesResult({ validError: err });
                output.writeMessageBegin("changeFreezePatternVariables", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: ChangeFreezePatternVariablesResult = new ChangeFreezePatternVariablesResult({ error: err });
                output.writeMessageBegin("changeFreezePatternVariables", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("changeFreezePatternVariables", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
}

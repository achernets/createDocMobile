/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface ISimpleDocumentPatternOrGroupArgs {
    id?: string;
    oName?: string;
    oDescription?: string;
    ids?: Array<string>;
    order?: number;
}
export class SimpleDocumentPatternOrGroup {
    public id?: string;
    public oName?: string;
    public oDescription?: string;
    public ids?: Array<string>;
    public order?: number;
    constructor(args?: ISimpleDocumentPatternOrGroupArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.oName != null) {
            this.oName = args.oName;
        }
        if (args != null && args.oDescription != null) {
            this.oDescription = args.oDescription;
        }
        if (args != null && args.ids != null) {
            this.ids = args.ids;
        }
        if (args != null && args.order != null) {
            this.order = args.order;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("SimpleDocumentPatternOrGroup");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.oName != null) {
            output.writeFieldBegin("oName", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.oName);
            output.writeFieldEnd();
        }
        if (this.oDescription != null) {
            output.writeFieldBegin("oDescription", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.oDescription);
            output.writeFieldEnd();
        }
        if (this.ids != null) {
            output.writeFieldBegin("ids", thrift.Thrift.Type.LIST, 4);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.ids.length);
            this.ids.forEach((value_1: string): void => {
                output.writeString(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.order != null) {
            output.writeFieldBegin("order", thrift.Thrift.Type.I32, 5);
            output.writeI32(this.order);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): SimpleDocumentPatternOrGroup {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.id = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.oName = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.oDescription = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_5: Array<string> = new Array<string>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_6: string = input.readString();
                            value_5.push(value_6);
                        }
                        input.readListEnd();
                        _args.ids = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_7: number = input.readI32();
                        _args.order = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new SimpleDocumentPatternOrGroup(_args);
    }
}

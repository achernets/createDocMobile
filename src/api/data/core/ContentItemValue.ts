/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as ContentItemHBValue from "./ContentItemHBValue";
import * as ContentItemVoteValue from "./ContentItemVoteValue";
export interface IContentItemValueArgs {
    strValue?: string;
    hbValue?: ContentItemHBValue.ContentItemHBValue;
    strValue2?: string;
    voteValue?: ContentItemVoteValue.ContentItemVoteValue;
    min?: string;
    max?: string;
}
export class ContentItemValue {
    public strValue?: string;
    public hbValue?: ContentItemHBValue.ContentItemHBValue;
    public strValue2?: string;
    public voteValue?: ContentItemVoteValue.ContentItemVoteValue;
    public min?: string;
    public max?: string;
    constructor(args?: IContentItemValueArgs) {
        if (args != null && args.strValue != null) {
            this.strValue = args.strValue;
        }
        if (args != null && args.hbValue != null) {
            this.hbValue = args.hbValue;
        }
        if (args != null && args.strValue2 != null) {
            this.strValue2 = args.strValue2;
        }
        if (args != null && args.voteValue != null) {
            this.voteValue = args.voteValue;
        }
        if (args != null && args.min != null) {
            this.min = args.min;
        }
        if (args != null && args.max != null) {
            this.max = args.max;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ContentItemValue");
        if (this.strValue != null) {
            output.writeFieldBegin("strValue", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.strValue);
            output.writeFieldEnd();
        }
        if (this.hbValue != null) {
            output.writeFieldBegin("hbValue", thrift.Thrift.Type.STRUCT, 2);
            this.hbValue.write(output);
            output.writeFieldEnd();
        }
        if (this.strValue2 != null) {
            output.writeFieldBegin("strValue2", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.strValue2);
            output.writeFieldEnd();
        }
        if (this.voteValue != null) {
            output.writeFieldBegin("voteValue", thrift.Thrift.Type.STRUCT, 4);
            this.voteValue.write(output);
            output.writeFieldEnd();
        }
        if (this.min != null) {
            output.writeFieldBegin("min", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.min);
            output.writeFieldEnd();
        }
        if (this.max != null) {
            output.writeFieldBegin("max", thrift.Thrift.Type.STRING, 6);
            output.writeString(this.max);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ContentItemValue {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.strValue = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: ContentItemHBValue.ContentItemHBValue = ContentItemHBValue.ContentItemHBValue.read(input);
                        _args.hbValue = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.strValue2 = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_4: ContentItemVoteValue.ContentItemVoteValue = ContentItemVoteValue.ContentItemVoteValue.read(input);
                        _args.voteValue = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.min = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.max = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ContentItemValue(_args);
    }
}

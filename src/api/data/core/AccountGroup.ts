/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as Account from "./Account";
export interface IAccountGroupArgs {
    id?: string;
    oName?: string;
    accounts?: Array<Account.Account>;
    blocked?: boolean;
    visibleAllAccounts?: boolean;
}
export class AccountGroup {
    public id?: string;
    public oName?: string;
    public accounts?: Array<Account.Account>;
    public blocked?: boolean;
    public visibleAllAccounts?: boolean;
    constructor(args?: IAccountGroupArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.oName != null) {
            this.oName = args.oName;
        }
        if (args != null && args.accounts != null) {
            this.accounts = args.accounts;
        }
        if (args != null && args.blocked != null) {
            this.blocked = args.blocked;
        }
        if (args != null && args.visibleAllAccounts != null) {
            this.visibleAllAccounts = args.visibleAllAccounts;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("AccountGroup");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.oName != null) {
            output.writeFieldBegin("oName", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.oName);
            output.writeFieldEnd();
        }
        if (this.accounts != null) {
            output.writeFieldBegin("accounts", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.accounts.length);
            this.accounts.forEach((value_1: Account.Account): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.blocked != null) {
            output.writeFieldBegin("blocked", thrift.Thrift.Type.BOOL, 4);
            output.writeBool(this.blocked);
            output.writeFieldEnd();
        }
        if (this.visibleAllAccounts != null) {
            output.writeFieldBegin("visibleAllAccounts", thrift.Thrift.Type.BOOL, 5);
            output.writeBool(this.visibleAllAccounts);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): AccountGroup {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.id = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.oName = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_4: Array<Account.Account> = new Array<Account.Account>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_5: Account.Account = Account.Account.read(input);
                            value_4.push(value_5);
                        }
                        input.readListEnd();
                        _args.accounts = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_6: boolean = input.readBool();
                        _args.blocked = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_7: boolean = input.readBool();
                        _args.visibleAllAccounts = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new AccountGroup(_args);
    }
}

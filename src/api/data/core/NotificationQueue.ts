/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 from "node-int64";
import * as thrift from "thrift";
import * as core from "./";
import * as NotificationAttribute from "./NotificationAttribute";
import * as NotificationRecipient from "./NotificationRecipient";
export interface INotificationQueueArgs {
    id?: string;
    createDate?: number | Int64;
    type?: core.NotificationType;
    attributes?: Array<NotificationAttribute.NotificationAttribute>;
    recipients?: Array<NotificationRecipient.NotificationRecipient>;
}
export class NotificationQueue {
    public id?: string;
    public createDate?: Int64;
    public type?: core.NotificationType;
    public attributes?: Array<NotificationAttribute.NotificationAttribute>;
    public recipients?: Array<NotificationRecipient.NotificationRecipient>;
    constructor(args?: INotificationQueueArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.createDate != null) {
            if (typeof args.createDate === "number") {
                this.createDate = new Int64(args.createDate);
            }
            else {
                this.createDate = args.createDate;
            }
        }
        if (args != null && args.type != null) {
            this.type = args.type;
        }
        if (args != null && args.attributes != null) {
            this.attributes = args.attributes;
        }
        if (args != null && args.recipients != null) {
            this.recipients = args.recipients;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("NotificationQueue");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.createDate != null) {
            output.writeFieldBegin("createDate", thrift.Thrift.Type.I64, 2);
            output.writeI64(this.createDate);
            output.writeFieldEnd();
        }
        if (this.type != null) {
            output.writeFieldBegin("type", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.type);
            output.writeFieldEnd();
        }
        if (this.attributes != null) {
            output.writeFieldBegin("attributes", thrift.Thrift.Type.LIST, 4);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.attributes.length);
            this.attributes.forEach((value_1: NotificationAttribute.NotificationAttribute): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.recipients != null) {
            output.writeFieldBegin("recipients", thrift.Thrift.Type.LIST, 5);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.recipients.length);
            this.recipients.forEach((value_2: NotificationRecipient.NotificationRecipient): void => {
                value_2.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): NotificationQueue {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.id = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_4: Int64 = input.readI64();
                        _args.createDate = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_5: core.NotificationType = input.readI32();
                        _args.type = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_6: Array<NotificationAttribute.NotificationAttribute> = new Array<NotificationAttribute.NotificationAttribute>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_7: NotificationAttribute.NotificationAttribute = NotificationAttribute.NotificationAttribute.read(input);
                            value_6.push(value_7);
                        }
                        input.readListEnd();
                        _args.attributes = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_8: Array<NotificationRecipient.NotificationRecipient> = new Array<NotificationRecipient.NotificationRecipient>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_9: NotificationRecipient.NotificationRecipient = NotificationRecipient.NotificationRecipient.read(input);
                            value_8.push(value_9);
                        }
                        input.readListEnd();
                        _args.recipients = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new NotificationQueue(_args);
    }
}

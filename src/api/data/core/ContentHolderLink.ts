/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as ContentItem from "./ContentItem";
import * as ContentItemShowPlace from "./ContentItemShowPlace";
export interface IContentHolderLinkArgs {
    id?: string;
    contentItem?: ContentItem.ContentItem;
    requared?: boolean;
    readOnly?: boolean;
    order?: number;
    showPlace?: ContentItemShowPlace.ContentItemShowPlace;
    visible?: boolean;
    visibleScript?: string;
    readonlyScript?: string;
    onChangeScript?: string;
    allowForCurUser?: boolean;
    canRemove?: boolean;
}
export class ContentHolderLink {
    public id?: string;
    public contentItem?: ContentItem.ContentItem;
    public requared?: boolean;
    public readOnly?: boolean;
    public order?: number;
    public showPlace?: ContentItemShowPlace.ContentItemShowPlace;
    public visible?: boolean;
    public visibleScript?: string;
    public readonlyScript?: string;
    public onChangeScript?: string;
    public allowForCurUser?: boolean;
    public canRemove?: boolean;
    constructor(args?: IContentHolderLinkArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.contentItem != null) {
            this.contentItem = args.contentItem;
        }
        if (args != null && args.requared != null) {
            this.requared = args.requared;
        }
        if (args != null && args.readOnly != null) {
            this.readOnly = args.readOnly;
        }
        if (args != null && args.order != null) {
            this.order = args.order;
        }
        if (args != null && args.showPlace != null) {
            this.showPlace = args.showPlace;
        }
        if (args != null && args.visible != null) {
            this.visible = args.visible;
        }
        if (args != null && args.visibleScript != null) {
            this.visibleScript = args.visibleScript;
        }
        if (args != null && args.readonlyScript != null) {
            this.readonlyScript = args.readonlyScript;
        }
        if (args != null && args.onChangeScript != null) {
            this.onChangeScript = args.onChangeScript;
        }
        if (args != null && args.allowForCurUser != null) {
            this.allowForCurUser = args.allowForCurUser;
        }
        if (args != null && args.canRemove != null) {
            this.canRemove = args.canRemove;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ContentHolderLink");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.contentItem != null) {
            output.writeFieldBegin("contentItem", thrift.Thrift.Type.STRUCT, 2);
            this.contentItem.write(output);
            output.writeFieldEnd();
        }
        if (this.requared != null) {
            output.writeFieldBegin("requared", thrift.Thrift.Type.BOOL, 3);
            output.writeBool(this.requared);
            output.writeFieldEnd();
        }
        if (this.readOnly != null) {
            output.writeFieldBegin("readOnly", thrift.Thrift.Type.BOOL, 4);
            output.writeBool(this.readOnly);
            output.writeFieldEnd();
        }
        if (this.order != null) {
            output.writeFieldBegin("order", thrift.Thrift.Type.I32, 5);
            output.writeI32(this.order);
            output.writeFieldEnd();
        }
        if (this.showPlace != null) {
            output.writeFieldBegin("showPlace", thrift.Thrift.Type.I32, 6);
            output.writeI32(this.showPlace);
            output.writeFieldEnd();
        }
        if (this.visible != null) {
            output.writeFieldBegin("visible", thrift.Thrift.Type.BOOL, 7);
            output.writeBool(this.visible);
            output.writeFieldEnd();
        }
        if (this.visibleScript != null) {
            output.writeFieldBegin("visibleScript", thrift.Thrift.Type.STRING, 8);
            output.writeString(this.visibleScript);
            output.writeFieldEnd();
        }
        if (this.readonlyScript != null) {
            output.writeFieldBegin("readonlyScript", thrift.Thrift.Type.STRING, 9);
            output.writeString(this.readonlyScript);
            output.writeFieldEnd();
        }
        if (this.onChangeScript != null) {
            output.writeFieldBegin("onChangeScript", thrift.Thrift.Type.STRING, 10);
            output.writeString(this.onChangeScript);
            output.writeFieldEnd();
        }
        if (this.allowForCurUser != null) {
            output.writeFieldBegin("allowForCurUser", thrift.Thrift.Type.BOOL, 11);
            output.writeBool(this.allowForCurUser);
            output.writeFieldEnd();
        }
        if (this.canRemove != null) {
            output.writeFieldBegin("canRemove", thrift.Thrift.Type.BOOL, 12);
            output.writeBool(this.canRemove);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ContentHolderLink {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.id = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: ContentItem.ContentItem = ContentItem.ContentItem.read(input);
                        _args.contentItem = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_3: boolean = input.readBool();
                        _args.requared = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_4: boolean = input.readBool();
                        _args.readOnly = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_5: number = input.readI32();
                        _args.order = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_6: ContentItemShowPlace.ContentItemShowPlace = input.readI32();
                        _args.showPlace = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_7: boolean = input.readBool();
                        _args.visible = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_8: string = input.readString();
                        _args.visibleScript = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_9: string = input.readString();
                        _args.readonlyScript = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_10: string = input.readString();
                        _args.onChangeScript = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_11: boolean = input.readBool();
                        _args.allowForCurUser = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_12: boolean = input.readBool();
                        _args.canRemove = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ContentHolderLink(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 from "node-int64";
import * as thrift from "thrift";
import * as PDFPostDecorator from "./PDFPostDecorator";
export interface IPDFPostDecoratorPageArgs {
    postProcessorList?: Array<PDFPostDecorator.PDFPostDecorator>;
    totalCount?: number | Int64;
}
export class PDFPostDecoratorPage {
    public postProcessorList?: Array<PDFPostDecorator.PDFPostDecorator>;
    public totalCount?: Int64;
    constructor(args?: IPDFPostDecoratorPageArgs) {
        if (args != null && args.postProcessorList != null) {
            this.postProcessorList = args.postProcessorList;
        }
        if (args != null && args.totalCount != null) {
            if (typeof args.totalCount === "number") {
                this.totalCount = new Int64(args.totalCount);
            }
            else {
                this.totalCount = args.totalCount;
            }
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("PDFPostDecoratorPage");
        if (this.postProcessorList != null) {
            output.writeFieldBegin("postProcessorList", thrift.Thrift.Type.LIST, 1);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.postProcessorList.length);
            this.postProcessorList.forEach((value_1: PDFPostDecorator.PDFPostDecorator): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.totalCount != null) {
            output.writeFieldBegin("totalCount", thrift.Thrift.Type.I64, 2);
            output.writeI64(this.totalCount);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): PDFPostDecoratorPage {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_2: Array<PDFPostDecorator.PDFPostDecorator> = new Array<PDFPostDecorator.PDFPostDecorator>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_3: PDFPostDecorator.PDFPostDecorator = PDFPostDecorator.PDFPostDecorator.read(input);
                            value_2.push(value_3);
                        }
                        input.readListEnd();
                        _args.postProcessorList = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_4: Int64 = input.readI64();
                        _args.totalCount = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new PDFPostDecoratorPage(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 from "node-int64";
import * as thrift from "thrift";
import * as DocumentPatternStage from "./DocumentPatternStage";
export interface IPassedStageArgs {
    passedStage?: DocumentPatternStage.DocumentPatternStage;
    iteration?: number;
    startDate?: number | Int64;
    factDate?: number | Int64;
    deadLineDate?: number | Int64;
}
export class PassedStage {
    public passedStage?: DocumentPatternStage.DocumentPatternStage;
    public iteration?: number;
    public startDate?: Int64;
    public factDate?: Int64;
    public deadLineDate?: Int64;
    constructor(args?: IPassedStageArgs) {
        if (args != null && args.passedStage != null) {
            this.passedStage = args.passedStage;
        }
        if (args != null && args.iteration != null) {
            this.iteration = args.iteration;
        }
        if (args != null && args.startDate != null) {
            if (typeof args.startDate === "number") {
                this.startDate = new Int64(args.startDate);
            }
            else {
                this.startDate = args.startDate;
            }
        }
        if (args != null && args.factDate != null) {
            if (typeof args.factDate === "number") {
                this.factDate = new Int64(args.factDate);
            }
            else {
                this.factDate = args.factDate;
            }
        }
        if (args != null && args.deadLineDate != null) {
            if (typeof args.deadLineDate === "number") {
                this.deadLineDate = new Int64(args.deadLineDate);
            }
            else {
                this.deadLineDate = args.deadLineDate;
            }
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("PassedStage");
        if (this.passedStage != null) {
            output.writeFieldBegin("passedStage", thrift.Thrift.Type.STRUCT, 1);
            this.passedStage.write(output);
            output.writeFieldEnd();
        }
        if (this.iteration != null) {
            output.writeFieldBegin("iteration", thrift.Thrift.Type.I32, 2);
            output.writeI32(this.iteration);
            output.writeFieldEnd();
        }
        if (this.startDate != null) {
            output.writeFieldBegin("startDate", thrift.Thrift.Type.I64, 3);
            output.writeI64(this.startDate);
            output.writeFieldEnd();
        }
        if (this.factDate != null) {
            output.writeFieldBegin("factDate", thrift.Thrift.Type.I64, 4);
            output.writeI64(this.factDate);
            output.writeFieldEnd();
        }
        if (this.deadLineDate != null) {
            output.writeFieldBegin("deadLineDate", thrift.Thrift.Type.I64, 5);
            output.writeI64(this.deadLineDate);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): PassedStage {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_1: DocumentPatternStage.DocumentPatternStage = DocumentPatternStage.DocumentPatternStage.read(input);
                        _args.passedStage = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_2: number = input.readI32();
                        _args.iteration = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_3: Int64 = input.readI64();
                        _args.startDate = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_4: Int64 = input.readI64();
                        _args.factDate = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_5: Int64 = input.readI64();
                        _args.deadLineDate = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new PassedStage(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as core from "./";
import * as NotificationQueue from "./NotificationQueue";
import * as NotificationTransportType from "./NotificationTransportType";
import * as NotificationConfig from "./NotificationConfig";
export interface IGetAllNotificationsArgsArgs {
    token: string;
    unreadOnly: boolean;
    filter: core.KazFilter;
}
export class GetAllNotificationsArgs {
    public token: string;
    public unreadOnly: boolean;
    public filter: core.KazFilter;
    constructor(args: IGetAllNotificationsArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.unreadOnly != null) {
            this.unreadOnly = args.unreadOnly;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[unreadOnly] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllNotificationsArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.unreadOnly != null) {
            output.writeFieldBegin("unreadOnly", thrift.Thrift.Type.BOOL, 2);
            output.writeBool(this.unreadOnly);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 3);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllNotificationsArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.token = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_2: boolean = input.readBool();
                        _args.unreadOnly = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_3: core.KazFilter = core.KazFilter.read(input);
                        _args.filter = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.unreadOnly !== undefined && _args.filter !== undefined) {
            return new GetAllNotificationsArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAllNotificationsArgs from input");
        }
    }
}
export interface IMarkNotificationAsReadArgsArgs {
    token: string;
    notificationId: string;
}
export class MarkNotificationAsReadArgs {
    public token: string;
    public notificationId: string;
    constructor(args: IMarkNotificationAsReadArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.notificationId != null) {
            this.notificationId = args.notificationId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[notificationId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("MarkNotificationAsReadArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.notificationId != null) {
            output.writeFieldBegin("notificationId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.notificationId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): MarkNotificationAsReadArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.token = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.notificationId = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.notificationId !== undefined) {
            return new MarkNotificationAsReadArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read MarkNotificationAsReadArgs from input");
        }
    }
}
export interface IGetAllNotificationTransportTypesArgsArgs {
    token: string;
    filter: core.KazFilter;
}
export class GetAllNotificationTransportTypesArgs {
    public token: string;
    public filter: core.KazFilter;
    constructor(args: IGetAllNotificationTransportTypesArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllNotificationTransportTypesArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 2);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllNotificationTransportTypesArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.token = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_7: core.KazFilter = core.KazFilter.read(input);
                        _args.filter = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.filter !== undefined) {
            return new GetAllNotificationTransportTypesArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetAllNotificationTransportTypesArgs from input");
        }
    }
}
export interface IGetNotificationConfigArgsArgs {
    token: string;
    userId: string;
    filter: core.KazFilter;
}
export class GetNotificationConfigArgs {
    public token: string;
    public userId: string;
    public filter: core.KazFilter;
    constructor(args: IGetNotificationConfigArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.userId != null) {
            this.userId = args.userId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[userId] is unset!");
        }
        if (args != null && args.filter != null) {
            this.filter = args.filter;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[filter] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetNotificationConfigArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.userId != null) {
            output.writeFieldBegin("userId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.userId);
            output.writeFieldEnd();
        }
        if (this.filter != null) {
            output.writeFieldBegin("filter", thrift.Thrift.Type.STRUCT, 3);
            this.filter.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetNotificationConfigArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_8: string = input.readString();
                        _args.token = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_9: string = input.readString();
                        _args.userId = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_10: core.KazFilter = core.KazFilter.read(input);
                        _args.filter = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.userId !== undefined && _args.filter !== undefined) {
            return new GetNotificationConfigArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetNotificationConfigArgs from input");
        }
    }
}
export interface IUpdateNotificationConfigArgsArgs {
    token: string;
    userId: string;
    notificationConfigs: Array<NotificationConfig.NotificationConfig>;
}
export class UpdateNotificationConfigArgs {
    public token: string;
    public userId: string;
    public notificationConfigs: Array<NotificationConfig.NotificationConfig>;
    constructor(args: IUpdateNotificationConfigArgsArgs) {
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args != null && args.userId != null) {
            this.userId = args.userId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[userId] is unset!");
        }
        if (args != null && args.notificationConfigs != null) {
            this.notificationConfigs = args.notificationConfigs;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[notificationConfigs] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("UpdateNotificationConfigArgs");
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.userId != null) {
            output.writeFieldBegin("userId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.userId);
            output.writeFieldEnd();
        }
        if (this.notificationConfigs != null) {
            output.writeFieldBegin("notificationConfigs", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.notificationConfigs.length);
            this.notificationConfigs.forEach((value_11: NotificationConfig.NotificationConfig): void => {
                value_11.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): UpdateNotificationConfigArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_12: string = input.readString();
                        _args.token = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_13: string = input.readString();
                        _args.userId = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_14: Array<NotificationConfig.NotificationConfig> = new Array<NotificationConfig.NotificationConfig>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_15: NotificationConfig.NotificationConfig = NotificationConfig.NotificationConfig.read(input);
                            value_14.push(value_15);
                        }
                        input.readListEnd();
                        _args.notificationConfigs = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.token !== undefined && _args.userId !== undefined && _args.notificationConfigs !== undefined) {
            return new UpdateNotificationConfigArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read UpdateNotificationConfigArgs from input");
        }
    }
}
export interface IGetAllNotificationsResultArgs {
    success?: Array<NotificationQueue.NotificationQueue>;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class GetAllNotificationsResult {
    public success?: Array<NotificationQueue.NotificationQueue>;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IGetAllNotificationsResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllNotificationsResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_16: NotificationQueue.NotificationQueue): void => {
                value_16.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllNotificationsResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_17: Array<NotificationQueue.NotificationQueue> = new Array<NotificationQueue.NotificationQueue>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_18: NotificationQueue.NotificationQueue = NotificationQueue.NotificationQueue.read(input);
                            value_17.push(value_18);
                        }
                        input.readListEnd();
                        _args.success = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_19: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_20: core.ServerException = core.ServerException.read(input);
                        _args.error = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAllNotificationsResult(_args);
    }
}
export interface IMarkNotificationAsReadResultArgs {
    success?: boolean;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class MarkNotificationAsReadResult {
    public success?: boolean;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IMarkNotificationAsReadResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("MarkNotificationAsReadResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 0);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): MarkNotificationAsReadResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_21: boolean = input.readBool();
                        _args.success = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_22: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_23: core.ServerException = core.ServerException.read(input);
                        _args.error = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new MarkNotificationAsReadResult(_args);
    }
}
export interface IGetAllNotificationTransportTypesResultArgs {
    success?: Array<NotificationTransportType.NotificationTransportType>;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class GetAllNotificationTransportTypesResult {
    public success?: Array<NotificationTransportType.NotificationTransportType>;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IGetAllNotificationTransportTypesResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetAllNotificationTransportTypesResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_24: NotificationTransportType.NotificationTransportType): void => {
                value_24.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetAllNotificationTransportTypesResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_25: Array<NotificationTransportType.NotificationTransportType> = new Array<NotificationTransportType.NotificationTransportType>();
                        const metadata_3: thrift.TList = input.readListBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_26: NotificationTransportType.NotificationTransportType = NotificationTransportType.NotificationTransportType.read(input);
                            value_25.push(value_26);
                        }
                        input.readListEnd();
                        _args.success = value_25;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_27: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_27;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_28: core.ServerException = core.ServerException.read(input);
                        _args.error = value_28;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetAllNotificationTransportTypesResult(_args);
    }
}
export interface IGetNotificationConfigResultArgs {
    success?: Array<NotificationConfig.NotificationConfig>;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class GetNotificationConfigResult {
    public success?: Array<NotificationConfig.NotificationConfig>;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IGetNotificationConfigResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetNotificationConfigResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_29: NotificationConfig.NotificationConfig): void => {
                value_29.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetNotificationConfigResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_30: Array<NotificationConfig.NotificationConfig> = new Array<NotificationConfig.NotificationConfig>();
                        const metadata_4: thrift.TList = input.readListBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const value_31: NotificationConfig.NotificationConfig = NotificationConfig.NotificationConfig.read(input);
                            value_30.push(value_31);
                        }
                        input.readListEnd();
                        _args.success = value_30;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_32: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_32;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_33: core.ServerException = core.ServerException.read(input);
                        _args.error = value_33;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetNotificationConfigResult(_args);
    }
}
export interface IUpdateNotificationConfigResultArgs {
    success?: Array<NotificationConfig.NotificationConfig>;
    validError?: core.PreconditionException;
    error?: core.ServerException;
}
export class UpdateNotificationConfigResult {
    public success?: Array<NotificationConfig.NotificationConfig>;
    public validError?: core.PreconditionException;
    public error?: core.ServerException;
    constructor(args?: IUpdateNotificationConfigResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        if (args != null && args.validError != null) {
            this.validError = args.validError;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("UpdateNotificationConfigResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.LIST, 0);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.success.length);
            this.success.forEach((value_34: NotificationConfig.NotificationConfig): void => {
                value_34.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.validError != null) {
            output.writeFieldBegin("validError", thrift.Thrift.Type.STRUCT, 1);
            this.validError.write(output);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRUCT, 2);
            this.error.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): UpdateNotificationConfigResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_35: Array<NotificationConfig.NotificationConfig> = new Array<NotificationConfig.NotificationConfig>();
                        const metadata_5: thrift.TList = input.readListBegin();
                        const size_5: number = metadata_5.size;
                        for (let i_5: number = 0; i_5 < size_5; i_5++) {
                            const value_36: NotificationConfig.NotificationConfig = NotificationConfig.NotificationConfig.read(input);
                            value_35.push(value_36);
                        }
                        input.readListEnd();
                        _args.success = value_35;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_37: core.PreconditionException = core.PreconditionException.read(input);
                        _args.validError = value_37;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_38: core.ServerException = core.ServerException.read(input);
                        _args.error = value_38;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new UpdateNotificationConfigResult(_args);
    }
}
export class Client {
    public _seqid: number;
    public _reqs: {
        [name: number]: (err: Error | object | undefined, val?: any) => void;
    };
    public output: thrift.TTransport;
    public protocol: new (trans: thrift.TTransport) => thrift.TProtocol;
    constructor(output: thrift.TTransport, protocol: new (trans: thrift.TTransport) => thrift.TProtocol) {
        this._seqid = 0;
        this._reqs = {};
        this.output = output;
        this.protocol = protocol;
    }
    public incrementSeqId(): number {
        return this._seqid += 1;
    }
    public getAllNotifications(token: string, unreadOnly: boolean, filter: core.KazFilter): Promise<Array<NotificationQueue.NotificationQueue>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<NotificationQueue.NotificationQueue>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAllNotifications(token, unreadOnly, filter, requestId);
        });
    }
    public markNotificationAsRead(token: string, notificationId: string): Promise<boolean> {
        const requestId: number = this.incrementSeqId();
        return new Promise<boolean>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_markNotificationAsRead(token, notificationId, requestId);
        });
    }
    public getAllNotificationTransportTypes(token: string, filter: core.KazFilter): Promise<Array<NotificationTransportType.NotificationTransportType>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<NotificationTransportType.NotificationTransportType>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getAllNotificationTransportTypes(token, filter, requestId);
        });
    }
    public getNotificationConfig(token: string, userId: string, filter: core.KazFilter): Promise<Array<NotificationConfig.NotificationConfig>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<NotificationConfig.NotificationConfig>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getNotificationConfig(token, userId, filter, requestId);
        });
    }
    public updateNotificationConfig(token: string, userId: string, notificationConfigs: Array<NotificationConfig.NotificationConfig>): Promise<Array<NotificationConfig.NotificationConfig>> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Array<NotificationConfig.NotificationConfig>>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_updateNotificationConfig(token, userId, notificationConfigs, requestId);
        });
    }
    public send_getAllNotifications(token: string, unreadOnly: boolean, filter: core.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAllNotifications", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAllNotificationsArgs = new GetAllNotificationsArgs({ token, unreadOnly, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_markNotificationAsRead(token: string, notificationId: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("markNotificationAsRead", thrift.Thrift.MessageType.CALL, requestId);
        const args: MarkNotificationAsReadArgs = new MarkNotificationAsReadArgs({ token, notificationId });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getAllNotificationTransportTypes(token: string, filter: core.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getAllNotificationTransportTypes", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetAllNotificationTransportTypesArgs = new GetAllNotificationTransportTypesArgs({ token, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_getNotificationConfig(token: string, userId: string, filter: core.KazFilter, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getNotificationConfig", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetNotificationConfigArgs = new GetNotificationConfigArgs({ token, userId, filter });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_updateNotificationConfig(token: string, userId: string, notificationConfigs: Array<NotificationConfig.NotificationConfig>, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("updateNotificationConfig", thrift.Thrift.MessageType.CALL, requestId);
        const args: UpdateNotificationConfigArgs = new UpdateNotificationConfigArgs({ token, userId, notificationConfigs });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public recv_getAllNotifications(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAllNotificationsResult = GetAllNotificationsResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAllNotifications failed: unknown result"));
                }
            }
        }
    }
    public recv_markNotificationAsRead(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: MarkNotificationAsReadResult = MarkNotificationAsReadResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "markNotificationAsRead failed: unknown result"));
                }
            }
        }
    }
    public recv_getAllNotificationTransportTypes(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetAllNotificationTransportTypesResult = GetAllNotificationTransportTypesResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getAllNotificationTransportTypes failed: unknown result"));
                }
            }
        }
    }
    public recv_getNotificationConfig(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetNotificationConfigResult = GetNotificationConfigResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getNotificationConfig failed: unknown result"));
                }
            }
        }
    }
    public recv_updateNotificationConfig(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: UpdateNotificationConfigResult = UpdateNotificationConfigResult.read(input);
            input.readMessageEnd();
            if (result.validError != null) {
                return callback(result.validError);
            }
            else if (result.error != null) {
                return callback(result.error);
            }
            else {
                if (result.success != null) {
                    return callback(undefined, result.success);
                }
                else {
                    return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "updateNotificationConfig failed: unknown result"));
                }
            }
        }
    }
}
export interface IHandler {
    getAllNotifications(token: string, unreadOnly: boolean, filter: core.KazFilter): Array<NotificationQueue.NotificationQueue> | Promise<Array<NotificationQueue.NotificationQueue>>;
    markNotificationAsRead(token: string, notificationId: string): boolean | Promise<boolean>;
    getAllNotificationTransportTypes(token: string, filter: core.KazFilter): Array<NotificationTransportType.NotificationTransportType> | Promise<Array<NotificationTransportType.NotificationTransportType>>;
    getNotificationConfig(token: string, userId: string, filter: core.KazFilter): Array<NotificationConfig.NotificationConfig> | Promise<Array<NotificationConfig.NotificationConfig>>;
    updateNotificationConfig(token: string, userId: string, notificationConfigs: Array<NotificationConfig.NotificationConfig>): Array<NotificationConfig.NotificationConfig> | Promise<Array<NotificationConfig.NotificationConfig>>;
}
export class Processor {
    public _handler: IHandler;
    constructor(handler: IHandler) {
        this._handler = handler;
    }
    public process(input: thrift.TProtocol, output: thrift.TProtocol): void {
        const metadata: thrift.TMessage = input.readMessageBegin();
        const fname: string = metadata.fname;
        const requestId: number = metadata.rseqid;
        const methodName: string = "process_" + fname;
        switch (methodName) {
            case "process_getAllNotifications": {
                this.process_getAllNotifications(requestId, input, output);
                return;
            }
            case "process_markNotificationAsRead": {
                this.process_markNotificationAsRead(requestId, input, output);
                return;
            }
            case "process_getAllNotificationTransportTypes": {
                this.process_getAllNotificationTransportTypes(requestId, input, output);
                return;
            }
            case "process_getNotificationConfig": {
                this.process_getNotificationConfig(requestId, input, output);
                return;
            }
            case "process_updateNotificationConfig": {
                this.process_updateNotificationConfig(requestId, input, output);
                return;
            }
            default: {
                input.skip(thrift.Thrift.Type.STRUCT);
                input.readMessageEnd();
                const errMessage = "Unknown function " + fname;
                const err = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN_METHOD, errMessage);
                output.writeMessageBegin(fname, thrift.Thrift.MessageType.EXCEPTION, requestId);
                err.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        }
    }
    public process_getAllNotifications(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<NotificationQueue.NotificationQueue>>((resolve, reject): void => {
            try {
                const args: GetAllNotificationsArgs = GetAllNotificationsArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAllNotifications(args.token, args.unreadOnly, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<NotificationQueue.NotificationQueue>): void => {
            const result: GetAllNotificationsResult = new GetAllNotificationsResult({ success: data });
            output.writeMessageBegin("getAllNotifications", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: GetAllNotificationsResult = new GetAllNotificationsResult({ validError: err });
                output.writeMessageBegin("getAllNotifications", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: GetAllNotificationsResult = new GetAllNotificationsResult({ error: err });
                output.writeMessageBegin("getAllNotifications", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAllNotifications", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_markNotificationAsRead(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<boolean>((resolve, reject): void => {
            try {
                const args: MarkNotificationAsReadArgs = MarkNotificationAsReadArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.markNotificationAsRead(args.token, args.notificationId));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: boolean): void => {
            const result: MarkNotificationAsReadResult = new MarkNotificationAsReadResult({ success: data });
            output.writeMessageBegin("markNotificationAsRead", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: MarkNotificationAsReadResult = new MarkNotificationAsReadResult({ validError: err });
                output.writeMessageBegin("markNotificationAsRead", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: MarkNotificationAsReadResult = new MarkNotificationAsReadResult({ error: err });
                output.writeMessageBegin("markNotificationAsRead", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("markNotificationAsRead", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getAllNotificationTransportTypes(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<NotificationTransportType.NotificationTransportType>>((resolve, reject): void => {
            try {
                const args: GetAllNotificationTransportTypesArgs = GetAllNotificationTransportTypesArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getAllNotificationTransportTypes(args.token, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<NotificationTransportType.NotificationTransportType>): void => {
            const result: GetAllNotificationTransportTypesResult = new GetAllNotificationTransportTypesResult({ success: data });
            output.writeMessageBegin("getAllNotificationTransportTypes", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: GetAllNotificationTransportTypesResult = new GetAllNotificationTransportTypesResult({ validError: err });
                output.writeMessageBegin("getAllNotificationTransportTypes", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: GetAllNotificationTransportTypesResult = new GetAllNotificationTransportTypesResult({ error: err });
                output.writeMessageBegin("getAllNotificationTransportTypes", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getAllNotificationTransportTypes", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_getNotificationConfig(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<NotificationConfig.NotificationConfig>>((resolve, reject): void => {
            try {
                const args: GetNotificationConfigArgs = GetNotificationConfigArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getNotificationConfig(args.token, args.userId, args.filter));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<NotificationConfig.NotificationConfig>): void => {
            const result: GetNotificationConfigResult = new GetNotificationConfigResult({ success: data });
            output.writeMessageBegin("getNotificationConfig", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: GetNotificationConfigResult = new GetNotificationConfigResult({ validError: err });
                output.writeMessageBegin("getNotificationConfig", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: GetNotificationConfigResult = new GetNotificationConfigResult({ error: err });
                output.writeMessageBegin("getNotificationConfig", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("getNotificationConfig", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
    public process_updateNotificationConfig(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<Array<NotificationConfig.NotificationConfig>>((resolve, reject): void => {
            try {
                const args: UpdateNotificationConfigArgs = UpdateNotificationConfigArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.updateNotificationConfig(args.token, args.userId, args.notificationConfigs));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Array<NotificationConfig.NotificationConfig>): void => {
            const result: UpdateNotificationConfigResult = new UpdateNotificationConfigResult({ success: data });
            output.writeMessageBegin("updateNotificationConfig", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            if (err instanceof core.PreconditionException) {
                const result: UpdateNotificationConfigResult = new UpdateNotificationConfigResult({ validError: err });
                output.writeMessageBegin("updateNotificationConfig", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else if (err instanceof core.ServerException) {
                const result: UpdateNotificationConfigResult = new UpdateNotificationConfigResult({ error: err });
                output.writeMessageBegin("updateNotificationConfig", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
            else {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("updateNotificationConfig", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        });
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as core from "./";
export interface IContentItemHBValueArgs {
    row?: core.HBRow;
    column?: core.HBColumn;
    keyColumn?: core.HBColumn;
}
export class ContentItemHBValue {
    public row?: core.HBRow;
    public column?: core.HBColumn;
    public keyColumn?: core.HBColumn;
    constructor(args?: IContentItemHBValueArgs) {
        if (args != null && args.row != null) {
            this.row = args.row;
        }
        if (args != null && args.column != null) {
            this.column = args.column;
        }
        if (args != null && args.keyColumn != null) {
            this.keyColumn = args.keyColumn;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ContentItemHBValue");
        if (this.row != null) {
            output.writeFieldBegin("row", thrift.Thrift.Type.STRUCT, 1);
            this.row.write(output);
            output.writeFieldEnd();
        }
        if (this.column != null) {
            output.writeFieldBegin("column", thrift.Thrift.Type.STRUCT, 2);
            this.column.write(output);
            output.writeFieldEnd();
        }
        if (this.keyColumn != null) {
            output.writeFieldBegin("keyColumn", thrift.Thrift.Type.STRUCT, 4);
            this.keyColumn.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ContentItemHBValue {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_1: core.HBRow = core.HBRow.read(input);
                        _args.row = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: core.HBColumn = core.HBColumn.read(input);
                        _args.column = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_3: core.HBColumn = core.HBColumn.read(input);
                        _args.keyColumn = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ContentItemHBValue(_args);
    }
}

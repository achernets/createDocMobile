/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as __ROOT_NAMESPACE__ from "./";
export interface ICopyDocumentAccessSettingDetailArgs {
    account?: __ROOT_NAMESPACE__.Account;
    patternGroup?: __ROOT_NAMESPACE__.DocumentPatternGroup;
    pattern?: __ROOT_NAMESPACE__.DocumentPattern;
}
export class CopyDocumentAccessSettingDetail {
    public account?: __ROOT_NAMESPACE__.Account;
    public patternGroup?: __ROOT_NAMESPACE__.DocumentPatternGroup;
    public pattern?: __ROOT_NAMESPACE__.DocumentPattern;
    constructor(args?: ICopyDocumentAccessSettingDetailArgs) {
        if (args != null && args.account != null) {
            this.account = args.account;
        }
        if (args != null && args.patternGroup != null) {
            this.patternGroup = args.patternGroup;
        }
        if (args != null && args.pattern != null) {
            this.pattern = args.pattern;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CopyDocumentAccessSettingDetail");
        if (this.account != null) {
            output.writeFieldBegin("account", thrift.Thrift.Type.STRUCT, 1);
            this.account.write(output);
            output.writeFieldEnd();
        }
        if (this.patternGroup != null) {
            output.writeFieldBegin("patternGroup", thrift.Thrift.Type.STRUCT, 2);
            this.patternGroup.write(output);
            output.writeFieldEnd();
        }
        if (this.pattern != null) {
            output.writeFieldBegin("pattern", thrift.Thrift.Type.STRUCT, 3);
            this.pattern.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CopyDocumentAccessSettingDetail {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_1: __ROOT_NAMESPACE__.Account = __ROOT_NAMESPACE__.Account.read(input);
                        _args.account = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: __ROOT_NAMESPACE__.DocumentPatternGroup = __ROOT_NAMESPACE__.DocumentPatternGroup.read(input);
                        _args.patternGroup = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_3: __ROOT_NAMESPACE__.DocumentPattern = __ROOT_NAMESPACE__.DocumentPattern.read(input);
                        _args.pattern = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new CopyDocumentAccessSettingDetail(_args);
    }
}

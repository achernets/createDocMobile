/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import { Int64 } from "thrift";
import * as thrift from "thrift";
import * as FileStorageType from "./FileStorageType";
import * as Account from "./Account";
import * as AvailableFileStorage from "./AvailableFileStorage";
export interface IFileStorageArgs {
    id?: string;
    uri?: string;
    createDate?: number | Int64;
    type?: FileStorageType.FileStorageType;
    priority?: number;
    readOnly?: boolean;
    descriptionFileStorage?: string;
    capacity?: number | Int64;
    freeSpace?: number | Int64;
    allowEdit?: boolean;
    accountList?: Array<Account.Account>;
    availableFileStorage?: AvailableFileStorage.AvailableFileStorage;
}
export class FileStorage {
    public id?: string;
    public uri?: string;
    public createDate?: Int64;
    public type?: FileStorageType.FileStorageType;
    public priority?: number;
    public readOnly?: boolean;
    public descriptionFileStorage?: string;
    public capacity?: Int64;
    public freeSpace?: Int64;
    public allowEdit?: boolean;
    public accountList?: Array<Account.Account>;
    public availableFileStorage?: AvailableFileStorage.AvailableFileStorage;
    constructor(args?: IFileStorageArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.uri != null) {
            this.uri = args.uri;
        }
        if (args != null && args.createDate != null) {
            if (typeof args.createDate === "number") {
                this.createDate = new Int64(args.createDate);
            }
            else {
                this.createDate = args.createDate;
            }
        }
        if (args != null && args.type != null) {
            this.type = args.type;
        }
        if (args != null && args.priority != null) {
            this.priority = args.priority;
        }
        if (args != null && args.readOnly != null) {
            this.readOnly = args.readOnly;
        }
        if (args != null && args.descriptionFileStorage != null) {
            this.descriptionFileStorage = args.descriptionFileStorage;
        }
        if (args != null && args.capacity != null) {
            if (typeof args.capacity === "number") {
                this.capacity = new Int64(args.capacity);
            }
            else {
                this.capacity = args.capacity;
            }
        }
        if (args != null && args.freeSpace != null) {
            if (typeof args.freeSpace === "number") {
                this.freeSpace = new Int64(args.freeSpace);
            }
            else {
                this.freeSpace = args.freeSpace;
            }
        }
        if (args != null && args.allowEdit != null) {
            this.allowEdit = args.allowEdit;
        }
        if (args != null && args.accountList != null) {
            this.accountList = args.accountList;
        }
        if (args != null && args.availableFileStorage != null) {
            this.availableFileStorage = args.availableFileStorage;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("FileStorage");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.uri != null) {
            output.writeFieldBegin("uri", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.uri);
            output.writeFieldEnd();
        }
        if (this.createDate != null) {
            output.writeFieldBegin("createDate", thrift.Thrift.Type.I64, 3);
            output.writeI64(this.createDate);
            output.writeFieldEnd();
        }
        if (this.type != null) {
            output.writeFieldBegin("type", thrift.Thrift.Type.I32, 4);
            output.writeI32(this.type);
            output.writeFieldEnd();
        }
        if (this.priority != null) {
            output.writeFieldBegin("priority", thrift.Thrift.Type.I32, 5);
            output.writeI32(this.priority);
            output.writeFieldEnd();
        }
        if (this.readOnly != null) {
            output.writeFieldBegin("readOnly", thrift.Thrift.Type.BOOL, 6);
            output.writeBool(this.readOnly);
            output.writeFieldEnd();
        }
        if (this.descriptionFileStorage != null) {
            output.writeFieldBegin("descriptionFileStorage", thrift.Thrift.Type.STRING, 7);
            output.writeString(this.descriptionFileStorage);
            output.writeFieldEnd();
        }
        if (this.capacity != null) {
            output.writeFieldBegin("capacity", thrift.Thrift.Type.I64, 8);
            output.writeI64(this.capacity);
            output.writeFieldEnd();
        }
        if (this.freeSpace != null) {
            output.writeFieldBegin("freeSpace", thrift.Thrift.Type.I64, 9);
            output.writeI64(this.freeSpace);
            output.writeFieldEnd();
        }
        if (this.allowEdit != null) {
            output.writeFieldBegin("allowEdit", thrift.Thrift.Type.BOOL, 11);
            output.writeBool(this.allowEdit);
            output.writeFieldEnd();
        }
        if (this.accountList != null) {
            output.writeFieldBegin("accountList", thrift.Thrift.Type.LIST, 12);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.accountList.length);
            this.accountList.forEach((value_1: Account.Account): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.availableFileStorage != null) {
            output.writeFieldBegin("availableFileStorage", thrift.Thrift.Type.STRUCT, 13);
            this.availableFileStorage.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): FileStorage {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.id = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.uri = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_4: Int64 = input.readI64();
                        _args.createDate = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_5: FileStorageType.FileStorageType = input.readI32();
                        _args.type = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_6: number = input.readI32();
                        _args.priority = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_7: boolean = input.readBool();
                        _args.readOnly = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_8: string = input.readString();
                        _args.descriptionFileStorage = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_9: Int64 = input.readI64();
                        _args.capacity = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_10: Int64 = input.readI64();
                        _args.freeSpace = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_11: boolean = input.readBool();
                        _args.allowEdit = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_12: Array<Account.Account> = new Array<Account.Account>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_13: Account.Account = Account.Account.read(input);
                            value_12.push(value_13);
                        }
                        input.readListEnd();
                        _args.accountList = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_14: AvailableFileStorage.AvailableFileStorage = AvailableFileStorage.AvailableFileStorage.read(input);
                        _args.availableFileStorage = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new FileStorage(_args);
    }
}
